import { SxProp, extendStyle, overwriteStyle } from './component-style'
import { css, styled } from './styled'
import {
  AllColorsType,
  OneOfColorSchemesWithVariants,
  OneOfIconAppearances,
  OneOfIconSizes,
  OneOfPalettesWithVariants,
} from './theme-types'
import { defaultConfig } from './utils/config'
import { SxAliasProps, handleSxAliasProps } from './utils/sx-props'
import { getColor, getIconSize, getRadius } from './utils/theme'
import { colorIsColorScheme, colorIsPalette } from './utils/theme-helpers'


interface IconBoxBase extends SxAliasProps {
  sx?: SxProp,
  size?: OneOfIconSizes,
}

export interface IconBoxColorBg extends IconBoxBase {
  appearance?: OneOfIconAppearances,
  colorIcon?: AllColorsType,
  colorBg?: AllColorsType,
}

export interface IconBoxIconColorOnly extends IconBoxBase {
  appearance?: 'text',
  colorIcon?: AllColorsType,
  colorBg?: never,
}

type IconBoxProps =
  | IconBoxColorBg
  | IconBoxIconColorOnly


function getIconColor(color: AllColorsType): OneOfColorSchemesWithVariants | OneOfPalettesWithVariants | undefined {
  if (colorIsColorScheme(color))
    return `${color}.contrastText`
  if (colorIsPalette(color))
    return `${color}.50`
}

function getBgColor(color: AllColorsType): OneOfColorSchemesWithVariants | OneOfPalettesWithVariants | undefined {
  if (colorIsColorScheme(color))
    return `${color}.300`
  if (colorIsPalette(color))
    return `${color}.800`
}

const appearanceStyles = css<IconBoxProps>`
  border-radius: ${props => getRadius(props.theme, props?.appearance === 'circle' ? 'full' : 'xs')};
  background-color: ${({ colorBg, theme, appearance }) => {
    if (appearance === undefined || appearance === 'text') {
      return 'transparent'
    }
    if (colorBg) {
      const colorDefinition: AllColorsType | undefined = colorBg.includes('.') ? colorBg : getBgColor(colorBg)
      return getColor(theme, colorDefinition)
    }
    return getColor(theme, 'light.300')
  }};
  fill: ${({ colorIcon, theme }) => {
    if (colorIcon) {
      const colorDefinition: AllColorsType | undefined = colorIcon.includes('.') ? colorIcon : getIconColor(colorIcon)
      return getColor(theme, colorDefinition)
    }
    return getColor(theme, 'light.contrastText')
  }}; 
`

const IconBox = styled.i.withConfig(defaultConfig) <IconBoxProps>`
  display: inline-flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;

  ${extendStyle('IconBox')};

  width: ${({ theme, size }) => getIconSize(theme, size).spacing};
  height: ${({ theme, size }) => getIconSize(theme, size).spacing};

  > svg {
    overflow: inherit;
    width: ${({ theme, size }) => getIconSize(theme, size).size};
    height: ${({ theme, size }) => getIconSize(theme, size).size};
  }

  ${appearanceStyles}

  ${handleSxAliasProps}

  ${overwriteStyle('IconBox')};
`

export default IconBox
