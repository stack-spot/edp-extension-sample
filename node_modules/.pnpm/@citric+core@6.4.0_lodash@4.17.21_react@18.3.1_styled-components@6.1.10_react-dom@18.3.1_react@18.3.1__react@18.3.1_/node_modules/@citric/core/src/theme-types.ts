import { Properties, Property, SimplePseudos } from 'csstype'
import { DefaultTheme } from 'styled-components'
import { KnownTarget } from 'styled-components/dist/types'

type CssProperties = { [P in SimplePseudos]?: Properties } & Properties

type GlobalStyle = CssProperties & { [key: string]: CssProperties }

type BreakpointKeys = 'xs' | 'sm' | 'md' | 'lg' | 'xl'

type FontFamilyKeys = 'system1' | 'system2' | 'code'

type FontWeightsKeys = 'light' | 'regular' | 'medium' | 'semibold' | 'bold'

export type FontAppearance = {
  tag: KnownTarget,
  weight: FontWeightsKeys,
  size: string,
  family: FontFamilyKeys,
  lineHeight: string,
  textTransform?: Property.TextTransform,
  letterSpacing?: Property.LetterSpacing,
}

type RadiusKeys = 'full' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs' | 'xxs'

type IconSizeKeys = 'xs' | 'sm' | 'md' | 'lg'

type IconAppearance = 'square' | 'circle'

type FontAppearancesKeys =
  | 'breadcrumb'
  | 'button'
  | 'body1'
  | 'body2'
  | 'code1'
  | 'code2'
  | 'display1'
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6'
  | 'microtext1'
  | 'overheader1'
  | 'overheader2'
  | 'subtitle1'
  | 'subtitle2'
  | 'subtitle3'
  | 'subtitle4'

type ColorSchemeKeys =
  | 'primary'
  | 'secondary'
  | 'tertiary'
  | 'success'
  | 'warning'
  | 'danger'
  | 'light'
  | 'inverse'
  | 'highlight'

type ColorSchemeVariants = 300 | 400 | 500 | 600 | 700 | 'contrastText'

type PaletteKeys =
  | 'blue'
  | 'cyan'
  | 'gray'
  | 'indigo'
  | 'moss'
  | 'orange'
  | 'pink'
  | 'purple'
  | 'red'
  | 'teal'
  | 'yellow'

type PaletteVariants = 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900

export interface CitricTheme {
  globalStyle?: GlobalStyle,
  radius: {
    [K in RadiusKeys]: string
  },
  breakpoint: {
    [K in BreakpointKeys]: number
  },
  spacing: (value: number) => string,
  font: {
    family: {
      [K in FontFamilyKeys]: string
    },
    weight: {
      [K in FontWeightsKeys]: number
    },
    appearance: {
      [K in FontAppearancesKeys]: FontAppearance
    },
  },
  container: {
    width: {
      [K in BreakpointKeys | 'default']: string
    },
  },
  icon: {
    [K in IconSizeKeys]: {
      size: string,
      spacing: string,
    }
  },
  iconButton: {
    [K in IconSizeKeys]: {
      size: string,
      spacing: string,
    }
  },
  colorScheme: {
    [K in ColorSchemeKeys]: {
      [J in ColorSchemeVariants]: string
    }
  },
  palette: {
    [K in PaletteKeys]: {
      [J in PaletteVariants]: string
    }
  },
}


export type OneOfBreakpoints = BreakpointKeys
export type OneOfContainerWidths = keyof Theme['container']['width']

export type OneOfColorSchemes = ColorSchemeKeys
export type OneOfColorSchemeVariants = ColorSchemeVariants
export type OneOfColorSchemesWithVariants = OneOfColorSchemes | `${OneOfColorSchemes}.${ColorSchemeVariants}`

export type OneOfPalettes = PaletteKeys
export type OneOfPalletteVariants = PaletteVariants
export type OneOfPalettesWithVariants = OneOfPalettes | `${OneOfPalettes}.${PaletteVariants}`

export type OneOfSpacings = number

export type OneOfFontWeights = FontWeightsKeys
export type OneOfFontAppearances = FontAppearancesKeys
export type OneOfFontFamilies = FontFamilyKeys

export type OneOfRadius = RadiusKeys
export type WithTheme<T> = T & { theme: Theme }

export type OneOfIconSizes = IconSizeKeys
export type OneOfIconAppearances = IconAppearance

export type AllColorsType = OneOfColorSchemes | OneOfPalettes | OneOfColorSchemesWithVariants | OneOfPalettesWithVariants

export type Theme = DefaultTheme
