 
import { Properties, SimplePseudos } from 'csstype'
import { merge } from 'ts-deepmerge'
import defaultTheme from './default-theme'

type CssProperties = { [P in SimplePseudos]?: Properties } & Properties

type DefaultTheme = typeof defaultTheme
type DefaultWeight = DefaultTheme['font']['weight'] | { [key: string]: number }
type DefaultFamily = DefaultTheme['font']['family'] | { [key: string]: string }
type DefaultColorScheme = DefaultTheme['colorScheme']['primary'] | { [key: string]: string }

export interface Theme<
  F extends DefaultFamily,
  W extends DefaultWeight,
  C extends DefaultColorScheme
> {
  colorScheme?: {
    primary?: C,
    secondary?: C,
    highlight?: C,
    light?: C,
    inverse?: C,
    success?: C,
    danger?: C,
    warning?: C,
  },
  globalStyle?: { [key: string]: CssProperties } | CssProperties,
  component?: {
    [key: string]: {
      base?: CssProperties | ((prop: any) => CssProperties),
      overwrite?: CssProperties | ((prop: any) => CssProperties),
    },
  },
  font?: {
    family?: F,
    weight?: W,
    appearance?: {
      [key: string]: {
        tag?: string,
        weight?: keyof W | string,
        size?: string,
        family?: keyof F | string,
        textTransform?: string,
      },
    },
  },
}

function extendTheme(theme: any): any {
  return merge(defaultTheme, theme)
}

export default extendTheme
