import { ReactNode } from 'react'
import { RuleSet } from 'styled-components/dist/types'
import { extendStyle, overwriteStyle, SxProp } from './component-style'
import forwardRefAs, { AsProp } from './forward-ref-as'
import { css, styled } from './styled'
import { OneOfColorSchemes, OneOfColorSchemesWithVariants, Theme } from './theme-types'
import { defaultConfig } from './utils/config'
import { getColor, getFontStyle, getFontWeight, getRadius, getSpacing } from './utils/theme'

type OneOfButtonAppearances = 'contained' | 'outlined' | 'text'
type OneOfButtonSizes = 'lg' | 'md' | 'sm'

export interface ButtonProps {
  sx?: SxProp,
  as?: AsProp,
  children: ReactNode,
  colorScheme?: OneOfColorSchemes,
  disabled?: boolean,
  appearance?: OneOfButtonAppearances,
  block?: boolean,
  size?: OneOfButtonSizes,
}

const ButtonStyled = styled.button.withConfig(defaultConfig) <ButtonProps>`
  height: fit-content;
  display: inline-flex;
  border-radius: ${({ theme }) => getRadius(theme, 'xs')};
  align-items: center;
  user-select: none;
  text-decoration: none;
  box-sizing: border-box;
  justify-content: center;
  cursor: pointer;
  border-width: 1px;
  border-style: solid;
  white-space: nowrap;
  font: ${({ theme }) => getFontStyle(theme, 'button')};

  ${(props: ButtonProps) =>
    props.disabled
      ? css`
          opacity: 0.24;
          pointer-events: none;
        `
      : ''}

  & + & {
    margin-left: 0.5rem;
  }

  width: ${(props: ButtonProps) => props.block && '100%'};

  ${({ theme, appearance = 'contained', colorScheme = 'primary' }) =>
    buttonStyles[appearance](theme, colorScheme)};

  ${({ theme, size = 'lg' }) => buttonSizes[size](theme)}

  ${extendStyle('Button')};
  ${overwriteStyle('Button')};
`

const buttonSizes: Record<OneOfButtonSizes, (theme: Theme) => RuleSet<object>> = {
  lg: (theme: Theme) => css`
    padding-inline: ${getSpacing(theme, 4)};
    padding-block: ${getSpacing(theme, 3)};
  `,
  md: (theme: Theme) => css`
    padding-inline: ${getSpacing(theme, 3)};
    padding-block: ${getSpacing(theme, 2)};
    font: ${getFontStyle(theme, 'body2')};
    font-weight: ${getFontWeight(theme, 'medium')};
  `,
  sm: (theme: Theme) => css`
    padding-inline: ${getSpacing(theme, 3)};
    padding-block: ${getSpacing(theme, 2)};
    font: ${getFontStyle(theme, 'microtext1')};
  `,
}

const buttonStyles:
  Record<OneOfButtonAppearances, (theme: Theme, colorScheme: OneOfColorSchemes) => RuleSet<object>> = {
    contained: (theme: Theme, colorScheme: OneOfColorSchemes) => css`
    color: ${getColor(theme, `${String(colorScheme)}.contrastText` as OneOfColorSchemesWithVariants)};
    background-color: ${getColor(theme, colorScheme)};
    border-color: ${getColor(theme, colorScheme)};

    &:active,
    &:focus,
    &:hover {
      background-color: ${getColor(theme, `${String(colorScheme)}.400` as OneOfColorSchemesWithVariants)};
      border-color: ${getColor(theme, `${String(colorScheme)}.400` as OneOfColorSchemesWithVariants)};
    }
  `,
    outlined: (theme: Theme, colorScheme: OneOfColorSchemes) => css`
    color: ${getColor(theme, String(colorScheme) as OneOfColorSchemes)};
    background-color: transparent;
    border-color: ${getColor(theme, String(colorScheme) as OneOfColorSchemes)};

    &:active,
    &:focus,
    &:hover {
      background-color: ${getColor(theme, colorScheme)};
      color: ${getColor(theme, `${String(colorScheme)}.contrastText` as OneOfColorSchemesWithVariants)};
      svg {
        fill: ${getColor(theme, `${String(colorScheme)}.contrastText` as OneOfColorSchemesWithVariants)};
      }
    }
    &:focus {
      outline: 1px solid ${getColor(theme, 'primary')};
    }
  `,
    text: (theme: Theme, colorScheme: OneOfColorSchemes) => css`
    color: ${getColor(theme, String(colorScheme) as OneOfColorSchemes)};
    background-color: transparent;
    border-color: transparent;

    &:active,
    &:focus,
    &:hover {
      border-color: ${getColor(theme, `${String(colorScheme)}.500` as OneOfColorSchemesWithVariants)};
    }
  `,
  }

const Button = forwardRefAs<ButtonProps, 'button'>(({ as = 'button', ...props }, ref) => (
  <ButtonStyled as={as} ref={ref} {...props} />
))

export default Button
