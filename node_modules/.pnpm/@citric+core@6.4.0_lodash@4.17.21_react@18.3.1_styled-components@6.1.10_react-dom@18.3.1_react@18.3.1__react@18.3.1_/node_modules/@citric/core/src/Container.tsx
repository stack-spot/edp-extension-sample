import { ReactNode } from 'react'
import { Interpolation } from 'styled-components'
import { extendStyle, overwriteStyle, SxProp } from './component-style'
import { css, styled } from './styled'
import { OneOfBreakpoints, OneOfContainerWidths, Theme } from './theme-types'
import { defaultConfig } from './utils/config'
import { down } from './utils/media-queries'
import { getContainerWidth, getSpacing } from './utils/theme'

export interface Props {
  sx?: SxProp,
  fluid?: boolean,
  children: ReactNode,
}

function getContainerMaxWidth(theme: Theme, value: OneOfContainerWidths) {
  return css`calc(${getContainerWidth(theme, value)} + 1.5rem * 2 )`
}

const getContainerWidthByBreakpoint = ({ theme }: { theme: Theme }) => {
  const retorno = Object.keys(theme.container.width)
    .filter((key) => key === 'lg' || key === 'xl')
    .map(
      (key) =>
        css`
          ${down(key as OneOfBreakpoints) as Interpolation<object>} 
          {
            max-width: ${getContainerWidth(theme, key as OneOfContainerWidths)};
          }
        `,
    )
  return retorno
}

const fixedStyle = (theme: Theme) => css`
  max-width: ${() => getContainerMaxWidth(theme, 'default')};

  ${getContainerWidthByBreakpoint({ theme })}
`

const Container = styled.div.withConfig(defaultConfig) <Props>`
  box-sizing: border-box;
  margin: 0 auto;
  width: 100%;

  ${extendStyle('Container')};

  padding: ${({ theme }) => `0 ${getSpacing(theme, 7)}`};
  ${({ theme, fluid }) => (fluid ? undefined : fixedStyle(theme))};

  ${overwriteStyle('Container')};
`

export default Container
