import { ReactNode } from 'react'
import Text, { Props as TextProps } from './Text'
import { extendStyle, overwriteStyle } from './component-style'
import forwardRefAs from './forward-ref-as'
import { css, styled } from './styled'
import { getSpacing } from './utils/theme'

interface Props extends TextProps {
  inline?: boolean,
  disabled?: boolean,
  children?: ReactNode,
}

const labelInlineStyle = css`
  display: inline-flex;

  & + & {
    margin-left: ${props => getSpacing(props.theme, 7)};
  }
`
const labelBlockStyle = `
  display: flex;
`

export const LabelStyle = styled(Text) <Props>`
  margin-bottom: ${({ theme }) => getSpacing(theme, 2)};
  align-items: center;
  vertical-align: top;

  ${(props: Props) =>
    props?.disabled &&
    css`
      opacity: 0.24;
      pointer-events: none;
    `};

  &[for] {
    cursor: pointer;
  }

  ${extendStyle('Label')};

  ${(props: Props) => (props?.inline ? labelInlineStyle : labelBlockStyle)}

  ${overwriteStyle('Label')};
`

const Label = forwardRefAs<Props, 'label'>(function Label(
  { children, as = 'label', ...props },
  ref,
) {
  return (
    <LabelStyle {...props} ref={ref} as={as}>
      {children}
    </LabelStyle>
  )
})

export default Label
