import { Property } from 'csstype'
import Box from './Box'
import { extendStyle, overwriteStyle, SxProp } from './component-style'
import { css, styled } from './styled'
import { Theme } from './theme-types'
import { defaultConfig } from './utils/config'
import { handleSxAliasProps, SxAliasProps } from './utils/sx-props'
import { getSpacing } from './utils/theme'

export interface Props extends SxAliasProps {
  sx?: SxProp,
  alignItems?: Property.AlignItems,
  alignContent?: Property.AlignContent,
  justifyContent?: Property.JustifyContent,
  justifyItems?: Property.JustifyItems,
  flexWrap?: Property.FlexWrap,
  flexDirection?: Property.FlexDirection,
  flex?: Property.Flex,
  gap?: boolean,
}

function getGapStyle(theme: Theme) {
  return css`
    margin: ${`-${getSpacing(theme, 3)}`};

    > ${Box} {
      padding: ${getSpacing(theme, 3)};
    }
  `
}

const Flex = styled.div.withConfig(defaultConfig) <Props>`
  box-sizing: border-box;
  display: flex;

  ${extendStyle('Flex')};

  ${({ theme, gap }) => gap && getGapStyle(theme)}
  align-items: ${props => props?.alignItems};
  align-content: ${props => props?.alignContent};
  justify-items: ${props => props?.justifyItems};
  justify-content: ${props => props?.justifyContent};
  flex-wrap: ${props => props?.flexWrap || 'wrap'};
  flex-direction: ${props => props?.flexDirection};
  flex: ${props => props?.flex};

  ${handleSxAliasProps};
  ${overwriteStyle('Flex')};
`

export default Flex
