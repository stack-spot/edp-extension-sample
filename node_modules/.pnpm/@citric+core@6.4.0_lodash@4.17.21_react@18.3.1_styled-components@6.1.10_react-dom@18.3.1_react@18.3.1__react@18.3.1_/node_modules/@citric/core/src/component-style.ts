import { get } from 'lodash'
import { merge } from 'ts-deepmerge'
import { sx, SxProperties } from './sx'
import { Theme } from './theme-types'

export type SxProp = SxProperties

type Props = { theme: Theme, sx?: SxProp }

function styleFromTheme(props: Props, themePath: string) {
  const style = get(props.theme, themePath)

  if (!style) {
    return undefined
  }

  return typeof style === 'function' ? sx(props.theme, style(props)) : sx(props.theme, style)
}

export function overwriteStyleFromTheme(componentName: string, props: Props) {
  return styleFromTheme(props, `component.${componentName}.overwrite`)
}

export function overwriteStyleFromProp(props: Props) {
  return props.sx ? sx(props.theme, props.sx) : undefined
}

export function overwriteStyle(componentName: string) {
  return (props: Props) =>
    merge(overwriteStyleFromTheme(componentName, props) || {}, overwriteStyleFromProp(props) || {})
}

export function extendStyle(componentName: string) {
  return (props: Props) => styleFromTheme(props, `component.${componentName}.base`)
}
