import { get } from 'lodash'
import {
  FontAppearance,
  OneOfBreakpoints, OneOfColorSchemeVariants, OneOfColorSchemes, OneOfColorSchemesWithVariants,
  OneOfContainerWidths, OneOfFontAppearances, OneOfFontFamilies, OneOfFontWeights, OneOfIconSizes,
  OneOfPalettesWithVariants, OneOfPalletteVariants, OneOfRadius, OneOfSpacings, Theme,
} from '../theme-types'

export function getColor(
  theme: Theme,
  name?: OneOfColorSchemesWithVariants | OneOfPalettesWithVariants,
  defaultVariant?: OneOfColorSchemeVariants | OneOfPalletteVariants,
) {
  if (!name) {
    return undefined
  }

  const key = name.includes('.') ? name : `${name}.${defaultVariant || '500'}`
  const colorScheme = get(theme, `colorScheme.${key}`)
  const palette = get(theme, `palette.${key}`)

  return colorScheme || palette || name
}

export function getColorScheme(theme: Theme, name: OneOfColorSchemes) {
  return theme.colorScheme[name]
}

export function getBreakpoint(theme: Theme, breakpoint: OneOfBreakpoints) {
  return theme.breakpoint[breakpoint]
}

export function getContainerWidth(theme: Theme, width: OneOfContainerWidths) {
  return theme.container.width[width]
}

export function getRadius(theme: Theme, radius?: OneOfRadius) {
  return radius ? theme.radius[radius] : undefined
}

export function getSpacing(theme: Theme, spacing: OneOfSpacings) {
  return theme.spacing(spacing)
}

export function getFontWeight(theme: Theme, name?: OneOfFontWeights) {
  return name ? theme.font.weight[name] : undefined
}

export function getFontFamily(theme: Theme, name?: OneOfFontFamilies) {
  return name ? theme.font.family[name] : undefined
}

export function getFontAppearance(theme: Theme, name: OneOfFontAppearances = 'body1') {
  return theme.font?.appearance[name] as FontAppearance
}

export function getLetterSpacing(theme: Theme, name: OneOfFontAppearances = 'body1') {
  return getFontAppearance(theme, name).letterSpacing
}

export function getFontStyle(theme: Theme, name?: OneOfFontAppearances) {
  const { weight, size, family, lineHeight } = getFontAppearance(theme, name)

  const fontWeight = theme.font.weight[weight]
  const fontFamily = theme.font.family[family]

  return `${fontWeight} ${size}/${lineHeight} ${fontFamily}`
}

export function getIconSize(theme: Theme, name: OneOfIconSizes = 'sm') {
  return theme.icon[name]
}

export function getIconButtonSize(theme: Theme, name: OneOfIconSizes = 'sm') {
  return theme.iconButton[name]
}
