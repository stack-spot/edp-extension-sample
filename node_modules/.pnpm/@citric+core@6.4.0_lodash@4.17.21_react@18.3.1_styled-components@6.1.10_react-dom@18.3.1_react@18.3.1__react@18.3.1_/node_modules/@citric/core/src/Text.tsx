import { Property } from 'csstype'
import { SxProp, extendStyle, overwriteStyle } from './component-style'
import { AsProp } from './forward-ref-as'
import { css, styled } from './styled'
import { OneOfColorSchemes, OneOfColorSchemesWithVariants, OneOfFontAppearances, OneOfFontWeights } from './theme-types'
import { defaultConfig } from './utils/config'
import { SxAliasProps, handleSxAliasProps } from './utils/sx-props'
import {
  getColor,
  getFontAppearance,
  getFontStyle,
  getFontWeight,
  getLetterSpacing,
} from './utils/theme'

export interface Props {
  sx?: SxProp,
  as?: AsProp,
  colorScheme?: OneOfColorSchemes | OneOfColorSchemesWithVariants,
  appearance?: OneOfFontAppearances,
  weight?: OneOfFontWeights,
  align?: Property.TextAlign,
  gutterBottom?: boolean,
  nowrapEllipsis?: boolean,
}

export type TextProps = Props & SxAliasProps

export const Text = styled.p.withConfig(defaultConfig).attrs<TextProps>(({ theme, as, appearance }) => ({
  as: as || getFontAppearance(theme, appearance).tag,
})) <TextProps>`
  margin: 0;
  font: ${({ theme, appearance }) =>
    appearance && getFontStyle(theme, appearance)};
  text-transform: ${({ theme, appearance }) =>
    appearance && getFontAppearance(theme, appearance).textTransform};
  font-weight: ${({ theme, weight }) =>
    weight && getFontWeight(theme, weight)};
  text-align: ${(props: Props) => props?.align};
  margin-bottom: ${(props: Props) => props?.gutterBottom && '0.35rem'};
  color: ${({ theme, colorScheme }) =>
    colorScheme && getColor(theme, colorScheme)};
  letter-spacing: ${({ theme, appearance }) =>
    appearance && getLetterSpacing(theme, appearance)};

  ${(props: Props) =>
    props?.nowrapEllipsis &&
    css`
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    `}

  ${extendStyle('Text')};
  ${handleSxAliasProps};
  ${overwriteStyle('Text')};
`

export default Text
