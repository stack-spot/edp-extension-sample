import 'jest-styled-components'
import { createRef } from 'react'
import Textarea from '../src/Textarea'
import defaultTheme from '../src/default-theme'
import { OneOfColorSchemes } from '../src/theme-types'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Textarea component', () => {
  const { container } = render(<Textarea />)

  expect(container.firstChild).toMatchInlineSnapshot(`
.c0 {
  width: 100%;
  height: 2.5rem;
  padding: 0.5rem;
  outline: none;
  box-sizing: border-box;
  background-color: #14141A;
  border: 1px solid #2F2F3C;
  border-radius: 0.25rem;
  font: 400 0.875rem/1.714 Roboto,sans-serif;
  color: #FAFAFB;
  height: auto;
}

.c0::placeholder {
  opacity: 60%;
  color: #FAFAFB;
}

.c0:focus {
  border-color: #FF6633;
  box-shadow: inset 0 0 0 1px #FF6633;
}

.c0:disabled {
  background-color: #262631;
  border-color: #2F2F3C;
  cursor: not-allowed;
}

.c0:-webkit-autofill,
.c0:-webkit-autofill:hover,
.c0:-webkit-autofill:focus {
  -webkit-text-fill-color: #FAFAFB;
  box-shadow: inset 0 0 0 1000px #14141A;
  transition: background-color 50000s ease-in-out 0s;
}

<textarea
  class="c0"
/>
`)
})

test('should render a Textarea spreading props in root element', () => {
  const { container } = render(<Textarea id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Textarea using ref', () => {
  const ref = createRef<HTMLTextAreaElement>()
  const { container } = render(<Textarea ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Textarea with disabled prop as true', () => {
  const { container } = render(<Textarea disabled />)

  expect(container.firstChild).toHaveAttribute('disabled')
})

test('should render a Textarea with autofocus prop as true', () => {
  const { container } = render(<Textarea autoFocus />)
  const colorScheme = defaultTheme.colorScheme.primary
  const item = container.querySelector('textarea')

  expect(item).toHaveFocus()

  expect(container.firstChild).toHaveStyleRule('border-color', `${colorScheme['500']}`, {
    modifier: ':focus',
  })

  expect(container.firstChild).toHaveStyleRule(
    'box-shadow',
    `inset 0 0 0 1px ${colorScheme['500']}`,
    {
      modifier: ':focus',
    },
  )
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(<Textarea colorScheme={colorSchemeName} />)
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild).toHaveStyleRule('border', `1px solid ${colorScheme['500']}`)
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Textarea', 'base', {
      margin: '100px',
    })

    const { container } = render(<Textarea />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('margin', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Textarea', 'overwrite', {
      backgroundColor: 'blueviolet',
    })

    const { container } = render(<Textarea colorScheme="primary" />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'blueviolet')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Textarea sx={{ color: 'mediumpurple' }} />)

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
