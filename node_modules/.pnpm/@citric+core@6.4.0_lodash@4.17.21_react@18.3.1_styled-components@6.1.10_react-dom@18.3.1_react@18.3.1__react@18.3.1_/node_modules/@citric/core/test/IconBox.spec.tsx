import 'jest-styled-components'
import { createRef } from 'react'
import IconBox from '../src/IconBox'
import defaultTheme from '../src/default-theme'
import { OneOfColorSchemes, OneOfIconSizes, OneOfPalettes } from '../src/theme-types'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]
const palettes = Object.keys(defaultTheme.palette) as OneOfPalettes[]
const sizes = Object.keys(defaultTheme.icon) as OneOfIconSizes[]

test('should render a IconBox component', () => {
  const { container } = render(
    <IconBox>
      <svg />
    </IconBox>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c0 {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 0.25rem;
  background-color: transparent;
  fill: #FAFAFB;
}

.c0 >svg {
  overflow: inherit;
  width: 1rem;
  height: 1rem;
}

<i
  class="c0"
>
  <svg />
</i>
`)
})

test('should render a IconBox spreading props in root element', () => {
  const { container } = render(
    <IconBox id="bar">
      <svg />
    </IconBox>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a IconBox using ref', () => {
  const ref = createRef<HTMLSpanElement>()
  const { container } = render(
    <IconBox ref={ref}>
      <svg />
    </IconBox>,
  )

  expect(ref.current).toBe(container.firstChild)
})

describe('ColorIcon as ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(
      <IconBox colorIcon={colorSchemeName}>
        <svg />
      </IconBox>,
    )

    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild).toHaveStyleRule('fill', colorScheme['contrastText'])
  })
})

describe('ColorIcon as Palette Prop', () => {
  it.each(palettes)('as %s', (paletteName) => {
    const { container } = render(
      <IconBox colorIcon={paletteName}>
        <svg />
      </IconBox>,
    )

    const palette = defaultTheme.palette[paletteName]
    expect(container.firstChild).toHaveStyleRule('fill', palette['50'])
  })
})

describe('Size Prop', () => {
  it.each(sizes)('as %s', (sizeName) => {
    const iconSize = defaultTheme.icon[sizeName]
    const { container } = render(
      <IconBox size={sizeName}>
        <svg />
      </IconBox>,
    )

    expect(container.firstChild).toHaveStyleRule('width', iconSize.spacing)
    expect(container.firstChild).toHaveStyleRule('height', iconSize.spacing)

    expect(container.firstChild).toHaveStyleRule('width', iconSize.size, {
      modifier: '> svg',
    })
    expect(container.firstChild).toHaveStyleRule('height', iconSize.size, {
      modifier: '> svg',
    })
  })
})

describe('Appearance', () => {
  describe('Text', () => {
    it('using colorIcon', () => {
      const { container } = render(
        <IconBox appearance="text" colorIcon="primary">
          <svg />
        </IconBox>,
      )

      const expected = defaultTheme.colorScheme.primary['contrastText']
      expect(container.firstChild).toHaveStyleRule('fill', expected)
    })

    it('using colorIcon with colorScheme variant', () => {
      const { container } = render(
        <IconBox appearance="text" colorIcon="primary.300">
          <svg />
        </IconBox>,
      )

      const expected = defaultTheme.colorScheme.primary['300']
      expect(container.firstChild).toHaveStyleRule('fill', expected)
    })

    it('using colorIcon with palette', () => {
      const { container } = render(
        <IconBox appearance="text" colorIcon="blue">
          <svg />
        </IconBox>,
      )

      const expected = defaultTheme.palette.blue['50']
      expect(container.firstChild).toHaveStyleRule('fill', expected)
    })

    it('using colorIcon with palette using variant', () => {
      const { container } = render(
        <IconBox appearance="text" colorIcon="blue.50">
          <svg />
        </IconBox>,
      )

      const expected = defaultTheme.palette.blue['50']
      expect(container.firstChild).toHaveStyleRule('fill', expected)
    })
  })

  describe('Square', () => {
    it('using colorScheme', () => {
      const { container } = render(
        <IconBox appearance="square" colorIcon="primary" colorBg="primary">
          <svg />
        </IconBox>,
      )

      const { primary } = defaultTheme.colorScheme
      expect(container.firstChild).toHaveStyleRule('fill', primary['contrastText'])
      expect(container.firstChild).toHaveStyleRule('background-color', primary['300'])
    })

    it('using colorIcon with colorScheme with variant', () => {
      const { container } = render(
        <IconBox appearance="square" colorIcon="primary.300" colorBg="primary.700">
          <svg />
        </IconBox>,
      )

      const { primary } = defaultTheme.colorScheme
      expect(container.firstChild).toHaveStyleRule('fill', primary['300'])
      expect(container.firstChild).toHaveStyleRule('background-color', primary['700'])
    })

    it('using colorIcon with palette', () => {
      const { container } = render(
        <IconBox appearance="square" colorIcon="blue" colorBg="blue">
          <svg />
        </IconBox>,
      )

      const { blue } = defaultTheme.palette
      expect(container.firstChild).toHaveStyleRule('fill', blue['50'])
      expect(container.firstChild).toHaveStyleRule('background-color', blue['800'])
    })

    it('using colorIcon and colorBg with palette using variant', () => {
      const { container } = render(
        <IconBox appearance="square" colorIcon="blue.200" colorBg="blue.700">
          <svg />
        </IconBox>,
      )

      const { blue } = defaultTheme.palette
      expect(container.firstChild).toHaveStyleRule('fill', blue['200'])
      expect(container.firstChild).toHaveStyleRule('background-color', blue['700'])
    })
  })

  describe('Circle', () => {
    it('using colorIcon  and colorBg with colorScheme', () => {
      const { container } = render(
        <IconBox appearance="circle" colorIcon="primary" colorBg="primary">
          <svg />
        </IconBox>,
      )

      const { primary } = defaultTheme.colorScheme
      expect(container.firstChild).toHaveStyleRule('fill', primary['contrastText'])
      expect(container.firstChild).toHaveStyleRule('background-color', primary['300'])
    })

    it('using colorIcon and colorBg with palette', () => {
      const { container } = render(
        <IconBox appearance="circle" colorIcon="blue" colorBg="blue">
          <svg />
        </IconBox>,
      )

      const { blue } = defaultTheme.palette
      expect(container.firstChild).toHaveStyleRule('fill', blue['50'])
      expect(container.firstChild).toHaveStyleRule('background-color', blue['800'])
    })

    it('using colorIcon with palette', () => {
      const { container } = render(
        <IconBox appearance="circle" colorIcon="blue" colorBg="blue">
          <svg />
        </IconBox>,
      )

      const { blue } = defaultTheme.palette
      expect(container.firstChild).toHaveStyleRule('fill', blue['50'])
      expect(container.firstChild).toHaveStyleRule('background-color', blue['800'])
    })

    it('using colorIcon and colorBg with palette using variant', () => {
      const { container } = render(
        <IconBox appearance="circle" colorIcon="blue.200" colorBg="blue.700">
          <svg />
        </IconBox>,
      )

      const { blue } = defaultTheme.palette
      expect(container.firstChild).toHaveStyleRule('fill', blue['200'])
      expect(container.firstChild).toHaveStyleRule('background-color', blue['700'])
    })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('IconBox', 'base', {
      padding: '100px',
    })

    const { container } = render(
      <IconBox>
        <svg />
      </IconBox>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('IconBox', 'overwrite', {
      backgroundColor: 'aqua',
    })

    const { container } = render(
      <IconBox colorIcon="primary">
        <svg />
      </IconBox>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <IconBox sx={{ margin: '100px' }}>
        <svg />
      </IconBox>,
    )

    expect(container.firstChild).toHaveStyleRule('margin', '100px')
  })
})
