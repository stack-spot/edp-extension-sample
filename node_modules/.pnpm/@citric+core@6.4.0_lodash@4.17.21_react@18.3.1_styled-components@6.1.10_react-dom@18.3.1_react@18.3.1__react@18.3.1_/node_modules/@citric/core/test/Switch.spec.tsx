import 'jest-styled-components'
import { createRef } from 'react'
import Switch from '../src/Switch'
import { buildThemeWithComponents, render } from './react'

test('should render a Switch component', () => {
  const { container } = render(<Switch />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      background-color: #BCBCCF;
      border-radius: 1rem;
      cursor: pointer;
      appearance: none;
      position: relative;
      width: 2.5rem;
      height: 1.25rem;
      box-sizing: border-box;
    }

    .c0::before {
      content: '';
      background-color: #000000;
      transition: 0.32s;
      position: absolute;
      width: 0.75rem;
      height: 0.75rem;
      left: 0.25rem;
      top: 0.25rem;
      border-radius: 2rem;
    }

    .c0:checked {
      background-color: #91D191;
    }

    .c0:checked::before {
      transform: translateX(20px);
    }

    .c0:disabled {
      opacity: 0.24;
      pointer-events: none;
    }

    <input
      class="c0"
      type="checkbox"
    />
  `)
})

test('should render a Switch spreading props in root element', () => {
  const { container } = render(<Switch id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Switch with disabled prop as true', () => {
  const { container } = render(<Switch disabled />)

  expect(container.firstChild).toHaveAttribute('disabled')

  expect(container.firstChild).toHaveStyleRule('opacity', '0.24', {
    modifier: ':disabled',
  })

  expect(container.firstChild).toHaveStyleRule('pointer-events', 'none', {
    modifier: ':disabled',
  })
})

test('should render a Switch using ref', () => {
  const ref = createRef<HTMLInputElement>()
  const { container } = render(<Switch ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Switch', 'base', {
      padding: '100px',
    })

    const { container } = render(<Switch />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Switch', 'overwrite', {
      backgroundColor: 'aqua',
    })

    const { container } = render(<Switch />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<Switch sx={{ backgroundColor: 'aqua' }} />)

    expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
  })
})
