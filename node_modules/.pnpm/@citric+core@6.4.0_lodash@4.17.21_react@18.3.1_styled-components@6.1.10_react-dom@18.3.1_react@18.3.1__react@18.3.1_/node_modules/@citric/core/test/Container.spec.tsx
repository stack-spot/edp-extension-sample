import 'jest-styled-components'
import { createRef } from 'react'
import Container from '../src/Container'
import defaultTheme from '../src/default-theme'
import { buildThemeWithComponents, render } from './react'

test('should render a Container component', () => {
  const { container } = render(<Container>foo</Container>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      box-sizing: border-box;
      margin: 0 auto;
      width: 100%;
      padding: 0 1.5rem;
      max-width: calc(1168px + 1.5rem * 2 );
    }

    @media (max-width:1400px) {
      .c0 {
        max-width: 1168px;
      }
    }

    @media (max-width:1200px) {
      .c0 {
        max-width: 976px;
      }
    }

    <div
      class="c0"
    >
      foo
    </div>
  `)
})

test('should render a Container spreading props in root element', () => {
  const { container } = render(<Container id="bar">foo</Container>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Container using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Container ref={ref}>foo</Container>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Container using AsProp', () => {
  const { container } = render(
    <Container as="a" href="#">
      foo
    </Container>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

test('should render a Container with fluid prop as true', () => {
  const { container } = render(<Container fluid>foo</Container>)
  const { xs, sm, md, lg, xl } = defaultTheme.breakpoint

  expect(container.firstChild).not.toHaveStyleRule('max-width', expect.any(String), {
    media: `(min-width: ${xs}px)`,
  })

  expect(container.firstChild).not.toHaveStyleRule('max-width', expect.any(String), {
    media: `(min-width: ${xs}px)`,
  })

  expect(container.firstChild).not.toHaveStyleRule('max-width', expect.any(String), {
    media: `(min-width: ${sm}px)`,
  })

  expect(container.firstChild).not.toHaveStyleRule('max-width', expect.any(String), {
    media: `(min-width: ${md}px)`,
  })

  expect(container.firstChild).not.toHaveStyleRule('max-width', expect.any(String), {
    media: `(min-width: ${lg}px)`,
  })

  expect(container.firstChild).not.toHaveStyleRule('max-width', '', {
    media: `(min-width: ${xl}px)`,
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Container', 'base', {
      width: '122em',
    })

    const { container } = render(<Container>foo</Container>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('width', '122em')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Container', 'overwrite', {
      width: '300px',
    })

    const { container } = render(<Container>foo</Container>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('width', '300px')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Container sx={{ padding: '10px' }}>foo</Container>)

    expect(container.firstChild).toHaveStyleRule('padding', '10px')
  })
})
