import 'jest-styled-components'
import { createRef } from 'react'
import { Option, Select } from '../src/Select'
import defaultTheme from '../src/default-theme'
import { OneOfColorSchemes } from '../src/theme-types'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Select component', () => {
  const { container } = render(
    <Select>
      <Option value="1">Option1</Option>
      <Option value="2">Option2</Option>
    </Select>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c0 {
  appearance: none;
  width: 100%;
  height: 2.5rem;
  padding: 0.5rem;
  outline: none;
  box-sizing: border-box;
  background-color: #14141A;
  border: 1px solid #2F2F3C;
  border-radius: 0.25rem;
  font: 400 0.875rem/1.714 Roboto,sans-serif;
  color: #FAFAFB;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23F7F7F8" width="16" height="16" viewBox="0 0 512 512"><path d="M505.172 182.112C512.966 174.285 512.939 161.622 505.112 153.828C497.285 146.034 484.622 146.061 476.828 153.888L255.5 376.157L35.1723 154.888C27.3785 147.061 14.7152 147.034 6.88807 154.828C-0.939081 162.622 -0.966059 175.285 6.82776 183.112L240.828 418.112C244.862 422.164 250.202 424.125 255.5 423.994C260.798 424.125 266.138 422.164 270.172 418.112L505.172 182.112Z"/></svg>');
  background-repeat: no-repeat;
  background-position: right 0.5rem top 50%;
  background-size: 0.747rem;
  background-color: #14141A;
}

.c0::placeholder {
  opacity: 60%;
  color: #FAFAFB;
}

.c0:focus {
  border-color: #FF6633;
  box-shadow: inset 0 0 0 1px #FF6633;
}

.c0:disabled {
  background-color: #262631;
  border-color: #2F2F3C;
  cursor: not-allowed;
}

.c0:-webkit-autofill,
.c0:-webkit-autofill:hover,
.c0:-webkit-autofill:focus {
  -webkit-text-fill-color: #FAFAFB;
  box-shadow: inset 0 0 0 1000px #14141A;
  transition: background-color 50000s ease-in-out 0s;
}

<select
  class="c0"
>
  <option
    class=""
    value="1"
  >
    Option1
  </option>
  <option
    class=""
    value="2"
  >
    Option2
  </option>
</select>
`)
})

test('should render a Select spreading props in root element', () => {
  const { container } = render(
    <Select id="bar">
      <Option value="1">Option1</Option>
      <Option value="2">Option2</Option>
    </Select>,
  )
  const item = container.querySelector('select')

  expect(item).toHaveAttribute('id', 'bar')
})

test('should render a Select using ref', () => {
  const ref = createRef<HTMLSelectElement>()

  const { container } = render(
    <Select ref={ref}>
      <Option value="1">Option1</Option>
      <Option value="2">Option2</Option>
    </Select>,
  )

  const item = container.querySelector('select')

  expect(ref.current).toBe(item)
})

test('should render a Select with disabled prop as true', () => {
  const { container } = render(
    <Select disabled>
      <Option value="1">Option1</Option>
      <Option value="2">Option2</Option>
    </Select>,
  )
  const item = container.querySelector('select')

  expect(item).toHaveAttribute('disabled')
})

test('should render a Select with autofocus prop as true', () => {
  const { container } = render(
    <Select autoFocus>
      <Option value="1">Option1</Option>
      <Option value="2">Option2</Option>
    </Select>,
  )

  const colorScheme = defaultTheme.colorScheme.primary
  const item = container.querySelector('select')

  expect(item).toHaveFocus()

  expect(item).toHaveStyleRule('border-color', `${colorScheme['500']}`, {
    modifier: ':focus',
  })

  expect(item).toHaveStyleRule('box-shadow', `inset 0 0 0 1px ${colorScheme['500']}`, {
    modifier: ':focus',
  })
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(
      <Select colorScheme={colorSchemeName}>
        <Option value="1">Option1</Option>
        <Option value="2">Option2</Option>
      </Select>,
    )

    const colorScheme = defaultTheme.colorScheme[colorSchemeName]
    const item = container.querySelector('select')

    expect(item).toHaveStyleRule('border', `1px solid ${colorScheme['500']}`)
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Select', 'base', {
      margin: '100px',
    })

    const { container } = render(
      <Select>
        <Option value="1">Option1</Option>
        <Option value="2">Option2</Option>
      </Select>,
      {
        theme: customTheme,
      },
    )
    const item = container.querySelector('select')

    expect(item).toHaveStyleRule('margin', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Select', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(
      <Select colorScheme="primary">
        <Option value="1">Option1</Option>
        <Option value="2">Option2</Option>
      </Select>,
      {
        theme: customTheme,
      },
    )
    const item = container.querySelector('select')

    expect(item).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <Select sx={{ color: 'mediumpurple' }}>
        <Option value="1">Option1</Option>
        <Option value="2">Option2</Option>
      </Select>,
    )

    const item = container.querySelector('select')

    expect(item).toHaveStyleRule('color', 'mediumpurple')
  })
})
