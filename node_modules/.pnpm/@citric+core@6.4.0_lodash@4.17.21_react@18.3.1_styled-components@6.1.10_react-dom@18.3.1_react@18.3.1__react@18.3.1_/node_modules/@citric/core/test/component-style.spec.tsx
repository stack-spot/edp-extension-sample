import { styled } from 'styled-components'
import {
  SxProp,
  extendStyle,
  overwriteStyle,
  overwriteStyleFromProp,
  overwriteStyleFromTheme,
} from '../src/component-style'
import defaultTheme from '../src/default-theme'
import { buildThemeWithComponents, render } from './react'

describe('overwriteStyleFromTheme()', () => {
  it('should return undefined when the theme has not been passed a overwrite style', () => {
    const value = overwriteStyleFromTheme('Text', { theme: defaultTheme })
    expect(value).toBeUndefined()
  })

  it('should return style from theme component overwrite style', () => {
    const theme = {
      ...defaultTheme,
      component: { Text: { overwrite: { display: 'block' } } },
    }

    const value = overwriteStyleFromTheme('Text', { theme })
    expect(value).toEqual({ display: 'block' })
  })

  it('should return style from theme component overwrite style using sx css properties', () => {
    const theme = {
      ...defaultTheme,
      component: { Text: { overwrite: { color: 'primary' } } },
    }

    const value = overwriteStyleFromTheme('Text', { theme })
    expect(value?.color).toBe(defaultTheme.colorScheme.primary['500'])
  })

  it('should return style from theme component overwrite style using a function', () => {
    const theme = {
      ...defaultTheme,
      component: { Text: { overwrite: () => ({ color: 'primary' }) } },
    }

    const value = overwriteStyleFromTheme('Text', { theme })
    expect(value?.color).toBe(defaultTheme.colorScheme.primary['500'])
  })
})

describe('extendStyle()', () => {
  it('should return undefined when the theme has not been passed a extend style', () => {
    const value = extendStyle('Text')({ theme: defaultTheme })
    expect(value).toBeUndefined()
  })

  it('should return style from theme component extend style', () => {
    const theme = {
      ...defaultTheme,
      component: { Text: { base: { display: 'block' } } },
    }

    const value = extendStyle('Text')({ theme })
    expect(value).toEqual({ display: 'block' })
  })

  it('should return style from theme component extend style using sx css properties', () => {
    const theme = {
      ...defaultTheme,
      component: { Text: { base: { color: 'primary' } } },
    }

    const value = extendStyle('Text')({ theme })
    expect(value?.color).toBe(defaultTheme.colorScheme.primary['500'])
  })

  it('should return style from theme component extend style using a function', () => {
    const theme = {
      ...defaultTheme,
      component: { Text: { base: () => ({ color: 'primary' }) } },
    }

    const value = extendStyle('Text')({ theme })
    expect(value?.color).toBe(defaultTheme.colorScheme.primary['500'])
  })
})

describe('overwriteStyleFromProp()', () => {
  const theme = defaultTheme

  it('should return undefined when sx prop was undefined', () => {
    const value = overwriteStyleFromProp({ theme })
    expect(value).toBeUndefined()
  })

  it('should return style received by sx prop', () => {
    const sx = { display: 'block' }

    const value = overwriteStyleFromProp({ theme, sx })
    expect(value).toEqual({ display: 'block' })
  })

  it('should return style based on style received by sx prop using properties handlers', () => {
    const sx = { color: 'primary' }

    const value = overwriteStyleFromProp({ theme, sx })
    expect(value?.color).toEqual(theme.colorScheme.primary['500'])
  })
})

describe('Integration', () => {
  it('should extend component style from theme', () => {
    const theme = buildThemeWithComponents('Foo', 'base', { color: 'aqua' })

    const Foo = styled.p`
      ${extendStyle('Foo')};
    `

    const { container } = render(<Foo />, { theme })
    expect(container.firstChild).toHaveStyle({ color: 'aqua' })
  })

  it('should overwrite component style from theme', () => {
    const theme = buildThemeWithComponents('Foo', 'overwrite', { color: 'aqua' })

    const Foo = styled.p`
      ${overwriteStyle('Foo')};
    `

    const { container } = render(<Foo />, { theme })
    expect(container.firstChild).toHaveStyle({ color: 'aqua' })
  })

  it('should overwrite component style from sx props', () => {
    const theme = buildThemeWithComponents('Foo', 'overwrite', { color: 'aqua' })

    const Foo = styled.p<{ sx: SxProp }>`
      display: block;
      ${overwriteStyle('Foo')};
    `

    const { container } = render(<Foo sx={{ color: 'aqua' }} />, { theme })
    expect(container.firstChild).toHaveStyle({ color: 'aqua' })
  })
})
