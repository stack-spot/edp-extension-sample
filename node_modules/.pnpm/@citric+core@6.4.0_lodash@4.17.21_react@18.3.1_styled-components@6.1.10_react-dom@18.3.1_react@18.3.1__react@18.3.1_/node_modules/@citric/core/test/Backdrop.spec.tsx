import 'jest-styled-components'
import { createRef } from 'react'
import Backdrop from '../src/Backdrop'
import { buildThemeWithComponents, render } from './react'

test('should render a Backdrop component', () => {
  const { container } = render(<Backdrop>foo</Backdrop>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      box-sizing: border-box;
      position: fixed;
      z-index: 1000;
      background-color: rgba(0, 0, 0, 0.5);
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      overflow-y: auto;
    }

    <div
      class="c0"
    >
      foo
    </div>
  `)
})

test('should render a Backdrop spreading props in root element', () => {
  const { container } = render(<Backdrop id="bar">foo</Backdrop>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Backdrop using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Backdrop ref={ref}>foo</Backdrop>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Backdrop using AsProp', () => {
  const { container } = render(<Backdrop as="span">foo</Backdrop>)

  expect(container.firstChild?.nodeName).toBe('SPAN')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Backdrop', 'base', {
      border: '1px solid red',
    })

    const { container } = render(<Backdrop>foo</Backdrop>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Backdrop', 'overwrite', {
      color: 'blueviolet',
    })

    const { container } = render(<Backdrop>foo</Backdrop>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'blueviolet')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<Backdrop sx={{ bg: 'blueviolet' }}>foo</Backdrop>)
    expect(container.firstChild).toHaveStyleRule('background-color', 'blueviolet')
  })
})
