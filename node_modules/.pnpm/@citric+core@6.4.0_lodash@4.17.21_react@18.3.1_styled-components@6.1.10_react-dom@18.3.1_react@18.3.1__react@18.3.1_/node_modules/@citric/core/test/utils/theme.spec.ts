import defaultTheme from '../../src/default-theme'
import { FontAppearance } from '../../src/theme-types'
import {
  getBreakpoint,
  getFontAppearance,
  getFontFamily,
  getFontStyle,
  getFontWeight,
  getLetterSpacing,
  getSpacing,
} from '../../src/utils/theme'

describe('getBreakpoint()', () => {
  it('shoud return breakpoint from the given name param', () => {
    const expected = defaultTheme.breakpoint.lg
    expect(getBreakpoint(defaultTheme, 'lg')).toBe(expected)
  })
})

describe('getSpacing()', () => {
  it('shoud return spacing from the given name param', () => {
    expect(getSpacing(defaultTheme, 1)).toBe(defaultTheme.spacing(1))
    expect(getSpacing(defaultTheme, 2)).toBe(defaultTheme.spacing(2))
  })
})

describe('getFontAppearance()', () => {
  it('shoud return font appearance from the given name param', () => {
    const expected = defaultTheme.font.appearance.overheader1
    expect(getFontAppearance(defaultTheme, 'overheader1')).toBe(expected)
  })
})

describe('getLetterSpacing()', () => {
  it('shoud return font letterSpacing from the given appearance param', () => {
    const expected = defaultTheme.font.appearance.display1.letterSpacing
    expect(getLetterSpacing(defaultTheme, 'display1')).toBe(expected)
  })
})

describe('getFontWeight()', () => {
  it('shoud return undefined when weight param was not passed', () => {
    expect(getFontWeight(defaultTheme, undefined)).toBeUndefined()
  })

  it('shoud return font weight from the given weight param', () => {
    const expected = defaultTheme.font.weight.bold
    expect(getFontWeight(defaultTheme, 'bold')).toBe(expected)
  })
})

describe('getFontFamily()', () => {
  it('shoud return undefined when family param was not passed', () => {
    expect(getFontFamily(defaultTheme, undefined)).toBeUndefined()
  })

  it('shoud return font Family from the given Family param', () => {
    const expected = defaultTheme.font.family.system1
    expect(getFontFamily(defaultTheme, 'system1')).toBe(expected)
  })
})

describe('getFontStyle()', () => {
  it('shoud return font style from the given font appearance param', () => {
    const { weight, size, family, lineHeight } = defaultTheme.font.appearance
      .body1 as FontAppearance
    const fontWeight = defaultTheme.font.weight[weight]
    const fontFamily = defaultTheme.font.family[family]

    const expected = `${fontWeight} ${size}/${lineHeight} ${fontFamily}`

    expect(getFontStyle(defaultTheme, 'body1')).toBe(expected)
  })
})
