import { render } from '@testing-library/react'
import 'jest-styled-components'
import * as sc from 'styled-components'
import ThemeProvider from '../src/ThemeProvider'
import defaultTheme from '../src/default-theme'

const themeProviderMocked = jest.spyOn(sc, 'ThemeProvider')

afterEach(() => themeProviderMocked.mockClear())

test('should render a ThemeProvider', () => {
  const { container } = render(<ThemeProvider>foo</ThemeProvider>)
  expect(container).toHaveTextContent('foo')
})

test('should ThemeProvider uses Styled Component ThemeProvider', () => {
  render(<ThemeProvider>foo</ThemeProvider>)

  expect(themeProviderMocked).toBeCalled()
  expect(themeProviderMocked.mock.calls[0][0]).toEqual(expect.objectContaining({ children: 'foo' }))
})

test('should ThemeProvider use default citric theme when props theme was not provided', () => {
  render(<ThemeProvider>foo</ThemeProvider>)

  expect(themeProviderMocked.mock.calls[0][0]).toEqual(
    expect.objectContaining({ theme: defaultTheme }),
  )
})

test('should ThemeProvider pass props theme to Styled Components ThemeProvider', () => {
  const theme = { ...defaultTheme, foo: true }

  render(<ThemeProvider theme={theme}>foo</ThemeProvider>)

  expect(themeProviderMocked.mock.calls[0][0]).toEqual(expect.objectContaining({ theme }))
})

test('should ThemeProvider apply global style from theme', () => {
  const { StyleSheetManager, ServerStyleSheet } = sc
  const sheet = new ServerStyleSheet()
  const theme = { ...defaultTheme, globalStyle: { body: { padding: '10px' } } }

  render(
    <StyleSheetManager sheet={sheet.instance}>
      <ThemeProvider theme={theme}>foo</ThemeProvider>
    </StyleSheetManager>,
  )

  expect(sheet.getStyleTags()).toContain('body{padding:10px;}')
})

describe('Integration', () => {
  it('default theme', () => {
    expect.assertions(1)

    const Foo = () => {
      expect(sc.useTheme()).toBe(defaultTheme)
      return <div>foo</div>
    }

    render(
      <ThemeProvider theme={defaultTheme}>
        <Foo />
      </ThemeProvider>,
    )
  })

  it('custom theme', () => {
    const customTheme = {
      ...defaultTheme,
      font: { ...defaultTheme.font, families: { ...defaultTheme.font.family, code: 'bar' } },
    }

    expect.assertions(1)

    const Foo = () => {
      expect(sc.useTheme()).toBe(customTheme)
      return <div>foo</div>
    }

    render(
      <ThemeProvider theme={customTheme}>
        <Foo />
      </ThemeProvider>,
    )
  })
})
