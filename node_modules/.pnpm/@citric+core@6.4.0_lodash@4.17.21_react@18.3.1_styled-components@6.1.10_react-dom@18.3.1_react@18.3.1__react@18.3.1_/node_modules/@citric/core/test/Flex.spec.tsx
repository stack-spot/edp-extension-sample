import 'jest-styled-components'
import { createElement, createRef } from 'react'
import Box from '../src/Box'
import Flex from '../src/Flex'
import defaultTheme from '../src/default-theme'
import { alias } from '../src/sx'
import { buildThemeWithComponents, render } from './react'

test('should render a Flex component', () => {
  const { container } = render(<Flex>foo</Flex>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      box-sizing: border-box;
      display: flex;
      flex-wrap: wrap;
    }

    <div
      class="c0"
    >
      foo
    </div>
  `)
})

test('should render a Flex spreading props in root element', () => {
  const { container } = render(<Flex id="bar">foo</Flex>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Flex using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Flex ref={ref}>foo</Flex>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Flex using AsProp', () => {
  const { container } = render(
    <Flex as="a" href="#">
      foo
    </Flex>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

describe('Props', () => {
  it('alignItems', () => {
    const { container } = render(<Flex alignItems="center">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('align-items', 'center')
  })

  it('alignContent', () => {
    const { container } = render(<Flex alignContent="center">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('align-content', 'center')
  })

  it('justifyContent', () => {
    const { container } = render(<Flex justifyContent="center">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('justify-content', 'center')
  })

  it('justifyItems', () => {
    const { container } = render(<Flex justifyItems="center">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('justify-items', 'center')
  })

  it('flexWrap', () => {
    const { container } = render(<Flex flexWrap="wrap">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('flex-wrap', 'wrap')
  })

  it('flexDirection', () => {
    const { container } = render(<Flex flexDirection="column">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('flex-direction', 'column')
  })

  it('flex', () => {
    const { container } = render(<Flex flex="1">foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('flex', '1')
  })

  it('gap', () => {
    const { container } = render(<Flex gap>foo</Flex>)
    expect(container.firstChild).toHaveStyleRule('margin', `-${defaultTheme.spacing(3)}`)
    expect(container.firstChild).toHaveStyleRule('padding', `${defaultTheme.spacing(3)}`, {
      modifier: `> ${Box}`,
    })
  })
})

describe('Sx Alias as props', () => {
  it.each(Object.entries(alias))('%s', (sxAlias, property) => {
    const { container } = render(createElement(Flex, { [sxAlias]: 'foo' }, 'bar'))
    expect(container.firstChild).toHaveStyle({ [property]: 'foo' })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Flex', 'base', {
      padding: '100px',
    })

    const { container } = render(<Flex>foo</Flex>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Flex', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(<Flex>foo</Flex>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Flex sx={{ border: '1px solid red' }}>foo</Flex>)

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})
