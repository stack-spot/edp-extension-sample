import 'jest-styled-components'
import { createRef } from 'react'
import LinkBox from '../src/LinkBox'
import { buildThemeWithComponents, render } from './react'

test('should render a LinkBox component', () => {
  const { container } = render(<LinkBox href="/">foo</LinkBox>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    .c1 {
      color: inherit;
      display: block;
      text-decoration: none;
      background-color: transparent;
      border: none;
      cursor: pointer;
    }

    .c1[disabled] {
      pointer-events: none;
      opacity: 0.7;
    }

    <a
      class="c0 c1"
      href="/"
    >
      foo
    </a>
  `)
})

test('should render a LinkBox spreading props in root element', () => {
  const { container } = render(
    <LinkBox href="/" id="bar">
      foo
    </LinkBox>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a LinkBox using ref', () => {
  const ref = createRef<HTMLAnchorElement>()
  const { container } = render(<LinkBox ref={ref}>foo</LinkBox>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a LinkBox using AsProp', () => {
  const { container } = render(
    <LinkBox as="button" type="button">
      foo
    </LinkBox>,
  )

  expect(container.firstChild?.nodeName).toBe('BUTTON')
  expect(container.firstChild).toHaveAttribute('type', 'button')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('LinkBox', 'base', {
      display: 'none',
    })

    const { container } = render(<LinkBox>foo</LinkBox>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('display', 'none')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('LinkBox', 'overwrite', {
      textDecoration: 'underline',
    })

    const { container } = render(<LinkBox>foo</LinkBox>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('text-decoration', 'underline')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<LinkBox sx={{ border: '1px solid red' }}>foo</LinkBox>)

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})
