import { render } from '@testing-library/react'
import { createRef } from 'react'
import forwardRefAs, { AsProp } from '../src/forward-ref-as'

test('should render a component using forwardRefAs', () => {
  const Component = forwardRefAs<{ as?: AsProp }, 'p'>((props, ref) => <p ref={ref} {...props} />)

  const { container } = render(<Component />)
  expect(container.firstChild?.nodeName).toBe('P')
})

test('should render a component using forwardRefAs with ref', () => {
  const ref = createRef<HTMLParagraphElement>()

  const Component = forwardRefAs<{ as?: AsProp }, 'p'>(({ as: As = 'p', ...props }, _ref) => (
    <As ref={_ref} {...props} />
  ))

  const { container } = render(<Component ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a component with the root element tag using element received by As prop', () => {
  const Component = forwardRefAs<{ as: AsProp }, 'p'>(({ as: As }, _ref) => <As ref={_ref} />)

  const { container } = render(<Component as="div" />)
  expect(container.firstChild?.nodeName).toBe('DIV')
})

test('should render a component with the root element using a component received by As prop', () => {
  const Foo = (props: { href: string }) => <a {...props} />

  const Component = forwardRefAs<{ as: AsProp }, 'p'>(({ as: As, ...props }, ref) => (
    <As ref={ref} {...props} />
  ))

  const { container } = render(<Component as={Foo} href="foo" />)
  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', 'foo')
})

test('should forwardRefAs infer type to component props based on As prop', () => {
  const Component = forwardRefAs<{ as: AsProp }, 'p'>(({ as: As, ...props }, ref) => (
    <As ref={ref} {...props} />
  ))

  const { container } = render(<Component as="a" href="foo" />)

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', 'foo')
})
