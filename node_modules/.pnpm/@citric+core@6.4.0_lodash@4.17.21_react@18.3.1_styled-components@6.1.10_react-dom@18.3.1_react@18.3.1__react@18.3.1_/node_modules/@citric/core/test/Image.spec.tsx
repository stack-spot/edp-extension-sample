import 'jest-styled-components'
import { createRef } from 'react'
import Image from '../src/Image'
import defaultTheme from '../src/default-theme'
import { OneOfRadius } from '../src/theme-types'
import { buildThemeWithComponents, render } from './react'

const radius = Object.keys(defaultTheme.radius) as OneOfRadius[]

test('should render a Image component', () => {
  const { container } = render(<Image src="examples/plumeria.jpg" />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      box-sizing: border-box;
      max-width: 100%;
      vertical-align: middle;
    }

    <img
      class="c0"
      src="examples/plumeria.jpg"
    />
  `)
})

test('should render a Image spreading props in root element', () => {
  const { container } = render(<Image id="bar" src="examples/plumeria.jpg" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Image using ref', () => {
  const ref = createRef<HTMLImageElement>()
  const { container } = render(<Image ref={ref} src="examples/plumeria.jpg" />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Image using AsProp', () => {
  const { container } = render(<Image as="a" href="#" />)

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

test('should render a Image using objectFit prop', () => {
  const { container } = render(<Image objectFit="cover" src="examples/plumeria.jpg" />)

  expect(container.firstChild).toHaveStyleRule('object-fit', 'cover')
})

describe('Radius', () => {
  it.each(radius)('%s', (value) => {
    const { container } = render(<Image radius={value} src="examples/plumeria.jpg" />)
    const expected = defaultTheme.radius[value]

    expect(container.firstChild).toHaveStyleRule('border-radius', expected)
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Image', 'base', {
      maxWidth: '10px',
    })

    const { container } = render(<Image src="examples/plumeria.jpg" />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('max-width', '10px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Image', 'overwrite', {
      objectFit: 'cover',
    })

    const { container } = render(<Image src="examples/plumeria.jpg" />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('object-fit', 'cover')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Image src="examples/plumeria.jpg" sx={{ borderColor: 'aqua' }} />)

    expect(container.firstChild).toHaveStyleRule('border-color', 'aqua')
  })
})
