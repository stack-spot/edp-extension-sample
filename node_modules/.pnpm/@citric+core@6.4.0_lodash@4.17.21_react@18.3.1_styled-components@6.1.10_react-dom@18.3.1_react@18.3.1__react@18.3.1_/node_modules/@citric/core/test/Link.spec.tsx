import 'jest-styled-components'
import { createRef } from 'react'
import Link from '../src/Link'
import defaultTheme from '../src/default-theme'
import { OneOfColorSchemes } from '../src/theme-types'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Link component', () => {
  const { container } = render(<Link href="/foo">foo</Link>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      margin: 0;
    }

    .c1 {
      padding: 0;
      border: none;
      background-color: transparent;
      cursor: pointer;
      text-decoration: underline;
      color: #FAFAFB;
    }

    <a
      class="c0 c1"
      href="/foo"
    >
      foo
    </a>
  `)
})

test('should render a Link spreading props in root element', () => {
  const { container } = render(
    <Link href="/foo" id="bar">
      foo
    </Link>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Link using ref', () => {
  const ref = createRef<HTMLAnchorElement>()
  const { container } = render(
    <Link href="/foo" ref={ref}>
      foo
    </Link>,
  )

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Link using AsProp', () => {
  const { container } = render(
    <Link as="button" type="button">
      foo
    </Link>,
  )

  expect(container.firstChild?.nodeName).toBe('BUTTON')
  expect(container.firstChild).toHaveAttribute('type', 'button')
})

test('should render a Link with textDecoration', () => {
  const { container } = render(
    <Link href="/foo" textDecoration="underline">
      foo
    </Link>,
  )

  expect(container.firstChild).toHaveStyleRule('text-decoration', 'underline')
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(
      <Link href="/foo" colorScheme={colorSchemeName}>
        foo
      </Link>,
    )
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild).toHaveStyleRule('color', colorScheme['500'])
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Link', 'base', {
      border: '1px solid red',
    })

    const { container } = render(<Link href="/foo">foo</Link>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Link', 'overwrite', {
      color: 'mediumpurple',
    })

    const { container } = render(
      <Link href="/foo" colorScheme="primary">
        foo
      </Link>,
      { theme: customTheme },
    )

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <Link href="/foo" sx={{ color: 'mediumpurple' }}>
        foo
      </Link>,
    )

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
