import defaultTheme from '../src/default-theme'
import { sx } from '../src/sx'
import { OneOfBreakpoints, OneOfFontFamilies, OneOfFontWeights } from '../src/theme-types'

test('should sx return given style', () => {
  const style = { display: 'none' }
  const value = sx(defaultTheme, style)

  expect(value).toEqual(style)
})

test('should sx return given style with pseudos', () => {
  const style = { display: 'none', ':hover': { display: 'block' } }
  const value = sx(defaultTheme, style)

  expect(value).toEqual(style)
})

test('should sx return given style with pseudos using handler', () => {
  const style = { ':hover': { color: 'primary' } }
  const value = sx(defaultTheme, style)
  const expected = defaultTheme.colorScheme.primary['500']

  if (!value) fail('expected value to not be null')
  expect(value[':hover']?.color).toEqual(expected)
})

describe('Content Handler', () => {
  it('content as undefined', () => {
    const value = sx(defaultTheme, { content: undefined })
    expect(value.content).toEqual(undefined)
  })

  it('content as empty string', () => {
    const value = sx(defaultTheme, { content: '' })
    expect(value.content).toEqual('""')
  })

  it('content as custom value', () => {
    const value = sx(defaultTheme, { content: 'foo' })
    expect(value.content).toEqual('"foo"')
  })
})

describe('Color Handler', () => {
  it('color value as colorSchemes', () => {
    const value = sx(defaultTheme, { color: 'primary' })
    const expected = defaultTheme.colorScheme.primary['500']

    expect(value.color).toEqual(expected)
  })

  it('color value as colorSchemes variant', () => {
    const value = sx(defaultTheme, { color: 'primary.600' })
    const expected = defaultTheme.colorScheme.primary['600']

    expect(value.color).toEqual(expected)
  })

  it('color value as pallete variant', () => {
    const value = sx(defaultTheme, { color: 'teal.600' })
    const expected = defaultTheme.palette.teal['600']

    expect(value.color).toEqual(expected)
  })

  it('color value as hex value', () => {
    const value = sx(defaultTheme, { color: '#000' })
    expect(value.color).toEqual('#000')
  })

  it('color value as literal value', () => {
    const value = sx(defaultTheme, { color: 'blueviolet' })
    expect(value.color).toEqual('blueviolet')
  })

  describe('Properties', () => {
    const expected = defaultTheme.colorScheme.primary['500']

    it('color', () => {
      const value = sx(defaultTheme, { color: 'primary' })
      expect(value.color).toEqual(expected)
    })

    it('background', () => {
      const value = sx(defaultTheme, { background: 'primary' })
      expect(value.background).toEqual(expected)
    })

    it('backgroundColor', () => {
      const value = sx(defaultTheme, { backgroundColor: 'primary' })
      expect(value.backgroundColor).toEqual(expected)
    })

    it('borderColor', () => {
      const value = sx(defaultTheme, { borderColor: 'primary' })
      expect(value.borderColor).toEqual(expected)
    })

    it('fill', () => {
      const value = sx(defaultTheme, { fill: 'primary.500' })
      expect(value.fill).toEqual(expected)
    })
  })
})

describe('Font Handler', () => {
  it('value as theme font appearance', () => {
    const value = sx(defaultTheme, { font: 'h1' })

    const { weight, size, family, lineHeight } = defaultTheme.font.appearance.h1
    const fontWeight = defaultTheme.font.weight[weight as OneOfFontWeights]
    const fontFamily = defaultTheme.font.family[family as OneOfFontFamilies]

    const expected = `${fontWeight} ${size}/${lineHeight} ${fontFamily}`

    expect(value.font).toEqual(expected)
  })

  it('value as undefiend', () => {
    const value = sx(defaultTheme, { font: undefined })
    expect(value.font).toEqual(undefined)
  })

  it('value as custom', () => {
    const value = sx(defaultTheme, { font: '1px Arial' })
    expect(value.font).toEqual('1px Arial')
  })
})

describe('Font Weight Handler', () => {
  it('value as theme font weight', () => {
    const value = sx(defaultTheme, { fontWeight: 'bold' })
    const expected = defaultTheme.font.weight.bold

    expect(value.fontWeight).toEqual(expected)
  })

  it('value as literal', () => {
    const value = sx(defaultTheme, { fontWeight: '900' })
    expect(value.fontWeight).toEqual('900')
  })
})

describe('Radius Handler', () => {
  it('value as theme radius', () => {
    const value = sx(defaultTheme, { borderRadius: 'sm' })
    const expected = defaultTheme.radius.sm

    expect(value.borderRadius).toEqual(expected)
  })

  it('value as literal', () => {
    const value = sx(defaultTheme, { borderRadius: '10px' })
    expect(value.borderRadius).toEqual('10px')
  })

  describe('Properties', () => {
    it('borderRadius', () => {
      const value = sx(defaultTheme, { borderRadius: 'sm' })
      expect(value.borderRadius).toEqual(defaultTheme.radius.sm)
    })

    it('borderRadius with 2 values', () => {
      const { sm, md } = defaultTheme.radius
      const value = sx(defaultTheme, { borderRadius: 'sm md' })
      expect(value.borderRadius).toEqual(`${sm} ${md}`)
    })

    it('borderRadius with 4 values', () => {
      const { sm, md } = defaultTheme.radius
      const value = sx(defaultTheme, { borderRadius: 'sm md md sm' })
      expect(value.borderRadius).toEqual(`${sm} ${md} ${md} ${sm}`)
    })

    it('borderTopLeftRadius', () => {
      const value = sx(defaultTheme, { borderTopLeftRadius: 'sm' })
      expect(value.borderTopLeftRadius).toEqual(defaultTheme.radius.sm)
    })

    it('borderTopRightRadius', () => {
      const value = sx(defaultTheme, { borderTopRightRadius: 'sm' })
      expect(value.borderTopRightRadius).toEqual(defaultTheme.radius.sm)
    })

    it('borderBottomLeftRadius', () => {
      const value = sx(defaultTheme, { borderBottomLeftRadius: 'sm' })
      expect(value.borderBottomLeftRadius).toEqual(defaultTheme.radius.sm)
    })

    it('borderBottomRightRadius', () => {
      const value = sx(defaultTheme, { borderBottomRightRadius: 'sm' })
      expect(value.borderBottomRightRadius).toEqual(defaultTheme.radius.sm)
    })
  })
})

describe('Border Handler', () => {
  it('border', () => {
    const value = sx(defaultTheme, { border: 'red' })
    expect(value.border).toEqual('1px solid #FF0000')
  })

  it('border with size', () => {
    const value = sx(defaultTheme, { border: '1px red' })
    expect(value.border).toEqual('1px solid #FF0000')
  })

  it('border with color as rgb', () => {
    const value = sx(defaultTheme, { border: '1px solid rgb(255, 255, 255, 0.3)' })
    expect(value.border).toEqual('1px solid rgb(255,255,255,0.3)')
  })

  it('border with size and style', () => {
    const value = sx(defaultTheme, { border: '1px dashed red' })
    expect(value.border).toEqual('1px dashed #FF0000')
  })

  it('border with value none', () => {
    const value = sx(defaultTheme, { border: 'none' })
    expect(value.border).toEqual('none')
  })

  it('border with colorScheme', () => {
    const value = sx(defaultTheme, { border: 'primary' })
    const color = defaultTheme.colorScheme.primary[500]

    expect(value.border).toEqual(`1px solid ${color}`)
  })

  it('border-top', () => {
    const value = sx(defaultTheme, { borderTop: 'primary' })
    const color = defaultTheme.colorScheme.primary[500]

    expect(value.borderTop).toEqual(`1px solid ${color}`)
  })

  it('border-bottom', () => {
    const value = sx(defaultTheme, { borderBottom: 'primary' })
    const color = defaultTheme.colorScheme.primary[500]

    expect(value.borderBottom).toEqual(`1px solid ${color}`)
  })

  it('border-left', () => {
    const value = sx(defaultTheme, { borderLeft: 'primary' })
    const color = defaultTheme.colorScheme.primary[500]

    expect(value.borderLeft).toEqual(`1px solid ${color}`)
  })

  it('border-right', () => {
    const value = sx(defaultTheme, { borderRight: 'primary' })
    const color = defaultTheme.colorScheme.primary[500]

    expect(value.borderRight).toEqual(`1px solid ${color}`)
  })
})

describe('Spacing Handler', () => {
  it('value as theme spacing', () => {
    const value = sx(defaultTheme, { margin: 1 })
    const expected = defaultTheme.spacing(1)

    expect(value.margin).toEqual(expected)
  })

  it('value as literal', () => {
    const value = sx(defaultTheme, { margin: '10px' })
    expect(value.margin).toEqual('10px')
  })

  describe('Properties', () => {
    const expected = defaultTheme.spacing(2)
    const expected2 = `${expected} ${expected}`
    const expected4 = `${expected2} ${expected2}`

    it('margin', () => {
      const value = sx(defaultTheme, { margin: 2 })
      expect(value.margin).toEqual(expected)
    })

    it('margin with 2 values', () => {
      const value = sx(defaultTheme, { margin: '2 2' })
      expect(value.margin).toEqual(expected2)
    })

    it('margin with 4 values', () => {
      const value = sx(defaultTheme, { margin: '2 2 2 2' })
      expect(value.margin).toEqual(expected4)
    })

    it('marginTop', () => {
      const value = sx(defaultTheme, { marginTop: '2' })
      expect(value.marginTop).toEqual(expected)
    })

    it('marginBottom', () => {
      const value = sx(defaultTheme, { marginBottom: '2' })
      expect(value.marginBottom).toEqual(expected)
    })

    it('marginLeft', () => {
      const value = sx(defaultTheme, { marginLeft: '2' })
      expect(value.marginLeft).toEqual(expected)
    })

    it('marginRight', () => {
      const value = sx(defaultTheme, { marginRight: '2' })
      expect(value.marginRight).toEqual(expected)
    })

    it('padding', () => {
      const value = sx(defaultTheme, { padding: '2' })
      expect(value.padding).toEqual(expected)
    })

    it('padding with 2 values', () => {
      const value = sx(defaultTheme, { padding: '2 2' })
      expect(value.padding).toEqual(expected2)
    })

    it('padding with 4 values', () => {
      const value = sx(defaultTheme, { padding: '2 2 2 2' })
      expect(value.padding).toEqual(expected4)
    })

    it('paddingTop', () => {
      const value = sx(defaultTheme, { paddingTop: '2' })
      expect(value.paddingTop).toEqual(expected)
    })

    it('paddingBottom', () => {
      const value = sx(defaultTheme, { paddingBottom: '2' })
      expect(value.paddingBottom).toEqual(expected)
    })

    it('paddingLeft', () => {
      const value = sx(defaultTheme, { paddingLeft: '2' })
      expect(value.paddingLeft).toEqual(expected)
    })

    it('paddingRight', () => {
      const value = sx(defaultTheme, { paddingRight: '2' })
      expect(value.paddingRight).toEqual(expected)
    })
  })
})

describe('Alias', () => {
  it('m', () => {
    const value = sx(defaultTheme, { m: 2 })
    expect(value.margin).toBe(defaultTheme.spacing(2))
  })

  it('mt', () => {
    const value = sx(defaultTheme, { mt: 2 })
    expect(value.marginTop).toBe(defaultTheme.spacing(2))
  })

  it('mb', () => {
    const value = sx(defaultTheme, { mb: 2 })
    expect(value.marginBottom).toBe(defaultTheme.spacing(2))
  })

  it('ml', () => {
    const value = sx(defaultTheme, { ml: 2 })
    expect(value.marginLeft).toBe(defaultTheme.spacing(2))
  })

  it('mr', () => {
    const value = sx(defaultTheme, { mr: 2 })
    expect(value.marginRight).toBe(defaultTheme.spacing(2))
  })

  it('mx', () => {
    const value = sx(defaultTheme, { mx: 2 })
    expect(value.marginInline).toBe(defaultTheme.spacing(2))
  })

  it('my', () => {
    const value = sx(defaultTheme, { my: 2 })
    expect(value.marginBlock).toBe(defaultTheme.spacing(2))
  })

  it('p', () => {
    const value = sx(defaultTheme, { p: 2 })
    expect(value.padding).toBe(defaultTheme.spacing(2))
  })

  it('pt', () => {
    const value = sx(defaultTheme, { pt: 2 })
    expect(value.paddingTop).toBe(defaultTheme.spacing(2))
  })

  it('pb', () => {
    const value = sx(defaultTheme, { pb: 2 })
    expect(value.paddingBottom).toBe(defaultTheme.spacing(2))
  })

  it('pl', () => {
    const value = sx(defaultTheme, { pl: 2 })
    expect(value.paddingLeft).toBe(defaultTheme.spacing(2))
  })

  it('pr', () => {
    const value = sx(defaultTheme, { pr: 2 })
    expect(value.paddingRight).toBe(defaultTheme.spacing(2))
  })

  it('px', () => {
    const value = sx(defaultTheme, { px: 2 })
    expect(value.paddingInline).toBe(defaultTheme.spacing(2))
  })

  it('py', () => {
    const value = sx(defaultTheme, { py: 2 })
    expect(value.paddingBlock).toBe(defaultTheme.spacing(2))
  })

  it('r', () => {
    const value = sx(defaultTheme, { r: 'sm' })
    expect(value.borderRadius).toBe(defaultTheme.radius.sm)
  })

  it('rtl', () => {
    const value = sx(defaultTheme, { rtl: 'sm' })
    expect(value.borderTopLeftRadius).toBe(defaultTheme.radius.sm)
  })

  it('rbl', () => {
    const value = sx(defaultTheme, { rbl: 'sm' })
    expect(value.borderBottomLeftRadius).toBe(defaultTheme.radius.sm)
  })

  it('rtr', () => {
    const value = sx(defaultTheme, { rtr: 'sm' })
    expect(value.borderTopRightRadius).toBe(defaultTheme.radius.sm)
  })

  it('rbr', () => {
    const value = sx(defaultTheme, { rbr: 'sm' })
    expect(value.borderBottomRightRadius).toBe(defaultTheme.radius.sm)
  })
})

describe('Breakpoints by Properties', () => {
  const { sm, md } = defaultTheme.breakpoint

  it('using css attribues', () => {
    const style = { margin: ['10px', '20px', '30px'] }
    const value = sx(defaultTheme, style)

    expect(value.margin).toBe('10px')
    expect(value[`@media (max-width:${md}px)`]).toEqual({ margin: '20px' })
    expect(value[`@media (max-width:${sm}px)`]).toEqual({ margin: '30px' })
  })

  it('using sx alias', () => {
    const style = { p: [1, 3, 5] }
    const value = sx(defaultTheme, style)

    expect(value.padding).toBe(defaultTheme.spacing(1))
    expect(value[`@media (max-width:${md}px)`]).toEqual({ padding: defaultTheme.spacing(3) })
    expect(value[`@media (max-width:${sm}px)`]).toEqual({ padding: defaultTheme.spacing(5) })
  })
})

describe('Breakpoints by MediaQuery', () => {
  describe('up', () => {
    it.each(['sm', 'md', 'lg'])('lg', (key) => {
      const minWidth = defaultTheme.breakpoint[key as OneOfBreakpoints]

      const value = sx(defaultTheme, { [`up(${key})`]: { margin: '0px' } })
      expect(value[`@media (min-width:${minWidth}px)`]).toEqual({ margin: '0px' })
    })
  })

  describe('down', () => {
    it.each(['sm', 'md', 'lg'])('lg', (key) => {
      const maxWidth = defaultTheme.breakpoint[key as OneOfBreakpoints]

      const value = sx(defaultTheme, { [`down(${key})`]: { margin: '0px' } })
      expect(value[`@media (max-width:${maxWidth}px)`]).toEqual({ margin: '0px' })
    })
  })
})
