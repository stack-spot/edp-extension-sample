import 'jest-styled-components'
import { createRef } from 'react'
import Label from '../src/Label'
import { buildThemeWithComponents, render } from './react'

test('should render a Label component', () => {
  const { container } = render(<Label>foo</Label>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      margin: 0;
    }

    .c1 {
      margin-bottom: 0.25rem;
      align-items: center;
      vertical-align: top;
      display: flex;
    }

    .c1[for] {
      cursor: pointer;
    }

    <label
      class="c0 c1"
    >
      foo
    </label>
  `)
})

test('should render a Label spreading props in root element', () => {
  const { container } = render(<Label id="bar">foo</Label>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Label using ref', () => {
  const ref = createRef<HTMLLabelElement>()
  const { container } = render(<Label ref={ref}>foo</Label>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Label using AsProp', () => {
  const { container } = render(
    <Label as="a" href="#">
      foo
    </Label>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

test('should render a Label using inline as true', () => {
  const { container } = render(<Label inline>foo</Label>)

  expect(container.firstChild).toHaveStyleRule('display', 'inline-flex')
})

test('should accept Text props', () => {
  const { container } = render(
    <Label weight="bold" colorScheme="primary" align="center">
      foo
    </Label>,
  )

  expect(container.firstChild).toBeInTheDocument()
})

test('should render Label disabled', () => {
  const { container } = render(<Label disabled>foo</Label>)

  expect(container.firstChild).toHaveStyleRule('opacity', '0.24')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Label', 'base', {
      color: 'azure',
    })

    const { container } = render(<Label>foo</Label>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'azure')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Label', 'overwrite', {
      color: 'cadetblue',
    })

    const { container } = render(<Label colorScheme="primary">foo</Label>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'cadetblue')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Label sx={{ color: 'crimson' }}>foo</Label>)

    expect(container.firstChild).toHaveStyleRule('color', 'crimson')
  })
})
