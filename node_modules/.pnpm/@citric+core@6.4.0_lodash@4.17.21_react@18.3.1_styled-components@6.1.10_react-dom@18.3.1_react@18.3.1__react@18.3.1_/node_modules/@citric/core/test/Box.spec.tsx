import 'jest-styled-components'
import { createElement, createRef } from 'react'
import Box from '../src/Box'
import { alias } from '../src/sx'
import { buildThemeWithComponents, render } from './react'

test('should render a Box component', () => {
  const { container } = render(<Box>foo</Box>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    <div
      class="c0"
    >
      foo
    </div>
  `)
})

test('should render a Box spreading props in root element', () => {
  const { container } = render(<Box id="bar">foo</Box>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Box using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Box ref={ref}>foo</Box>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Box using AsProp', () => {
  const { container } = render(
    <Box as="a" href="#">
      foo
    </Box>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

test('should render a Box using prop flexGrow', () => {
  const { container } = render(<Box flexGrow={1}>foo</Box>)
  expect(container.firstChild).toHaveStyleRule('flex-grow', '1')
})

test('should render a Box using prop textAlign', () => {
  const { container } = render(<Box textAlign="center">foo</Box>)
  expect(container.firstChild).toHaveStyleRule('text-align', 'center')
})

test.each([
  [1, '8.333333333333332%'],
  [2, '16.666666666666664%'],
  [3, '25%'],
  [4, '33.33333333333333%'],
  [5, '41.66666666666667%'],
  [6, '50%'],
  [7, '58.333333333333336%'],
  [8, '66.66666666666666%'],
  [9, '75%'],
  [10, '83.33333333333334%'],
  [11, '91.66666666666666%'],
  [12, '100%'],
])('should render a Box with width prop as %i', (width, expected) => {
  const { container } = render(<Box width={width}>foo</Box>)
  expect(container.firstChild).toHaveStyleRule('width', expected)
})

describe('Sx Alias as props', () => {
  it.each(Object.entries(alias))('%s', (sxAlias, property) => {
    const { container } = render(createElement(Box, { [sxAlias]: 'foo' }, 'bar'))
    expect(container.firstChild).toHaveStyle({ [property]: 'foo' })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Box', 'base', {
      padding: '100px',
    })

    const { container } = render(<Box>foo</Box>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Box', 'overwrite', {
      backgroundColor: 'aliceblue',
    })

    const { container } = render(<Box>foo</Box>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aliceblue')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Box sx={{ border: '1px solid red' }}>foo</Box>)

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})
