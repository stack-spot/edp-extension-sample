import { Property } from 'csstype'
import 'jest-styled-components'
import { createElement, createRef } from 'react'
import Text from '../src/Text'
import defaultTheme from '../src/default-theme'
import { alias } from '../src/sx'
import {
  FontAppearance,
  OneOfColorSchemes,
  OneOfFontAppearances,
  OneOfFontWeights,
} from '../src/theme-types'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]
const fontWeights = Object.keys(defaultTheme.font.weight) as OneOfFontWeights[]
const fontAppearances = Object.entries(defaultTheme.font.appearance) as Array<
  [OneOfFontAppearances, FontAppearance]
>

const aligns: Property.TextAlign[] = ['left', 'right', 'center', 'justify']

test('should render a Text component', () => {
  const { container } = render(<Text>foo</Text>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      margin: 0;
    }

    <p
      class="c0"
    >
      foo
    </p>
  `)
})

test('should render a Text spreading props in root element', () => {
  const { container } = render(<Text id="bar">foo</Text>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Text using ref', () => {
  const ref = createRef<HTMLParagraphElement>()
  const { container } = render(<Text ref={ref}>foo</Text>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Text using AsProp', () => {
  const { container } = render(
    <Text as="a" href="#">
      foo
    </Text>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

describe('Weight Prop', () => {
  it.each(fontWeights)('as %s', (weight) => {
    const { container } = render(<Text weight={weight}>foo</Text>)
    const expected = defaultTheme.font.weight[weight].toString()

    expect(container.firstChild).toHaveStyleRule('font-weight', expected)
  })
})

describe('Align Prop', () => {
  it.each(aligns)('as %s', (align) => {
    const { container } = render(<Text align={align}>foo</Text>)

    expect(container.firstChild).toHaveStyleRule('text-align', align)
  })
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorScheme) => {
    const { container } = render(<Text colorScheme={colorScheme}>foo</Text>)
    const expected = defaultTheme.colorScheme[colorScheme]['500']

    expect(container.firstChild).toHaveStyleRule('color', expected)
  })
})

describe('Appearance Prop', () => {
  it.each(fontAppearances)('as %s', (appearance, values) => {
    const { container } = render(<Text appearance={appearance}>foo</Text>)

    const { weight, size, family, lineHeight, textTransform, letterSpacing } = values
    const fontWeight = defaultTheme.font.weight[weight]
    const fontFamily = defaultTheme.font.family[family]

    const expected = `${fontWeight} ${size}/${lineHeight} ${fontFamily}`

    expect(container.firstChild).toHaveStyleRule('font', expected)
    expect(container.firstChild).toHaveStyleRule('text-transform', textTransform)
    expect(container.firstChild).toHaveStyleRule('letter-spacing', letterSpacing)
  })
})

describe('GutterBottom Prop', () => {
  it('as true', () => {
    const { container } = render(<Text gutterBottom>foo</Text>)

    expect(container.firstChild).toHaveStyleRule('margin-bottom', '0.35rem')
  })
})

describe('Sx Alias as props', () => {
  it.each(Object.entries(alias))('%s', (sxAlias, property) => {
    const { container } = render(createElement(Text, { [sxAlias]: 'foo' }, 'bar'))
    expect(container.firstChild).toHaveStyle({ [property]: 'foo' })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Text', 'base', {
      color: 'mediumpurple',
    })

    const { container } = render(<Text>foo</Text>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Text', 'overwrite', {
      color: 'mediumpurple',
    })

    const { container } = render(<Text colorScheme="primary">foo</Text>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Text sx={{ color: 'mediumpurple' }}>foo</Text>)

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
