import 'jest-styled-components'
import { createRef } from 'react'
import Divider from '../src/Divider'
import defaultTheme from '../src/default-theme'
import { buildThemeWithComponents, render } from './react'

test('should render a Divider component', () => {
  const { container } = render(<Divider />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      margin: 0;
      border-width: 0;
      border-color: #262631;
      border-style: solid;
      border-top-width: 1px;
    }

    <hr
      class="c0"
    />
  `)
})

test('should render a Divider spreading props in root element', () => {
  const { container } = render(<Divider id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Divider using ref', () => {
  const ref = createRef<HTMLHRElement>()
  const { container } = render(<Divider ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Divider with colorScheme', () => {
  const { container } = render(<Divider colorScheme="primary" />)
  const expected = defaultTheme.colorScheme.primary['500']

  expect(container.firstChild).toHaveStyleRule('border-color', expected)
})

test('should render a Divider with vertical as true', () => {
  const { container } = render(<Divider vertical />)

  expect(container.firstChild).toHaveStyleRule('border-right-width', '1px')
  expect(container.firstChild).toHaveStyleRule('border-top-width', undefined)
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Divider', 'base', {
      margin: '100px',
    })

    const { container } = render(<Divider />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('margin', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Divider', 'overwrite', {
      borderTop: '1px solid red',
    })

    const { container } = render(<Divider />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('border-top', '1px solid #FF0000')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Divider sx={{ border: '1px solid red' }} />)

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})
