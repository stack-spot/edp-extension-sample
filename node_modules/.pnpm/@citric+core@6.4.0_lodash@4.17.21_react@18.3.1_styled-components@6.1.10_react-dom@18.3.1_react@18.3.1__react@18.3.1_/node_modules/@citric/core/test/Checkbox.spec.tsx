import 'jest-styled-components'
import { createRef } from 'react'
import Checkbox from '../src/Checkbox'
import { buildThemeWithComponents, render } from './react'

test('should render a Checkbox component', () => {
  const { container } = render(<Checkbox />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      appearance: none;
      position: relative;
      box-sizing: border-box;
      width: 1.25rem;
      height: 1.25rem;
      border-radius: 0.125rem;
      border: 1px solid #FAFAFB;
      background-color: #262631;
      cursor: pointer;
    }

    .c0:disabled {
      opacity: 0.24;
      pointer-events: none;
    }

    .c0:checked {
      border-color: #707075;
      background-color: #D1D1DE;
    }

    .c0:checked:after {
      content: '';
      top: 0.18rem;
      left: 0.359rem;
      width: 0.236rem;
      height: 0.471rem;
      position: absolute;
      border-bottom: 2px solid #0B0B0E;
      border-right: 2px solid #0B0B0E;
      transform: rotate(45deg);
    }

    <input
      class="c0"
      type="checkbox"
    />
  `)
})

test('should render a Checkbox spreading props in root element', () => {
  const { container } = render(<Checkbox id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Checkbox using ref', () => {
  const ref = createRef<HTMLInputElement>()
  const { container } = render(<Checkbox ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Checkbox with disabled prop as true', () => {
  const { container } = render(<Checkbox disabled />)

  expect(container.firstChild).toHaveAttribute('disabled')

  expect(container.firstChild).toHaveStyleRule('opacity', '0.24', {
    modifier: ':disabled',
  })
  expect(container.firstChild).toHaveStyleRule('pointer-events', 'none', {
    modifier: ':disabled',
  })
})

test('should render a Checkbox with checked prop as true', () => {
  const { container } = render(<Checkbox checked onChange={jest.fn()} />)

  expect(container.firstChild).toHaveAttribute('checked')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Checkbox', 'base', {
      padding: '100px',
    })

    const { container } = render(<Checkbox />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Checkbox', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(<Checkbox />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<Checkbox sx={{ backgroundColor: 'mediumpurple' }} />)

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })
})
