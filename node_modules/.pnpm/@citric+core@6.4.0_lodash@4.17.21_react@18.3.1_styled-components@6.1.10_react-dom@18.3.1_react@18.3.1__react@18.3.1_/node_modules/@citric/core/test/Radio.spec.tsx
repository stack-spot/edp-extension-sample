import 'jest-styled-components'
import { createRef } from 'react'
import Radio from '../src/Radio'
import { buildThemeWithComponents, render } from './react'

test('should render a Radio component', () => {
  const { container } = render(<Radio />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      appearance: none;
      display: inline-flex;
      width: 1.25rem;
      height: 1.25rem;
      cursor: pointer;
      margin: 0;
      box-sizing: border-box;
      position: relative;
      background-color: #14141A;
      border: 2px solid #FAFAFB;
      border-radius: 2rem;
    }

    .c0:disabled {
      opacity: 0.24;
      pointer-events: none;
    }

    .c0:checked {
      background-color: #14141A;
      border-color: #D1D1DE;
    }

    .c0:checked:after {
      display: inline-flex;
      width: 0.5rem;
      height: 0.5rem;
      top: 4px;
      left: 4px;
      position: absolute;
      background-color: #FAFAFB;
      border-radius: 2rem;
      content: '';
      visibility: visible;
    }

    <input
      class="c0"
      type="radio"
    />
  `)
})

test('should render a Radio spreading props in root element', () => {
  const { container } = render(<Radio id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Radio using ref', () => {
  const ref = createRef<HTMLInputElement>()
  const { container } = render(<Radio ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Radio', 'base', {
      padding: '100px',
    })

    const { container } = render(<Radio />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Radio', 'overwrite', {
      backgroundColor: 'aliceblue',
    })

    const { container } = render(<Radio />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aliceblue')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<Radio sx={{ backgroundColor: 'blueviolet' }} />)
    expect(container.firstChild).toHaveStyleRule('background-color', 'blueviolet')
  })
})
