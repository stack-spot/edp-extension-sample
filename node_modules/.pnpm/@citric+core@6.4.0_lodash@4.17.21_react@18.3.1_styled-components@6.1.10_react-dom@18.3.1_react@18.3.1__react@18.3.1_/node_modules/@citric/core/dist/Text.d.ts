/// <reference types="react" />
import { Property } from 'csstype';
import { SxProp } from './component-style.js';
import { AsProp } from './forward-ref-as.js';
import { OneOfColorSchemes, OneOfColorSchemesWithVariants, OneOfFontAppearances, OneOfFontWeights } from './theme-types.js';
import { SxAliasProps } from './utils/sx-props.js';
export interface Props {
    sx?: SxProp;
    as?: AsProp;
    colorScheme?: OneOfColorSchemes | OneOfColorSchemesWithVariants;
    appearance?: OneOfFontAppearances;
    weight?: OneOfFontWeights;
    align?: Property.TextAlign;
    gutterBottom?: boolean;
    nowrapEllipsis?: boolean;
}
export type TextProps = Props & SxAliasProps;
export declare const Text: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("styled-components/dist/types").Substitute<import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
    ref?: ((instance: HTMLParagraphElement | null) => void) | import("react").RefObject<HTMLParagraphElement> | null | undefined;
}>, TextProps>, TextProps>> & string;
export default Text;
//# sourceMappingURL=Text.d.ts.map