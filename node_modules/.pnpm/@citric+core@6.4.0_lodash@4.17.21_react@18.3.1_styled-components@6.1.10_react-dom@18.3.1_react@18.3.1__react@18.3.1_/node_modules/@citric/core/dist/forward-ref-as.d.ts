import { ElementType, ForwardRefRenderFunction, ComponentPropsWithRef, JSXElementConstructor } from 'react';
export type AsProp = ElementType;
type PropsOf<E extends keyof JSX.IntrinsicElements | JSXElementConstructor<unknown>> = JSX.LibraryManagedAttributes<E, ComponentPropsWithRef<E>>;
export interface OwnProps<E extends ElementType = ElementType> {
    as?: E;
}
type FinalProps<E extends ElementType, Props> = OwnProps<E> & Omit<PropsOf<E>, keyof (OwnProps & Props)>;
type ForwardRef<Props, DefaultAs extends ElementType> = <E extends ElementType = DefaultAs>(props: Props & FinalProps<E, Props>, ref: any) => JSX.Element;
declare function forwardRefAs<Props, DefaultAs extends ElementType>(render: ForwardRefRenderFunction<any, Props>): ForwardRef<Props, DefaultAs>;
export default forwardRefAs;
//# sourceMappingURL=forward-ref-as.d.ts.map