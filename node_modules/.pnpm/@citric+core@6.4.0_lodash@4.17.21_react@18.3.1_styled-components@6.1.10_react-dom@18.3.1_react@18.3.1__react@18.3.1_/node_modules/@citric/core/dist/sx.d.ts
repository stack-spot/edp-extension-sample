import { Properties, Property, SimplePseudos } from 'csstype';
import { CSSObject } from 'styled-components';
import { OneOfFontAppearances, OneOfFontWeights, OneOfRadius, Theme } from './theme-types.js';
export type Spacing = number;
export type Spacing2 = `${Spacing} ${Spacing}`;
export type Radius = OneOfRadius;
export type Radius2 = `${Radius} ${Radius}`;
export type Radius4 = `${Radius2} ${Radius2}`;
type SxCssProperty<T> = T | T[];
export interface SxCssProperties {
    width?: SxCssProperty<Property.Width | number>;
    color?: SxCssProperty<Property.Color>;
    margin?: SxCssProperty<Spacing | Spacing2 | Property.Margin>;
    marginLeft?: SxCssProperty<Spacing | Property.MarginLeft>;
    marginRight?: SxCssProperty<Spacing | Property.MarginRight>;
    marginTop?: SxCssProperty<Spacing | Property.MarginTop>;
    marginBottom?: SxCssProperty<Spacing | Property.MarginBottom>;
    padding?: SxCssProperty<Spacing | Spacing2 | Property.Padding>;
    paddingLeft?: SxCssProperty<Spacing | Property.PaddingLeft>;
    paddingRight?: SxCssProperty<Spacing | Property.PaddingRight>;
    paddingTop?: SxCssProperty<Spacing | Property.PaddingTop>;
    paddingBottom?: SxCssProperty<Spacing | Property.PaddingBottom>;
    borderRadius?: SxCssProperty<Radius | Radius4 | Property.BorderRadius>;
    borderTopLeftRadius?: SxCssProperty<Radius | Property.BorderTopLeftRadius>;
    borderTopRightRadius?: SxCssProperty<Radius | Property.BorderTopRightRadius>;
    borderBottomLeftRadius?: SxCssProperty<Radius | Property.BorderBottomLeftRadius>;
    borderBottomRightRadius?: SxCssProperty<Radius | Property.BorderBottomRightRadius>;
    font?: SxCssProperty<OneOfFontAppearances | Property.Font>;
    fontWeight?: SxCssProperty<OneOfFontWeights | Property.FontWeight>;
}
interface BrekapointAlias {
    'up(sm)'?: SxProperties;
    'up(md)'?: SxProperties;
    'up(lg)'?: SxProperties;
    'down(sm)'?: SxProperties;
    'down(md)'?: SxProperties;
    'down(lg)'?: SxProperties;
}
export interface SxCssAlias extends BrekapointAlias {
    w?: Property.Width | number;
    m?: Spacing | Spacing2 | Property.Margin;
    ml?: Spacing | Property.MarginLeft;
    mr?: Spacing | Property.MarginRight;
    mt?: Spacing | Property.MarginTop;
    mb?: Spacing | Property.MarginBottom;
    mx?: Spacing | Property.MarginBlock;
    my?: Spacing | Property.MarginInline;
    p?: Spacing | Spacing2 | Property.Padding;
    pl?: Spacing | Property.PaddingLeft;
    pr?: Spacing | Property.PaddingRight;
    pt?: Spacing | Property.PaddingTop;
    pb?: Spacing | Property.Bottom;
    px?: Spacing | Property.PaddingBlock;
    py?: Spacing | Property.PaddingInline;
    bg?: Property.Color | Property.BackgroundColor;
    r?: Radius | Radius4 | Property.BorderRadius;
    rtl?: Radius | Property.BorderTopLeftRadius;
    rbl?: Radius | Property.BorderBottomLeftRadius;
    rtr?: Radius | Property.BorderTopRightRadius;
    rbr?: Radius | Property.BorderBottomRightRadius;
}
type CssProperties = Omit<Properties, keyof SxCssProperties> & SxCssProperties & SxCssAlias;
type CssPropertiesWithArray = {
    [K in keyof CssProperties]?: CssProperties[K] | Array<CssProperties[K]>;
};
type Pseudo = {
    [P in SimplePseudos]?: CssPropertiesWithArray;
};
export type SxProperties = CssPropertiesWithArray & Pseudo;
export declare function handleSxColor(theme: Theme, value?: string): any;
export declare function handleSxSpacing(theme: Theme, value?: number | string): string;
export declare function handleSxRadius(theme: Theme, value?: string): string;
export declare function handleSxWidth(_theme: Theme, value?: string | number): string;
export declare function handleSxFontWeight(theme: Theme, value?: string): any;
export declare function handleSxContent(theme: Theme, value?: string): string | undefined;
export declare function handleSxFont(theme: Theme, value?: string): string | undefined;
export declare function handleSxBorder(theme: Theme, value?: string): string;
export declare function handleSxBoxShadow(theme: Theme, value?: string): string;
export declare const alias: {
    w: string;
    m: string;
    mt: string;
    mb: string;
    ml: string;
    mr: string;
    mx: string;
    my: string;
    p: string;
    pt: string;
    pb: string;
    pl: string;
    pr: string;
    px: string;
    py: string;
    bg: string;
    r: string;
    rtl: string;
    rbl: string;
    rtr: string;
    rbr: string;
};
export declare function sx(theme: Theme, props?: SxProperties): CSSObject;
export {};
//# sourceMappingURL=sx.d.ts.map