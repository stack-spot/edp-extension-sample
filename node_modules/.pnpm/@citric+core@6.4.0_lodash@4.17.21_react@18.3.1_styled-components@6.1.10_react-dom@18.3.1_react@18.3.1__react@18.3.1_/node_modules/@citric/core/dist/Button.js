import { jsx as _jsx } from "react/jsx-runtime";
import { extendStyle, overwriteStyle } from './component-style.js';
import forwardRefAs from './forward-ref-as.js';
import { css, styled } from './styled.js';
import { defaultConfig } from './utils/config.js';
import { getColor, getFontStyle, getFontWeight, getRadius, getSpacing } from './utils/theme.js';
const ButtonStyled = styled.button.withConfig(defaultConfig) `
  height: fit-content;
  display: inline-flex;
  border-radius: ${({ theme }) => getRadius(theme, 'xs')};
  align-items: center;
  user-select: none;
  text-decoration: none;
  box-sizing: border-box;
  justify-content: center;
  cursor: pointer;
  border-width: 1px;
  border-style: solid;
  white-space: nowrap;
  font: ${({ theme }) => getFontStyle(theme, 'button')};

  ${(props) => props.disabled
    ? css `
          opacity: 0.24;
          pointer-events: none;
        `
    : ''}

  & + & {
    margin-left: 0.5rem;
  }

  width: ${(props) => props.block && '100%'};

  ${({ theme, appearance = 'contained', colorScheme = 'primary' }) => buttonStyles[appearance](theme, colorScheme)};

  ${({ theme, size = 'lg' }) => buttonSizes[size](theme)}

  ${extendStyle('Button')};
  ${overwriteStyle('Button')};
`;
const buttonSizes = {
    lg: (theme) => css `
    padding-inline: ${getSpacing(theme, 4)};
    padding-block: ${getSpacing(theme, 3)};
  `,
    md: (theme) => css `
    padding-inline: ${getSpacing(theme, 3)};
    padding-block: ${getSpacing(theme, 2)};
    font: ${getFontStyle(theme, 'body2')};
    font-weight: ${getFontWeight(theme, 'medium')};
  `,
    sm: (theme) => css `
    padding-inline: ${getSpacing(theme, 3)};
    padding-block: ${getSpacing(theme, 2)};
    font: ${getFontStyle(theme, 'microtext1')};
  `,
};
const buttonStyles = {
    contained: (theme, colorScheme) => css `
    color: ${getColor(theme, `${String(colorScheme)}.contrastText`)};
    background-color: ${getColor(theme, colorScheme)};
    border-color: ${getColor(theme, colorScheme)};

    &:active,
    &:focus,
    &:hover {
      background-color: ${getColor(theme, `${String(colorScheme)}.400`)};
      border-color: ${getColor(theme, `${String(colorScheme)}.400`)};
    }
  `,
    outlined: (theme, colorScheme) => css `
    color: ${getColor(theme, String(colorScheme))};
    background-color: transparent;
    border-color: ${getColor(theme, String(colorScheme))};

    &:active,
    &:focus,
    &:hover {
      background-color: ${getColor(theme, colorScheme)};
      color: ${getColor(theme, `${String(colorScheme)}.contrastText`)};
      svg {
        fill: ${getColor(theme, `${String(colorScheme)}.contrastText`)};
      }
    }
    &:focus {
      outline: 1px solid ${getColor(theme, 'primary')};
    }
  `,
    text: (theme, colorScheme) => css `
    color: ${getColor(theme, String(colorScheme))};
    background-color: transparent;
    border-color: transparent;

    &:active,
    &:focus,
    &:hover {
      border-color: ${getColor(theme, `${String(colorScheme)}.500`)};
    }
  `,
};
const Button = forwardRefAs(({ as = 'button', ...props }, ref) => (_jsx(ButtonStyled, { as: as, ref: ref, ...props })));
export default Button;
//# sourceMappingURL=Button.js.map