import { ReactNode } from 'react';
import { Props as TextProps } from './Text.js';
interface Props extends TextProps {
    inline?: boolean;
    disabled?: boolean;
    children?: ReactNode;
}
export declare const LabelStyle: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("styled-components/dist/types").FastOmit<import("styled-components/dist/types").Substitute<import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
    ref?: ((instance: HTMLParagraphElement | null) => void) | import("react").RefObject<HTMLParagraphElement> | null | undefined;
}>, import("./Text.js").TextProps>, keyof import("./sx.js").SxCssAlias | keyof TextProps> & TextProps & import("./utils/sx-props.js").SxAliasProps, Props>> & string;
declare const Label: <E extends import("react").ElementType = "label">(props: Props & import("./forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof Props>, ref: any) => JSX.Element;
export default Label;
//# sourceMappingURL=Label.d.ts.map