/**
 * Removes the first occurrence of `element` from the `array`.
 *
 * This modifies the array passed as parameter.
 * @param array the array to modify.
 * @param element the element to remove (SameValueZero).
 * @returns true if the element was removed, false otherwise.
 */
export declare function removeElementFromArray<T>(array: T[], element: T): boolean;
/**
 * Compares route `a` with route `b` according to their level in the navigation structure.
 *
 * - If route `a` is deeper than route `b`, than this function returns a negative number.
 * - If route `b` is deeper than route `a`, than this function returns a positive number.
 * - If routes `a` and `b` are at the same level, 0 is returned.
 *
 * In general, this returns `level_of_route_b - level_of_route_a`, where the level is number of elements of the key when splitted by ".".
 *
 * This is used to order a list from more specific routes (deeper) to less specific routes (shallower).
 * @param a the key of the first route to compare.
 * @param b the key of the route to compare `a` with.
 * @returns the level of b minus the level of a.
 */
export declare function compareRouteKeysDesc(a: {
    key: string;
    handler: (...args: any) => any;
}, b: {
    key: string;
    handler: (...args: any) => any;
}): number;
/**
 * Splits a path into several parts. A path is split according to the character "/".
 *
 * @param path the path to split.
 * @returns an array with every part of the path.
 */
export declare function splitPath(path?: string): string[];
//# sourceMappingURL=utils.d.ts.map