const empty = Symbol('empty');
/**
 * A Linked List ordered according to the comparator passed to the constructor.
 */
export class LinkedList {
    constructor(compare) {
        Object.defineProperty(this, "root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { value: empty }
        });
        Object.defineProperty(this, "compare", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.compare = compare;
    }
    /**
     * Adds a new element to the linked list.
     *
     * This performs an ordered insertion, costing O(n) in the worst case.
     * @param element the element to add
     */
    push(element) {
        let prev = this.root;
        while (prev) {
            if (!prev.next) {
                prev.next = { value: element };
                return;
            }
            const comparison = this.compare(element, prev.next.value);
            if (comparison <= 0) {
                const newItem = { value: element, next: prev.next };
                prev.next = newItem;
                return;
            }
            prev = prev.next;
        }
    }
    /**
     * Finds the first element where the predicate returns true.
     *
     * Remember that this data structure is ordered and the element returned will depend on the comparison function passed to the constructor.
     * @param predicate the function that looks for an element.
     * @returns the element found or undefined if no element meets the predicate.
     */
    find(predicate) {
        let current = this.root.next;
        while (current && !predicate(current.value))
            current = current.next;
        return current?.value;
    }
}
//# sourceMappingURL=LinkedList.js.map