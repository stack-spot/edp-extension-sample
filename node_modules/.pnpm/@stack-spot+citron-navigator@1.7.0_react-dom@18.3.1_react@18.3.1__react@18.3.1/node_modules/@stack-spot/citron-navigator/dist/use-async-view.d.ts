import { FunctionComponent, ReactNode } from 'react';
interface AsyncViewConfig {
    /**
     * A component to render when the view can't be loaded (error).
     *
     * This component receives the prop "refresh" which is a function that refreshes the app when called.
     */
    ErrorComponent?: FunctionComponent<{
        refresh: () => void;
    }>;
    /**
     * Whether or not to automatically refresh the view with cache disabled when an error occurs.
     *
     * If another error happens after refreshing, the `errorComponent` is rendered, it doesn't refresh again.
     */
    shouldRefreshOnError?: boolean;
    /**
     * The initial value for `content`.
     */
    initial?: ReactNode;
}
/**
 * A hook for helping loading views asynchronously.
 *
 * Example:
 * ```tsx
 * const PageRenderer = () => {
 *   const { load, content } = useAsyncView({ ErrorComponent: UnderMaintenance })
 *   useNavigationContext((context) => {
 *     context.when('root', props => load(() => import('./Home'), 'Home', props))
 *   })
 *   return content
 * }
 * ```
 * @param options the options for loading async views.
 * @returns the values and functions for manipulating the current view (content).
 */
export declare function useAsyncView({ ErrorComponent, shouldRefreshOnError, initial }?: AsyncViewConfig): {
    load: <Props extends object, Import extends Record<string, FunctionComponent<Props>>, Key extends keyof Import>(loader: () => Promise<Import>, key: Key, props: Props) => Promise<void>;
    content: ReactNode;
    setContent: import("react").Dispatch<import("react").SetStateAction<ReactNode>>;
};
export {};
//# sourceMappingURL=use-async-view.d.ts.map