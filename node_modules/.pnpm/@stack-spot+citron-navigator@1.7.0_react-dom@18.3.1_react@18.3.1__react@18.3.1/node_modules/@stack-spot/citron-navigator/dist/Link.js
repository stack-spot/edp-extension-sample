import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from 'react';
import { CitronNavigator } from './CitronNavigator.js';
export const Link = (props) => {
    const { to, params, href, children, target, onClick, onKeyDown, ...anchorProps } = props;
    const { actualHref, shouldActLikeSimpleAnchor } = useMemo(() => {
        const actualHref = to ? to.$link(params) : href;
        const isHashUrl = actualHref && /^\/?#/.test(actualHref);
        const isAbsoluteUrl = actualHref && /^\w+:\/\//.test(actualHref);
        const shouldActLikeSimpleAnchor = !actualHref || isHashUrl || (target && target != '_self') || isAbsoluteUrl;
        return { actualHref, shouldActLikeSimpleAnchor };
    }, [to?.$key, href, params]);
    if (shouldActLikeSimpleAnchor) {
        return _jsx("a", { href: actualHref, target: target, onClick: onClick, onKeyDown: onKeyDown, ...anchorProps, children: children });
    }
    function navigate(event) {
        event.preventDefault();
        history.pushState(null, '', actualHref);
        // since we called event.preventDefault(), we now must manually trigger a navigation update
        CitronNavigator.instance?.updateRoute?.();
    }
    function handleNavigationClick(event) {
        navigate(event);
        onClick?.(event);
    }
    function handleNavigationKeyDown(event) {
        if (event.key === 'Enter')
            navigate(event);
        onKeyDown?.(event);
    }
    return (_jsx("a", { href: actualHref, target: target, onClick: handleNavigationClick, onKeyDown: handleNavigationKeyDown, ...anchorProps, children: children }));
};
//# sourceMappingURL=Link.js.map