type Comparator<T> = (a: T, b: T) => number;
/**
 * A Linked List ordered according to the comparator passed to the constructor.
 */
export declare class LinkedList<T = any> {
    private root;
    private compare;
    constructor(compare: Comparator<T>);
    /**
     * Adds a new element to the linked list.
     *
     * This performs an ordered insertion, costing O(n) in the worst case.
     * @param element the element to add
     */
    push(element: T): void;
    /**
     * Finds the first element where the predicate returns true.
     *
     * Remember that this data structure is ordered and the element returned will depend on the comparison function passed to the constructor.
     * @param predicate the function that looks for an element.
     * @returns the element found or undefined if no element meets the predicate.
     */
    find(predicate: (element: T) => boolean): T | undefined;
}
export {};
//# sourceMappingURL=LinkedList.d.ts.map