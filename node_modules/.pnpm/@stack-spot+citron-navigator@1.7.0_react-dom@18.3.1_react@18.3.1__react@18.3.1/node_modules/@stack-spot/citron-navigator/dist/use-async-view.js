import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useState } from 'react';
// used to force the app to retrieve the latest version of index.html.
const refreshAppParam = 'update-app';
function isAppRefreshed() {
    return !!location.href.match(`[?&]${refreshAppParam}=\\d+`);
}
function refreshApp() {
    const now = new Date().getTime();
    const newUrl = isAppRefreshed()
        ? location.href.replace(new RegExp(`([?&]${refreshAppParam}=)\\d+`), `$1${now}`)
        : location.href.replace(/(\?.*)?$/, `$1${location.href.includes('?') ? '&' : '?'}${refreshAppParam}=${now}`);
    history.replaceState(null, '', newUrl);
    location.reload();
}
/**
 * A hook for helping loading views asynchronously.
 *
 * Example:
 * ```tsx
 * const PageRenderer = () => {
 *   const { load, content } = useAsyncView({ ErrorComponent: UnderMaintenance })
 *   useNavigationContext((context) => {
 *     context.when('root', props => load(() => import('./Home'), 'Home', props))
 *   })
 *   return content
 * }
 * ```
 * @param options the options for loading async views.
 * @returns the values and functions for manipulating the current view (content).
 */
export function useAsyncView({ ErrorComponent, shouldRefreshOnError = true, initial } = {}) {
    const [content, setContent] = useState(initial);
    const load = useCallback(async (loader, key, props) => {
        try {
            const View = (await loader())[key];
            setContent(_jsx(View, { ...props }));
        }
        catch (error) {
            if (!shouldRefreshOnError || isAppRefreshed()) {
                // eslint-disable-next-line no-console
                console.error(error);
                setContent(ErrorComponent ? _jsx(ErrorComponent, { refresh: refreshApp }) : _jsx("p", { children: "Error while loading the view." }));
                return;
            }
            // eslint-disable-next-line no-console
            console.warn('Error while loading page. This is probably because a new version of the site is available. Refreshing...');
            refreshApp();
        }
    }, []);
    return { load, content, setContent };
}
//# sourceMappingURL=use-async-view.js.map