import { AnyRoute, Route } from './Route.js';
type NotFoundListener = (path: string) => void;
type RouteChangeListener = (route: Route, params: Record<string, any>) => void;
type AsyncRouteChangeListener = (route: Route, params: Record<string, any>) => Promise<void> | void;
/**
 * Singleton. This is the application's navigator (Citron Navigator).
 *
 * To create a CitronNavigator instance, call `CitronNavigator.create`. If there's not yet an instance, it will create one, otherwise, it
 * will return the existing instance.
 *
 * To access the current instance, use `CitronNavigator.instance`, which will be undefined if no instance has been created yet.
 */
export declare class CitronNavigator {
    private root;
    private notFoundListeners;
    private routeChangeListeners;
    private asyncRouteChangeListeners;
    currentRoute: AnyRoute | undefined;
    currentParams: Record<string, any>;
    useHash: boolean;
    static readonly instance: CitronNavigator | undefined;
    private constructor();
    /**
     * Creates a navigator if none has been created yet. Otherwise, returns the current navigator.
     * @param root the navigation tree.
     * @param useHash whether or not to use hash-based urls (domain/#/path). The default is true.
     * @returns the navigator
     */
    static create(root: AnyRoute, useHash?: boolean): CitronNavigator;
    /**
     * Copies every child route of `source` to `target` if the child route of `source` doesn't exist in `target`.
     *
     * If a child of `source` exists in `target`, but it's path includes a wildcard (/*), we recursively copy its children to the same route
     * in `target`.
     * @param source the route to have its children copied.
     * @param target the route to copy the children to.
     */
    private copy;
    /**
     * Updates the navigation tree by merging a node with another.
     *
     * This is used by modular navigation. A module can load more routes into the tree.
     * @param route the node to be merged into the tree.
     * @param keyToReplace the key of the node to be merged.
     */
    updateNavigationTree(route: Route<any, any, any>, keyToReplace: string): void;
    /**
     * Gets the path of the provided url (considering hash-based paths).
     *
     * Examples:
     * - "https://www.stackspot.com/pt/ai-assistente" (useHash = false): "pt/ai-assistente".
     * - "https://www.stackspot.com/#/pt/ai-assistente" (useHash = true): "pt/ai-assistente".
     *
     * @param url the url to extract the path from. The current url (window.location) is used if none is provided.
     * @returns the path part of the url.
     */
    getPath(url?: URL): string;
    /**
     * Updates the current route according to the current URL.
     */
    updateRoute(): Promise<void>;
    private childrenOf;
    private findRouteByPath;
    private handleRouteChange;
    private handleNotFound;
    private paramTypeError;
    private deserializeNumber;
    private deserializeBoolean;
    private deserializeParameter;
    private extractQueryParams;
    private extractUrlParams;
    private addRouteChangeListener;
    /**
     * Adds a listener for changes to the route.
     *
     * If you need a listener that runs asynchronously, consider using `onRouteChangeAsync`.
     * @param listener a function called when the route changes.
     * @returns a function that, when called, removes the listener.
     */
    onRouteChange(listener: RouteChangeListener): () => void;
    /**
     * Adds a listener for changes to the route. This listener can be async (return a promise).
     *
     * Asynchronous listeners are run before every synchronous listener. Synchronous listeners are only run once all async listeners finish
     * running.
     * @param listener a function called when the route changes.
     * @returns a function that, when called, removes the listener.
     */
    onRouteChangeAsync(listener: AsyncRouteChangeListener): () => void;
    /**
     * Adds a listener that runs when a navigation is performed to a route that doesn't exist.
     *
     * @param listener a function called when the route is not found.
     * @returns a function that, when called, removes the listener.
     */
    onNotFound(listener: NotFoundListener): () => void;
}
export {};
//# sourceMappingURL=CitronNavigator.d.ts.map