import type {
  accountClient as _accountClient,
  agentClient as _agentClient,
  aiClient as _aiClient,
  cloudAccountClient as _cloudAccountClient,
  cloudPlatformClient as _cloudPlatformClient,
  cloudPlatformHorizonClient as _cloudPlatformHorizonClient,
  cloudRuntimesClient as _cloudRuntimesClient,
  cloudServicesClient as _cloudServicesClient,
  contentClient as _contentClient,
  eventBusClient as _eventBusClient,
  insightsClient as _insightsClient,
  notificationClient as _notificationClient,
  runtimeManagerClient as _runtimeManagerClient,
  secretsClient as _secretsClient,
  workflowClient as _workflowClient,
  workspaceClient as _workspaceClient,
  workspaceManagerClient as _workspaceManagerClient,
  workspaceSearchClient as _workspaceSearchClient,
} from '@stack-spot/portal-network'
import { createNetworkProxy } from './proxy'

export type SupportedOperations = 'query' | 'mutate' | 'isAllowed' | 'cancel' | 'useQuery' | 'useStatefulQuery' | 'useMutation' |
  'invalidate' | 'useAllowed'

export type SupportedClient<ClientType> = {
  [Resource in keyof ClientType]: {
    [Operation in keyof ClientType[Resource] as Operation extends SupportedOperations ? Operation : never]: ClientType[Resource][Operation]
  }
}

export const cloudRuntimesClient: SupportedClient<typeof _cloudRuntimesClient> = createNetworkProxy('cloudRuntimesClient')
export const aiClient: SupportedClient<typeof _aiClient> = createNetworkProxy('aiClient')
export const agentClient: SupportedClient<typeof _agentClient> = createNetworkProxy('agentClient')
export const cloudAccountClient: SupportedClient<typeof _cloudAccountClient> = createNetworkProxy('cloudAccountClient')
export const accountClient: SupportedClient<typeof _accountClient> = createNetworkProxy('accountClient')
export const secretsClient: SupportedClient<typeof _secretsClient> = createNetworkProxy('secretsClient')
export const cloudServicesClient: SupportedClient<typeof _cloudServicesClient> = createNetworkProxy('cloudServicesClient')
export const cloudPlatformClient: SupportedClient<typeof _cloudPlatformClient> = createNetworkProxy('cloudPlatformClient')
export const contentClient: SupportedClient<typeof _contentClient> = createNetworkProxy('contentClient')
export const eventBusClient: SupportedClient<typeof _eventBusClient> = createNetworkProxy('eventBusClient')
export const insightsClient: SupportedClient<typeof _insightsClient> = createNetworkProxy('insightsClient')
export const workflowClient: SupportedClient<typeof _workflowClient> = createNetworkProxy('workflowClient')
export const workspaceClient: SupportedClient<typeof _workspaceClient> = createNetworkProxy('workspaceClient')
export const notificationClient: SupportedClient<typeof _notificationClient> = createNetworkProxy('notificationClient')
export const runtimeManagerClient: SupportedClient<typeof _runtimeManagerClient> = createNetworkProxy('runtimeManagerClient')
export const cloudPlatformHorizonClient: SupportedClient<typeof _cloudPlatformHorizonClient> = createNetworkProxy('cloudPlatformHorizonClient')
export const workspaceSearchClient: SupportedClient<typeof _workspaceSearchClient> = createNetworkProxy('workspaceSearchClient')
export const workspaceManagerClient: SupportedClient<typeof _workspaceManagerClient> = createNetworkProxy('workspaceManagerClient')
