/* eslint-disable react-hooks/rules-of-hooks */
import { createRequestMessage } from '@stack-spot/portal-extension-commons'
import { QueryClient, useMutation, UseMutationOptions, useQuery, useQueryClient, useSuspenseQuery } from '@tanstack/react-query'
import { messageHandler } from '../MessageHandler'

let queryClient: QueryClient | undefined

export class NetworkObject {
  readonly client: string
  readonly resource: string
  readonly arity: number

  constructor(client: string, resource: string, arity: number) {
    this.client = client
    this.resource = resource
    this.arity = arity
  }

  private getVariablesAndOptions(args: any[]) {
    const variables = this.arity === 1 ? undefined : args[0]
    const options = this.arity === 1 ? args[0] : args[1]
    return { variables, options }
  }

  private getKey(variables: any, suffix = '') {
    return [this.client, this.resource, suffix, variables]
  }

  async mutate(...args: any[]) {
    const message = await messageHandler.sendRequest(
      createRequestMessage('network', { client: this.client, resource: this.resource, method: 'mutate', arguments: args }),
    )
    return message.result
  }

  async query(...args: any[]) {
    const message =  await messageHandler.sendRequest(
      createRequestMessage('network', { client: this.client, resource: this.resource, method: 'query', arguments: args }),
    )
    return message.result
  }

  useQuery(...args: any[]) {
    queryClient = useQueryClient()
    const { variables, options } = this.getVariablesAndOptions(args)
    const { data } = useSuspenseQuery({
      ...options,
      queryKey: this.getKey(variables),
      queryFn: () => this.query(variables),
    })
    return data
  }

  useStatefulQuery(...args: any[]) {
    queryClient = useQueryClient()
    const { variables, options } = this.getVariablesAndOptions(args)
    const result = useQuery({
      ...options,
      queryKey: this.getKey(variables),
      queryFn: () => this.query(variables),
    })
    return [result.data, result.isPending, result.error, result]
  }

  useMutation(options: UseMutationOptions) {
    queryClient = useQueryClient()
    const result = useMutation({
      ...options,
      mutationFn: (variables) => this.mutate(variables),
    })
    return [result.mutateAsync, result.isPending, result.error, result]
  }

  invalidate(variables: any) {
    if (queryClient) queryClient.invalidateQueries({ queryKey: this.getKey(variables) })
    messageHandler.sendRequest(
      createRequestMessage('network', { client: this.client, resource: this.resource, method: 'invalidate', arguments: [variables] }),
    )
  }

  async isAllowed(...args: any[]) {
    const message = await messageHandler.sendRequest(
      createRequestMessage('network', { client: this.client, resource: this.resource, method: 'allowed', arguments: args }),
    )
    return message.result
  }

  useAllowed(...args: any[]) {
    queryClient = useQueryClient()
    const { variables, options } = this.getVariablesAndOptions(args)
    const result = useQuery({
      ...options,
      queryKey: this.getKey(variables, 'permission'),
      queryFn: () => this.isAllowed(variables),
    })
    return [result.data, result.isPending, result.error, result]
  }

  cancel(...args: any[]) {
    messageHandler.sendRequest(
      createRequestMessage('network', { client: this.client, resource: this.resource, method: 'cancel', arguments: args }),
    )
  }
}
