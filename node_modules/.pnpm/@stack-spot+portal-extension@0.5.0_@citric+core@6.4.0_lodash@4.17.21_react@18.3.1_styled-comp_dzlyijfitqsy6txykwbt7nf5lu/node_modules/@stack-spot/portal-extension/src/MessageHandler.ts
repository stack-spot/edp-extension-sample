import {
  ExtensionConfigMessage,
  ExtensionMessage,
  ExtensionOperations,
  ExtensionRequestMessage,
  ExtensionResponseMessage,
  SuccessfulExtensionResponseMessage,
  createReadyMessage,
  createResizeMessage,
} from '@stack-spot/portal-extension-commons'
import { setTheme } from '@stack-spot/portal-theme'
import { setLanguage } from '@stack-spot/portal-translate'
import { setNetworkConfig } from './network/config'

type PromiseCompletion = { resolve: (value: SuccessfulExtensionResponseMessage<any>) => void, reject: (error: Error) => void }

class MessageHandler {
  private promiseMap = new Map<number, PromiseCompletion>()
  private hasStarted = false

  start() {
    if (this.hasStarted) return
    this.setupListeners()
    this.postMessage(createReadyMessage())
    this.hasStarted = true
  }

  private postMessage(message: ExtensionMessage) {
    window.parent.postMessage(message, '*')
  }

  private messageAsResponse(message: any) {
    return (
      !message
      || typeof message != 'object'
      || message.type != 'stackspot-extension-message'
      || (message.signal != 'response-success' && message.signal != 'response-error' && message.signal != 'config')
    ) ? undefined : message as ExtensionResponseMessage<any> | ExtensionConfigMessage
  }

  private setupListeners() {
    window.addEventListener('message', (event) => {
      const message = this.messageAsResponse(event.data)
      if (message) {
        switch (message.signal) {
          case 'response-error':
            this.promiseMap.get(message.id)?.reject?.(new Error(message.error))
            break
          case 'response-success':
            this.promiseMap.get(message.id)?.resolve?.(message)
            break
          case 'config':
            if (message.themeName) setTheme(message.themeName)
            if (message.language) setLanguage(message.language)
            if (message.network) setNetworkConfig(message.network)
        }
        this.promiseMap.delete(message.id)
      }
    })
  }

  sendRequest<T extends keyof ExtensionOperations>(request: ExtensionRequestMessage<T>): Promise<SuccessfulExtensionResponseMessage<T>> {
    if (!this.hasStarted) throw new Error('You must call start() before sending a request.')
    return new Promise((resolve, reject) => {
      this.promiseMap.set(request.id, { resolve, reject })
      this.postMessage(request)
    })
  }

  resize(width: number, height: number) {
    if (!this.hasStarted) throw new Error('You must call start() before resizing.')
    this.postMessage(createResizeMessage(width, height))
  }
}

export const messageHandler = new MessageHandler()
