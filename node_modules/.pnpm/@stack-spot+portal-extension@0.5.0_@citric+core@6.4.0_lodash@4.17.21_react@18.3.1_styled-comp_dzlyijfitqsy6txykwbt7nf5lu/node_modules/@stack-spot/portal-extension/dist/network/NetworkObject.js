/* eslint-disable react-hooks/rules-of-hooks */
import { createRequestMessage } from '@stack-spot/portal-extension-commons';
import { useMutation, useQuery, useQueryClient, useSuspenseQuery } from '@tanstack/react-query';
import { messageHandler } from '../MessageHandler';
let queryClient;
export class NetworkObject {
    constructor(client, resource, arity) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "resource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "arity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.resource = resource;
        this.arity = arity;
    }
    getVariablesAndOptions(args) {
        const variables = this.arity === 1 ? undefined : args[0];
        const options = this.arity === 1 ? args[0] : args[1];
        return { variables, options };
    }
    getKey(variables, suffix = '') {
        return [this.client, this.resource, suffix, variables];
    }
    async mutate(...args) {
        const message = await messageHandler.sendRequest(createRequestMessage('network', { client: this.client, resource: this.resource, method: 'mutate', arguments: args }));
        return message.result;
    }
    async query(...args) {
        const message = await messageHandler.sendRequest(createRequestMessage('network', { client: this.client, resource: this.resource, method: 'query', arguments: args }));
        return message.result;
    }
    useQuery(...args) {
        queryClient = useQueryClient();
        const { variables, options } = this.getVariablesAndOptions(args);
        const { data } = useSuspenseQuery({
            ...options,
            queryKey: this.getKey(variables),
            queryFn: () => this.query(variables),
        });
        return data;
    }
    useStatefulQuery(...args) {
        queryClient = useQueryClient();
        const { variables, options } = this.getVariablesAndOptions(args);
        const result = useQuery({
            ...options,
            queryKey: this.getKey(variables),
            queryFn: () => this.query(variables),
        });
        return [result.data, result.isPending, result.error, result];
    }
    useMutation(options) {
        queryClient = useQueryClient();
        const result = useMutation({
            ...options,
            mutationFn: (variables) => this.mutate(variables),
        });
        return [result.mutateAsync, result.isPending, result.error, result];
    }
    invalidate(variables) {
        if (queryClient)
            queryClient.invalidateQueries({ queryKey: this.getKey(variables) });
        messageHandler.sendRequest(createRequestMessage('network', { client: this.client, resource: this.resource, method: 'invalidate', arguments: [variables] }));
    }
    async isAllowed(...args) {
        const message = await messageHandler.sendRequest(createRequestMessage('network', { client: this.client, resource: this.resource, method: 'allowed', arguments: args }));
        return message.result;
    }
    useAllowed(...args) {
        queryClient = useQueryClient();
        const { variables, options } = this.getVariablesAndOptions(args);
        const result = useQuery({
            ...options,
            queryKey: this.getKey(variables, 'permission'),
            queryFn: () => this.isAllowed(variables),
        });
        return [result.data, result.isPending, result.error, result];
    }
    cancel(...args) {
        messageHandler.sendRequest(createRequestMessage('network', { client: this.client, resource: this.resource, method: 'cancel', arguments: args }));
    }
}
//# sourceMappingURL=NetworkObject.js.map