import { createReadyMessage, createResizeMessage, } from '@stack-spot/portal-extension-commons';
import { setTheme } from '@stack-spot/portal-theme';
import { setLanguage } from '@stack-spot/portal-translate';
import { setNetworkConfig } from './network/config';
class MessageHandler {
    constructor() {
        Object.defineProperty(this, "promiseMap", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "hasStarted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    start() {
        if (this.hasStarted)
            return;
        this.setupListeners();
        this.postMessage(createReadyMessage());
        this.hasStarted = true;
    }
    postMessage(message) {
        window.parent.postMessage(message, '*');
    }
    messageAsResponse(message) {
        return (!message
            || typeof message != 'object'
            || message.type != 'stackspot-extension-message'
            || (message.signal != 'response-success' && message.signal != 'response-error' && message.signal != 'config')) ? undefined : message;
    }
    setupListeners() {
        window.addEventListener('message', (event) => {
            const message = this.messageAsResponse(event.data);
            if (message) {
                switch (message.signal) {
                    case 'response-error':
                        this.promiseMap.get(message.id)?.reject?.(new Error(message.error));
                        break;
                    case 'response-success':
                        this.promiseMap.get(message.id)?.resolve?.(message);
                        break;
                    case 'config':
                        if (message.themeName)
                            setTheme(message.themeName);
                        if (message.language)
                            setLanguage(message.language);
                        if (message.network)
                            setNetworkConfig(message.network);
                }
                this.promiseMap.delete(message.id);
            }
        });
    }
    sendRequest(request) {
        if (!this.hasStarted)
            throw new Error('You must call start() before sending a request.');
        return new Promise((resolve, reject) => {
            this.promiseMap.set(request.id, { resolve, reject });
            this.postMessage(request);
        });
    }
    resize(width, height) {
        if (!this.hasStarted)
            throw new Error('You must call start() before resizing.');
        this.postMessage(createResizeMessage(width, height));
    }
}
export const messageHandler = new MessageHandler();
//# sourceMappingURL=MessageHandler.js.map