import { LoadingCircular } from '@citric/ui'
import { createContext, ReactElement, useContext } from 'react'

interface LoadingContext {
  /**
   * The component to render by a layout component.
   * @default <LoadingCircular>
   */
  loading?: ReactElement,
}

const context = createContext<LoadingContext>({})

const Loading: ReactElement = <LoadingCircular size="sm" sx={{ position: 'absolute' }} />

/**
 * Some portals use a different loading style than what we have in citric.
 * You can provide your own loading component to use wherever you want within the application.
 * 
 * @param position The position parameter is mandatory to be passed as absolute in the loading component that is being passed.
 *
 * If this is not used, the component `LoadingCircular` from citric is used by default.
 * @param props the loading component (useLoadingComponent) and the content to render (children).
 */
export const LoadingProvider = ({ children, ...props }: Required<LoadingContext> & { children: React.ReactNode }) => (
  <context.Provider value={props}>{children}</context.Provider>
)

/**
 * A React hook for retrieving the Loading component.
 * @returns the loading component declared at `LoadingProvider`.
 */
export function useLoadingComponent(): ReactElement {
  const { loading } = useContext(context)
  return loading ?? Loading
}
