import { isEmpty } from 'lodash'

const DEFAULT_DOMAIN_REGEX = new RegExp(/(\.*(prd|stg|dev)*.stackspot.com)|localhost/)
let cookieDomain = ''
let cookieAttributes: Record<string, string> = {}

/**
 * Setup the cookie utilities to use a another domain. By default, it's based on *.stackspot.com. 
 * @param domainRegex the regex to identify the domain. Example: {@link DEFAULT_DOMAIN_REGEX}.
 */
export function setupCookies(domainRegex: RegExp) {
  const portalUrl = new URL(location.href)
  cookieDomain = domainRegex.exec(portalUrl.host)?.[0] ?? ''
  cookieAttributes = { domain: cookieDomain, SameSite: 'Strict' }
}

/**
 * Retrieves the current domain used for cookies. To change the domain, use `setupCookies(domainRegex)`.
 * @returns the current cookie domain.
 */
export function getCookieDomain() {
  if (isEmpty(cookieAttributes)) setupCookies(DEFAULT_DOMAIN_REGEX)
  return cookieDomain
}

/**
 * Get all cookies as an object where the keys are the cookie names and the values are the respective cookie values. 
 * @returns a map of cookie name to cookie value.
 */
export function getCookies(): Record<string, string | undefined> {
  if (isEmpty(cookieAttributes)) setupCookies(DEFAULT_DOMAIN_REGEX)
  return document.cookie.split('; ').reduce((result, current) => {
    const [name, ...value] = current.split('=')
    result[name] = value.join('=')
    return result
  }, {} as Record<string, string>)
}

/**
 * Sets the value of a cookie.
 * @param key the cookie name (identifier).
 * @param value the cookie value.
 * @param customAttributes Accepted values: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes.
 */
export function setCookie(key: string, value: string, customAttributes: Record<string, string> = {}) {
  if (isEmpty(cookieAttributes)) setupCookies(DEFAULT_DOMAIN_REGEX)
  document.cookie = `${key}=${value}; ${objectToCookieString({ ...cookieAttributes, ...customAttributes })}`
}

/**
 * Removes a cookie.
 * @param key the cookie name (identifier).
 */
export function removeCookie(key: string) {
  if (isEmpty(cookieAttributes)) setupCookies(DEFAULT_DOMAIN_REGEX)
  document.cookie = `${key}= ; ${objectToCookieString({ ...cookieAttributes, expires: 'Thu, 01 Jan 1970 00:00:00 GMT' })}`
}

/**
 * Retrieves the value of a cookie given its key/name.
 * @param key the cookie name (identifier).
 * @returns the cookie value or undefined, if the cookie doesn't exist. 
 */
export function getCookie(key: string) {
  return getCookies()[key]
}

const objectToCookieString = (object: Record<string, string>): string => Object.entries(object).reduce((prev, current) => `${prev} ${current[0]}=${current[1]};`, '')
