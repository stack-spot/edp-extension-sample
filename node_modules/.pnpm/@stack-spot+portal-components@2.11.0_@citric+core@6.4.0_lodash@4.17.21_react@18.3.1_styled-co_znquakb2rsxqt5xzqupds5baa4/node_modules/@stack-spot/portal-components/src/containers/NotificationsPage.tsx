import { Text } from '@citric/core'
import { Dictionary, useTranslate } from '@stack-spot/portal-translate'
import { styled } from 'styled-components'
import { AsyncContent } from '../components/AsyncContent'
import { ErrorFeedback } from '../components/error'
import { SearchInput } from '../components/form/SearchInput'
import { Select } from '../components/form/Select'
import { NotificationList } from '../components/notification/NotificationList'
import { useNotificationList } from '../context/notification/hooks'
import { NotificationContext, NotificationPriority } from '../context/notification/types'
import { useNotificationController } from '../notifications'

const FilterBox = styled.div`
  margin: 24px 0;
  display: flex;
  flex-direction: row;
  gap: 8px;

  > * {
    flex: 1;
  }
`

const criticalities: NotificationPriority[] = ['HIGH', 'MEDIUM', 'LOW']
const contexts: NotificationContext[] = ['ACCOUNT', 'STUDIO', 'WORKSPACE']

export const NotificationsPage = () => {
  const t = useTranslate(dictionary)
  const controller = useNotificationController()
  const { hasMore, items, loadMore, applyFilters, filters, status, error } = useNotificationList()

  return (<>
    <header><Text appearance="h2" as="h1">{t.title}</Text></header>
    <Text appearance="body2" colorScheme="light.700">
      {t.description}
    </Text>
    <FilterBox>
      <SearchInput searchText={t.filter} defaultValue={filters.search} onChange={search => applyFilters({ search })} />
      <Select
        value={filters.criticality}
        options={criticalities}
        onChange={criticality => applyFilters({ criticality })}
        emptyOption={t.allCriticalities}
        renderLabel={o => t[`criticality.${o}`]}
      />
      <Select
        value={filters.context}
        options={contexts}
        onChange={context => applyFilters({ context })}
        emptyOption={t.allContexts}
        renderLabel={o => t[`context.${o}`]}
      />
    </FilterBox>
    <AsyncContent
      error={error}
      loading={status === 'startup'}
      errorDetails={{ errorComponent: () => <ErrorFeedback code={error.code} />, reportError: () => { } }}
    >
      <NotificationList
        items={items}
        loading={status === 'loading'}
        onCommit={id => controller.markAsCommitted(id)}
        infiniteScroll={{ hasMore, loadMore }}
        onClickAction={controller.config.onClickAction}
        showEmptySearch
      />
    </AsyncContent>
  </>)
}

const dictionary = {
  en: {
    title: 'Notifications',
    description: 'All notifications you received is shown up here.',
    filter: 'Filter',
    allCriticalities: 'All Criticalities',
    'criticality.HIGH': 'High',
    'criticality.MEDIUM': 'Medium',
    'criticality.LOW': 'Low',
    allContexts: 'All contexts',
    'context.ACCOUNT': 'Account',
    'context.STUDIO': 'Studio',
    'context.WORKSPACE': 'Workspace',
  },
  pt: {
    title: 'Notificações',
    description: 'Todas as notificações que você recebeu são mostradas aqui.',
    filter: 'Filtrar',
    allCriticalities: 'Todas as criticidades',
    'criticality.HIGH': 'Alto',
    'criticality.MEDIUM': 'Médio',
    'criticality.LOW': 'Baixo',
    allContexts: 'Todos os contextos',
    'context.ACCOUNT': 'Conta',
    'context.STUDIO': 'Estúdio',
    'context.WORKSPACE': 'Workspace',
  },
} satisfies Dictionary
