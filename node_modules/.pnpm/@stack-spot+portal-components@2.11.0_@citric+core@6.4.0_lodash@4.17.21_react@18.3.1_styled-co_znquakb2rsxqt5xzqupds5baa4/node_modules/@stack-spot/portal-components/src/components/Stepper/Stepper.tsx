import { Box, Flex } from '@citric/core'
import { FC, ReactElement, createContext, useState } from 'react'
import { styled } from 'styled-components'
import { StepperHeaders } from './headers'
import { StepProps } from './Step'

export interface StepperContextProps {
  /**
   * Informs the index of the active step.
   */
  activeIndex: number,
  /**
   * Informs data for all steps.
   * @default 0
   */
  stepsData: Record<string, any>,
  /**
   * Saves data for a given steps.
   */
  setStepData: (name: string, data: any) => void,
  /**
   * Takes data from a given step.
   */
  getStepData: (name: string) => any | null | undefined,
  /**
   * Navigate to the next step.
   */
  goToNextStep: () => void,
  /**
   * Navigate to the previous step.
   */
  goToPreviousStep: () => void,
}

const StepperContext = createContext<StepperContextProps>({ 
  activeIndex: 0,
  stepsData: {},
  setStepData: () => {},
  getStepData: () => {},
  goToNextStep: () => {},
  goToPreviousStep: () => {},
})

export interface StepperProps {
  children: ReactElement<StepProps>[],
}

const Wrapper = styled(Box)`
  width: 100%;
  gap: 1.5rem;
`

const ContentWrapper = styled(Flex)`
  width: 100%;
`

/**
 * Renders a component that provides an interface of steps for creating some content.
 * 
 * The component wraps the Step component.
 */

const Stepper: FC<StepperProps> = ({ children }) => {
  const [activeIndex, setActiveIndex] = useState<number>(0)
  const [stepsData, setStepsData] = useState<Record<string, any>>({})
  const headers = children.map((child) => ({ title: child.props.title }))

  const setStepData = (name: string, data: any) => {
    setStepsData({ ...stepsData, ...{ [name]: data } })
  }

  const getStepData = (name: string) => stepsData[name]

  const setNextStep = () => {
    if (activeIndex < (children.length - 1)) {
      setActiveIndex(activeIndex + 1)
    }
  }

  const setPreviousStep = () => {
    if (activeIndex > 0) {
      setActiveIndex(activeIndex - 1)
    }    
  }

  const contextValue: StepperContextProps = {
    activeIndex,
    stepsData,
    setStepData,
    getStepData,
    goToNextStep: setNextStep,
    goToPreviousStep: setPreviousStep,
  }

  return (
    <StepperContext.Provider value={contextValue}>
      <Wrapper>
        <StepperHeaders {...{ headers }} />
        <ContentWrapper>
          {children[activeIndex]}
        </ContentWrapper>
      </Wrapper>
    </StepperContext.Provider>
  )
}
export { StepperContext, Stepper }

