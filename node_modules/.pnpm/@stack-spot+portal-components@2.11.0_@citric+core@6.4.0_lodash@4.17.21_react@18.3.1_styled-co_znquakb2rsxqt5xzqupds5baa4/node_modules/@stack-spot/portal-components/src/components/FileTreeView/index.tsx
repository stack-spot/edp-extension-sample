
import { Box, IconBox, Text } from '@citric/core'
import { SxProperties } from '@citric/core/dist/sx'
import { ChevronRight, Code, Folder } from '@citric/icons'
import { theme } from '@stack-spot/portal-theme'
import { useState } from 'react'
import { useAnchorTag } from '../../context/anchor'
import { MenuOption, More } from './More'

const styles = {
  FileTreeViewWrapper: {
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    margin: '16px',
  },
  AccordionItemWrapper: {
    width: '100%',
    'ul': {
      listStyleType: 'none',
      margin: 0,
      padding: 0,
      flexDirection: 'column',
      marginLeft: '20px',
      justifyContent: 'center',
    },
    'li': {
      display: 'flex',
      listStyleType: 'none',
      margin: '2px 0',
      padding: 0,
      flexDirection: 'row',
      alignItems: 'center',
      gap: '4px',
    },

    '.accordion-node-group': {
      justifyContent: 'space-between',
      width: '100%',
      '&:hover': {
        backgroundColor: `${theme.color.light[500]}`,
        borderRadius: '4px',
      },

      'a': {
        display: 'flex',
        alignItems: 'center',
        textDecoration: 'underline',
        'label':{
          '&:hover': {
            cursor: 'pointer',
          },
        },
      },
    },

    '.accordion-node': {
      cursor: 'pointer',
      flexDirection: 'row',
      display: 'flex',
      gap: '4px',
      alignItems: 'center',
      background: 'transparent',
      color: 'inherit',
      border: 'none',
      '.icon': {
        transition: 'transform ease-in-out 0.3s',
      },
      '.open':{
        transform: 'rotate(90deg)',
      },
    },

    'actions': {
      display: 'flex',
      flexDirection: 'row',
      gap: '4px',
      alignItems: 'center',
    },
  },
} 


export interface FileDir {
  /**
   * The name of the directory or file. 
   * */ 
  name: string,
  /**
   * dirs - An array containing the directories present in the file tree.
   */
  dirs: FileDir[],
  /**
   * isFile - A flag indicating whether the item is a file (`true`) or a directory (`false`).
   */
  isFile?: boolean,
  /**
   * itemLink - The URL or path link associated with the item in the file tree.
   */
  itemLink: string,
  /**
   * The menu options that will be rendered at the end of the line for this item. 
   */
  menuOptions?: MenuOption[],
}

interface Props {
  /**
   * Represents the hierarchical structure of directories and files, providing the component with an organized view of the file system. 
   */
  fileTree: FileDir,
}

export const FileTreeView = ({ fileTree }: Props) => {

  const AccordionItem = ({ name, isFile, dirs, defaultOpened = false, menuOptions, itemLink }: FileDir 
    & { defaultOpened?: boolean }) => {
    
    const Link = useAnchorTag()
    const [opened, setOpened] = useState<boolean>(defaultOpened)

    const onExpand = () => {
      setOpened(old => !old)
    }

    const FolderItem = () => (
      <li className="accordion-node-group">
        <button className="accordion-node" onClick={onExpand}>
          <IconBox className={`icon ${opened ? 'open' : ''}`} >
            <ChevronRight  /> 
          </IconBox>
          <IconBox>
            <Folder />
          </IconBox>
          <Text>{name !== '' ? name : '/'}</Text>
        </button>
        { menuOptions && 
          <div className="actions">
            <More menu={menuOptions} />
          </div>
        }
      </li>
    )

    const FileItem = () => (
      <li className="accordion-node-group">
        <Link href={itemLink}>
          <IconBox>
            <Code />
          </IconBox>
          <Text as="label">{name}</Text>
        </Link>
        { menuOptions && 
          <div className="actions">
            <More menu={menuOptions} />
          </div>
        }
      </li >
    )

    return (
      <Box sx={styles.AccordionItemWrapper}>
        {
          isFile ? <FileItem /> : <FolderItem />
        }
        <ul className="accordion-children">
          {opened && !isFile && dirs && dirs.length > 0 && (
            <>
              {dirs?.map((subDir, index) => (
                <li key={index}>{
                  <AccordionItem {...subDir} />
                }</li>
              ))}
            </>
          )}
        </ul>
      </Box>
    )
  }

  return (
    <Box sx={styles.FileTreeViewWrapper as SxProperties}>
      <AccordionItem {...fileTree} defaultOpened={true} />
    </Box>
  )
}
