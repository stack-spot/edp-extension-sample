import { Box, IconBox, Text } from '@citric/core'
import { SxProperties } from '@citric/core/dist/sx'
import * as icons from '@citric/icons'
import { EllipsisVertical } from '@citric/icons'
import { IconButton } from '@citric/ui'
import { theme } from '@stack-spot/portal-theme'
import { createElement, useState } from 'react'

export type IconName = keyof typeof icons

export type MenuOption = {
/**
 * The text that will be displayed for the option.
 */
label: string,
/**
 * The icon that will be displayed alongside the text.
 */
icon: IconName,
/**
 * The function that will be executed when the option is clicked.
 */
onClick: VoidFunction,
}

interface Props {
  loading?: boolean,
  menu: MenuOption[],
}

const styles = {
  MoreWrapper: {
    position: 'relative',
    'button': {
      width: '2rem',
      height: '2rem',
    },
    '.drop': {
      zIndex: 1,
      position: 'absolute',
      listStyle: 'none',
      display: 'flex',
      margin: '0',
      padding: '0.25rem',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'flex-start',
      gap: '0.5rem',
      borderRadius: '0.25rem',
      border: `0.063rem solid ${theme.color.light[400]}`,
      backgroundColor: `${theme.color.light[500]}`,
      boxShadow: `0 0 0 0.125rem ${theme.color.gray[600]}`,
      right: '2px',
      width: 'max-content',
      'ul': {
        padding: 0,
        margin: 0,
      },
      '.item-list-float': {
        minWidth: '230px',
        listStyleType: 'none',
        padding: '8px',
        paddingRight: '12px',
        display: 'flex',
        alignItems: 'center',
        cursor: 'pointer',
        '&:hover': {
          backgroundColor: `${theme.color.light[600]}`,
        },
      },
    },
  },
}

export function More({ loading, menu }: Props) {

  const [opened, setOpened] = useState(false)

  return (
    <Box sx={styles.MoreWrapper as SxProperties}>
      <IconButton
        color="light"
        size="sm"
        appearance="circle"
        aria-label="More options"
        disabled={loading}
        onClick={() => setOpened((old) => !old)}
        onBlur={() => setTimeout(() => setOpened(false), 200)}
      >
        <IconBox size="xs">
          <EllipsisVertical />
        </IconBox>
      </IconButton>
      {
        opened && (
          <div className="drop">
            <ul className="drop-wrapper">
              {
                menu.map((menuItem, key) => (
                  <li role="button" className="item-list-float" key={key} onClick={menuItem.onClick}>
                    <IconBox size="sm">
                      {createElement(icons[menuItem.icon])}
                    </IconBox>
                    <Text appearance="body2">{menuItem.label}</Text>
                  </li>
                ))
              }
            </ul>
          </div>
        )
      }
    </Box>
  )
}
