import { Box, Flex, Text } from '@citric/core'
import { getColor, getRadius } from '@citric/core/dist/utils/theme'
import { Copy, Refresh } from '@citric/icons'
import { IconButton } from '@citric/ui'
import { theme } from '@stack-spot/portal-theme'
import { useTranslate } from '@stack-spot/portal-translate'
import SyntaxHighlighter from 'react-syntax-highlighter'
import styled from 'styled-components'

const style = {
  scrollable: {
    minHeight: '64px',
    maxHeight: '232px',
    overflow: 'auto',
    '&::-webkit-scrollbar': {
      width: '4px',
      height: '4px',
    },
    '&::-webkit-scrollbar-track': {
      background: 'light.400',
      borderRadius: '2px',
    },
    '&::-webkit-scrollbar-thumb': {
      background: 'light.700',
      borderRadius: '2px',
    },
  },
}

const Wrapper = styled(Box)`
  background-color: ${theme.color.gray[900]};
  border-radius: ${({ theme }) => getRadius(theme as any, 'xs')};
  position: relative;
  padding: 8px;
  overflow: hidden;

  > .scrollable-container {
    min-height: 64px;
    max-height: 232px;
    overflow: auto;
    &::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }
    &::-webkit-scrollbar-track {
      background: ${theme.color.light[400]};
      border-radius: 2px;
    }
    &::-webkit-scrollbar-thumb,
    &::-webkit-scrollbar-thumb:hover {
      background: ${theme.color.light[700]};
      border-radius: 2px;
    }
  }

  pre {
    background-color: transparent;
    font-family: 'Roboto Mono';
    font-size: 14.4px;
    padding: 0;
    margin-top: 0;
    overflow: unset;
    text-shadow: none;
    color: ${theme.color.gray[50]};
  }

  .hljs-string {
    color: ${theme.color.teal[300]};
  }
  .hljs-tag {
    color: ${({ theme }) => getColor(theme as any, 'teal')};
  }
  .hljs-attr {
    color: ${theme.color.gray[50]};
  }
  .hljs-number {
    color: ${theme.color.gray[300]};
  }
  .hljs-property {
    color: ${theme.color.gray[50]};
  }
  .hljs-keyword {
    color: ${theme.color.blue[200]};
  }
  .comment {
    color: ${theme.color.gray[400]};
  }
  .hljs-expression {
    color: ${theme.color.orange[400]};
  }

  .button-group {
    position: absolute;
    top: 8px;
    right: 24px;
    display: flex;

    button {
      margin-left: 6px;
      &:focus {
        background-color: ${({ theme }) => getColor(theme as any, 'light.300')};
      }
    }
  }
`

interface Props {
  language: string,
  data: string,
  onClickRefresh?: () => void,
  height?: string,
  scrollable?: boolean,
  copyButton?: boolean,
}

/**
 * CodeViewer component that displays code with syntax highlighting based on application theme and optional copy and refresh buttons.
 *
* @param options the props for rendering the component: {@link Props}. 
 */
export const CodeViewer = ({ language, data, onClickRefresh, scrollable = true, copyButton }: Props) => {
  const t = useTranslate(codeViewerLocale)

  return (
    <Wrapper>
      {data ? (
        <>
          <Flex style={scrollable ? style.scrollable : undefined}>
            <SyntaxHighlighter language={language} showLineNumbers useInlineStyles={false}>
              {String(data).replace(/\n$/, '')}
            </SyntaxHighlighter>
          </Flex>
          <div className="button-group">
            {onClickRefresh && (
              <IconButton onClick={onClickRefresh}>
                <Refresh />
              </IconButton>
            )}

            {copyButton ? (
              <IconButton onClick={() => navigator.clipboard.writeText(data)}>
                <Copy />
              </IconButton>
            ) : null}
          </div>
        </>
      ) : (
        <Text appearance="body2">{t.noData}</Text>
      )}
    </Wrapper>
  )
}

export const codeViewerLocale = {
  en: {
    noData: 'No data available.',
  },
  pt: {
    noData: 'Sem dados dispon√≠veis.',
  },
}
