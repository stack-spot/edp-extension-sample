import { Box, Image, Link, Text } from '@citric/core'
import { SxProp } from '@citric/core/dist/component-style'
import { Table, Tbody, Td, Th, Thead, Tr } from '@citric/ui'
import ReactMarkdown, { Components } from 'react-markdown'
import rehypeRaw from 'rehype-raw'
import remarkBreaks from 'remark-breaks'
import remarkGfm from 'remark-gfm'
import { BlockquoteMd } from './BlockquoteMd'
import { CodeViewer } from './CodeViewer'
import { Video } from './Video'

interface MarkdownProps {
  /**
   * The markdown content to be rendered.
   */
  children: string,
  /**
   * The markdown components to be rendered.
   */
  components?: Components,
}

const styles: Record<string, SxProp | Record<string, SxProp>> = {
  title: {
    mb: 3,
  },
  boxContainer: {
    position: 'relative',
    bg: 'light.300',
    borderRadius: 'sm',
    mb: 10,
  },
  table: {
    borderRadius: 'xs',
  },
  customScroll: {
    height: '232px',
    overflow: 'auto',
    '&::-webkit-scrollbar': {
      width: '2px',
    },
    '&::-webkit-scrollbar-track': {
      background: 'light.400',
    },
    '&::-webkit-scrollbar-thumb': {
      background: 'primary.500',
    },
    '&::-webkit-scrollbar-thumb:hover': {
      background: 'primary.500',
    },
  },
  refreshButton: {
    position: 'absolute',
    top: '8px',
    right: '48px',
  },
  copyButton: {
    position: 'absolute',
    top: '8px',
    right: '16px',
  },
  code: {
    bg: 'blue.900',
    color: 'blue.100',
    px: 1,
    py: 1,
    borderRadius: 'xs',
  },
}

/**
 * Custom components for rendering markdown elements.
 */
const component = () => ({
  p: (props: any) => <Text appearance="body2" {...props} />,
  strong: (props: any) => <Text weight="bold" colorScheme="light.700" as="strong" {...props} />,
  h1: (props: any) => <Text as="h1" appearance="h2" gutterBottom {...props} sx={styles.title} />,
  h2: (props: any) => <Text as="h2" appearance="h3" gutterBottom {...props} sx={styles.title} />,
  h3: (props: any) => <Text as="h3" appearance="h4" gutterBottom {...props} sx={styles.title} />,
  h4: (props: any) => <Text as="h4" appearance="h5" gutterBottom {...props} sx={styles.title} />,
  a: (props: any) => <Link colorScheme="primary" {...props} target="_blank" />,
  table: (props: any) => <Table appearance="striped" {...props} sx={styles.table} />,
  thead: (props: any) => <Thead {...props} />,
  tbody: (props: any) => <Tbody {...props} />,
  tr: (props: any) => <Tr {...props} />,
  td: (props: any) => <Td {...props} />,
  th: (props: any) => <Th {...props} />,
  li: (props: any) => <Text as="li" appearance="body2" colorScheme="light.700" {...props} />,
  br: (props: any) => <Box my={5} {...props} />,
  blockquote: (props: any) => <BlockquoteMd {...{ props }} />,
  video: (props: any) => <Video {...props} />,
  img: (props: any) => <Image {...props} />,
  pre(props: any) {
    const propComp = props.children.props
    const match = /language-(\w+)/.exec(propComp.className || '')
    const inferredLanguage = match && match.length > 1 ? match[1] : undefined

    return (
      <Box sx={{ ...styles.boxContainer }}>
        <CodeViewer language={inferredLanguage} {...propComp} data={propComp.children} />
      </Box>
    )
  },
  code: ({ ...props }: any) =>
    <Text as="code" sx={styles.code} {...props}>
      {props.children}
    </Text>,
})

/**
 * Renders a component that provides markdown content visualization using citric components.
 * 
 * @param options the props for rendering the component: {@link MarkdownProps}. 
 */
const Markdown = ({ children, components }: MarkdownProps) => (
  <ReactMarkdown rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm, remarkBreaks]} components={{ ...component(), ...components }}>
    {children}
  </ReactMarkdown>
)

// eslint-disable-next-line import/no-default-export
export default Markdown
