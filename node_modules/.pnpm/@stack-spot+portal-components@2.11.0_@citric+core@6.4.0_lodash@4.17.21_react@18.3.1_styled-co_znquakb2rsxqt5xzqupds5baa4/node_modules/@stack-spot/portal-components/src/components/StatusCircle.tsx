import { OneOfColorSchemesWithVariants, OneOfPalettesWithVariants, Theme } from '@citric/core'
import { getColor } from '@citric/core/dist/utils/theme'
import { Tooltip } from '@citric/ui'
import styled from 'styled-components'

type Color = OneOfColorSchemesWithVariants | OneOfPalettesWithVariants

export type Status = 'success' | 'warning' | 'danger' | 'unknown' | 'progress'

interface Props {
  /** The status of the component which determines its color */
  status?: Status,
  /** Tooltip text to be displayed on hover */
  tooltip?: string,
}

const statusToColor: Record<Status, Color> = {
  success: 'success.500',
  warning: 'warning.500',
  danger: 'danger.500',
  progress: 'secondary.500',
  unknown: 'light.contrastText',
}

/**
 * Get the color corresponding to the status.
 *
 * @param {Theme} theme - The theme object.
 * @param {Status} [status] - The status of the component.
 * @returns {string} The color corresponding to the status.
 */
function getColorFromStatus(theme: Theme, status?: Status) {
  const colorName = status && status in statusToColor ? statusToColor[status] : statusToColor.unknown
  return getColor(theme, colorName)
}

interface WithTooltip {
  /** Tooltip text to be displayed on hover */
  tooltip?: string,
  /** Additional class names for the component */
  className?: string,
  /** Inline styles for the component */
  style?: React.CSSProperties,
}

/**
 * CircleWithTooltip component that displays a circle with an optional tooltip.
 *
 * @param props the component's props {@link WithTooltip}.
 */
const CircleWithTooltip = ({ tooltip, className, style }: WithTooltip) => {
  const circle = <div style={style} className={className}></div>
  return tooltip && tooltip.length ? <Tooltip text={tooltip}>{circle}</Tooltip> : circle
}

/**
 * Renders a component that displays a colored circle based on the status.
 * It also supports an optional tooltip.
 *
 * @param props the component's props {@link Props}.
 */
export const StatusCircle = styled(CircleWithTooltip)<Props>`
  background-color: ${({ status, theme }) => getColorFromStatus(theme as any, status)};
  width: 12px;
  height: 12px;
  border-radius: 50%;
`
