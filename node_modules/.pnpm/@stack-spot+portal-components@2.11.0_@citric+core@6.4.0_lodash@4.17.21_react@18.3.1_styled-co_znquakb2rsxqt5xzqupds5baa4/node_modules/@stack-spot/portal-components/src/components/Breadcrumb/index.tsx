import { Text } from '@citric/core'
import { Skeleton } from '@citric/ui'
import { last } from 'lodash'
import { useEffect, useMemo } from 'react'
import { useAnchorTag } from '../../context/anchor'
import { titleEffect } from '../../hooks/title'
import { Box } from './styled'

export type AnchorComponent = (props: React.AnchorHTMLAttributes<HTMLAnchorElement>) => React.ReactElement

interface BreadcrumbItem {
  /**
   * A unique id for this link of the breadcrumb. If not provided, the label will be used.
   */
  key?: string,
  /**
   * Label for this route in the breadcrumb.
   */
  label: string,
  /**
   * If this route is accessible, the link to it.
   */
  href?: string,
}

interface Props {
  /**
   * The items to show.
   */
  items: BreadcrumbItem[],
  /**
   * When true, a loading feedback (skeleton) will show instead of the list.
   */
  isLoading?: boolean,
  /**
   * If set to true, after mounted, as soon as loading is false, the page title will be prepended with `$name - `, where `$name` is the
   * label of the last item in `items`.
   * 
   * When unmounted, the title will go back to the previous value.
   * 
   * @default false
   */
  shouldUpdatePageTitle?: boolean,
  /**
   * Key of the current page. If an item has this key, it won't be rendered as a link and will be marked as active.
   */
  currentPageKey?: string,
}

interface ItemProps extends Pick<Props, 'currentPageKey'> {
  item: BreadcrumbItem,
}

const BreadcrumbItem = ({ item: { label, href, key }, currentPageKey }: ItemProps) => {
  const text = <Text appearance="breadcrumb">{label}</Text>
  const Link = useAnchorTag()
  const shouldBeLink = href && currentPageKey != key
  return <li>{shouldBeLink ? <Link href={href}>{text}</Link> : text}</li>
}

/**
 * Builds a breadcrumb navigator based on the items passed in the properties.
 * 
 * If the breadcrumb is obtained asynchronously, pass `isLoading = true` in order to show a loading feedback.
 */
export const BreadcrumbList = ({ items, isLoading, shouldUpdatePageTitle, currentPageKey }: Props) => {  
  const listItems = useMemo(
    () => items.map(item => <BreadcrumbItem key={item.key || item.label} item={item} currentPageKey={currentPageKey} />),
    [items],
  )
  useEffect(() => {
    const title = last(items)?.label
    if (shouldUpdatePageTitle && title && !isLoading) return titleEffect(title)
  }, [items, isLoading])
  return <Box>{isLoading ? <Skeleton height="21px" /> : <ul>{listItems}</ul>}</Box>
}
