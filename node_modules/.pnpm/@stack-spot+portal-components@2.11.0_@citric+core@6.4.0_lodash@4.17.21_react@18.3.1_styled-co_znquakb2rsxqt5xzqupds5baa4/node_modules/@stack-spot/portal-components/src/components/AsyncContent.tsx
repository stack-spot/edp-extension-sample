import { Flex } from '@citric/core'
import { LoadingCircular } from '@citric/ui'
import { MutableRefObject, useEffect, useLayoutEffect } from 'react'

export interface ErrorProps {
  /**
   * The error component to be rendered in case of error. It should receive error props
   */
  errorComponent:  React.FC<{ error: any }>,
  /**
   * The function to report the error.
   */
  reportError: (error: any) => void,
}

interface Props {
  /**
   * Whether or not to show the loading feedback.
   */
  loading: boolean,
  /**
   * A javascript error. Used to show error feedbacks.
   */
  error?: any,
  /**
   * If provided, this element will receive focus as soon as the content is loaded and has no errors.
   * Can be either a React Ref Object or a query selector.
   */
  autofocus?: string | MutableRefObject<HTMLElement>,
  /**
   * The content to show if it's not loading or has errors.
   */
  children: React.ReactNode,
  /**
   * The error details component.
  */
  errorDetails: ErrorProps,
}

/**
 * Renders a component that provides user feedback on async requests.
 * It renders either a loading component, an error component (which is received as prop)
 * or the received children props.
 * 
 * @param options the props for rendering the component: {@link Props}. 
 */

export const AsyncContent = ({ loading, error, autofocus, children, errorDetails }: Props) => {
  const ErrorComponent = errorDetails.errorComponent

  useEffect(() => {
    if (error) {
      errorDetails.reportError(error)
      // eslint-disable-next-line no-console
      console.error(error)
    }
  }, [error])

  useLayoutEffect(() => {
    if (!loading && !error) {
      typeof autofocus === 'string' ? (document.querySelector(autofocus) as HTMLElement)?.focus?.() : autofocus?.current?.focus()
    }
  }, [loading, error])

  if (loading) {
    return (
      <Flex alignItems="center" justifyContent="center" flex={1} style={{ padding: '80px' }} data-test-hint="loading">
        <LoadingCircular />
      </Flex>
    )
  }

  if (error) {
    return <ErrorComponent error={error} />
  }

  return children
}
