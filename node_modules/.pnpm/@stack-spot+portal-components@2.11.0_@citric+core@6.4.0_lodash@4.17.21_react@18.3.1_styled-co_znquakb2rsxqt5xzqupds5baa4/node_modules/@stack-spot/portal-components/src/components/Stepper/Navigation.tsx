import { Button, Flex, Text } from '@citric/core'
import { Dictionary, useTranslate } from '@stack-spot/portal-translate'
import { FC, useContext } from 'react'
import { styled } from 'styled-components'
import { ButtonProps } from '@citric/core/dist/Button'
import { useLoadingComponent } from '../../context/loading'
import { StepperContext } from './Stepper'

export interface StepperNavigationProps extends ButtonProps{
  /**
   * Prop used to pass specific text to the next button.
   */
  nextButtonText?: string,
  /**
   * Function that is rendered when pressing the skip button.
   */
  onSkip?: () => void,
  /**
   * Boolean that is used as a conditional to appear the skip button.
   */
  canSkip?: boolean,
  /**
   * Boolean that is used as a conditional to appear the loading icon in next button.
   */
  isLoading?: boolean,
  /**
   * Function that is rendered when pressing the back button.
   */
  onGoBack?: () => void,
  /**
   * Function that is rendered when pressing the next button.
   */
  onSubmit?: () => void,
}

const Wrapper = styled(Flex)`
  width: 100%;
  justify-content: space-between;
`

/**
 * Renders a component that represents the stepper component's navigation buttons, containing the button options (back, skip, and next).
 * 
 * The component stepper wraps this component.
 */

export const StepperNavigation: FC<Omit<StepperNavigationProps, 'children'>> = (
  { nextButtonText, onSkip, onGoBack, canSkip = false, isLoading, disabled, onSubmit }) => {
  const t = useTranslate(dictionary)
  const { goToNextStep, goToPreviousStep } = useContext(StepperContext)
  const Loading = useLoadingComponent()

  return (
    <Wrapper>
      <Button
        appearance="contained"
        colorScheme="inverse"
        onClick={() => {
          onGoBack && onGoBack()
          goToPreviousStep()
        }}
      >
        {t.back}
      </Button>
      <Flex>
        {canSkip && (
          <Button
            appearance="text"
            colorScheme="inverse"
            onClick={() => {
              onSkip && onSkip()
              goToNextStep()
            }}
          >
            {t.skip}
          </Button>
        )}
        <Button type="submit" onClick={onSubmit} sx={{ position: 'relative' }} disabled={isLoading || disabled}>
          <Text as="span" sx={{ visibility: isLoading ? 'hidden' : 'visible' }}>{nextButtonText ?? t.next}</Text>
          {isLoading && Loading}
        </Button>
      </Flex>
    </Wrapper>
  )}

const dictionary = {
  en: {
    back: 'Back',
    skip: 'Skip',
    next: 'Next',
  },
  pt: {
    back: 'Voltar',
    skip: 'Pular',
    next: 'Pr√≥ximo',
  },
} satisfies Dictionary
