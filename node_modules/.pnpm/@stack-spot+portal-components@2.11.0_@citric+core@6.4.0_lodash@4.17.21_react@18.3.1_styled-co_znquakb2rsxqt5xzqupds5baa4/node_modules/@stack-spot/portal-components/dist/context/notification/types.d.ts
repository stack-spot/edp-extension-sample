import { GetTenantNotificationsResponse, ResponseModelGetTenantNotificationsResponse } from '../../notifications.js';
export type NotificationPriority = 'HIGH' | 'MEDIUM' | 'LOW';
export type NotificationContext = 'ACCOUNT' | 'STUDIO' | 'WORKSPACE';
export interface LoadNotificationsFilters {
    committed?: boolean;
    criticality?: NotificationPriority;
    search?: string;
    context?: NotificationContext;
    size?: number;
    isBanner?: boolean;
}
export interface LoadNotificationsOptions extends LoadNotificationsFilters {
    page: number;
    isBanner?: boolean;
}
export type LazyNotificationListener = (notifications: GetTenantNotificationsResponse[], hasMore: boolean) => void;
export interface NotificationConfig {
    /**
     * Fetches the notifications according to the options passed as parameters.
     * @param options page, size and filters.
     * @returns a promise that resolves to a {@link ResponseModelGetTenantNotificationsResponse}.
     */
    load(options: LoadNotificationsOptions): Promise<ResponseModelGetTenantNotificationsResponse>;
    /**
     * Check for unread notifications since the date passed as parameter.
     * @param date the date to start the search from
     * @returns a promise that resolves to true if there are unread notifications or false otherwise.
     */
    checkForUnreadNotificationsSince(date?: Date): Promise<boolean>;
    /**
     * Marks the notification with the id passed as parameter as read (committed).
     * @param id the id of the notification.
     */
    markAsCommitted(id: string): Promise<void>;
    /**
     * How long (ms) we should wait before checking for unread notifications again.
     * @default 120000
     */
    pollingMS?: number;
    /**
     * Path to the notifications page.
     * @default '/notifications'
     */
    notificationsPath?: string;
    /**
     * A function to call whenever an action button of a notification is clicked. It receives the id of the notification as a parameter.
     *
     * Useful for adding a behavior other than committing the notification and redirecting to its action. Example: analytics.
     *
     * @param id the id of the notification.
     */
    onClickAction?: (id: string) => void;
}
export type UnreadNotificationListener = (hasUnreadNotification: boolean) => void;
//# sourceMappingURL=types.d.ts.map