import { LazyNotificationList } from './LazyNotificationList.js';
import { LoadNotificationsFilters, NotificationConfig, UnreadNotificationListener } from './types.js';
export declare class NotificationController {
    private lazyLists;
    readonly config: NotificationConfig;
    private readStatusMap;
    private nextId;
    private unreadNotification;
    private lastUnreadVerification;
    private pollingTimeoutId;
    private unreadNotificationListeners;
    constructor(config: NotificationConfig);
    private hasUnreadNotificationInMemory;
    private setUnreadNotification;
    createLazyNotificationList(filters?: LoadNotificationsFilters): LazyNotificationList;
    destroyLazyNotificationList(id: number): void;
    checkUnread(): Promise<void>;
    markAsCommitted(notificationId: string): Promise<void>;
    onUnreadNotificationChange(listener: UnreadNotificationListener): () => void;
    hasUnreadNotification(): boolean;
    reset(): void;
    mute(): void;
}
//# sourceMappingURL=NotificationController.d.ts.map