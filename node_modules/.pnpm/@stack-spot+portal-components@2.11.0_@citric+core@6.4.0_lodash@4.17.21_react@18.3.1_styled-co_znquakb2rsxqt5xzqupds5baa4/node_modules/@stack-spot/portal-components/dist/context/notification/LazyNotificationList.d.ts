import { GetTenantNotificationsResponse, ResponseModelGetTenantNotificationsResponse } from '../../notifications.js';
import { LazyNotificationListener, LoadNotificationsFilters, LoadNotificationsOptions } from './types.js';
interface ConstructorParams {
    id: number;
    load: (options: LoadNotificationsOptions) => Promise<ResponseModelGetTenantNotificationsResponse>;
    filters?: LoadNotificationsFilters;
}
export declare class LazyNotificationList {
    #private;
    readonly id: number;
    items: GetTenantNotificationsResponse[];
    private page;
    private total;
    private filters;
    private readonly load;
    private listeners;
    private currentFetch;
    constructor({ id, load, filters }: ConstructorParams);
    private notify;
    applyFilters(filters: LoadNotificationsFilters): Promise<void>;
    loadMore(): Promise<void>;
    hasMore(): boolean;
    subscribe(listener: LazyNotificationListener): () => void;
    update(readStatusMap: Map<string, boolean>): void;
    mute(): void;
}
export {};
//# sourceMappingURL=LazyNotificationList.d.ts.map