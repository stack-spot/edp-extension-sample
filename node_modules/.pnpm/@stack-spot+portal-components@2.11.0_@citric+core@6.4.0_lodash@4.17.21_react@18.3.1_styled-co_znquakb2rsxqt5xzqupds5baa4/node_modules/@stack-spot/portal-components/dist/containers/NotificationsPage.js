import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Text } from '@citric/core';
import { useTranslate } from '@stack-spot/portal-translate';
import { styled } from 'styled-components';
import { AsyncContent } from '../components/AsyncContent.js';
import { ErrorFeedback } from '../components/error/index.js';
import { SearchInput } from '../components/form/SearchInput.js';
import { Select } from '../components/form/Select/index.js';
import { NotificationList } from '../components/notification/NotificationList.js';
import { useNotificationList } from '../context/notification/hooks.js';
import { useNotificationController } from '../notifications.js';
const FilterBox = styled.div `
  margin: 24px 0;
  display: flex;
  flex-direction: row;
  gap: 8px;

  > * {
    flex: 1;
  }
`;
const criticalities = ['HIGH', 'MEDIUM', 'LOW'];
const contexts = ['ACCOUNT', 'STUDIO', 'WORKSPACE'];
export const NotificationsPage = () => {
    const t = useTranslate(dictionary);
    const controller = useNotificationController();
    const { hasMore, items, loadMore, applyFilters, filters, status, error } = useNotificationList();
    return (_jsxs(_Fragment, { children: [_jsx("header", { children: _jsx(Text, { appearance: "h2", as: "h1", children: t.title }) }), _jsx(Text, { appearance: "body2", colorScheme: "light.700", children: t.description }), _jsxs(FilterBox, { children: [_jsx(SearchInput, { searchText: t.filter, defaultValue: filters.search, onChange: search => applyFilters({ search }) }), _jsx(Select, { value: filters.criticality, options: criticalities, onChange: criticality => applyFilters({ criticality }), emptyOption: t.allCriticalities, renderLabel: o => t[`criticality.${o}`] }), _jsx(Select, { value: filters.context, options: contexts, onChange: context => applyFilters({ context }), emptyOption: t.allContexts, renderLabel: o => t[`context.${o}`] })] }), _jsx(AsyncContent, { error: error, loading: status === 'startup', errorDetails: { errorComponent: () => _jsx(ErrorFeedback, { code: error.code }), reportError: () => { } }, children: _jsx(NotificationList, { items: items, loading: status === 'loading', onCommit: id => controller.markAsCommitted(id), infiniteScroll: { hasMore, loadMore }, onClickAction: controller.config.onClickAction, showEmptySearch: true }) })] }));
};
const dictionary = {
    en: {
        title: 'Notifications',
        description: 'All notifications you received is shown up here.',
        filter: 'Filter',
        allCriticalities: 'All Criticalities',
        'criticality.HIGH': 'High',
        'criticality.MEDIUM': 'Medium',
        'criticality.LOW': 'Low',
        allContexts: 'All contexts',
        'context.ACCOUNT': 'Account',
        'context.STUDIO': 'Studio',
        'context.WORKSPACE': 'Workspace',
    },
    pt: {
        title: 'Notificações',
        description: 'Todas as notificações que você recebeu são mostradas aqui.',
        filter: 'Filtrar',
        allCriticalities: 'Todas as criticidades',
        'criticality.HIGH': 'Alto',
        'criticality.MEDIUM': 'Médio',
        'criticality.LOW': 'Baixo',
        allContexts: 'Todos os contextos',
        'context.ACCOUNT': 'Conta',
        'context.STUDIO': 'Estúdio',
        'context.WORKSPACE': 'Workspace',
    },
};
//# sourceMappingURL=NotificationsPage.js.map