export declare const CHAT_BUTTON_ID = "service-now-button";
export declare const CHAT_BUTTON_WRAPPER_ID = "service-now-content";
interface Options {
    /**
     * Function to run when the chat button is hidden, i.e. when the user clicks the close button that appears when the chat button is
     * hovered.
     */
    onClose?: () => void;
}
/**
 * @returns the iframe loaded by service now, i.e. the chat window; or null if the chat window doesn't exist.
 */
export declare function getServiceNowLauncher(): HTMLElement | null;
/**
 * Opens the chat window and makes the chat button visible.
 */
export declare function openServiceNowChat(): void;
/**
 * Shows the chat window, i.e. shows the service now iframe and switch the icon in the chat button to "close".
 */
export declare function showChatWindow(): void;
/**
 * Hides the chat window, i.e. hides the service now iframe and switch the icon in the chat button to "chat".
 */
export declare function hideChatWindow(): void;
/**
 * A react hook that indicates whether the chat button is visible or not. This is updated whenever the value changes.
 * @returns true if the chat button is visible and false otherwise.
 */
export declare function useServiceNowChatButtonVisibility(): boolean;
/**
 * Starts Service Now:
 *
 * - Creates the chat window feature by loading the required script.
 * - Adds a "minimize" button on top of the chat button (left bottom corner). This button appears whenever the user hovers the chat button.
 * If clicked, the chat button is hidden.
 * @param options
 */
export declare function useServiceNowEffect(options?: Options): void;
export declare const dictionary: {
    en: {
        errorLoadScript: string;
        hide: string;
        hiddenTitle: string;
        hiddenMessage: string;
    };
    pt: {
        errorLoadScript: string;
        hide: string;
        hiddenTitle: string;
        hiddenMessage: string;
    };
};
export {};
//# sourceMappingURL=service-now.d.ts.map