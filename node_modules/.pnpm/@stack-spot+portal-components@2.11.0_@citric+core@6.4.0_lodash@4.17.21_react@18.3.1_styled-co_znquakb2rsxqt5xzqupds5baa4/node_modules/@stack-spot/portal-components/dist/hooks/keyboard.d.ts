/// <reference types="react" />
interface Options<T extends HTMLElement = HTMLDivElement> {
    /**
     * A query selector that returns every html element that must be navigable through the keyboard.
     */
    querySelectors: string;
    /**
     * Function to call when ESC is pressed. or when TAB is pressed at the last item in the list of items returned by the query selector.
     */
    onPressEscape?: () => void;
    /**
     * Function to call when TAB is pressed at the last item in the list of items returned by the query selector. Will be the same as
     * onPressEscape if not specified.
     *
     * Attention: has no effect if `disableTabBehavior` is true.
     */
    onPressLastTab?: () => void;
    /**
     * Pass this function if you want any behavior when the user presses the arrow left.
     */
    onPressArrowLeft?: () => void;
    /**
     * Pass this function if you want any behavior when the user presses the arrow right.
     */
    onPressArrowRight?: () => void;
    /**
     * Disables any alteration to the tab key.
     * @default false
     */
    disableTabBehavior?: boolean;
    /**
     * If you already have a ref to the element you want to attach the events to, you can pass it in this prop.
     *
     * If you pass a ref. The events won't be attached to the document, instead, they will be attached to the element referred by the ref.
     */
    ref?: React.RefObject<T>;
}
/**
 * Creates listeners for controlling a Menu UI through the keyboard.
 * - Arrow down: next element in the iterator returned by the query selectors. First element, if the current element is the last.
 * - Arrow up: previous element in the iterator returned by the query selectors. Last element, if the current element is the first.
 * - Tab: same as Arrow down, but has a different behavior if the element is the last (see onPressLastTab).
 * - Esc: determined by onPressEscape.
 * @param props {@link Options}.
 * @returns an object with the element controlled by the keyboard (useRef); a function to attach the keyboard events and a function to
 * detach the keyboard events.
 */
export declare function useKeyboardControls<T extends HTMLElement = HTMLDivElement>(
/**
 * Options for the keyboard controls.
 */
{ querySelectors, onPressEscape, onPressLastTab, onPressArrowLeft, onPressArrowRight, disableTabBehavior, ref, }: Options<T>, 
/**
 * Calls `attachKeyboardListeners` (mount) and `detachKeyboardListeners` (unmount) whenever the deps passed as parameter changes.
 *
 * If deps are undefined, this component doesn't automatically add these listeners and you have to use the functions returned in the
 * result.
 */
deps?: any[]): {
    keyboardControlledElement: import("react").RefObject<T>;
    attachKeyboardListeners: () => void;
    detachKeyboardListeners: () => void;
};
export {};
//# sourceMappingURL=keyboard.d.ts.map