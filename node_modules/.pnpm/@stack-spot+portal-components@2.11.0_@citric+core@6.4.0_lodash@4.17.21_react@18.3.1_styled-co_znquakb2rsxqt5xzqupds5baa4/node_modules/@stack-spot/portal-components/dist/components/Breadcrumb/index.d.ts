/// <reference types="react" />
export type AnchorComponent = (props: React.AnchorHTMLAttributes<HTMLAnchorElement>) => React.ReactElement;
interface BreadcrumbItem {
    /**
     * A unique id for this link of the breadcrumb. If not provided, the label will be used.
     */
    key?: string;
    /**
     * Label for this route in the breadcrumb.
     */
    label: string;
    /**
     * If this route is accessible, the link to it.
     */
    href?: string;
}
interface Props {
    /**
     * The items to show.
     */
    items: BreadcrumbItem[];
    /**
     * When true, a loading feedback (skeleton) will show instead of the list.
     */
    isLoading?: boolean;
    /**
     * If set to true, after mounted, as soon as loading is false, the page title will be prepended with `$name - `, where `$name` is the
     * label of the last item in `items`.
     *
     * When unmounted, the title will go back to the previous value.
     *
     * @default false
     */
    shouldUpdatePageTitle?: boolean;
    /**
     * Key of the current page. If an item has this key, it won't be rendered as a link and will be marked as active.
     */
    currentPageKey?: string;
}
interface ItemProps extends Pick<Props, 'currentPageKey'> {
    item: BreadcrumbItem;
}
declare const BreadcrumbItem: ({ item: { label, href, key }, currentPageKey }: ItemProps) => import("react/jsx-runtime").JSX.Element;
/**
 * Builds a breadcrumb navigator based on the items passed in the properties.
 *
 * If the breadcrumb is obtained asynchronously, pass `isLoading = true` in order to show a loading feedback.
 */
export declare const BreadcrumbList: ({ items, isLoading, shouldUpdatePageTitle, currentPageKey }: Props) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=index.d.ts.map