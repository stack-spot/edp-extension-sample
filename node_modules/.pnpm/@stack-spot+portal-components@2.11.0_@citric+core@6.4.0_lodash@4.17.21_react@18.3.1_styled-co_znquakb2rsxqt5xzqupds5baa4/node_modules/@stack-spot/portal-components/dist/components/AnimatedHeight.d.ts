/// <reference types="react" />
interface Props {
    /**
     * A header with fixed height.
     */
    header?: React.ReactElement;
    /**
     * The content. This may change its height whenever. When the height changes, the animation will play making a fluid transition from the
     * previous height to the next.
     */
    children: React.ReactElement;
    /**
     * A footer with fixed height.
     */
    footer?: React.ReactElement;
    /**
     * Whether or not this panel is visible. Changing this value, animates the panel's height.
     * @default true
     */
    visible?: boolean;
    /**
     * The duration of the animations in milliseconds.
     * @default 300
     */
    duration?: number;
    /**
     * This component wraps its content in a div that changes its height from zero to the size of its content. It is not recommended to add
     * styles to it, but if you need to, use this property.
     */
    outerStyle?: React.CSSProperties;
    /**
     * This component wraps its content in a div that changes its height from zero to the size of its content. It is not recommended to add
     * classes to it, but if you need to, use this property.
     */
    outerClassName?: string;
    /**
     * The style to apply to the whole panel.
     *
     * Attention: this is not the outer-most div, use `outerStyle` if you need to style it.
     */
    style?: React.CSSProperties;
    /**
     * The class to apply to the whole panel.
     *
     * Attention: this is not the outer-most div, use `outerClassName` if you need to add a class to it.
     */
    className?: string;
}
/**
 * This is a generic component for animating the height of a panel whenever its content changes.
 *
 * You can provide a header and a footer with fixed height, these won't change during the animations and will always be visible.
 *
 * This panel can also be hidden or visible and transitions between these two state will be animated.
 * @param props the React props for this component. {@link Props}.
 */
export declare const AnimatedHeight: ({ children, footer, header, visible, duration, className, style, outerClassName, outerStyle }: Props) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=AnimatedHeight.d.ts.map