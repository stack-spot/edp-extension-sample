import { jsx as _jsx } from "react/jsx-runtime";
import { Text } from '@citric/core';
import { Skeleton } from '@citric/ui';
import { last } from 'lodash';
import { useEffect, useMemo } from 'react';
import { useAnchorTag } from '../../context/anchor.js';
import { titleEffect } from '../../hooks/title.js';
import { Box } from './styled.js';
const BreadcrumbItem = ({ item: { label, href, key }, currentPageKey }) => {
    const text = _jsx(Text, { appearance: "breadcrumb", children: label });
    const Link = useAnchorTag();
    const shouldBeLink = href && currentPageKey != key;
    return _jsx("li", { children: shouldBeLink ? _jsx(Link, { href: href, children: text }) : text });
};
/**
 * Builds a breadcrumb navigator based on the items passed in the properties.
 *
 * If the breadcrumb is obtained asynchronously, pass `isLoading = true` in order to show a loading feedback.
 */
export const BreadcrumbList = ({ items, isLoading, shouldUpdatePageTitle, currentPageKey }) => {
    const listItems = useMemo(() => items.map(item => _jsx(BreadcrumbItem, { item: item, currentPageKey: currentPageKey }, item.key || item.label)), [items]);
    useEffect(() => {
        const title = last(items)?.label;
        if (shouldUpdatePageTitle && title && !isLoading)
            return titleEffect(title);
    }, [items, isLoading]);
    return _jsx(Box, { children: isLoading ? _jsx(Skeleton, { height: "21px" }) : _jsx("ul", { children: listItems }) });
};
//# sourceMappingURL=index.js.map