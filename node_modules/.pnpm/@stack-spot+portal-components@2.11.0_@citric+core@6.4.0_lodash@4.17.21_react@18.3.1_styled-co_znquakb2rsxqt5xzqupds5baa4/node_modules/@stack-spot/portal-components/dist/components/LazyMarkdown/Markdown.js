import { jsx as _jsx } from "react/jsx-runtime";
import { Box, Image, Link, Text } from '@citric/core';
import { Table, Tbody, Td, Th, Thead, Tr } from '@citric/ui';
import ReactMarkdown from 'react-markdown';
import rehypeRaw from 'rehype-raw';
import remarkBreaks from 'remark-breaks';
import remarkGfm from 'remark-gfm';
import { BlockquoteMd } from './BlockquoteMd.js';
import { CodeViewer } from './CodeViewer.js';
import { Video } from './Video.js';
const styles = {
    title: {
        mb: 3,
    },
    boxContainer: {
        position: 'relative',
        bg: 'light.300',
        borderRadius: 'sm',
        mb: 10,
    },
    table: {
        borderRadius: 'xs',
    },
    customScroll: {
        height: '232px',
        overflow: 'auto',
        '&::-webkit-scrollbar': {
            width: '2px',
        },
        '&::-webkit-scrollbar-track': {
            background: 'light.400',
        },
        '&::-webkit-scrollbar-thumb': {
            background: 'primary.500',
        },
        '&::-webkit-scrollbar-thumb:hover': {
            background: 'primary.500',
        },
    },
    refreshButton: {
        position: 'absolute',
        top: '8px',
        right: '48px',
    },
    copyButton: {
        position: 'absolute',
        top: '8px',
        right: '16px',
    },
    code: {
        bg: 'blue.900',
        color: 'blue.100',
        px: 1,
        py: 1,
        borderRadius: 'xs',
    },
};
/**
 * Custom components for rendering markdown elements.
 */
const component = () => ({
    p: (props) => _jsx(Text, { appearance: "body2", ...props }),
    strong: (props) => _jsx(Text, { weight: "bold", colorScheme: "light.700", as: "strong", ...props }),
    h1: (props) => _jsx(Text, { as: "h1", appearance: "h2", gutterBottom: true, ...props, sx: styles.title }),
    h2: (props) => _jsx(Text, { as: "h2", appearance: "h3", gutterBottom: true, ...props, sx: styles.title }),
    h3: (props) => _jsx(Text, { as: "h3", appearance: "h4", gutterBottom: true, ...props, sx: styles.title }),
    h4: (props) => _jsx(Text, { as: "h4", appearance: "h5", gutterBottom: true, ...props, sx: styles.title }),
    a: (props) => _jsx(Link, { colorScheme: "primary", ...props, target: "_blank" }),
    table: (props) => _jsx(Table, { appearance: "striped", ...props, sx: styles.table }),
    thead: (props) => _jsx(Thead, { ...props }),
    tbody: (props) => _jsx(Tbody, { ...props }),
    tr: (props) => _jsx(Tr, { ...props }),
    td: (props) => _jsx(Td, { ...props }),
    th: (props) => _jsx(Th, { ...props }),
    li: (props) => _jsx(Text, { as: "li", appearance: "body2", colorScheme: "light.700", ...props }),
    br: (props) => _jsx(Box, { my: 5, ...props }),
    blockquote: (props) => _jsx(BlockquoteMd, { props }),
    video: (props) => _jsx(Video, { ...props }),
    img: (props) => _jsx(Image, { ...props }),
    pre(props) {
        const propComp = props.children.props;
        const match = /language-(\w+)/.exec(propComp.className || '');
        const inferredLanguage = match && match.length > 1 ? match[1] : undefined;
        return (_jsx(Box, { sx: { ...styles.boxContainer }, children: _jsx(CodeViewer, { language: inferredLanguage, ...propComp, data: propComp.children }) }));
    },
    code: ({ ...props }) => _jsx(Text, { as: "code", sx: styles.code, ...props, children: props.children }),
});
/**
 * Renders a component that provides markdown content visualization using citric components.
 *
 * @param options the props for rendering the component: {@link MarkdownProps}.
 */
const Markdown = ({ children, components }) => (_jsx(ReactMarkdown, { rehypePlugins: [rehypeRaw], remarkPlugins: [remarkGfm, remarkBreaks], components: { ...component(), ...components }, children: children }));
// eslint-disable-next-line import/no-default-export
export default Markdown;
//# sourceMappingURL=Markdown.js.map