import { GetTenantNotificationsResponse } from './types.js';
interface Props {
    notification: GetTenantNotificationsResponse;
    isSummary: boolean;
    id?: string;
}
interface DeprecatedNotificationItemProps extends Props {
    /**
     * @deprecated use `onCommit` and `onClickAction` instead.
     *
     * Function to call when the user marks a notification as read or unread. This can happen either through the mail icon or when the user
     * clicks the action button of a notification. Type will be "icon" on the first case or "callToAction" on the former.
     *
     * Tip: clicking the action button (callToAction) should only change the read status if the message is unread. This is not treated by this
     * component, be sure to handle it on your side.
     *
     * Deprecation warning: since the deprecation, the parameter `read` is always true.
     */
    onClickMarkReadUnread: (read: boolean, type: 'callToAction' | 'icon') => void | Promise<void>;
}
interface NewNotificationItemProps extends Props {
    /**
     * Function to call when the user marks a notification as read (committed).
     */
    onCommit: () => void;
    /**
     * Whenever the user clicks the action button of a notification, the notification is marked as read (committed) and the browser is
     * redirected to the page that corresponds to the action.
     *
     * If you need additional behavior, use this parameter, which is a function to call whenever the button is clicked.
     */
    onClickAction?: () => void;
}
type NotificationItemProps = DeprecatedNotificationItemProps | NewNotificationItemProps;
/**
 * NotificationItem component that renders a notification item.
 *
 * @param props the component's props {@link NotificationItemProps}.
 */
export declare const NotificationItem: ({ notification, isSummary, ...props }: NotificationItemProps) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=NotificationItem.d.ts.map