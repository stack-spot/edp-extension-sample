import { CustomSelectProps } from './types.js';
/**
 * Renders a Select component using the Citric Design System.
 *
 * The styled version of the select component is rendered on top of the default select from the browser. Visual users will use the Citric
 * version of a Select, but blind users, who interacts with the keyboard, will use the default browser select instead, which is already
 * highly optimized for accessibility.
 *
 * The CustomSelect lets you customize how each option and the selected value are rendered. To do so, use the prop `renderLabel` and
 * `emptyOption`.
 *
 * If you don't need fully customized labels, check the more simple components: `DetailedSelect` and `Select`.
 *
 * The CustomSelect expects a {@link GenericAccessibleLabel} to create labels.
 *
 * Tips:
 * - This is a controlled field. You can't use it any other way. If you're using it with react-hook-form, you need to wrap it under the
 * component `<Controller>` from the same library.
 * - `value` is required and must be of the same type of an item of the array of options. `value` is only optional if `emptyOption` is
 * provided, in this case, an empty option is rendered and the value is undefined when it's selected.
 * - A consequence of the previous rule is that you can't have an empty selection if you don't set a value for `emptyOption`. This
 * component must work exactly like the browser's `select`, so this behavior is intended.
 * - If `renderLabel` or `renderValue` are not provided, this will use the `toString` method of the object.
 *
 * @example
 * options as an object array
 * ```
 * const options = ['option 1', 'option 2', 'option 3']
 *
 * function renderCustomLabel(option: string) {
 *   return {
 *     // this is how the option will be rendered in the list
 *     option: (
 *       <div style={{ display: flex, flexDirection: 'row', gap: '5px' }}>
 *         <img src="/my-image.png" width="40px" height="40px" />
 *         <p>An option called {option}</p>
 *       </div>
 *     ),
 *     // this is how the option will be rendered inside the input, when it's the value currently selected.
 *     selected: <p>{option}</p>,
 *     // this a string representation of the option: used for accessibility. This should contain the same information as `option`.
 *     text: `An option called ${option}`,
 *   )
 * }
 *
 * const MyComponent = {
 *   const [value, setValue] = useState(options[0])
 *   return <CustomSelect options={options} value={value} onChange={setValue} renderLabel={renderCustomLabel} />
 * }
 * ```
 * @example
 * options as an object array
 * ```
 * const options = [{ id: 1, name: 'John', age: 34 }, { id: 2, name: 'Marcia', age: 28 }, { id: 3, name: 'Angeline', age: 58 }]
 *
 * function renderCustomLabel(option: (typeof options)[number]) {
 *   return {
 *     // this is how the option will be rendered in the list
 *     option: (
 *       <div style={{ display: flex, flexDirection: 'row', gap: '5px' }}>
 *         <img src="/my-image.png" width="40px" height="40px" />
 *         <p>{option.name}, aged {option.age}</p>
 *       </div>
 *     ),
 *     // this is how the option will be rendered inside the input, when it's the value currently selected.
 *     selected: <p>{option}</p>,
 *     // this a string representation of the option: used for accessibility. This should contain the same information as `option`.
 *     text: `${option.name}, aged ${option.age}`,
 *   )
 * }
 *
 * const MyComponent = {
 *   const [value, setValue] = useState(options[0])
 *   // below, renderValue could be `o => o.id`
 *   return <CustomSelect options={options} value={value} onChange={setValue} renderValue="id" renderLabel={renderCustomLabel} />
 * }
 * ```
 * @param props the component props: {@link CustomSelectProps}.
 */
export declare function CustomSelect<T>({ onChange, options, value, emptyOption, renderLabel, renderValue, maxItems, onFocus, onBlur, style, className, isLoading, disabled, height, ...props }: CustomSelectProps<T>): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=CustomSelect.d.ts.map