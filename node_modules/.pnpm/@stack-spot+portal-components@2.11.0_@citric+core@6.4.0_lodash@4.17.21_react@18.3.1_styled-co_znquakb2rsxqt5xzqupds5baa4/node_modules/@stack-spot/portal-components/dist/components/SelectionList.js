import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Flex, IconBox, Text } from '@citric/core';
import { ArrowLeft, Check, ChevronRight } from '@citric/icons';
import { IconButton } from '@citric/ui';
import { listToClass, theme } from '@stack-spot/portal-theme';
import { useTranslate } from '@stack-spot/portal-translate';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { styled } from 'styled-components';
import { useAnchorTag } from '../context/anchor.js';
import { useKeyboardControls } from '../hooks/keyboard.js';
const ANIMATION_DURATION_MS = 300;
const MAX_HEIGHT_TRANSITION = `max-height ease-in ${ANIMATION_DURATION_MS / 1000}s`;
const SelectionBox = styled.div `
  max-height: 0;
  overflow-y: ${({ $scroll }) => $scroll ? 'auto' : 'hidden'};
  overflow-x: hidden;
  transition: ${MAX_HEIGHT_TRANSITION}, visibility 0s ${ANIMATION_DURATION_MS / 1000}s;
  z-index: 1;
  box-shadow: 4px 4px 48px #000;
  border-radius: 0.5rem;
  visibility: hidden;

  .selection-list-content {
    display: flex;
    flex-direction: column;
    border-radius: 0.5rem;
    background-color: ${theme.color.light['300']};
    padding-inline: ${({ $showListAsCard }) => $showListAsCard ? '8px' : '0'};
  }

  .section-title, li > a {
    height: 40px;
    padding: 0 8px;
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  li > a {
    gap: 4px;
    transition: background-color 0.2s;
    &:hover, &:focus {
      background: ${theme.color.light['400']};
    }
    .label {
      flex: 1;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }

  li.action {
    background-color: ${({ $showListAsCard }) => $showListAsCard ? theme.color.light['400'] : ''};
    border:  ${({ $showListAsCard }) => '1px solid' + $showListAsCard ? theme.color.light['500'] : 'transparent'};
    border-radius: ${({ $showListAsCard }) => $showListAsCard ? '4px' : '0'};
    margin-bottom: ${({ $showListAsCard }) => $showListAsCard ? '8px' : '0'};
  }

  li.section {
    border-bottom: 2px solid;
    border-bottom-color: ${({ $showListAsCard }) => $showListAsCard ? 'transparent' : theme.color.light['600']};
    &:last-child {
      border-bottom: none;
    }
  }

  &.visible {
    max-height: ${({ $maxHeight }) => $maxHeight};
    visibility: visible;
    transition: ${MAX_HEIGHT_TRANSITION};
  }
`;
function renderAction({ label, href, onClick, icon, iconRight, active, target, iconActive = _jsx(Check, {}), className = '', lang, hrefLang, title, }, { onClose, Link }) {
    function handleClick(event) {
        onClick?.(event);
        onClose?.();
    }
    const isTextLabel = typeof label === 'string';
    return (_jsx("li", { className: "action", title: title, children: _jsxs(Link, { href: href, onClick: handleClick, target: target, tabIndex: 0, "aria-current": active && 'page', className: className, lang: lang, hrefLang: hrefLang, children: [icon && _jsx(IconBox, { children: icon }), isTextLabel ? _jsx(Text, { appearance: "body2", className: "label", children: label }) : label.element, iconRight && _jsx(IconBox, { children: iconRight }), active && _jsx(IconBox, { children: iconActive })] }) }, isTextLabel ? label : label.id));
}
function renderCollapsible({ label, icon, iconRight, className = '', children }, { setCurrent, controllerId, Link }) {
    function handleClick(ev) {
        //accessibility: this will tell the screen reader the section was expanded before this link is removed from the DOM.
        ev.target?.setAttribute?.('aria-expanded', 'true');
        setCurrent({ items: children, label });
    }
    return (_jsx("li", { className: "collapsible", children: _jsxs(Link, { onClick: handleClick, tabIndex: 0, className: className, "aria-expanded": false, "aria-controls": controllerId, children: [icon && _jsx(IconBox, { children: icon }), _jsx(Text, { appearance: "body2", className: "label", children: label }), iconRight && _jsx(IconBox, { children: iconRight }), _jsx(IconBox, { children: _jsx(ChevronRight, {}) })] }) }, label));
}
function renderSection({ label, className = '', children }, options) {
    return (_jsxs("li", { className: `${className} section`, children: [label && _jsx(Text, { appearance: "overheader2", colorScheme: "light.700", className: "section-title", children: label }), _jsx("ul", { children: children.map(i => renderItem(i, options)) })] }, label ?? children.map(c => c.label).join('-')));
}
function renderItem(item, options) {
    if ('children' in item) {
        return item.type === 'section' ? renderSection(item, options) : renderCollapsible(item, options);
    }
    return renderAction(item, options);
}
/**
 * Renders a component that allows the selection of one item. The list is show/hidden according to the prop `visible`.
 *
 * The items in this list can be grouped into multiple sections. Sections may be displayed on a column (section) or might replace the
 * current list of options with another list of options (collapsible).
 *
 * This component implements keyboard controls and accessibility features.
 * @param props the component's props {@link SelectionListProps}.
 */
export const SelectionList = ({ id, items, className, style, visible = true, maxHeight = '300px', onHide, before, after, scroll, showListAsCard, }) => {
    const Link = useAnchorTag();
    const t = useTranslate(dictionary);
    const [current, setCurrent] = useState({ items });
    const { keyboardControlledElement: wrapper, attachKeyboardListeners, detachKeyboardListeners } = useKeyboardControls({ onPressEscape: onHide, querySelectors: 'li.action a, li.collapsible a, button' });
    const listItems = useMemo(() => current.items.map(i => renderItem(i, {
        setCurrent: (next) => setCurrent({ ...next, parent: current }),
        onClose: onHide,
        controllerId: id,
        Link,
    })), [current]);
    const hide = useCallback((event) => {
        const target = event.target;
        // if the element is not in the DOM anymore, we'll consider the click was inside the selection list
        const isClickInsideSelectionList = !target?.isConnected || wrapper.current?.contains(target);
        const isAction = target?.classList?.contains('action') || !!target?.closest('.action');
        const isInsideTour = !!target?.closest('#___reactour');
        if (!isInsideTour && (!isClickInsideSelectionList || isAction))
            onHide?.();
    }, []);
    useEffect(() => {
        function removeListeners() {
            detachKeyboardListeners();
            document.removeEventListener('click', hide);
        }
        if (visible) {
            setCurrent({ items });
            attachKeyboardListeners();
            if (onHide)
                setTimeout(() => document.addEventListener('click', hide), 50);
        }
        else {
            removeListeners();
        }
        return () => removeListeners();
    }, [visible]);
    return (_jsx(SelectionBox, { id: id, ref: wrapper, "$maxHeight": maxHeight, style: style, className: listToClass(['selection-list', visible ? 'visible' : undefined, className]), "$scroll": scroll, "aria-hidden": !visible, "$showListAsCard": showListAsCard, children: _jsxs("div", { className: "selection-list-content", children: [before, current.parent
                    ? (_jsxs(Flex, { mt: 5, mb: 1, alignItems: "center", children: [_jsx(IconButton, { onClick: (ev) => {
                                    // accessibility: this will tell the screen reader the section was collapsed before this button is removed from the DOM.
                                    ev.target?.setAttribute?.('aria-expanded', 'false');
                                    setCurrent(current.parent ?? { items });
                                }, sx: { mr: 3 }, title: t.back, "aria-controls": id, "aria-expanded": true, children: _jsx(ArrowLeft, {}) }), _jsx(Text, { appearance: "microtext1", children: current.label })] }))
                    : undefined, _jsxs("ul", { children: [listItems, after &&
                            _jsx("li", { className: "action", children: after })] })] }) }));
};
const dictionary = {
    en: {
        back: 'Go back',
    },
    pt: {
        back: 'Voltar',
    },
};
//# sourceMappingURL=SelectionList.js.map