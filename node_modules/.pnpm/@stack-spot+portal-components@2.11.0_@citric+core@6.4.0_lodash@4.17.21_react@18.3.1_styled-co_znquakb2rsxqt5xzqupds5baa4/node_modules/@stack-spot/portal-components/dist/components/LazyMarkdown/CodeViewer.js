import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Box, Flex, Text } from '@citric/core';
import { getColor, getRadius } from '@citric/core/dist/utils/theme.js';
import { Copy, Refresh } from '@citric/icons';
import { IconButton } from '@citric/ui';
import { theme } from '@stack-spot/portal-theme';
import { useTranslate } from '@stack-spot/portal-translate';
import SyntaxHighlighter from 'react-syntax-highlighter';
import styled from 'styled-components';
const style = {
    scrollable: {
        minHeight: '64px',
        maxHeight: '232px',
        overflow: 'auto',
        '&::-webkit-scrollbar': {
            width: '4px',
            height: '4px',
        },
        '&::-webkit-scrollbar-track': {
            background: 'light.400',
            borderRadius: '2px',
        },
        '&::-webkit-scrollbar-thumb': {
            background: 'light.700',
            borderRadius: '2px',
        },
    },
};
const Wrapper = styled(Box) `
  background-color: ${theme.color.gray[900]};
  border-radius: ${({ theme }) => getRadius(theme, 'xs')};
  position: relative;
  padding: 8px;
  overflow: hidden;

  > .scrollable-container {
    min-height: 64px;
    max-height: 232px;
    overflow: auto;
    &::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }
    &::-webkit-scrollbar-track {
      background: ${theme.color.light[400]};
      border-radius: 2px;
    }
    &::-webkit-scrollbar-thumb,
    &::-webkit-scrollbar-thumb:hover {
      background: ${theme.color.light[700]};
      border-radius: 2px;
    }
  }

  pre {
    background-color: transparent;
    font-family: 'Roboto Mono';
    font-size: 14.4px;
    padding: 0;
    margin-top: 0;
    overflow: unset;
    text-shadow: none;
    color: ${theme.color.gray[50]};
  }

  .hljs-string {
    color: ${theme.color.teal[300]};
  }
  .hljs-tag {
    color: ${({ theme }) => getColor(theme, 'teal')};
  }
  .hljs-attr {
    color: ${theme.color.gray[50]};
  }
  .hljs-number {
    color: ${theme.color.gray[300]};
  }
  .hljs-property {
    color: ${theme.color.gray[50]};
  }
  .hljs-keyword {
    color: ${theme.color.blue[200]};
  }
  .comment {
    color: ${theme.color.gray[400]};
  }
  .hljs-expression {
    color: ${theme.color.orange[400]};
  }

  .button-group {
    position: absolute;
    top: 8px;
    right: 24px;
    display: flex;

    button {
      margin-left: 6px;
      &:focus {
        background-color: ${({ theme }) => getColor(theme, 'light.300')};
      }
    }
  }
`;
/**
 * CodeViewer component that displays code with syntax highlighting based on application theme and optional copy and refresh buttons.
 *
* @param options the props for rendering the component: {@link Props}.
 */
export const CodeViewer = ({ language, data, onClickRefresh, scrollable = true, copyButton }) => {
    const t = useTranslate(codeViewerLocale);
    return (_jsx(Wrapper, { children: data ? (_jsxs(_Fragment, { children: [_jsx(Flex, { style: scrollable ? style.scrollable : undefined, children: _jsx(SyntaxHighlighter, { language: language, showLineNumbers: true, useInlineStyles: false, children: String(data).replace(/\n$/, '') }) }), _jsxs("div", { className: "button-group", children: [onClickRefresh && (_jsx(IconButton, { onClick: onClickRefresh, children: _jsx(Refresh, {}) })), copyButton ? (_jsx(IconButton, { onClick: () => navigator.clipboard.writeText(data), children: _jsx(Copy, {}) })) : null] })] })) : (_jsx(Text, { appearance: "body2", children: t.noData })) }));
};
export const codeViewerLocale = {
    en: {
        noData: 'No data available.',
    },
    pt: {
        noData: 'Sem dados dispon√≠veis.',
    },
};
//# sourceMappingURL=CodeViewer.js.map