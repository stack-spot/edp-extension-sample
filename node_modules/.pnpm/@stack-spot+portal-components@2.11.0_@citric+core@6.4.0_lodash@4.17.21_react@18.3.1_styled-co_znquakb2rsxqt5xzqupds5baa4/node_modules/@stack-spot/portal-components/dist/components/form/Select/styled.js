import { theme } from '@stack-spot/portal-theme';
import { styled } from 'styled-components';
export const SelectBox = styled.div `
  position: relative;
  // controls the height of component when it's closed
  height: ${({ $inputHeight }) => $inputHeight};

  select {
    border: none;
    opacity: 0;
    pointer-events: none;
    // prevents visual overflow
    max-width: 10px;
  }
  
  .fake-select {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    border-radius: 0.25rem;
    display: flex;
    flex-direction: column;
    border: 1px solid ${theme.color.light[600]};
    transition: border-color 0.3s, box-shadow 0.3s;
    background-color: ${theme.color.light[300]};

    /* lets the z-index unset until the animation on the height ends. */
    &:not(.open) {
      z-index: unset;
      animation: 0.3s z-index-animation;
      @keyframes z-index-animation {
        0% {
          z-index: 1;
        }
        99% {
          z-index: 1;
        }
        100% {
          z-index: unset;
        }
      }
    }

    &.disabled {
      background-color: ${theme.color.light[500]};
      color: ${theme.color.light[700]};
      .current-value {
        cursor: not-allowed;
      }
    }

    .arrow {
      transition: transform ease-in-out 0.3s;
    }

    &.focused, &.open {
      border: 1px solid ${theme.color.primary[500]};
      box-shadow: 0 0 0 1px ${theme.color.primary[500]};
    }

    &.open {
      z-index: 1;
      .arrow {
        transform: rotate(180deg);
      }
      .options {
        /* lets the overflow be hidden until the animation on the height ends. */
        overflow-y: auto;
        animation: 0.3s overflow-animation;
        @keyframes overflow-animation {
          0% {
            overflow-y: hidden;
          }
          99% {
            overflow-y: hidden;
          }
          100% {
            overflow-y: auto;
          }
        }
      }
    }

    .current-value {
      height: calc(100% - 2px);
      display: flex;
      flex-direction: row;
      padding: 8px;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }

    .clipped-text {
      text-overflow: ellipsis;
      width: 100%;
      overflow: hidden;
      white-space: nowrap;
    }

    .options {
      list-style: none;
      padding: 0;
      margin: 0;
      overflow-y: hidden;
      transition: height ease-in-out 0.3s;
      scrollbar-gutter: stable;

      li {
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 9px;
        border-top: 1px solid ${theme.color.light[600]};
        cursor: pointer;
        transition: background-color 0.2s;
        &:hover, &:focus {
          background-color: ${theme.color.light[500]};
        }
        outline: none;
      }

      .detailed {
        display: flex;
        flex-direction: row;
        gap: 10px;
        align-items: center;
        .image {
          width: 40px;
          height: 40px;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-shrink: 0;
          overflow: hidden;
          & > * {
            max-width: 100%;
            max-height: 100%;
          }
        }
        .text-content {
          display: flex;
          flex-direction: column;
          gap: 5px;
          .description {
            color: ${theme.color.light[700]};
          }
        }
      }

      /* the list is inert when, and only when, its having its height measured */
      &[inert] {
        opacity: 0;
        pointer-events: none;
        position: absolute;
        /* we don't want to have the height measured over the height of $maxItems */
        li:nth-child(n+${({ $maxItems }) => $maxItems + 1}) {
          display: none;
        }
      }
    }
  }
`;
//# sourceMappingURL=styled.js.map