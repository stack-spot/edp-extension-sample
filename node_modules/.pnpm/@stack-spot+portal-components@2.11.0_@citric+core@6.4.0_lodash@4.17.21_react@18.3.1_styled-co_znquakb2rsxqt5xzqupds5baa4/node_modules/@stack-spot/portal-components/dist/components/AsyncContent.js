import { jsx as _jsx } from "react/jsx-runtime";
import { Flex } from '@citric/core';
import { LoadingCircular } from '@citric/ui';
import { useEffect, useLayoutEffect } from 'react';
/**
 * Renders a component that provides user feedback on async requests.
 * It renders either a loading component, an error component (which is received as prop)
 * or the received children props.
 *
 * @param options the props for rendering the component: {@link Props}.
 */
export const AsyncContent = ({ loading, error, autofocus, children, errorDetails }) => {
    const ErrorComponent = errorDetails.errorComponent;
    useEffect(() => {
        if (error) {
            errorDetails.reportError(error);
            // eslint-disable-next-line no-console
            console.error(error);
        }
    }, [error]);
    useLayoutEffect(() => {
        if (!loading && !error) {
            typeof autofocus === 'string' ? document.querySelector(autofocus)?.focus?.() : autofocus?.current?.focus();
        }
    }, [loading, error]);
    if (loading) {
        return (_jsx(Flex, { alignItems: "center", justifyContent: "center", flex: 1, style: { padding: '80px' }, "data-test-hint": "loading", children: _jsx(LoadingCircular, {}) }));
    }
    if (error) {
        return _jsx(ErrorComponent, { error: error });
    }
    return children;
};
//# sourceMappingURL=AsyncContent.js.map