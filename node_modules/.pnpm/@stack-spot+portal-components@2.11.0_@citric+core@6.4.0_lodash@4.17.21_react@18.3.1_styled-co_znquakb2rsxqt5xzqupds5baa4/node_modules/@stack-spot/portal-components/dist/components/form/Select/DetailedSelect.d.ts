import { DetailedSelectProps } from './types.js';
/**
 * Renders a Select component using the Citric Design System.
 *
 * The styled version of the select component is rendered on top of the default select from the browser. Visual users will use the Citric
 * version of a Select, but blind users, who interacts with the keyboard, will use the default browser select instead, which is already
 * highly optimized for accessibility.
 *
 * The DetailedSelect lets you set an image, a title and a description for each option. To do so, use the prop `renderLabel` and
 * `emptyOption`. The accessible string for each option will always be `option.title: option.description`.
 *
 * To use more customizable labels, check the `CustomSelect`. To use more simple labels (just strings) use `Select`.
 *
 * The DetailedSelect expects a {@link DetailedLabel} to create labels.
 *
 * Tips:
 * - This is a controlled field. You can't use it any other way. If you're using it with react-hook-form, you need to wrap it under the
 * component `<Controller>` from the same library.
 * - `value` is required and must be of the same type of an item of the array of options. `value` is only optional if `emptyOption` is
 * provided, in this case, an empty option is rendered and the value is undefined when it's selected.
 * - A consequence of the previous rule is that you can't have an empty selection if you don't set a value for `emptyOption`. This
 * component must work exactly like the browser's `select`, so this behavior is intended.
 * - If `renderLabel` or `renderValue` are not provided, this will use the `toString` method of the object to set the option's title.
 *
 * @example
 * options as a string array
 * ```
 * const options = ['option 1', 'option 2', 'option 3']
 *
 * function renderDetailedLabel(option: string) {
 *   return {
 *     title: option,
 *     description: 'my description',
 *     image: <img src="/my-image.png" />,
 *  }
 * }
 *
 * const MyComponent = {
 *   const [value, setValue] = useState(options[0])
 *   return <DetailedSelect options={options} value={value} onChange={setValue} renderLabel={renderDetailedLabel} />
 * }
 * ```
 * @example
 * options as an object array
 * ```
 * const options = [{ id: 1, name: 'John', age: 34 }, { id: 2, name: 'Marcia', age: 28 }, { id: 3, name: 'Angeline', age: 58 }]
 *
 * function renderDetailedLabel(option: (typeof options)[number]) {
 *   return {
 *     title: option.name,
 *     description: `${option.age} years old`,
 *     image: <img src="/my-image.png" />,
 *   }
 * }
 *
 * const MyComponent = {
 *   const [value, setValue] = useState(options[0])
 *   // below, renderValue could be `o => o.id`
 *   return <DetailedSelect options={options} value={value} onChange={setValue} renderValue="id" renderLabel={renderDetailedLabel} />
 * }
 * ```
 * @param props the component props: {@link DetailedSelectProps}.
 */
export declare function DetailedSelect<T>({ renderLabel, emptyOption, ...props }: DetailedSelectProps<T>): import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=DetailedSelect.d.ts.map