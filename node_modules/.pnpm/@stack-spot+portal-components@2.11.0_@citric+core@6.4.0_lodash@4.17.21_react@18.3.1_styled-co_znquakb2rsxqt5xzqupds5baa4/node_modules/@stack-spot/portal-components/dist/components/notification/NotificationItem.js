import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, Button, Flex, IconBox, Text } from '@citric/core';
import { Envelope, EnvelopeOpen, ExternalLink } from '@citric/icons';
import { IconButton, Tooltip } from '@citric/ui';
import { useTranslate } from '@stack-spot/portal-translate';
import { differenceInDays, parseISO } from 'date-fns';
import { useAnchorTag } from '../../context/anchor.js';
import { useGetNotificationTitleAndDescription } from '../../context/notification/hooks.js';
import { useDateFormatter } from '../../hooks/date.js';
import { LazyMarkdown } from '../LazyMarkdown/index.js';
const styles = {
    item: (color, isRead) => ({
        borderLeft: `2px solid ${color}`,
        opacity: isRead ? 0.5 : 1,
    }),
};
const statusToColor = {
    LOW: 'success.500',
    MEDIUM: 'warning.500',
    HIGH: 'danger.500',
};
const style = {
    tooltip: {
        '&::after': {
            top: '25%',
        },
    },
};
/**
 * NotificationHeader component that renders the header of a notification.
 *
 * @param props the component's props.
 */
const NotificationHeader = ({ title, isSummary }) => (_jsx(Flex, { justifyContent: "space-between", mb: 2, sx: { maxWidth: isSummary ? '330px' : '100%' }, flexWrap: "nowrap", children: _jsx(Text, { appearance: isSummary ? 'body2' : 'body1', nowrapEllipsis: true, children: title }) }));
/**
 * Get the number of days ago from the given date string.
 *
 * @param {string} dateString - The date string to calculate the days ago.
 * @returns {number} The number of days ago.
 */
const getDaysAgo = (dateString) => {
    const givenDate = parseISO(dateString);
    const today = new Date();
    return differenceInDays(today, givenDate);
};
/**
 * NotificationContent component that renders the content of a notification.
 *
 * @param props the component's props {@link Props}.
 */
const NotificationContent = ({ notification, isSummary }) => {
    const { formatDate } = useDateFormatter();
    const t = useTranslate(dictionary);
    const { description } = useGetNotificationTitleAndDescription(notification);
    const daysAgo = getDaysAgo(notification.trigger_at);
    const components = () => ({
        ul: (props) => _jsx(Text, { as: "ul", appearance: "body2", colorScheme: "light.700", sx: { listStyleType: 'disc', marginLeft: '1rem' }, ...props }),
    });
    return (_jsxs(_Fragment, { children: [!isSummary && _jsx(Flex, { mt: 4, mb: 3, flexDirection: "column", children: _jsx(LazyMarkdown, { components: components(), children: description }) }), _jsxs(Flex, { children: [_jsx(Text, { appearance: "microtext1", colorScheme: "light.700", children: t[notification.context] }), _jsx(Text, { appearance: "microtext1", colorScheme: "light.700", mx: "2", children: "\u2022" }), !isSummary && _jsxs(_Fragment, { children: [_jsx(Text, { appearance: "microtext1", colorScheme: "light.700", children: formatDate(notification.trigger_at) }), _jsx(Text, { appearance: "microtext1", colorScheme: "light.700", mx: "2", children: "\u2022" })] }), _jsx(Text, { appearance: "microtext1", colorScheme: "light.700", children: daysAgo > 0 ? daysAgo + ' ' + t.daysAgo : t.today })] })] }));
};
/**
 * NotificationFooter component that renders the footer of a notification.
 *
 * @param props the component's props {@link NotificationFooterProps}.
 */
const NotificationFooter = ({ actionURL, onClickAction, title }) => {
    const t = useTranslate(dictionary);
    const Link = useAnchorTag();
    return (_jsx(Flex, { mt: "5", children: _jsxs(Button, { size: "sm", colorScheme: "inverse", appearance: "text", onClick: onClickAction, as: Link, href: actionURL, "aria-label": t.viewNotification.replace('%s', title || t.view), target: "_blank", children: [_jsx(Text, { sx: { mr: 2, textDecoration: 'underline' }, children: t.view }), _jsx(IconBox, { size: "xs", children: _jsx(ExternalLink, {}) })] }) }));
};
/**
 * NotificationItem component that renders a notification item.
 *
 * @param props the component's props {@link NotificationItemProps}.
 */
export const NotificationItem = ({ notification, isSummary, ...props }) => {
    const t = useTranslate(dictionary);
    const { title } = useGetNotificationTitleAndDescription(notification);
    function commit() {
        if ('onCommit' in props)
            props.onCommit();
        else
            props.onClickMarkReadUnread(true, 'icon');
    }
    function clickAction() {
        if ('onCommit' in props) {
            if (!notification.committed)
                props.onCommit();
            props.onClickAction?.();
        }
        else
            props.onClickMarkReadUnread(true, 'callToAction');
    }
    return (_jsxs(Box, { sx: { position: 'relative' }, children: [_jsxs(Flex, { bg: "light.400", p: "3 3 3 5", r: "xs", flexDirection: "column", w: "100%", sx: styles.item(statusToColor[notification.criticality], notification.committed), children: [_jsx(NotificationHeader, { title: title, isSummary: isSummary }), _jsx(NotificationContent, { notification: notification, isSummary: isSummary }), notification.call_to_action && _jsx(NotificationFooter, { actionURL: notification.call_to_action, onClickAction: clickAction, title: title })] }), _jsx(Box, { sx: { position: 'absolute', top: '8px', right: '8px' }, children: _jsx(Tooltip, { text: notification.committed ? t.committed : t.uncommitted, position: "left", sx: style.tooltip, children: notification.committed
                        ? _jsx(IconBox, { role: "img", "aria-label": t.committed, size: "xs", style: { margin: '4px', opacity: 0.5 }, children: _jsx(EnvelopeOpen, {}) })
                        : (_jsx(IconButton, { "aria-label": t.uncommitted, onClick: commit, children: _jsx(IconBox, { size: "xs", children: _jsx(Envelope, {}) }) })) }) })] }));
};
const dictionary = {
    en: {
        ACCOUNT: 'Account',
        WORKSPACE: 'Workspace',
        STUDIO: 'Studio',
        AI: 'AI',
        daysAgo: 'days ago',
        today: 'today',
        committed: 'This notification has been read.',
        uncommitted: 'This notification has not been read yet. Click to mark as read.',
        view: 'View',
        viewNotification: 'View notification %s',
    },
    pt: {
        ACCOUNT: 'Conta',
        WORKSPACE: 'Workspace',
        STUDIO: 'Estúdio',
        AI: 'AI',
        daysAgo: 'dias atrás',
        today: 'hoje',
        committed: 'Esta notificação já foi lida.',
        uncommitted: 'Esta notificação ainda não foi lida. Clique para marcar como lida.',
        view: 'Visualizar',
        viewNotification: 'Visualizar notificação %s',
    },
};
//# sourceMappingURL=NotificationItem.js.map