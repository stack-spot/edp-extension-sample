/// <reference types="react" />
import { GetTenantNotificationsResponse, InfiniteScrollConfig } from './types.js';
export interface NotificationListProps {
    /**
     * Function to call when the message is marked as read (committed).
     * @param id the id of the notification where the read status changed.
     */
    onCommit: (id: string) => void;
    /**
     * Optional. Function called when the button to perform the notification action is clicked. This function will be run in addition to
     * the notification action.
     * @param id the id of the notification where the button was clicked
     */
    onClickAction?: (id: string) => void;
    /**
     * If you need this notification list to be have an infinite scroll behavior, set this option.
     */
    infiniteScroll?: InfiniteScrollConfig;
    /**
     * The notifications themselves.
     */
    items: GetTenantNotificationsResponse[];
    /**
     * A compact notification list don't show date headers (as a timeline) or descriptions of notifications.
     */
    compact?: boolean;
    /**
     * Whether or not the content is loading. If this is true, the content becomes transparent and the cursor turns into the progress cursor.
     */
    loading?: boolean;
    /**
     * If true, when the list is empty, the placeholder will say "nothing found" instead of "no notifications".
     */
    showEmptySearch?: boolean;
    style?: React.CSSProperties;
    className?: string;
}
export declare const NotificationList: ({ items, compact, onCommit, onClickAction, infiniteScroll, loading, showEmptySearch, style, className }: NotificationListProps) => false | import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=NotificationList.d.ts.map