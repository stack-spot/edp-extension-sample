export type NotificationType = 'LOW' | 'MEDIUM' | 'HIGH';
export type NotificationContext = 'ACCOUNT' | 'STUDIO' | 'WORKSPACE' | 'AI';
export type NotificationContentResponse = {
    title: string;
    description: string;
};
export type GetTenantNotificationsResponse = {
    id: string;
    content: {
        [key: string]: NotificationContentResponse;
    };
    broadcast_level: 'ACCOUNT' | 'INDIVIDUAL' | 'PLATFORM' | 'RESOURCE';
    context: 'ACCOUNT' | 'STUDIO' | 'WORKSPACE' | 'AI';
    target?: string;
    criticality: 'LOW' | 'MEDIUM' | 'HIGH';
    call_to_action: string;
    persistent: boolean;
    committed: boolean;
    last_until?: string;
    trigger_at: string;
    created_at?: string;
    isBanner?: boolean;
};
export type ResponseModelGetTenantNotificationsResponse = {
    items: GetTenantNotificationsResponse[];
    total: number;
};
export type NotificationTypeFilters = NotificationType | UnreadType;
export interface NotificationFilters {
    filterBy?: 'criticality' | 'context';
    filterValue?: string;
    sort?: string;
    direction?: string;
    page?: any;
    size?: string;
}
export interface NotificationCommitted {
    id: string;
    committed: boolean;
}
export declare enum UnreadType {
    Unread = "unread"
}
export interface InfiniteScrollConfig {
    /**
     * Function to load more items into the list. Called when the scroll is almost reaching its end.
     */
    loadMore: () => void;
    /**
     * Set this to false to prevent the scroll from loading more items when it reaches the end.
     */
    hasMore: boolean;
    /**
     * Defines which scroll will be used as the target of the infinite scroll.
     *
     * If null, nothing renders, it waits until it has a value.
     */
    scrollableTarget?: string | HTMLElement | null;
}
//# sourceMappingURL=types.d.ts.map