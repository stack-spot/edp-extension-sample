import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Flex, Text } from '@citric/core';
import { useTranslate } from '@stack-spot/portal-translate';
import { useContext } from 'react';
import { styled } from 'styled-components';
import { useLoadingComponent } from '../../context/loading.js';
import { StepperContext } from './Stepper.js';
const Wrapper = styled(Flex) `
  width: 100%;
  justify-content: space-between;
`;
/**
 * Renders a component that represents the stepper component's navigation buttons, containing the button options (back, skip, and next).
 *
 * The component stepper wraps this component.
 */
export const StepperNavigation = ({ nextButtonText, onSkip, onGoBack, canSkip = false, isLoading, disabled, onSubmit }) => {
    const t = useTranslate(dictionary);
    const { goToNextStep, goToPreviousStep } = useContext(StepperContext);
    const Loading = useLoadingComponent();
    return (_jsxs(Wrapper, { children: [_jsx(Button, { appearance: "contained", colorScheme: "inverse", onClick: () => {
                    onGoBack && onGoBack();
                    goToPreviousStep();
                }, children: t.back }), _jsxs(Flex, { children: [canSkip && (_jsx(Button, { appearance: "text", colorScheme: "inverse", onClick: () => {
                            onSkip && onSkip();
                            goToNextStep();
                        }, children: t.skip })), _jsxs(Button, { type: "submit", onClick: onSubmit, sx: { position: 'relative' }, disabled: isLoading || disabled, children: [_jsx(Text, { as: "span", sx: { visibility: isLoading ? 'hidden' : 'visible' }, children: nextButtonText ?? t.next }), isLoading && Loading] })] })] }));
};
const dictionary = {
    en: {
        back: 'Back',
        skip: 'Skip',
        next: 'Next',
    },
    pt: {
        back: 'Voltar',
        skip: 'Pular',
        next: 'Pr√≥ximo',
    },
};
//# sourceMappingURL=Navigation.js.map