import { WithStyle } from '@stack-spot/portal-theme';
import { ReactElement } from 'react';
interface CustomLabel {
    /**
     * A unique identifier for this label. This is also used to read this label to screen readers.
     */
    id: string;
    /**
     * A custom label that can be made up of any React component.
     */
    element: React.ReactNode;
}
export interface Action {
    /**
     * The label of the action.
     */
    label: string | CustomLabel;
    /**
     * Function to run on a click.
     */
    onClick?: (event?: React.MouseEvent) => void;
    /**
     * URL to open on a click.
     */
    href?: string;
    /**
     * Target of the URL to open.
     */
    target?: React.AnchorHTMLAttributes<HTMLAnchorElement>['target'];
    /**
     * Language of the linked document.
     */
    lang?: React.AnchorHTMLAttributes<HTMLAnchorElement>['lang'];
    /**
     * Language of the destination URL.
     */
    hrefLang?: React.AnchorHTMLAttributes<HTMLAnchorElement>['hrefLang'];
    /**
     * The title of the action.
     */
    title?: string;
}
interface ItemWithIcon {
    /**
     * An Icon to appear at the left of the item.
     */
    icon?: React.ReactElement;
    /**
     * An Icon to appear at the right of the item.
     */
    iconRight?: React.ReactElement;
}
export interface ListAction extends ItemWithIcon, Action {
    /**
     * Whether or not this option is currently active.
     */
    active?: boolean;
    /**
     * Icon to render when this option is active.
     */
    iconActive?: React.ReactElement;
    /**
     * A class to be added to this item.
     */
    className?: string;
}
interface ListGroup {
    /**
     * If this group is rendered as a section with its items right below it or a collapsible, which requires a click to open a submenu.
     */
    type?: 'section' | 'collapsible';
    /**
     * The items of this group.
     */
    children: ListItem[];
    /**
    * A class to be added to this item.
    */
    className?: string;
}
interface ListSection extends ListGroup {
    type: 'section';
    /**
     * The section's title.
     */
    label?: string;
}
interface ListCollapsible extends ListGroup, ItemWithIcon {
    type?: 'collapsible';
    /**
     * The title of the collapsible menu.
     */
    label: string;
}
type ListItem = ListSection | ListCollapsible | ListAction;
export interface SelectionListProps extends WithStyle {
    /**
     * The id of this selection list. This is important for accessibility. Be sure to link it to the aria-controls tag of the element who
     * controls the visibility of this selection list.
     */
    id: string;
    /**
     * Whether or not the selection list is visible.
     */
    visible?: boolean;
    /**
     * The options in the selection list.
     */
    items: ListItem[];
    /**
     * Function to run when the selection list is hidden/closed.
     */
    onHide?: () => void;
    /**
     * The maximum height for the selection list.
     * @default "300px"
     */
    maxHeight?: string;
    /**
     * A React element to render right before the items.
     */
    before?: ReactElement;
    /**
     * A React element to render right after the items.
     */
    after?: ReactElement;
    /**
     * Whether or not this list should be scrollable.
     */
    scroll?: boolean;
    /**
     * Show list as card
     */
    showListAsCard?: boolean;
}
/**
 * Renders a component that allows the selection of one item. The list is show/hidden according to the prop `visible`.
 *
 * The items in this list can be grouped into multiple sections. Sections may be displayed on a column (section) or might replace the
 * current list of options with another list of options (collapsible).
 *
 * This component implements keyboard controls and accessibility features.
 * @param props the component's props {@link SelectionListProps}.
 */
export declare const SelectionList: ({ id, items, className, style, visible, maxHeight, onHide, before, after, scroll, showListAsCard, }: SelectionListProps) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=SelectionList.d.ts.map