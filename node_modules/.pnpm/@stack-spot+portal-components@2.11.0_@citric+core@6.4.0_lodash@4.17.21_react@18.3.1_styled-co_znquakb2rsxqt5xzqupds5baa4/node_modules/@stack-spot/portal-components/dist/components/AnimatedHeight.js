import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { listToClass } from '@stack-spot/portal-theme';
import { useCallback, useEffect, useLayoutEffect, useRef } from 'react';
import styled from 'styled-components';
import { useManualRender } from '../hooks/manual-render.js';
const Box = styled.div `
  overflow-y: clip; // <-- do not use hidden, it's buggy in Chrome.
  transition: height ease-in-out ${({ $animationMs }) => $animationMs / 1000}s;

  .wrapper {
    display: flex;
    flex-direction: column;
  }

  &.initial {
    opacity: 0;
    pointer-events: none;
    overflow: inherit;
    transition: none;

    &.content {
      overflow: inherit;
      transition: none;
    }
  }

  .content {
    overflow: hidden;
    transition: height ease-in-out ${({ $animationMs }) => $animationMs / 1000}s;
  }
`;
function getActualContent(wrapper) {
    const firstChild = wrapper.firstChild;
    if (!firstChild || !('tagName' in firstChild))
        throw new Error('AnimatedHeight could not find any content to animate');
    return firstChild;
}
function onChangeHeight(element, callback) {
    const resizeObserver = new ResizeObserver((entries) => {
        const entry = entries[0];
        const newHeight = entry.borderBoxSize[0].blockSize;
        callback(newHeight);
    });
    resizeObserver.observe(element);
    return () => resizeObserver.disconnect();
}
/**
 * This is a generic component for animating the height of a panel whenever its content changes.
 *
 * You can provide a header and a footer with fixed height, these won't change during the animations and will always be visible.
 *
 * This panel can also be hidden or visible and transitions between these two state will be animated.
 * @param props the React props for this component. {@link Props}.
 */
export const AnimatedHeight = ({ children, footer, header, visible = true, duration = 300, className, style, outerClassName, outerStyle }) => {
    const { repaint } = useManualRender();
    const boxRef = useRef(null);
    const wrapperRef = useRef(null);
    const headerRef = useRef(null);
    const contentRef = useRef(null);
    const footerRef = useRef(null);
    const heights = useRef({ content: 0, footer: 0, header: 0, extra: 0 });
    const status = useRef('initial');
    const updateHeight = useCallback(() => {
        if (boxRef.current) {
            boxRef.current.style.height = `${heights.current.content + heights.current.header + heights.current.footer + heights.current.extra}px`;
        }
        if (contentRef.current)
            contentRef.current.style.height = `${heights.current.content}px`;
    }, []);
    useLayoutEffect(() => {
        let unsubscribe;
        if (headerRef.current)
            heights.current.header = headerRef.current.getBoundingClientRect().height;
        if (contentRef.current) {
            heights.current.content = contentRef.current.getBoundingClientRect().height;
            unsubscribe = onChangeHeight(getActualContent(contentRef.current), (height) => {
                heights.current.content = height;
                if (status.current === 'visible' && boxRef.current)
                    updateHeight();
            });
        }
        if (footerRef.current)
            heights.current.footer = footerRef.current.getBoundingClientRect().height;
        if (wrapperRef.current)
            heights.current.extra = wrapperRef.current.getBoundingClientRect().height
                - heights.current.header
                - heights.current.footer
                - heights.current.content;
        status.current = visible ? 'visible' : 'hidden';
        repaint();
        return unsubscribe;
    }, []);
    useEffect(() => {
        if (status.current === 'initial')
            return;
        status.current = visible ? 'visible' : 'hidden';
        if (visible)
            updateHeight();
        else if (boxRef.current)
            boxRef.current.style.height = '0';
    }, [visible]);
    return (_jsx(Box, { ref: boxRef, "$animationMs": duration, className: listToClass([outerClassName, status.current === 'initial' && 'initial']), style: outerStyle, children: _jsxs("div", { ref: wrapperRef, className: listToClass(['wrapper', className]), style: style, children: [header && _jsx("div", { ref: headerRef, children: header }), _jsx("div", { ref: contentRef, className: "content", children: children }), footer && _jsx("div", { ref: footerRef, children: footer })] }) }));
};
//# sourceMappingURL=AnimatedHeight.js.map