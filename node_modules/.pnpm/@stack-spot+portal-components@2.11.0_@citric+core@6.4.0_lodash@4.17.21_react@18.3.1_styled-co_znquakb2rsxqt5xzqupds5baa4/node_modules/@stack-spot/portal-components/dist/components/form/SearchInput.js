import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, IconBox, Input } from '@citric/core';
import { Filter, Times } from '@citric/icons';
import { FieldAddon, FieldGroup, IconButton } from '@citric/ui';
import { useTranslate } from '@stack-spot/portal-translate';
import { debounce } from 'lodash';
import { useCallback, useState } from 'react';
export const SearchInput = ({ searchText, defaultValue, disabled = false, onChange, style, className, }) => {
    const [value, setValue] = useState(defaultValue);
    const runOnChange = useCallback(debounce(onChange, 800), [onChange]);
    const t = useTranslate(dictionary);
    return (_jsxs(Box, { sx: { position: 'relative' }, style: style, className: className, children: [_jsxs(FieldGroup, { children: [_jsx(FieldAddon, { children: _jsx(IconBox, { size: "xs", colorIcon: "light.700", children: _jsx(Filter, {}) }) }), _jsx(Input, { value: value, placeholder: searchText, onChange: (e) => {
                            setValue(e.target.value);
                            runOnChange(e.target.value);
                        }, disabled: disabled, maxLength: 255 })] }), !!value && (_jsx(IconButton, { sx: { position: 'absolute', right: '20px', top: '50%', transform: 'translate(50%, -50%)' }, onClick: () => {
                    setValue('');
                    runOnChange('');
                }, "aria-label": t.ariaClearField, children: _jsx(Times, {}) }))] }));
};
const dictionary = {
    en: {
        ariaClearField: 'Clear field',
    },
    pt: {
        ariaClearField: 'Limpar campo',
    },
};
//# sourceMappingURL=SearchInput.js.map