import { Session } from './Session'
import { ThirdPartyLoginEvent, ThirdPartyLoginEventParams } from './types'

type ListenerMap = {
  [K in ThirdPartyLoginEvent]: ((...args: ThirdPartyLoginEventParams[K]) => any)[]
}

type Events = {
  [K in ThirdPartyLoginEvent]: ThirdPartyLoginEventParams[K][]
}

export class ThirdPartyObservable<Data = undefined> {
  private listeners: ListenerMap = {
    error: [],
    redirect: [],
    success: [],
    url: [],
  }
  private events: Events = {
    error: [],
    redirect: [],
    success: [],
    url: [],
  }

  /**
   * Registers a listener for whenever an error occurs during login.
   * The original error object is passed as a parameter to the listener.
   * @param listener the lister to register.
   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.
   */
  onError(listener: (error: any) => any, runPreviousEvents = true) {
    if (runPreviousEvents) this.events.error.forEach(params => listener(...params))
    this.listeners.error.push(listener)
    return this
  }

  /**
   * Register a listener to run when the external login redirects the user back to the application.
   * @param listener the lister to register.
   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.
   */
  onRedirect(listener: () => any, runPreviousEvents = true) {
    if (runPreviousEvents) this.events.redirect.forEach(params => listener(...params))
    this.listeners.redirect.push(listener)
    return this
  }

  /**
   * Register a listener to run when the login succeeds and a session is created.
   * The new session is passed as a parameter to the listener.
   * If the data parameter was passed to the `startThirdPartyLogin` method, it is provided here as the second parameter.
   * @param listener the lister to register.
   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.
   */
  onSuccess(
    listener: (session: Session, data: Data) => any,
    runPreviousEvents = true,
  ) {
    if (runPreviousEvents) this.events.success.forEach(params => listener(...params))
    this.listeners.success.push(listener)
    return this
  }

  /**
   * Register a listener to run when the url for the external login is obtained.
   * The url is passed as a parameter to the listener.
   * @param listener the lister to register.
   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.
   */
  onUrl(listener: (url: string) => any, runPreviousEvents = true) {
    if (runPreviousEvents) this.events.url.forEach(params => listener(...params))
    this.listeners.url.push(listener)
    return this
  }

  /**
   * Triggers a login event.
   * @param event the event to trigger.
   * @param args the arguments expected by the event.
   */
  trigger<T extends ThirdPartyLoginEvent>(event: T, ...args: ThirdPartyLoginEventParams[T]) {
    this.listeners[event].forEach(l => l(...args))
    this.events[event].push(args)
  }
}
