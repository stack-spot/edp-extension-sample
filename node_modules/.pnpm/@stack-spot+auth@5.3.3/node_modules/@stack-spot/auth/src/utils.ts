import { random } from 'lodash'

export function queryStringToObject<T extends object = Record<string, string>>(qs: string): T {
  return [...new URLSearchParams(qs)].reduce<Record<string, string>>(
    (result, [key, value]) => ((result[key] = value), result),
    {}
  ) as T
}

export function secondsToMilliseconds(seconds: number) {
  return seconds * 1000
}

const numberOfSymbols = 36 // 26 lowercase characters + 10 digits
const aCode = 'a'.charCodeAt(0)

/**
 * Randomizes an alpha numeric string of lowercase characters.
 */
export function randomizeString(numberOfChars: number): string {
  const rand = random(0, numberOfSymbols - 1)
  const char = rand < 10 ? `${rand}` : String.fromCharCode(aCode + (rand - 10))
  return numberOfChars > 1 ? `${char}${randomizeString(numberOfChars - 1)}` : char
}

/**
 * Randomizes a numeric string.
 */
export function randomizeNumericString(numberOfChars: number): string {
  const rand = random(0, 9)
  return numberOfChars > 1 ? `${rand}${randomizeNumericString(numberOfChars - 1)}` : `${rand}`
}

export async function printResponseError(response: Response) {
  let body = ''
  try {
    body = await response.text()
  } catch { }
  const headers: string[] = []
  response.headers.forEach((v, k) => headers.push(`${k} = ${v}`))
  // eslint-disable-next-line no-console
  console.error(`Request to ${response.url} failed.\nstatus: ${response.status}\nstatusText: ${response.statusText}\nbody: "${body}"\nheaders: ${headers.join(', ')}.`)
}

export async function delay(ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms))
}
