import { CredentialMethod } from './types'

export class AuthenticationError extends Error {
  constructor(message: string) {
    super(message)
  }
}

export class ConnectionError extends AuthenticationError {
  constructor() {
    super(`Unable to complete request. Please check your internet connection or contact your network administrator if the problem persists.`)
  }
}

export class SessionExpiredError extends AuthenticationError {
  constructor() {
    super('The session is expired, please reauthenticate.')
  }
}

export class MalFormedAccessToken extends AuthenticationError {
  token: string

  constructor(token: string, cause: any) {
    super(`Unable to decode the access token, it seems to be malformed.\nCause: ${cause}`)
    this.cause = cause
    this.token = token
  }
}

export class InvalidTenantError extends AuthenticationError {
  tenant: string

  constructor(tenant: string) {
    super(`The tenant for authentication (${tenant}) is invalid.`)
    this.tenant = tenant
  }
}

export class InvalidCredentialsError extends AuthenticationError {
  constructor(status: number, method: CredentialMethod, tenant: string, description: string | undefined) {
    const reason = description || 'The provided credentials are invalid. Please, try again.'
    super(`Error while retrieving token from the authentication service. Method: ${method}. Tenant: ${tenant}. Status: ${status}. Reason:\n${reason}`)
  }
}

export class InvalidSSOError extends AuthenticationError {
  constructor() {
    super("The e-mail provided doesn't correspond to any authentication provider in the database.")
  }
}

export class InvalidProvider extends AuthenticationError {
  constructor() {
    super('The chosen provider is not currently supported')
  }
}

export class AuthMethodUnavailable extends AuthenticationError {
  constructor(causes?: (string | undefined | number)[]) {
    super(`The authentication is not currently available for the e-mail provided${causes ? `(${causes.filter(c => !!c).join(', ')})` : ''}`)
  }
}

export class LogoutError extends Error {
  readonly response: Response

  constructor(response: Response) {
    super(`Unable to logout from IAM. Cause: ${response.statusText}.`)
    this.response = response
  }
}

export class NetworkError extends Error {
  readonly response: Response

  private constructor(response: Response, body: string) {
    super(`${response.status}. ${body}.`)
    this.response = response
  }

  static async create(response: Response) {
    let body = ''
    try {
      body = await response.text()
    } catch { }
    return new NetworkError(response, body)
  }
}
