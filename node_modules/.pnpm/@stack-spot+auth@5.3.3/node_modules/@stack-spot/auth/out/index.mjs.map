{"version":3,"file":"index.mjs","sources":["../src/AuthInterceptor.ts","../src/error.ts","../src/utils.ts","../src/Session.ts","../src/openid.ts","../src/ThirdPartyClient.ts","../src/TokenClient.ts","../src/MemoryStorage.ts","../src/ThirdPartyObservable.ts","../src/AuthManager.ts"],"sourcesContent":["import { omitBy } from 'lodash'\nimport { Session } from './Session'\nimport { AuthConfig, FetchRequest } from './types'\n\nexport class AuthInterceptor {\n  private originalFetch: typeof fetch\n  private session: Session\n  private maxRetrials: number\n  private retryDelay: number\n\n  constructor(config: Required<AuthConfig>, session: Session) {\n    this.originalFetch = config.fetch\n    this.session = session\n    this.maxRetrials = config.retry\n    this.retryDelay = config.retryDelay\n  }\n\n  /**\n   * The Fetch API can receive headers as an object in the format `{ headerKey: headerValue }`, an array with key-value pairs\n   * `[[headerKey, headerValue]]` or an instance of the class `Headers`. This function receives any type of headers and normalizes it into\n   * an object in the format `{ headerKey: headerValue }`.\n   * @param headers the headers to normalize.\n   * @returns an object where each entry is composed by a header key and a header value.\n   */\n  private normalizeHeaders(headers?: HeadersInit): Record<string, string> | undefined {\n    // we use a try-catch here to not break the application if running inside an environment that doesn't support the class `Headers`.\n    try {\n      if (headers instanceof Headers) {\n        const record: Record<string, string> = {}\n        headers.forEach((value, key) => record[key] = value)\n        return record\n      }\n    } catch { /* empty */ }\n    if (Array.isArray(headers)) {\n      return headers.reduce<Record<string, string>>((result, [key, value]) => ({ ...result, [key]: value }), {})\n    }\n    return headers as Record<string, string>\n  } \n\n  /**\n   * Intercepts the request to include the authentication token.\n   * \n   * @param request the original request\n   * @returns the request with the authentication header.\n   */\n  async interceptRequest(request: FetchRequest): Promise<FetchRequest> {\n    const token = await this.session.getToken()\n    const headers = omitBy(this.normalizeHeaders(request.init?.headers), (_, key) => key.toLowerCase() === 'authorization')\n    const init = {\n      ...request.init,\n      headers: { \n        ...headers,\n        authorization: `Bearer ${token}`,\n      },\n    } as RequestInit\n    return { url: request.url, init }\n  }\n\n  /**\n   * Intercepts the response in order to perform retrials in case of errors.\n   * \n   * @param response the original response.\n   * @param request the request.\n   * @param retrials the number of retrials already performed.\n   * @returns the retried response.\n   */\n  async interceptResponse(response: Response, request: FetchRequest, retrials = 0): Promise<Response> {\n    if (response.ok || retrials >= this.maxRetrials || request.init?.signal?.aborted) return response\n    await new Promise<void>((resolve) => {\n      const timeout = setTimeout(resolve, this.retryDelay)\n      request.init?.signal?.addEventListener('abort', () => {\n        clearTimeout(timeout)\n        resolve()\n      })\n    })\n    if (request.init?.signal?.aborted) return response\n    const newRequest = await this.interceptRequest(request)\n    const newResponse = await this.originalFetch(newRequest.url, newRequest.init)\n    return this.interceptResponse(newResponse, request, retrials + 1)\n  }\n\n  /**\n   * A custom implementation of {@link global.fetch} including authentication and retrials on errors.\n   * \n   * @param input the URL to the request.\n   * @param init the request options.\n   * @returns the response.\n   */\n  async fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n    const request = await this.interceptRequest({ init, url: input })\n    const response = await this.originalFetch(request.url, request.init)\n    return this.interceptResponse(response, request)\n  }\n}\n","import { CredentialMethod } from './types'\n\nexport class AuthenticationError extends Error {\n  constructor(message: string) {\n    super(message)\n  }\n}\n\nexport class ConnectionError extends AuthenticationError {\n  constructor() {\n    super(`Unable to complete request. Please check your internet connection or contact your network administrator if the problem persists.`)\n  }\n}\n\nexport class SessionExpiredError extends AuthenticationError {\n  constructor() {\n    super('The session is expired, please reauthenticate.')\n  }\n}\n\nexport class MalFormedAccessToken extends AuthenticationError {\n  token: string\n\n  constructor(token: string, cause: any) {\n    super(`Unable to decode the access token, it seems to be malformed.\\nCause: ${cause}`)\n    this.cause = cause\n    this.token = token\n  }\n}\n\nexport class InvalidTenantError extends AuthenticationError {\n  tenant: string\n\n  constructor(tenant: string) {\n    super(`The tenant for authentication (${tenant}) is invalid.`)\n    this.tenant = tenant\n  }\n}\n\nexport class InvalidCredentialsError extends AuthenticationError {\n  constructor(status: number, method: CredentialMethod, tenant: string, description: string | undefined) {\n    const reason = description || 'The provided credentials are invalid. Please, try again.'\n    super(`Error while retrieving token from the authentication service. Method: ${method}. Tenant: ${tenant}. Status: ${status}. Reason:\\n${reason}`)\n  }\n}\n\nexport class InvalidSSOError extends AuthenticationError {\n  constructor() {\n    super(\"The e-mail provided doesn't correspond to any authentication provider in the database.\")\n  }\n}\n\nexport class InvalidProvider extends AuthenticationError {\n  constructor() {\n    super('The chosen provider is not currently supported')\n  }\n}\n\nexport class AuthMethodUnavailable extends AuthenticationError {\n  constructor(causes?: (string | undefined | number)[]) {\n    super(`The authentication is not currently available for the e-mail provided${causes ? `(${causes.filter(c => !!c).join(', ')})` : ''}`)\n  }\n}\n\nexport class LogoutError extends Error {\n  readonly response: Response\n\n  constructor(response: Response) {\n    super(`Unable to logout from IAM. Cause: ${response.statusText}.`)\n    this.response = response\n  }\n}\n\nexport class NetworkError extends Error {\n  readonly response: Response\n\n  private constructor(response: Response, body: string) {\n    super(`${response.status}. ${body}.`)\n    this.response = response\n  }\n\n  static async create(response: Response) {\n    let body = ''\n    try {\n      body = await response.text()\n    } catch { }\n    return new NetworkError(response, body)\n  }\n}\n","import { random } from 'lodash'\n\nexport function queryStringToObject<T extends object = Record<string, string>>(qs: string): T {\n  return [...new URLSearchParams(qs)].reduce<Record<string, string>>(\n    (result, [key, value]) => ((result[key] = value), result),\n    {}\n  ) as T\n}\n\nexport function secondsToMilliseconds(seconds: number) {\n  return seconds * 1000\n}\n\nconst numberOfSymbols = 36 // 26 lowercase characters + 10 digits\nconst aCode = 'a'.charCodeAt(0)\n\n/**\n * Randomizes an alpha numeric string of lowercase characters.\n */\nexport function randomizeString(numberOfChars: number): string {\n  const rand = random(0, numberOfSymbols - 1)\n  const char = rand < 10 ? `${rand}` : String.fromCharCode(aCode + (rand - 10))\n  return numberOfChars > 1 ? `${char}${randomizeString(numberOfChars - 1)}` : char\n}\n\n/**\n * Randomizes a numeric string.\n */\nexport function randomizeNumericString(numberOfChars: number): string {\n  const rand = random(0, 9)\n  return numberOfChars > 1 ? `${rand}${randomizeNumericString(numberOfChars - 1)}` : `${rand}`\n}\n\nexport async function printResponseError(response: Response) {\n  let body = ''\n  try {\n    body = await response.text()\n  } catch { }\n  const headers: string[] = []\n  response.headers.forEach((v, k) => headers.push(`${k} = ${v}`))\n  // eslint-disable-next-line no-console\n  console.error(`Request to ${response.url} failed.\\nstatus: ${response.status}\\nstatusText: ${response.statusText}\\nbody: \"${body}\"\\nheaders: ${headers.join(', ')}.`)\n}\n\nexport async function delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n","import { decodeJwt, JWTPayload } from 'jose'\n// don't remove the next ignore, it's  used by ts-docs.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { AuthInterceptor } from './AuthInterceptor'\nimport { AuthenticationError, InvalidCredentialsError, InvalidTenantError, MalFormedAccessToken, SessionExpiredError } from './error'\nimport { TokenClient } from './TokenClient'\nimport { AccessTokenPayload, AuthConfig, SessionPayload, SessionPersistence } from './types'\nimport { delay, secondsToMilliseconds } from './utils'\n\n/**\n * If multiple instances of the application make a request at the same time and the token is expired, multiple requests to refresh the token\n * may be sent with the same refresh token. Only one of them will succeed and the user would be logged off once the remaining requests fail\n * because the refresh token would've been already used.\n * \n * This is a super-rare scenario, so instead of synchronizing the request across multiple instances, which would make this class more\n * complex and introduce a breaking change, we're going to make the refresh token request anyway, not worrying if it will fail or not. If\n * it fails, we'll check if a refreshed session has been stored by another instance in the meantime. We'll check for a refreshed session\n * at most `refreshCheck.maxAttempts` times, with an interval of `refreshCheck.intervalMS`. If we find a refreshed session, we return it,\n * otherwise, we throw the original request error.\n */\nconst refreshCheck = {\n  maxAttempts: 10,\n  intervalMS: 500,\n}\n\n/**\n * The access-token expires after `X` amount of time. We can't make a request with an expired access-token. Let's say we start a request\n * at time `X - 10ms`, it might be that this request arrives at the server at time `Y`, where `Y > X`. For this reason, to be safe, we\n * don't refresh the token when it's expired, but, instead, when it's about to expire. This constant defines what `about` is. We refresh\n * a token if it's going to expire in the next `expiryTimeMarginSeconds` seconds.\n */\nconst expiryTimeMarginSeconds = 15\n\nexport function jwtToAccessTokenPayload(token: string): AccessTokenPayload {\n  try {\n    // deepcode ignore JwtDecodeMethod: Only needed to access token data. This is still validated on the backend. \n    return decodeJwt(token)\n  } catch (error) {\n    throw new MalFormedAccessToken(token, error)\n  }\n}\n\nfunction isInThePast(timestamp?: number) {\n  if (!timestamp) return false\n  const expiration = secondsToMilliseconds(timestamp)\n  return Date.now() >= expiration\n}\n\nfunction parseSerializedSession(serialized: string): { time: string, data: SessionPayload } {\n  const [_, time, data] = serialized.match(/^(\\d*);(.*)$/) ?? []\n  const error = new Error(`Error while deserializing Session. Malformed string.\\n${serialized}`)\n  if (!time || !data) throw error\n  try {\n    return { time, data: JSON.parse(data) }\n  } catch {\n    throw error\n  }\n}\n\nexport class Session {\n  private data: SessionPayload = {} as unknown as SessionPayload // this is initialized in the constructor\n  private accessTokenData: AccessTokenPayload = {}\n  private refreshTokenData: JWTPayload = {}\n  private currentRefresh: Promise<string> | undefined\n  private readonly tokenClient: TokenClient\n  private readonly persistence: SessionPersistence | null\n  private readonly interceptor: AuthInterceptor\n  private lastPersisted: string\n\n  constructor(data: SessionPayload, config: Required<AuthConfig>, tokenClient: TokenClient, lastPersisted = '') {\n    this.setSessionData(data)\n    this.tokenClient = tokenClient\n    this.interceptor = new AuthInterceptor(config, this)\n    this.persistence = config.sessionPersistence\n    this.lastPersisted = lastPersisted\n    if (!lastPersisted) this.persist()\n  }\n\n  private setSessionData(data: SessionPayload) {\n    this.data = data\n    this.accessTokenData = jwtToAccessTokenPayload(data.access_token)\n    this.refreshTokenData = jwtToAccessTokenPayload(data.refresh_token)\n    this.serialize()\n  }\n\n  /**\n   * Updates values in the session data. Values not available in the object passed as parameter will keep their previous values.\n   * Useful for changing tokens with arbitrary values.\n   * @param data the properties to update\n   */\n  updateSessionData(data: Partial<SessionPayload>) {\n    this.setSessionData({ ...this.data, ...data })\n    this.persist()\n  }\n\n  /**\n   * Restores a serialized session created with `Session#serialize()`.\n   * \n   * It's a good idea to call `Session#isExpired()` right after this to check the session validity.\n   * \n   * @param serialized the serialized session as a string.\n   * @param tokenClient a TokenClient.\n   * @returns the restored session.\n   */\n  static fromSerializedSession(serialized: string, config: Required<AuthConfig>, tokenClient: TokenClient) {\n    const { time, data } = parseSerializedSession(serialized)\n    return new Session(data, config, tokenClient, time)\n  }\n\n  private async loadPersisted() {\n    const persisted = await this.persistence?.load()\n    if (!persisted || persisted.startsWith(`${this.lastPersisted};`)) return\n    try {\n      const { data } = parseSerializedSession(persisted)\n      this.setSessionData(data)\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error while recovering session.', error)\n    }\n  }\n\n  private persist() {\n    if (!this.persistence) return\n    this.lastPersisted = `${Date.now()}`\n    return this.persistence.save(this.serialize())\n  }\n\n  private async refreshSession(): Promise<string> {\n    try {\n      const data = await this.tokenClient.authenticate(\n        'refreshToken',\n        {\n          refreshToken: this.data.refresh_token,\n          clientId: this.data.client_id,\n          tenant: this.data.tenant,\n        },\n      )\n      this.setSessionData(data)\n      await this.persist()\n      return this.data.access_token\n    } catch (error) {\n      if (error instanceof InvalidCredentialsError) {\n        let attempts = refreshCheck.maxAttempts\n        while (attempts && this.shouldRefreshToken()) {\n          await delay(refreshCheck.intervalMS)\n          await this.loadPersisted()\n          attempts--\n        }\n        if (this.shouldRefreshToken()) throw error\n        else return this.data.access_token\n      } else {\n        throw error\n      }\n    }\n  }\n\n  private shouldRefreshToken() {\n    const expiryTime = this.accessTokenData?.exp as number\n    return isInThePast(expiryTime - expiryTimeMarginSeconds)\n  }\n\n  /**\n   * Gets the current access token.\n   * \n   * - If the access token is set to expire within the next 15 seconds, it refreshes it before returning (async).\n   * - If the refresh token is also invalid, then this session is no longer valid and a {@link SessionExpiredError} is thrown.\n   * - If an error occurs while refreshing, this error is thrown.\n   * \n   * Important: this function never produces multiple concurrent calls to the authentication API. Whenever multiple calls are made, they\n   * use the same ongoing request. In summary, there's no need to worry about multiple requests triggering this at the same time.\n   * \n   * @throws\n   * - {@link SessionExpiredError} when the both the access token and refresh token are expired.\n   * - {@link AuthenticationError}, {@link InvalidCredentialsError}, {@link InvalidTenantError} when the refresh fails.\n   * \n   * @returns a promise that resolves to the access token.\n   */\n  async getToken(): Promise<string> {\n    if (this.currentRefresh) return this.currentRefresh\n    await this.loadPersisted()\n    if (this.isExpired()) throw new SessionExpiredError()\n    if (this.shouldRefreshToken()) {\n      this.currentRefresh = this.refreshSession()\n      await this.currentRefresh\n      this.currentRefresh = undefined\n    }\n    return this.data.access_token\n  }\n\n  /**\n   * A Session is expired if its refresh token is expired.\n   * @returns true if the session is expired, false otherwise.\n   */\n  isExpired(): boolean {\n    return isInThePast(this.refreshTokenData?.exp)\n  }\n\n  /**\n   * Gets the data contained in the access token.\n   * Useful for getting user information like name and email.\n   * @returns the access token data.\n   */\n  getTokenData(): AccessTokenPayload {\n    return this.accessTokenData\n  }\n\n  /**\n   * Gets the raw data used to build the session.\n   * @returns the session data.\n   */\n  getSessionData(): SessionPayload {\n    return this.data\n  }\n\n  /**\n   * Serializes this session.\n   * \n   * The session can be restored with Session.fromSerializedSession(string).\n   * \n   * Format: {unix time in ms when the session was created or restored};{session data ({@link SessionPayload}) in json form}\n   * \n   * @returns the serialized session.\n   */\n  serialize(): string {\n    return `${this.lastPersisted};${JSON.stringify(this.data)}`\n  }\n\n  /**\n   * A custom implementation of {@link global.fetch} including authentication and retrials on errors. Ths will take care of refreshing the\n   * token when necessary.\n   * \n   * @throws\n   * - {@link SessionExpiredError} when the both the access token and refresh token are expired.\n   * - {@link AuthenticationError}, {@link InvalidCredentialsError}, {@link InvalidTenantError} when the refresh fails.\n   * \n   * @param input the URL to the request.\n   * @param init the request options.\n   * @returns the response.\n   */\n  fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n    return this.interceptor.fetch(input, init)\n  }\n\n  /**\n   * Logs out from IAM.\n   * @throws\n   * - {@link LogoutError} if the logout fails. This error has the original response as one of its properties.\n   */\n  logout() {\n    return this.tokenClient.logout(this.data)\n  }\n}\n","// code taken from https://github.com/authts/oidc-client-ts/blob/b7266eb650391d9e9807af21164874889963f1be/src/utils/CryptoUtils.ts\n\nimport CryptoJS from 'crypto-es'\nimport { SHA256 } from 'crypto-es/lib/sha256.js'\nimport { Base64 } from 'crypto-es/lib/enc-base64.js'\n\nconst UUID_V4_TEMPLATE = '10000000-1000-4000-8000-100000000000'\n\nexport class CryptoUtils {\n  private static _randomWord(): number {\n    return CryptoJS.lib.WordArray.random(1).words[0]\n  }\n\n  /**\n   * Generates RFC4122 version 4 guid\n   */\n  public static generateUUIDv4(): string {\n    const uuid = UUID_V4_TEMPLATE.replace(/[018]/g, c =>\n      (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16),\n    )\n    return uuid.replace(/-/g, '')\n  }\n\n  /**\n   * PKCE: Generate a code verifier\n   */\n  public static generateCodeVerifier(): string {\n    return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4()\n  }\n\n  /**\n   * PKCE: Generate a code challenge\n   */\n  public static generateCodeChallenge(code_verifier: string): string {\n    try {\n      const hashed = SHA256(code_verifier)\n      return Base64.stringify(hashed).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '')\n    }\n    catch (err) {\n      throw err\n    }\n  }\n}\n\nconst random = CryptoUtils.generateCodeVerifier\n\nexport const generators = {\n  random,\n  state: random,\n  nonce: random,\n  codeVerifier: random,\n  codeChallenge: CryptoUtils.generateCodeChallenge,\n}\n","/* eslint-disable no-console */\nimport { deburr } from 'lodash'\nimport { generators } from './openid'\nimport {\n  AccessTokenPayload,\n  AuthConfig,\n  AccountParams,\n  SessionPayload,\n  ThirdPartyAuthData,\n  ThirdPartyAuthRequest,\n  ThirdPartyAuthResponse,\n  ThirdPartyLoginParams,\n  Account,\n  AccountTokens,\n} from './types'\nimport { AuthMethodUnavailable, AuthenticationError, InvalidSSOError, NetworkError } from './error'\nimport { printResponseError, queryStringToObject, randomizeNumericString, randomizeString } from './utils'\nimport { TokenClient } from './TokenClient'\nimport { jwtToAccessTokenPayload } from './Session'\n\n// maximum number of attempts to generate a unique account before resorting to a random string as the account slug.\nconst MAX_ATTEMPTS_TO_GENERATE_ACCOUNT = 5\n\ninterface StorageData {\n  codeVerifier: string,\n  tenant: string,\n  createdAt: number,\n  data?: unknown,\n}\n\nconst storageKeyPrefix = 'stackSpotAuth.thirdPartyLogin.'\n// Maximum time to finish a 3rd party login\nconst maxLoginTimeMs = 24 * 60 * 60 * 1000 // 24 hours\n\nfunction buildPKCE() {\n  const codeVerifier = generators.codeVerifier()\n  return {\n    state: generators.state(),\n    codeVerifier,\n    codeChallenge: generators.codeChallenge(codeVerifier),\n  }\n}\n\nfunction buildStorageKey(state: string) {\n  return `${storageKeyPrefix}${state}`\n}\n\nexport class ThirdPartyClient {\n  readonly config: Required<AuthConfig>\n  private readonly tokenClient: TokenClient\n\n  constructor(config: Required<AuthConfig>, tokenClient: TokenClient) {\n    this.config = config\n    this.tokenClient = tokenClient\n  }\n\n  private async findAuthDataByEmail(email: string): Promise<ThirdPartyAuthData> {\n    const url = `${this.config.accountUrl}/v1/accounts?email=${encodeURIComponent(email)}`\n    const response = await this.config.fetch(url)\n    if (response.ok) {\n      const { tenant, idp, accountType, iamTenant } = await response.json() as Record<string, any>\n      if (!tenant) throw new InvalidSSOError()\n      return { tenant, idp, accountType, iamTenant }\n    }\n    printResponseError(response)\n    let errorCode: string | undefined\n    try {\n      errorCode = (await response.json()).code\n    } catch { }\n    throw errorCode === 'ACC_ACCOUNT_NOT_FOUND_ERROR'\n      ? new InvalidSSOError()\n      : new AuthMethodUnavailable([response.statusText, response.status, errorCode])\n  }\n\n  private buildSearchParams({ codeChallenge, state, email, locale }: ThirdPartyAuthRequest) {\n    const params: Record<string, string> = {\n      state,\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUrl,\n      response_type: 'code',\n      scope: 'openid email offline_access profile attributes roles',\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256',\n      ui_locales: locale || 'en',\n    }\n\n    if (email) { params.login_hint = email }\n\n    return new URLSearchParams(params)\n  }\n\n  private clearExpiredLoginAttempts() {\n    const st = this.config.storage\n    for (let i = 0; i < st.length; i++) {\n      const key = st.key(i)\n      if (key?.startsWith(storageKeyPrefix)) {\n        const data: StorageData = JSON.parse(st.getItem(key) ?? '{}')\n        if (Date.now() - data.createdAt > maxLoginTimeMs) st.removeItem(key)\n      }\n    }\n  }\n\n  /**\n   * Performs an authenticated fetch and returns the JSON result.\n   */\n  private async authFetch(input: RequestInfo | URL, token: string, init?: RequestInit) {\n    const headers = { ...init?.headers, authorization: `Bearer ${token}`, 'content-type': 'application/json; charset=utf-8' }\n    const response = await this.config.fetch(input, { ...init, headers })\n    if (!response.ok) throw await NetworkError.create(response)\n    return response.json()\n  }\n\n  private async isAccountAvailable(acc: AccountParams, accessToken: string): Promise<boolean> {\n    const params = new URLSearchParams(acc as unknown as Record<string, string>)\n    const url = `${this.config.accountUrl}/v1/accounts/freemium/available?${params}`\n    try {\n      const { available } = await this.authFetch(url, accessToken)\n      return available ?? false\n    } catch (error: any) {\n      console.error('Error while validating account name and slug. Cause:', error.message ?? error)\n    }\n    return false\n  }\n\n  private createSlug(name: string) {\n    return deburr(name)\n      .toLowerCase()\n      .replaceAll(/^-+|-+$/g, '')\n      .replace(/ /g, '-')\n      .replace(/(-)+/g, '-')\n      .replace(/[^a-z-\\d]/g, '')\n      .substring(0, 60)\n  }\n\n  private async generateAccount(\n    accessToken: string,\n    name?: string,\n    remainingAttempts = MAX_ATTEMPTS_TO_GENERATE_ACCOUNT,\n  ): Promise<AccountParams> {\n    if (remainingAttempts === 0 || !name) {\n      const name = randomizeString(20)\n      return { name, slug: name }\n    }\n    const suffix = remainingAttempts === MAX_ATTEMPTS_TO_GENERATE_ACCOUNT ? undefined : randomizeNumericString(4)\n    name = suffix ? `${name} ${suffix}` : name\n    const acc = { name, slug: this.createSlug(name) }\n    const available = await this.isAccountAvailable(acc, accessToken)\n    return available ? acc : this.generateAccount(accessToken, name, remainingAttempts - 1)\n  }\n\n  private getUserName({ name, given_name, family_name, preferred_username, email }: AccessTokenPayload) {\n    return name\n      ?? (given_name && family_name ? `${given_name} ${family_name}` : undefined)\n      ?? email\n      ?? preferred_username\n      ?? given_name\n      ?? family_name\n  }\n\n  private async createAccount(accessToken: string): Promise<boolean> {\n    const data = jwtToAccessTokenPayload(accessToken)\n    if (data.freemium_status === 'PENDING') {\n      const url = `${this.config.accountUrl}/v1/accounts/freemium`\n      const acc = await this.generateAccount(accessToken, this.getUserName(data))\n      try {\n        await this.authFetch(url, accessToken, { method: 'post', body: JSON.stringify(acc) })\n      } catch (error: any) {\n        console.error(\n          'It was not possible to complete the account creation. The user will be able to use some features, but not all. A new attempt will be made in the next login. Cause:',\n          error.message ?? error,\n        )\n      }\n      /* we return true despite the error because the API will always fail with status 500 in Sandbox and QA. In spite of the failure, the\n      account will be created. */\n      return true\n    }\n    return false\n  }\n\n  private async refreshToken(session: SessionPayload): Promise<SessionPayload> {\n    try {\n      return this.tokenClient.authenticate(\n        'refreshToken',\n        { refreshToken: session.refresh_token, clientId: session.client_id, tenant: session.tenant },\n      )\n    } catch (error: any) {\n      console.error(\n        'Could not refresh token after account creation. Permissions will be reduced during this session. Cause:',\n        error.message ?? error,\n      )\n      return session\n    }\n  }\n\n  /**\n   * Performs a 3rd party login (first part).\n   * \n   * This operation happens in two parts, this is the first one and it returns the URL to redirect the user to login.\n   * After login in the 3rd party site, the user will be redirected to the url informed in `config.redirectUrl`.\n   * When the user is at `redirectUrl`, the method `completeThirdPartyLogin` should be called with the query string in the url.\n   * \n   * @throws\n   * - {@link InvalidSSOError}: if the email doesn't correspond to any SSO registered.\n   * - {@link AuthMethodUnavailable}: if the 3rd party login is temporally unavailable.\n   * - {@link PasswordExpectedError}: if the email address is managed by StackSpot itself and should instead use password login. This\n   * exception has the property `tenant`, so it can be catch and redirect the user to the expected login method.\n   * \n   * @param login parameters to the 3rd party login.\n   * @returns the external url to login and the state. The state can be used to identify this login attempt.\n   */\n  async getThirdPartyLoginUrlAndState(login: ThirdPartyLoginParams, data?: unknown): Promise<{ url: string, state: string }> {\n    this.clearExpiredLoginAttempts()\n    const { idp, iamTenant = '' } = login.type === 'sso' ? await this.findAuthDataByEmail(login.email)\n      : {\n        idp: login.provider,\n        iamTenant: this.config.defaultTenant\n      }\n\n    const path = `${iamTenant}/oidc/auth`\n    const { codeVerifier, codeChallenge, state } = buildPKCE()\n    const storageData: StorageData = {\n      codeVerifier,\n      tenant: iamTenant,\n      createdAt: Date.now(),\n      data,\n    }\n    this.config.storage.setItem(buildStorageKey(state), JSON.stringify(storageData))\n    const params = this.buildSearchParams({\n      codeChallenge,\n      state,\n      email: login.type === 'sso' ? login.email : undefined,\n      idp,\n      locale: login.locale,\n    })\n    return { url: `${this.config.authUrl}/${path}?${params}`, state }\n  }\n\n   /**\n   * Performs a 3rd party login (first part) using the given tenant.\n   * \n   * This operation happens in two parts, this is the first one and it returns the URL to redirect the user to login.\n   * This function does not depend on the user email, instead will use the given tenant to mount the url.\n   * After login in the 3rd party site, the user will be redirected to the url informed in `config.redirectUrl`.\n   * When the user is at `redirectUrl`, the method `completeThirdPartyLogin` should be called with the query string in the url.\n   * \n   * @param login parameters to the 3rd party login.\n   * @param tenant tenant to mount the 3rd party login url.\n   * @returns the external url to login and the state. The state can be used to identify this login attempt.\n   */\n  async getThirdPartyLoginFromTenant(login: ThirdPartyLoginParams, tenant: string, data?: unknown): Promise<{ url: string, state: string }> {\n    this.clearExpiredLoginAttempts()\n    const { idp, iamTenant = '' } = login.type === 'sso' ? {iamTenant: tenant, idp: undefined}\n      : {\n        idp: login.provider,\n        iamTenant: this.config.defaultTenant\n      }\n\n    const path = `${iamTenant}/oidc/auth`\n    const { codeVerifier, codeChallenge, state } = buildPKCE()\n    const storageData: StorageData = {\n      codeVerifier,\n      tenant: iamTenant,\n      createdAt: Date.now(),\n      data,\n    }\n    this.config.storage.setItem(buildStorageKey(state), JSON.stringify(storageData))\n    const params = this.buildSearchParams({\n      codeChallenge,\n      state,\n      email: login.type === 'sso' ? login.email : undefined,\n      idp,\n      locale: login.locale,\n    })\n    return { url: `${this.config.authUrl}/${path}?${params}`, state }\n  }\n\n  /**\n   * Performs a 3rd party login (second and final part).\n   * \n   * This operation happens in two parts, this is the last one and it returns a SessionPayload.\n   * This should be called by whatever is in `config.redirectUrl`. The only parameter it receives must be the query string in the url.\n   * \n   * If the account is new and PENDING, another service will be called to finish the account creation. If the account creation cannot be\n   * completed, it will not fail. Instead, it will try again on the next login while the user has some reduced permissions.\n   * \n   * @throws\n   * - {@link AuthenticationError}: if something goes wrong.\n   * \n   * @param queryString \n   * @returns the session payload, which may be used to create a Session object.\n   */\n  async completeThirdPartyLogin(queryString: string): Promise<{ sessionData: SessionPayload, data?: unknown }> {\n    const queryObject = queryStringToObject(queryString)\n    if (queryObject.error) {\n      throw new AuthenticationError(`${queryObject.error}. ${decodeURIComponent(queryObject.error_description)}.`)\n    }\n    const { code, state } = queryObject as unknown as ThirdPartyAuthResponse\n    const storageKey = buildStorageKey(state)\n    const fromStorage = this.config.storage.getItem(storageKey)\n    const { codeVerifier, tenant, data }: Partial<StorageData> = fromStorage ? JSON.parse(fromStorage) : {}\n    this.config.storage.removeItem(storageKey)\n    if (!codeVerifier || !tenant) throw new AuthenticationError('Not enough data to perform 3rd party login.')\n    const sessionData = await this.tokenClient.authenticate('authorizationCode', { code, tenant, codeVerifier })\n    const hasAccountBeenCreated = await this.createAccount(sessionData.access_token)\n    const finalSessionData = hasAccountBeenCreated ? await this.refreshToken(sessionData) : sessionData\n    return { sessionData: finalSessionData, data }\n  }\n\n  /**\n   * List all accounts available for the user of the access token passed as parameter.\n   * \n   * @throws\n   * - {@link AuthenticationError}: if the operation is not allowed.\n   * \n   * @param accessToken \n   * @returns the accounts\n   */\n  listAccounts(accessToken: string): Promise<Account[]> {\n    const url = `${this.config.accountUrl}/v1/users/accounts`\n    try {\n      return this.authFetch(url, accessToken)\n    } catch (error) {\n      if (error instanceof NetworkError && [401, 403].includes(error.response.status)) {\n        throw new AuthenticationError(`You are not allowed to list accounts. Check the error below for more details:\\n${error.message}`)\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Switches the active account for the user of the access token passed as parameter.\n   * \n   * @throws\n   * - {@link AuthenticationError}: if the operation is not allowed.\n   * \n   * @param accountId the id of the account to switch to.\n   * @param accessToken \n   * @returns the tokens linking to the new accont.\n   */\n  switchAccount(accountId: string, accessToken: string): Promise<AccountTokens> {\n    const url = `${this.config.accountUrl}/v1/authentication/switch-account`\n    try {\n      return this.authFetch(url, accessToken, { method: 'post', body: JSON.stringify({ accountId }) })\n    } catch (error) {\n      if (error instanceof NetworkError && [401, 403].includes(error.response.status)) {\n        throw new AuthenticationError(\n          `You are not allowed to switch to this account. Check the error below for more details:\\n${error.message}`,\n        )\n      }\n      throw error\n    }\n  }\n}\n","import { map, snakeCase } from 'lodash'\nimport { AuthenticationError, ConnectionError, InvalidCredentialsError, InvalidTenantError, LogoutError } from './error'\nimport { AuthConfig, AuthenticationErrorPayload, CredentialMethod, CredentialOf, SessionPayload } from './types'\n\nasync function buildError(method: CredentialMethod, tenant: string, response: Response): Promise<AuthenticationError> {\n  if (response.status === 404) return new InvalidTenantError(tenant)\n  let errorMessage: string | undefined = undefined\n  try {\n    const errorData = await response.json() as AuthenticationErrorPayload\n    errorMessage = errorData.error_description\n    errorMessage ||= await response.text()\n  } catch { }\n  return [400, 401, 403].includes(response.status)\n    ? new InvalidCredentialsError(response.status, method, tenant, errorMessage)\n    : new AuthenticationError(errorMessage ?? response.statusText ?? 'Unknown error.')\n}\n\nconst credentialMethodToGrantType: Record<CredentialMethod, string> = {\n  password: 'password',\n  client: 'client_credentials',\n  refreshToken: 'refresh_token',\n  authorizationCode: 'authorization_code',\n}\n\nexport class TokenClient {\n  readonly config: Required<AuthConfig>\n\n  constructor(config: Required<AuthConfig>) {\n    this.config = config\n  }\n\n  /**\n   * Authenticates using one of the authentication methods available.\n   * \n   * This throws an AuthenticationError on errors:\n   * - {@link InvalidTenantError}: if the tenant or the url is invalid (on 404).\n   * - {@link InvalidCredentialsError}: if the credentials are invalid.\n   * - Plain {@link AuthenticationError}: if the error is unknown.\n   * \n   * @param url the url to the authentication API.\n   * @param method the authentication method.\n   * @param credentials the credentials for signing in.\n   * @returns the session data. You can use it to create an instance of Session.\n   * @throws AuthenticationError\n   */\n  async authenticate<T extends CredentialMethod>(\n    method: T,\n    { tenant = this.config.defaultTenant, clientId = this.config.clientId, ...credentials }: CredentialOf<T>,\n  ): Promise<SessionPayload> {\n    const encoded = map(\n      { ...credentials, clientId, grantType: credentialMethodToGrantType[method], redirectUri: this.config.redirectUrl },\n      (value, key) => `${snakeCase(key)}=${encodeURIComponent(`${value}`)}`,\n    ).join('&')\n\n    let response\n    try {\n      response = await this.config.fetch(`${this.config.authUrl}/${encodeURIComponent(tenant)}/oidc/oauth/token`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          body: encoded,\n        },\n      )\n    } catch {\n      // By itself, fetch will only throw an error if there is a network-level issue (e.g., no internet connection, DNS failure, or the request is blocked by CORS).\n      throw new ConnectionError()\n    }\n\n    if (!response.ok) throw await buildError(method, tenant, response)\n\n    try {\n      const sessionData = await response.json()\n      return { ...sessionData, client_id: clientId, tenant }\n    } catch {\n      throw new AuthenticationError(\n        'There was an error while deserializing the body of the authentication response.'\n      )\n    }\n\n  }\n\n  /**\n   * Logs out from Stk Iam.\n   * @throws\n   * - {@link LogoutError} if the logout fails. This error has the original response as one of its properties.\n   * @param the session data to log out \n   */\n  async logout({\n    tenant,\n    id_token,\n  }: Pick<SessionPayload, 'tenant' | 'id_token'>) {\n    const logoutUrl = `${this.config.authUrl}/${tenant}/oidc/end_session`\n    const params = new URLSearchParams({ id_token_hint: id_token })\n\n    const response = await this.config.fetch(`${logoutUrl}?${params}`, {\n    })\n\n    if (!response.ok) throw new LogoutError(response)\n  }\n}\n","export class MemoryStorage implements Pick<Storage, 'clear' | 'getItem' | 'key' | 'removeItem' | 'setItem' | 'length'> {\n  private map = new Map<string, string>()\n\n  length = 0\n\n  clear(): void {\n    this.map.clear()\n    this.length = 0\n  }\n\n  getItem(key: string): string | null {\n    return this.map.get(key) ?? null\n  }\n\n  key(index: number): string | null {\n    return Array.from(this.map.keys())[index] ?? null\n  }\n\n  removeItem(key: string): void {\n    this.map.delete(key)\n    this.length = this.map.size\n  }\n\n  setItem(key: string, value: string): void {\n    this.map.set(key, value)\n    this.length = this.map.size\n  }\n}\n","import { Session } from './Session'\nimport { ThirdPartyLoginEvent, ThirdPartyLoginEventParams } from './types'\n\ntype ListenerMap = {\n  [K in ThirdPartyLoginEvent]: ((...args: ThirdPartyLoginEventParams[K]) => any)[]\n}\n\ntype Events = {\n  [K in ThirdPartyLoginEvent]: ThirdPartyLoginEventParams[K][]\n}\n\nexport class ThirdPartyObservable<Data = undefined> {\n  private listeners: ListenerMap = {\n    error: [],\n    redirect: [],\n    success: [],\n    url: [],\n  }\n  private events: Events = {\n    error: [],\n    redirect: [],\n    success: [],\n    url: [],\n  }\n\n  /**\n   * Registers a listener for whenever an error occurs during login.\n   * The original error object is passed as a parameter to the listener.\n   * @param listener the lister to register.\n   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.\n   */\n  onError(listener: (error: any) => any, runPreviousEvents = true) {\n    if (runPreviousEvents) this.events.error.forEach(params => listener(...params))\n    this.listeners.error.push(listener)\n    return this\n  }\n\n  /**\n   * Register a listener to run when the external login redirects the user back to the application.\n   * @param listener the lister to register.\n   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.\n   */\n  onRedirect(listener: () => any, runPreviousEvents = true) {\n    if (runPreviousEvents) this.events.redirect.forEach(params => listener(...params))\n    this.listeners.redirect.push(listener)\n    return this\n  }\n\n  /**\n   * Register a listener to run when the login succeeds and a session is created.\n   * The new session is passed as a parameter to the listener.\n   * If the data parameter was passed to the `startThirdPartyLogin` method, it is provided here as the second parameter.\n   * @param listener the lister to register.\n   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.\n   */\n  onSuccess(\n    listener: (session: Session, data: Data) => any,\n    runPreviousEvents = true,\n  ) {\n    if (runPreviousEvents) this.events.success.forEach(params => listener(...params))\n    this.listeners.success.push(listener)\n    return this\n  }\n\n  /**\n   * Register a listener to run when the url for the external login is obtained.\n   * The url is passed as a parameter to the listener.\n   * @param listener the lister to register.\n   * @param runPreviousEvents set to false if you don't want the listener to run for the events triggered before it was attached.\n   */\n  onUrl(listener: (url: string) => any, runPreviousEvents = true) {\n    if (runPreviousEvents) this.events.url.forEach(params => listener(...params))\n    this.listeners.url.push(listener)\n    return this\n  }\n\n  /**\n   * Triggers a login event.\n   * @param event the event to trigger.\n   * @param args the arguments expected by the event.\n   */\n  trigger<T extends ThirdPartyLoginEvent>(event: T, ...args: ThirdPartyLoginEventParams[T]) {\n    this.listeners[event].forEach(l => l(...args))\n    this.events[event].push(args)\n  }\n}\n","import { Session } from './Session'\nimport { ThirdPartyClient } from './ThirdPartyClient'\nimport { TokenClient } from './TokenClient'\nimport {\n  Account, AuthConfig, CredentialMethod, CredentialOf,\n  ThirdPartyAuthResponse, ThirdPartyLoginParams, ThirdPartyLoginResult\n} from './types'\n// the following imports are used by the ts-docs, don't remove.\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { MemoryStorage } from './MemoryStorage'\nimport { ThirdPartyObservable } from './ThirdPartyObservable'\nimport {\n  AuthMethodUnavailable,\n  AuthenticationError,\n  InvalidCredentialsError,\n  InvalidSSOError,\n  InvalidTenantError,\n  SessionExpiredError,\n} from './error'\nimport { queryStringToObject } from './utils'\n\n\n/**\n * LogIn to the StackSpot application and easily manage sessions to make authenticated requests.\n * \n * The optional generic type `<Data>` refers to the extra data needed for third party login. This extra data is passed to the 1st phase of a\n * third party login and recovered on the last phase. An example of this would be a finalRedirect string, to redirect the user at the end of\n * the login process dependending on `data.finalRedirect`, passed at the start of the login.\n * \n * @example\n * ```\n * const auth = new AuthManager({\n *   authUrl: 'https://idm.stackspot.com',\n *   clientId: 'stackspot-portal',\n *   defaultTenant: 'stackspot-freemium',\n *   accountUrl: 'https://account.v1.stackspot.com',\n *   redirectUrl: 'https://stackspot.com/api/auth/callback',\n * })\n * const session = await auth.startSession('password', { username: 'user', password: 'pass' })\n * // you can now make authenticated requests without worrying about authentication!\n * const workspaces = await session.fetch('https://workspace.v1.stackspot.com/v1/workspaces')\n * ```\n */\nexport class AuthManager<Data = undefined> {\n  readonly config: Required<AuthConfig>\n  readonly tokenClient: TokenClient\n  readonly thirdPartyClient: ThirdPartyClient\n  private thirdPartyLoginAttempts: Map<string, ThirdPartyObservable<Data>> = new Map()\n\n  constructor(config: AuthConfig) {\n    this.config = {\n      ...config,\n      fetch: config.fetch ?? ((...args) => window.fetch.apply(window, args)),\n      storage: config.storage ?? new MemoryStorage(),\n      retry: config.retry ?? 1,\n      retryDelay: config.retryDelay ?? 500,\n      sessionPersistence: config.sessionPersistence ?? null,\n    }\n    if (!this.config.fetch) {\n      throw new Error(\n        \"This platform doesn't have a global implementation of the fetch function. Please, provide an implementation in you configuration.\",\n      )\n    }\n    this.tokenClient = new TokenClient(this.config)\n    this.thirdPartyClient = new ThirdPartyClient(this.config, this.tokenClient)\n  }\n\n  /**\n   * Authenticates using one of the authentication methods available.\n   * \n   * @throws\n   * - {@link InvalidTenantError}: if the tenant or the url is invalid (on 404).\n   * - {@link InvalidCredentialsError}: if the credentials are invalid.\n   * - Plain {@link AuthenticationError}: if the error is unknown.\n   * \n   * @param url the url to the authentication API.\n   * @param method the authentication method.\n   * @param credentials the credentials for signing in.\n   * @returns the session.\n   */\n  async startSession<T extends CredentialMethod>(method: T, credentials: CredentialOf<T>): Promise<Session> {\n    const sessionData = await this.tokenClient.authenticate(method, credentials)\n    return new Session(sessionData, this.config, this.tokenClient)\n  }\n\n  /**\n   * Restores a serialized session using `config.sessionPersistence.load`. If there's no session persisted or the persisted session is\n   * expired, undefined is returned.\n   * \n   * @returns the restored session.\n   */\n  async restoreSession(): Promise<Session | undefined> {\n    try {\n      const restored = await this.config.sessionPersistence?.load()\n      const session = restored ? Session.fromSerializedSession(restored, this.config, this.tokenClient) : undefined\n      if (session && !session.isExpired()) return session\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error)\n    }\n  }\n\n  private async startObservableThirdPartyLoginAsync(\n    login: ThirdPartyLoginParams,\n    observable: ThirdPartyObservable<Data>,\n    data?: Data,\n  ): Promise<void> {\n    try {\n      const { url, state } = await this.thirdPartyClient.getThirdPartyLoginUrlAndState(login, data)\n      this.thirdPartyLoginAttempts.set(state, observable)\n      observable.onSuccess(() => this.thirdPartyLoginAttempts.delete(state))\n      observable.trigger('url', url)\n    } catch (error: any) {\n      observable.trigger('error', error)\n    }\n  }\n\n  /**\n   * Performs a 3rd party login (first part).\n   * \n   * This operation happens in two parts, this is the first one and it returns the url to perform the 3rd party login.\n   * \n   * After login in the 3rd party site, the user will be redirected to the url informed in `config.redirectUrl`.\n   * \n   * When the user is at `redirectUrl`, the method `completeThirdPartyLogin` should be called with the query string in the url.\n   * \n   * @throws\n   * - {@link InvalidSSOError}: if the email doesn't correspond to any SSO registered.\n   * - {@link AuthMethodUnavailable}: if the 3rd party login is temporally unavailable.\n   * \n   * @param login parameters to the 3rd party login.\n   * @param data the extra data you want to pass from the 1st phase of the login to the end phase of the login.\n   * @returns the url to perform the 3rd party login.\n   */\n  async startThirdPartyLogin(login: ThirdPartyLoginParams, ...data: Data extends undefined ? [] : [Data]): Promise<string> {\n    const { url } = await this.thirdPartyClient.getThirdPartyLoginUrlAndState(login, data[0])\n    return url\n  }\n\n  /**\n   * Just like {@link startThirdPartyLogin}. But instead of returning the URL, it returns an observable object that can listen to any\n   * login event. A login event is triggered on every step: url generated, redirected to application, success and error.\n   * \n   * @param login parameters to the 3rd party login.\n   * @param data the extra data you want to pass from the 1st phase of the login to the end phase of the login.\n   * @returns an observable object that will update whenever a login step succeeds or fails.\n   */\n  startObservableThirdPartyLogin(login: ThirdPartyLoginParams, ...data: Data extends undefined ? [] : [Data]): ThirdPartyObservable<Data> {\n    const observable = new ThirdPartyObservable<Data>()\n    this.startObservableThirdPartyLoginAsync(login, observable, data[0])\n    return observable\n  }\n\n  private async completeObservableThirdPartyLoginAsync(queryString: string) {\n    const { state } = queryStringToObject<ThirdPartyAuthResponse>(queryString)\n    const observable = this.thirdPartyLoginAttempts.get(state)\n    if (!observable) throw new Error('Login attempt not found. This is a bug, please contact the team.')\n    observable.trigger('redirect')\n    try {\n      const { sessionData, data } = await this.thirdPartyClient.completeThirdPartyLogin(queryString)\n      const session = new Session(sessionData, this.config, this.tokenClient)\n      observable.trigger('success', session, data)\n    } catch (error: any) {\n      observable.trigger('error', error)\n    }\n  }\n\n  /**\n   * Performs a 3rd party login (second and final part).\n   * \n   * This operation happens in two parts, this is the last one and it returns a Session.\n   * This should be called by whatever is in `config.redirectUrl`. The only parameter it receives must be the query string in the url.\n   * \n   * @throws\n   * - {@link AuthenticationError}: if something goes wrong.\n   * \n   * @param queryString \n   * @returns an object containing the session and the data object passed to the `startThirdPartyLogin` method (if any).\n   */\n  async completeThirdPartyLogin(queryString: string): Promise<ThirdPartyLoginResult<Data>> {\n    const { sessionData, data } = await this.thirdPartyClient.completeThirdPartyLogin(queryString)\n    const session = new Session(sessionData, this.config, this.tokenClient)\n    return { session, data: data as Data }\n  }\n  \n  /**\n   * Performs a 3rd party login (first part) using the given tenant\n   * \n   * This operation happens in two parts, this is the first one and it returns the url to perform the 3rd party login.\n   * This function does not use or depend on the user email, instead it will use the given tenant.\n   * \n   * After login in the 3rd party site, the user will be redirected to the url informed in `config.redirectUrl`.\n   * \n   * When the user is at `redirectUrl`, the method `completeThirdPartyLogin` should be called with the query string in the url.\n   *\n   * @param login parameters to the 3rd party login.\n   * @param tenant parameters the tenant to mount the url.\n   * @param data the extra data you want to pass from the 1st phase of the login to the end phase of the login.\n   * @returns the url to perform the 3rd party login.\n   */\n  async getThirdPartyLoginFromTenant(login: ThirdPartyLoginParams, tenant: string, ...data: Data extends undefined ? [] : [Data]):  Promise<string> {\n    const {url} = await this.thirdPartyClient.getThirdPartyLoginFromTenant(login, tenant, data[0])\n    return url\n  }\n\n  /**\n   * Just like {@link completeThirdPartyLogin}. But instead of returning a Session, it completes the login for an existing\n   * {@link ThirdPartyObservable} instantiated by the function {@link startObservableThirdPartyLogin}.\n   * \n   * @param queryString.\n   */\n  completeObservableThirdPartyLogin(queryString: string): void {\n    this.completeObservableThirdPartyLoginAsync(queryString)\n  }\n\n  /**\n   * List all accounts available for the user of the session passed as parameter.\n   * \n   * @throws\n   * - {@link SessionExpiredError}: if the session passed as parameter is expired.\n   * - {@link AuthenticationError}: if the operation is not allowed.\n   * \n   * @param session \n   * @returns the accounts\n   */\n  async listAccounts(session: Session): Promise<Account[]> {\n    if (session.isExpired()) throw new SessionExpiredError()\n    const token = await session.getToken()\n    return this.thirdPartyClient.listAccounts(token)\n  }\n\n  /**\n   * Switches the active account for the user of the session passed as parameter.\n   * \n   * @throws\n   * - {@link SessionExpiredError}: if the session passed as parameter is expired.\n   * - {@link AuthenticationError}: if the operation is not allowed.\n   * \n   * @param accountId the id of the account to switch to.\n   * @param accessToken \n   * @returns the tokens linking to the new accont.\n   */\n  async switchAccount(accountId: string, session: Session): Promise<void> {\n    if (session.isExpired()) throw new SessionExpiredError()\n    const token = await session.getToken()\n    const sessionData = await this.thirdPartyClient.switchAccount(accountId, token)\n    session.updateSessionData(sessionData)\n  }\n}\n"],"names":["__publicField","__spreadProps","__spreadValues","_a","_b","random","name"],"mappings":"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"}