import { encodeReserved as $, delimited as d, encode as f } from "./util.js";
function q(...r) {
  const n = r.filter(Boolean).join("&");
  return n && `?${n}`;
}
function b(r, [n, o] = $) {
  const t = f([(c) => c, n]), e = f([(c) => c, o]), i = (c, j = "") => Object.entries(c).filter(([, s]) => s !== void 0).map(([s, u]) => {
    const y = Array.isArray(c) ? "" : s, p = j ? t`${j}[${y}]` : s;
    return typeof u == "object" ? i(u, p) : e`${p}=${u}`;
  }).join("&");
  return i(r);
}
function m(r, n = $) {
  const o = f(n);
  return Object.entries(r).filter(([, t]) => t !== void 0).map(([t, e]) => Array.isArray(e) ? e.map((i) => o`${t}=${i}`).join("&") : typeof e == "object" ? m(e, n) : o`${t}=${e}`).join("&");
}
function A(r, n = $) {
  const o = f(n);
  return Object.entries(r).filter(([, t]) => t !== void 0).map(([t, e]) => {
    const i = JSON.stringify(e);
    return o`${t}=${i}`;
  }).join("&");
}
const O = d(), l = d("|"), k = d("%20");
export {
  b as deep,
  m as explode,
  O as form,
  A as json,
  l as pipe,
  q as query,
  k as space
};
//# sourceMappingURL=query.js.map
