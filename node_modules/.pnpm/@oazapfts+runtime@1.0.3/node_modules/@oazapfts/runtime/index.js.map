{"version":3,"file":"index.js","sources":["../src/runtime.ts","../src/index.ts"],"sourcesContent":["import * as qs from \"./query\";\nimport { joinUrl } from \"./util\";\nimport { ok } from \"./index\";\nimport { CustomHeaders, mergeHeaders, normalizeHeaders } from \"./headers\";\n\nexport { type CustomHeaders };\n\nexport type RequestOpts = {\n  baseUrl?: string;\n  fetch?: typeof fetch;\n  formDataConstructor?: new () => FormData;\n  headers?: HeadersInit | CustomHeaders;\n} & Omit<RequestInit, \"body\" | \"headers\">;\n\nexport type Defaults<Headers extends RequestOpts[\"headers\"] = CustomHeaders> =\n  Omit<RequestOpts, \"headers\" | \"baseUrl\"> & {\n    baseUrl: string;\n    headers: Headers;\n  };\n\ntype FetchRequestOpts = RequestOpts & {\n  body?: string | FormData | Blob;\n};\n\ntype JsonRequestOpts = RequestOpts & {\n  body?: any;\n};\n\ntype FormRequestOpts = RequestOpts & {\n  body?: Record<string, any>;\n};\n\nexport type ApiResponse = { status: number; data?: any };\n\nexport type WithHeaders<T extends ApiResponse> = T & { headers: Headers };\n\ntype MultipartRequestOpts = RequestOpts & {\n  body?: Record<string, unknown>;\n};\n\nexport function runtime(defaults: RequestOpts = {}) {\n  async function fetchText(url: string, req?: FetchRequestOpts) {\n    const res = await doFetch(url, req);\n    let data;\n    try {\n      data = await res.text();\n    } catch (err) {}\n\n    return {\n      status: res.status,\n      headers: res.headers,\n      contentType: res.headers.get(\"content-type\"),\n      data,\n    };\n  }\n\n  async function fetchJson<T extends ApiResponse>(\n    url: string,\n    req: FetchRequestOpts = {},\n  ) {\n    const { status, headers, contentType, data } = await fetchText(url, {\n      ...req,\n      headers: mergeHeaders(\n        {\n          Accept: \"application/json\",\n        },\n        req.headers,\n      ),\n    });\n\n    const isJson = contentType ? contentType.includes(\"json\") : false;\n\n    if (isJson) {\n      return {\n        status,\n        headers,\n        data: data ? JSON.parse(data) : null,\n      } as WithHeaders<T>;\n    }\n\n    return { status, headers, data } as WithHeaders<T>;\n  }\n\n  async function fetchBlob<T extends ApiResponse>(\n    url: string,\n    req: FetchRequestOpts = {},\n  ) {\n    const res = await doFetch(url, req);\n    let data;\n    try {\n      data = await res.blob();\n    } catch (err) {}\n    return { status: res.status, headers: res.headers, data } as WithHeaders<T>;\n  }\n\n  async function doFetch(url: string, req: FetchRequestOpts = {}) {\n    const {\n      baseUrl,\n      fetch: customFetch,\n      ...init\n    } = {\n      ...defaults,\n      ...req,\n      headers: mergeHeaders(defaults.headers, req.headers),\n    };\n    const href = joinUrl(baseUrl, url);\n    const res = await (customFetch || fetch)(href, init);\n    return res;\n  }\n\n  return {\n    ok,\n    fetchText,\n    fetchJson,\n    fetchBlob,\n    mergeHeaders,\n\n    json({ body, headers, ...req }: JsonRequestOpts) {\n      return {\n        ...req,\n        ...(body != null && { body: JSON.stringify(body) }),\n        headers: mergeHeaders(\n          {\n            \"Content-Type\": \"application/json\",\n          },\n          headers,\n        ),\n      };\n    },\n\n    form({ body, headers, ...req }: FormRequestOpts) {\n      return {\n        ...req,\n        ...(body != null && { body: qs.form(body) }),\n        headers: mergeHeaders(\n          {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          headers,\n        ),\n      };\n    },\n\n    multipart({ body, headers, ...req }: MultipartRequestOpts) {\n      if (body == null)\n        return { ...req, body, headers: normalizeHeaders(headers) };\n\n      const data = new (defaults.formDataConstructor ||\n        req.formDataConstructor ||\n        FormData)();\n\n      const append = (name: string, value: unknown) => {\n        if (typeof value === \"string\" || value instanceof Blob) {\n          data.append(name, value);\n        } else if (typeof value === \"number\") {\n          data.append(name, String(value));\n        } else {\n          data.append(\n            name,\n            new Blob([JSON.stringify(value)], { type: \"application/json\" }),\n          );\n        }\n      };\n\n      Object.entries(body).forEach(([name, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach((v) => append(name, v));\n        } else {\n          append(name, value);\n        }\n      });\n\n      return {\n        ...req,\n        body: data,\n        headers: normalizeHeaders(headers),\n      };\n    },\n  };\n}\n","import type { ApiResponse, WithHeaders } from \"./runtime\";\n\nexport * from \"./runtime\";\n\n/**\n * Type to access a response's data property for a given status.\n */\nexport type DataType<T extends ApiResponse, S extends number> = T extends {\n  status: S;\n}\n  ? T[\"data\"]\n  : never;\n\n/**\n * Object with methods to handle possible status codes of an ApiResponse.\n */\nexport type ResponseHandler<T extends ApiResponse> = {\n  [P in T[\"status\"]]?: (res: DataType<T, P>) => any;\n} & {\n  default?: (status: number, data: any) => any;\n};\n\nexport type FunctionReturnType<T> = T extends (...args: any[]) => any\n  ? ReturnType<T>\n  : never;\n\n/**\n * Utility function to handle different status codes.\n *\n * Example:\n *\n * const userId = await handle(api.register({ email, password }), {\n *   200: (user: User) => user.id,\n *   400: (err: string) => console.log(err),\n * })\n **/\nexport async function handle<\n  T extends WithHeaders<ApiResponse>,\n  H extends ResponseHandler<T>,\n>(promise: Promise<T>, handler: H): Promise<FunctionReturnType<H[keyof H]>> {\n  const { status, data, headers } = await promise;\n  const statusHandler = (handler as any)[status];\n  if (statusHandler) return statusHandler(data);\n  if (handler.default) return handler.default(status, data);\n  throw new HttpError(status, data, headers);\n}\n\nexport const SUCCESS_CODES = [200, 201, 202, 204] as const;\nexport type SuccessCodes = (typeof SUCCESS_CODES)[number];\n\nexport type SuccessResponse<T extends ApiResponse> = DataType<T, SuccessCodes>;\n\n/**\n * Utility function to directly return any successful response\n * and throw a HttpError otherwise.\n *\n * Example:\n *\n * try {\n *   const userId = await ok(api.register({ email, password }));\n * }\n * catch (err) {\n *   console.log(err.status)\n * }\n */\nexport async function ok<T extends WithHeaders<ApiResponse>>(\n  promise: Promise<T>,\n): Promise<SuccessResponse<T>> {\n  const res = await promise;\n  if (SUCCESS_CODES.some((s) => s == res.status)) return res.data;\n  throw new HttpError(res.status, res.data, res.headers);\n}\n\nexport type Args<T> = T extends (...args: infer U) => any ? U : any;\nexport type ApiFunction = (...args: any[]) => Promise<WithHeaders<ApiResponse>>;\nexport type AsyncReturnType<T> = T extends (...args: any[]) => Promise<infer V>\n  ? V\n  : never;\n\nexport type OkResponse<T extends ApiFunction> = SuccessResponse<\n  AsyncReturnType<T>\n>;\n\nexport type Okify<T extends ApiFunction> = (\n  ...args: Args<T>\n) => Promise<OkResponse<T>>;\n\n/**\n * Utility function to wrap an API function with `ok(...)`.\n */\nexport function okify<T extends ApiFunction>(fn: T): Okify<T> {\n  return (...args: Args<T>) => ok(fn(...args));\n}\n\ntype OptimisticApi<T> = {\n  [K in keyof T]: T[K] extends ApiFunction ? Okify<T[K]> : T[K];\n};\n\n/**\n * Utility to `okify` each function of an API.\n */\nexport function optimistic<T extends Record<string, ApiFunction | unknown>>(\n  api: T,\n): OptimisticApi<T> {\n  const okApi: any = {};\n  Object.entries(api).forEach(([key, value]) => {\n    okApi[key] = typeof value === \"function\" ? okify(value as any) : value;\n  });\n  return okApi;\n}\n\nexport class HttpError extends Error {\n  status: number;\n  data?: any;\n  headers: Headers;\n\n  constructor(status: number, data: any, headers: Headers) {\n    super(`Error: ${status}`);\n    this.status = status;\n    this.data = data;\n    this.headers = headers;\n  }\n}\n"],"names":["runtime","defaults","fetchText","url","req","res","doFetch","data","fetchJson","status","headers","contentType","mergeHeaders","fetchBlob","baseUrl","customFetch","init","href","joinUrl","ok","body","qs.form","normalizeHeaders","append","name","value","v","handle","promise","handler","statusHandler","HttpError","SUCCESS_CODES","s","okify","fn","args","optimistic","api","okApi","key"],"mappings":"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"}