{"version":3,"file":"query.js","sources":["../src/query.ts"],"sourcesContent":["import { encode, delimited, encodeReserved } from \"./util\";\n\n/**\n * Join params using an ampersand and prepends a questionmark if not empty.\n */\nexport function query(...params: string[]) {\n  const s = params.filter(Boolean).join(\"&\");\n  return s && `?${s}`;\n}\n\n/**\n * Serializes nested objects according to the `deepObject` style specified in\n * https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#style-values\n */\nexport function deep(\n  params: Record<string, any>,\n  [k, v] = encodeReserved,\n): string {\n  const qk = encode([(s) => s, k]);\n  const qv = encode([(s) => s, v]);\n  // don't add index to arrays\n  // https://github.com/expressjs/body-parser/issues/289\n  const visit = (obj: any, prefix = \"\"): string =>\n    Object.entries(obj)\n      .filter(([, v]) => v !== undefined)\n      .map(([prop, v]) => {\n        const index = Array.isArray(obj) ? \"\" : prop;\n        const key = prefix ? qk`${prefix}[${index}]` : prop;\n        if (typeof v === \"object\") {\n          return visit(v, key);\n        }\n        return qv`${key}=${v}`;\n      })\n      .join(\"&\");\n\n  return visit(params);\n}\n\n/**\n * Property values of type array or object generate separate parameters\n * for each value of the array, or key-value-pair of the map.\n * For other types of properties this property has no effect.\n * See https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#encoding-object\n */\nexport function explode(\n  params: Record<string, any>,\n  encoders = encodeReserved,\n): string {\n  const q = encode(encoders);\n  return Object.entries(params)\n    .filter(([, value]) => value !== undefined)\n    .map(([name, value]) => {\n      if (Array.isArray(value)) {\n        return value.map((v) => q`${name}=${v}`).join(\"&\");\n      }\n      if (typeof value === \"object\") {\n        return explode(value, encoders);\n      }\n      return q`${name}=${value}`;\n    })\n    .join(\"&\");\n}\n\nexport function json(\n  params: Record<string, any>,\n  encoders = encodeReserved,\n): string {\n  const q = encode(encoders);\n  return Object.entries(params)\n    .filter(([, value]) => value !== undefined)\n    .map(([name, value]) => {\n      const v = JSON.stringify(value);\n      return q`${name}=${v}`;\n    })\n    .join(\"&\");\n}\n\nexport const form = delimited();\nexport const pipe = delimited(\"|\");\nexport const space = delimited(\"%20\");\n"],"names":["query","params","s","deep","k","v","encodeReserved","qk","encode","qv","visit","obj","prefix","prop","index","key","explode","encoders","q","value","name","json","form","delimited","pipe","space"],"mappings":";AAKO,SAASA,KAASC,GAAkB;AACzC,QAAMC,IAAID,EAAO,OAAO,OAAO,EAAE,KAAK,GAAG;AAClC,SAAAC,KAAK,IAAIA,CAAC;AACnB;AAMO,SAASC,EACdF,GACA,CAACG,GAAGC,CAAC,IAAIC,GACD;AACR,QAAMC,IAAKC,EAAO,CAAC,CAACN,MAAMA,GAAGE,CAAC,CAAC,GACzBK,IAAKD,EAAO,CAAC,CAACN,MAAMA,GAAGG,CAAC,CAAC,GAGzBK,IAAQ,CAACC,GAAUC,IAAS,OAChC,OAAO,QAAQD,CAAG,EACf,OAAO,CAAC,CAAA,EAAGN,CAAC,MAAMA,MAAM,MAAS,EACjC,IAAI,CAAC,CAACQ,GAAMR,CAAC,MAAM;AAClB,UAAMS,IAAQ,MAAM,QAAQH,CAAG,IAAI,KAAKE,GAClCE,IAAMH,IAASL,IAAKK,CAAM,IAAIE,CAAK,MAAMD;AAC3C,WAAA,OAAOR,KAAM,WACRK,EAAML,GAAGU,CAAG,IAEdN,IAAKM,CAAG,IAAIV,CAAC;AAAA,EAAA,CACrB,EACA,KAAK,GAAG;AAEb,SAAOK,EAAMT,CAAM;AACrB;AAQgB,SAAAe,EACdf,GACAgB,IAAWX,GACH;AACF,QAAAY,IAAIV,EAAOS,CAAQ;AACzB,SAAO,OAAO,QAAQhB,CAAM,EACzB,OAAO,CAAC,CAAA,EAAGkB,CAAK,MAAMA,MAAU,MAAS,EACzC,IAAI,CAAC,CAACC,GAAMD,CAAK,MACZ,MAAM,QAAQA,CAAK,IACdA,EAAM,IAAI,CAACd,MAAMa,IAAIE,CAAI,IAAIf,CAAC,EAAE,EAAE,KAAK,GAAG,IAE/C,OAAOc,KAAU,WACZH,EAAQG,GAAOF,CAAQ,IAEzBC,IAAIE,CAAI,IAAID,CAAK,EACzB,EACA,KAAK,GAAG;AACb;AAEgB,SAAAE,EACdpB,GACAgB,IAAWX,GACH;AACF,QAAAY,IAAIV,EAAOS,CAAQ;AACzB,SAAO,OAAO,QAAQhB,CAAM,EACzB,OAAO,CAAC,CAAA,EAAGkB,CAAK,MAAMA,MAAU,MAAS,EACzC,IAAI,CAAC,CAACC,GAAMD,CAAK,MAAM;AAChB,UAAAd,IAAI,KAAK,UAAUc,CAAK;AACvB,WAAAD,IAAIE,CAAI,IAAIf,CAAC;AAAA,EAAA,CACrB,EACA,KAAK,GAAG;AACb;AAEO,MAAMiB,IAAOC,EAAU,GACjBC,IAAOD,EAAU,GAAG,GACpBE,IAAQF,EAAU,KAAK;"}