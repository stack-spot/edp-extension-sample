import { Button, Flex, Input, Label } from '@citric/core'
import { ColorSchemeName } from '@stack-spot/portal-theme'
import { interpolate } from '@stack-spot/portal-translate'
import { ReactNode, useState } from 'react'
import { useDictionary } from '../dictionary'
import { OverlayContent } from './OverlayContent'

interface Validation {
  /**
   * The expected value of the field.
   */
  value: string,
  /**
   * A custom label for the input field.
   */
  label?: string | ReactNode,
  /**
   * A placeholder for the input field.
   */
  placeholder?: string,
}

export interface DialogOptions {
  /**
   * The dialog's title.
   */
  title: string,
  /**
   * The dialog's subtitle.
   */
  subtitle?: string,
  /**
   * The dialog's content.
   */
  children: ReactNode,
  /**
   * A text for the confirm button. If left blank, the confirm button won't render.
   */
  confirm?: string,
  /**
   * A text for the cancel button. If left blank, the cancel button won't render.
   */
  cancel?: string,
  /**
   * A validation input field. If the validation is incorrect, the confirm button is disabled.
   * If this is a string, the validation input's value must be equal to this string in order to enable the confirm button.
   * If this is an object, a value, label and placeholder may be specified.
   * Use false or undefined to not include a validation field.
   */
  validation?: false | string | Validation,
  /**
   * If this is a modal or a rightPanel.
   * @default modal
   */
  type?: 'modal' | 'panel',
  /**
   * The placement for the confirm/cancel buttons.
   * @default "left" if type is "panel", "right" otherwise.
   */
  buttonPlacement?: 'left' | 'center' | 'right' | 'corners',
  /**
   * The color of the primary button.
   * @default "primary"
   */
  buttonColor?: ColorSchemeName,
}

interface Props extends Omit<DialogOptions, 'message'> {
  /**
   * Function to run when the confirm button is clicked.
   */
  onConfirm: () => void,
  /**
   * Function to run when the cancel button is clicked.
   */
  onCancel: () => void,
}

const justifyButtons: Record<Required<DialogOptions>['buttonPlacement'], React.CSSProperties['justifyContent']> = {
  center: 'center',
  left: 'start',
  right: 'end',
  corners: 'space-between',
}

/**
 * A dialog, i.e. A UI with title, subtitle, close button, content and a set of buttons: cancel and confirm. May be placed under a Modal or
 * RightPanel.
 * @param props the React props of the component {@link Props}.
 */
export const Dialog = ({
  children,
  title,
  subtitle,
  cancel,
  confirm,
  validation,
  onConfirm,
  onCancel,
  type = 'modal',
  buttonPlacement = type === 'panel' ? 'left' : 'right',
  buttonColor = 'primary',
}: Props,
) => {
  const t = useDictionary()
  const [enabled, setEnabled] = useState(!validation)

  function renderValidation() {
    if (!validation) return null
    const value = typeof validation === 'string' ? validation : validation.value
    const label = typeof validation === 'object' && validation.label
      ? validation.label
      : interpolate(t.validationLabel, value)
    const placeholder = typeof validation === 'object' ? validation.placeholder : undefined
    return (
      <div style={{ margin: '24px 0 16px' }}>
        <Label htmlFor="input-validation">{label}</Label>
        <Input
          id="input-validation"
          placeholder={placeholder}
          onChange={e => setEnabled(e.target.value === value)}
          style={{ marginTop: '10px' }} />
      </div>
    )
  }

  return (
    <OverlayContent title={title} subtitle={subtitle} onClose={onCancel} type={type}>
      <Flex flexDirection="column" flex={1}>
        {children}
        {renderValidation()}
      </Flex>
      {(cancel || confirm) && <Flex gap justifyContent={justifyButtons[buttonPlacement]} alignItems="center" sx={{ mt: 6 }}>
        {cancel && <Button appearance="outlined" colorScheme="inverse" onClick={onCancel}>{cancel}</Button>}
        {confirm && <Button colorScheme={buttonColor} onClick={onConfirm} disabled={!enabled}>
          {confirm}
        </Button>}
      </Flex>}
    </OverlayContent>
  )
}
