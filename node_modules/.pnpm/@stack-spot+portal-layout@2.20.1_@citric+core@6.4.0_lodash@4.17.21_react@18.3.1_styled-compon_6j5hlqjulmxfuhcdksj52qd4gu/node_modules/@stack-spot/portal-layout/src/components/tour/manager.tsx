import WelcomeTour, { ReactourProps, ReactourStep } from 'reactour'
import { StackspotTourStep, finishTourStep, isNewTourStep, tourStepBuilder } from './utils'

export type TourConfig = Omit<ReactourProps, 'children'>
export type TourStep = ReactourStep

/**
 * Tutorial: the default configuration for a React Tour.
 */
const defaultTourConfig: TourConfig = Object.freeze({
  steps: [],
  isOpen: true,
  onRequestClose: () => '',
  showButtons: false,
  showNavigation: false,
  showNavigationNumber: false,
  showNumber: false,
  showCloseButton: false,
  disableFocusLock: true,
})


export type TourConfigExtra = TourConfig & {
  currentStep: number,
  finishStep: (stepSelector: string) => void,
  addStep: (step: StackspotTourStep) => void,
  closeTour: () => void,
}

type TourConfigListener = (config: TourConfigExtra) => void


/**
 * TourManager: provides state management for React Tour.
 */
class TourManager {

  private _steps: TourStep[] = []
  private _currentStep = 0
  private observers: TourConfigListener[] = []

  get config(): TourConfigExtra {
    const config = {
      ...defaultTourConfig,
      goToStep: this._currentStep,
      update: `${this._currentStep}`,
      steps: this._steps,
      isOpen: !!this._steps.length && (this._currentStep < this._steps.length),
      currentStep: this._currentStep,
      nextStep: () => this.nextStep(),
      prevStep: () => this.prevStep(),
      finishStep: (stepSelector: string) => this.finishStep(stepSelector),
      addStep: (step: StackspotTourStep) => this.addStep(step),
      closeTour: () => this.closeTour(),
    }
    return config
  }

  get currentStep() {
    return this._currentStep
  }

  get steps() {
    return this._steps
  }

  addStep(step: StackspotTourStep) {
    this.addRawStep(tourStepBuilder(step))
  }

  addRawStep(step: TourStep) {
    const stepAlreadyAdded = this._steps.some(it => it.selector == step.selector)
    if (!stepAlreadyAdded && isNewTourStep(step)) {
      this._steps = [...this._steps, step]
      this.notify()
    }
  }

  nextStep() {
    this._currentStep = this._currentStep + 1
    this.notify()
  }

  prevStep() {
    this._currentStep = this._currentStep - 1
    this.notify()
  }

  finishStep(stepSelector: string) {
    finishTourStep(stepSelector)
    this.nextStep()
  }

  closeTour() {
    this.steps.forEach((step) => step.selector && finishTourStep(step.selector))
    this._currentStep = this.steps.length
    this.notify()
  }

  subscribe(updateFn: TourConfigListener) {
    this.observers.push(updateFn)
    this.notify()
    return () => this.pullListener(updateFn)
  }

  private pullListener(updateFn: TourConfigListener) {
    this.observers = this.observers.filter((obs) => obs !== updateFn)
  }

  private notify() {
    this.observers.forEach((updateFn) => updateFn(this.config))
  }

}

const tourManager = new TourManager()

export { TourConfigListener, WelcomeTour, tourManager }

