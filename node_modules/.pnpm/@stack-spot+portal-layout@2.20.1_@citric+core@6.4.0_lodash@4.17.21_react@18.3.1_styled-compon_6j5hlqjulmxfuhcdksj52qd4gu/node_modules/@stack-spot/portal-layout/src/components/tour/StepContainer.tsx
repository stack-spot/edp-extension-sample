import { theme } from '@stack-spot/portal-theme'
import { ReactNode } from 'react'
import { styled } from 'styled-components'
import { NavigationProps, StepNavigation } from './StepNavigation'
import { StepTitle } from './StepTitle'
import { useTour } from './hook'

interface StepContainerProps {
  children: ReactNode,
  /**
   * The unique identifier for the step.
   */
  stepKey: string,
  /**
   * The title for the step.
   */
  title: string,
  /**
   * The position of the tour overlay related to the content being explained.
   */
  position: PointingArrowPosition,
  /**
   * A customizable set of buttons for navigating the tour steps.
   */
  customNavigation?: Omit<NavigationProps, 'stepKey'>,
}

/**
 * Tutorial: the overlay component for showing a step on React Tour.
 * @param props the react props for the component {@link StepContainerProps}.
 */
export const StepContainer = ({ title, stepKey, customNavigation, position, children }: StepContainerProps) => {
  const { closeTour } = useTour()
  return <BoxWithPointingArrow $position={position}>
    <StepTitle title={title} onClose={() => closeTour()} />
    {children}
    <StepNavigation stepKey={stepKey} {...(customNavigation || {})} />
  </BoxWithPointingArrow>
}

export type PointingArrowPosition = 'right' | 'top' | 'left' | 'bottom'

const BoxWithPointingArrow = styled.div < {
  $position: PointingArrowPosition,
  $top?: string,
  $right?: string,
} > `
  position: relative;
  width: 100%;
  background-color: ${theme.color.inverse[500]};
  &::after {
    content: '';
    position: absolute;
    border-width: 10px;
    border-style: solid;
    border-color: transparent;
    margin-top: -5px;
    border-right-color: ${theme.color.inverse[500]};
    ${({ $position, $top }) => $position === 'right' ?
    `
      top: ${$top || '16px'};
      left: -18px;
    ` : ''}
    ${({ $position, $right }) => $position === 'top' ?
    `
    bottom: 96%;
    right: ${$right || '16px'};
    transform: rotate(90deg);
    ` : ''}
    ${({ $position, $top }) => $position === 'left' ?
    `
      top: ${$top || '16px'};
      right: -18px;
      transform: rotate(180deg);
    ` : ''}
    ${({ $position, $right }) => $position === 'bottom' ?
    `
    top: -13px;
    right: ${$right || '16px'};
    transform: rotate(90deg);
    ` : ''}
  }
`
