export type UserMenuManagerListeners =  (visible: boolean) => void

class UserMenuManager {
  private visible: boolean = false
  private observers = [] as UserMenuManagerListeners[]

  changeVisible(isVisible: boolean): void {
    this.visible = isVisible
    this.notify()
  }

  isOpen(): boolean {
    return this.visible
  }

  subscribe(updateFn: UserMenuManagerListeners) {
    this.observers.push(updateFn)
    this.notify()
    return () => this.pullListener(updateFn)
  }

  private pullListener(updateFn: UserMenuManagerListeners) {
    this.observers = this.observers.filter((obs) => obs !== updateFn)
  }

  private notify() {
    this.observers.forEach((updateFn) => updateFn(this.visible))
  }
}

export const userMenuManager = new UserMenuManager()
