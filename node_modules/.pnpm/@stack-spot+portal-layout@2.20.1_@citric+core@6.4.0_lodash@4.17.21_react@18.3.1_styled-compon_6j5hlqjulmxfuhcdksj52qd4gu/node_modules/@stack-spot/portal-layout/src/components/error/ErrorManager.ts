import { ErrorDescription } from '@stack-spot/portal-components/error'

export type DescriptionFn = (error: any) => ErrorDescription
export type ErrorHandler = (error: any) => void

/**
 * Setup how the Error Boundaries deal with errors.
 */
export class ErrorManager {
  private static descriptionFunction: DescriptionFn = error => ({
    message: error.message || `${error}`,
  })
  private static errorHandler: ErrorHandler | undefined

  /**
   * Sets a custom logic for generating error messages and codes. Also setups the environment (debug or not).
   * @param fn a function that, given an error, generates its description.
   */
  static setDescriptionFunction(fn: DescriptionFn) {
    this.descriptionFunction = fn
  }

  /**
   * Sets a custom error handler, i.e. a function to run every time an error is catch by an ErrorBoundary.
   * @param fn a function that receives the error.
   */
  static setErrorHandler(handler: ErrorHandler) {
    this.errorHandler = handler
  }

  /**
   * Uses the error descriptor to describe an error.
   * @param error the error
   * @returns the error description
   */
  static describe(error: any) {
    return this.descriptionFunction(error)
  }

  /**
   * Runs the error handler, if any has been setup.
   * @param error the error
   */
  static runErrorHandler(error: any) {
    this.errorHandler?.(error)
  }
}
