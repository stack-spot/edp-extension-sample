import { ErrorDescription } from '@stack-spot/portal-components/error'
import { theme } from '@stack-spot/portal-theme'
import { Component } from 'react'
import { ErrorManager } from './ErrorManager'

interface State extends ErrorDescription {
  hasError: boolean,
}

interface Props {
  children: React.ReactNode,
}

/**
 * An Error Boundary that doesn't render anything if any of its children throws. If the environment is not production, a small error icon
 * is rendered instead of nothing.
 * 
 * To customize how the error is logged, setup an error descriptor for the ErrorManager class. If you're using the component `Layout` or
 * `RawLayout`, you can use the property `errorDescriptor`.
 * 
 * To run an error handler every time an error is catch by this boundary, setup an error handler for the ErrorManager class. If you're
 * using the component `Layout` or `RawLayout`, you can use the property `onError`.
 */
export class SilentErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: any) {
    return { hasError: true, ...ErrorManager.describe(error) }
  }

  componentDidCatch(error: any, errorInfo: any) {
    // eslint-disable-next-line no-console
    console.error(error, errorInfo)
    ErrorManager.runErrorHandler(error)
  }

  componentDidUpdate(prevProps: Readonly<Props>) {
    if (this.props.children !== prevProps.children) this.setState({ hasError: false })
  }

  render() {
    return this.state.hasError
      ? <div
        title={this.state.message ? `Error: ${this.state.message}` : undefined}
        style={{
          width: '16px',
          height: '16px',
          margin: '16px',
          background: theme.color.danger[500],
          color: theme.color.danger.contrastText,
          display: this.state.debug ? 'flex' : 'none',
          justifyContent: 'center',
          alignItems: 'center',
          fontWeight: 'bold',
          fontSize: '10px',
          borderRadius: '50%',
        }}
      >!</div>
      : this.props.children
  }
}
