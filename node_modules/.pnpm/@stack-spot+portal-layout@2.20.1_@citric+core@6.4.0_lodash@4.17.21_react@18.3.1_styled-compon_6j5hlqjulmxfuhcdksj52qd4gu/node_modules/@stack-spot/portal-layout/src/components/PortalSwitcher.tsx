import { Button, Flex, IconBox } from '@citric/core'
import { ArrowRight, CheckCircleFill, Select } from '@citric/icons'
import { SelectionList } from '@stack-spot/portal-components/SelectionList'
import { AI, CS, EDP, HUB, Logo } from '@stack-spot/portal-components/svg'
import { theme } from '@stack-spot/portal-theme'
import { ReactNode, useState } from 'react'
import styled from 'styled-components'
import { PortalAcronym } from '../types'

const Logos: Record<PortalAcronym, ReactNode> = {
  'AI': <AI />,
  'EDP': <EDP />,
  'HUB': <HUB />,
  'CS': <CS />,
  'ACCOUNT': <Logo />,
}

export interface Portal {
  /**
   * A Stackspot Portal.
   */
  acronym: PortalAcronym,
  /**
   * The URL to the Stackspot Portal.
   */
  url: string,
  /**
   * Show portal on List
   */
  showOnList?: boolean,
}

export interface PortalSwitcherProps {
  /**
   * The Stackspot portals to show in the selector.
   */
  portals?: Portal[],
}

const PortalSwitcherBox = styled(Flex)`
  flex-direction: column;
  align-items: start;
  z-index: 10;

  .current-portal {
    padding: 8px;
    border-radius: 4px;
    cursor: pointer;
    &:hover {
      background-color: ${theme.color.light[500]};
    }
  }

  .selection-list {
    max-width: 360px;
    box-shadow: 4px 4px 48px 0px #000000;
    position: absolute; 
    top: 50px;

    .selection-list-content {
      padding: 8px;
      border-width: 1px;
      border-style: solid;
      border-color: ${theme.color.light['500']};

      &> ul {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .action {
        background-color: ${theme.color.light['400']};
        border-width: 1px;
        border-style: solid;
        border-color: ${theme.color.light['500']};
        border-radius: 4px;

        &:hover, &:hover a {
          background-color: ${theme.color.light['500']};
        }

        a {
          padding: 16px;
          height: auto;
          transition: unset;
          align-items: flex-start;
        }
      }
    }
  }
 
`
const PORTAL_SWITCHER_ID = 'PortalSwitcher'

/**
 * A selector with different Stackspot portals.
 * Each item contains a logo with a link to the portal.
 * @param props the component Props {@link PortalSwitcherProps}.
 */
export const PortalSwitcher = ({ portals = [] }: PortalSwitcherProps) => {
  const [visible, setVisible] = useState<boolean>(false)
  const currentPortal = portals?.find(portal => location.href.startsWith(portal.url))

  return <PortalSwitcherBox>
    {currentPortal ?
      <Button
        className="current-portal"
        appearance="text"
        colorScheme="light"
        aria-controls={PORTAL_SWITCHER_ID}
        aria-expanded={visible}
        onClick={() => {
          setVisible(!visible)
        }}>
        <Flex alignItems="center" className="portal-switcher">
          {Logos[currentPortal.acronym]}
          <IconBox size="xs" ml={3}>
            <Select />
          </IconBox>
        </Flex>
      </Button> :
      <Logo />}
    <SelectionList
      id={PORTAL_SWITCHER_ID}
      items={portals?.filter((portal) => portal.showOnList !== false).map(portal => ({
        label: {
          id: portal.acronym,
          element: <Flex w="250px">{Logos[portal.acronym]}</Flex>,
        },
        target: '_self',
        href: portal.url,
        active: currentPortal?.acronym == portal.acronym,
        iconActive: <CheckCircleFill />,
        iconRight: portal.acronym !== currentPortal?.acronym ? <ArrowRight /> : undefined,
      }))}
      visible={visible}
      maxHeight="21rem"
      onHide={() => setVisible(false)} />
  </PortalSwitcherBox >
}
