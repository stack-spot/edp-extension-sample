import { Action } from '@stack-spot/portal-components/SelectionList'
import { ReactElement, ReactNode } from 'react'

interface BaseMenuItem {
  hidden?: boolean,
  /**
   * React element on the left.
   */
  icon?: React.ReactElement,
  /**
   * React element on the right.
   */
  badge?: React.ReactElement,
  /**
   * Whether to wrap overflowing text, just hide or hide and add an ellipsis (...).
   * @default 'wrap'
   */
  overflow?: 'hidden' | 'wrap' | 'ellipsis',
}

export interface ItemGroup extends BaseMenuItem {
  /**
   * The label for this group.
   */
  label: string,
  /**
   * The items in this group.
   */
  children: MenuItem[],
  /**
   * Whether it should start opened or not.
   */
  open?: boolean,
  showAsTitle?: boolean,
}

export interface MenuAction extends Action, BaseMenuItem {
  /**
   * Whether this menu item is currently active or not.
   */
  active?: boolean,
}

export type MenuItem = ItemGroup | MenuAction

export interface SelectorItem extends Action {
  /**
   * A unique id for this item.
   */
  key: string,
  /**
   * An icon to place at the left side of the item.
   */
  icon?: ReactElement,
}

export interface Selector {
  /**
   * The current value. Must correspond to a `key` in `options`.
   */
  value?: string,
  /**
   * A series of options to show in the selector.
   */
  options: SelectorItem[],
  /**
   * An extra button to show after the list of options.
   */
  button?: Action,
  /**
   * A title of this selector.
   */
  title?: string,
  /**
   * A subtitle for this selector.
   */
  subtitle?: string,
  /**
   * Whether or not the options for this selector are loading.
   */
  loading?: boolean,
}

export interface MenuSectionContent {
  /**
   * A link to go back.
   */
  goBack?: Action,
  /**
   * A title for this menu.
   */
  title?: string,
  /**
   * A subtitle for this menu.
   */
  subtitle?: string,
  /**
   * A custom React Node to add right after the menu title.
   */
  afterTitle?: React.ReactNode,
  /**
   * A page selector.
   */
  pageSelector?: Selector,
  /**
   * The menu options, may contain subgroups.
   */
  options?: MenuItem[],
  /**
   * Whether or not the options for this menu are loading.
   */
  loading?: boolean,
  /**
   * An error to show instead of the menu.
   */
  error?: string,
}

export interface MenuSection extends Action {
  /**
   * The icon for this section.
   */
  icon: ReactElement,
  /**
   * The content or a function that creates the content.
   * If this is a function, it will be called only when the section is hovered, i.e. only when the content really needs to be rendered.
   * Tip: this function can be a React Hook.
   */
  content?: MenuSectionContent | (() => MenuSectionContent),
  /**
   * The content or a function that creates the content.
   * If this is a function, it will be called only when the section is hovered, i.e. only when the content really needs to be rendered.
   * Tip: this function can be a React Hook.
   * This should be used when the content you want to render is not the default content
   */
  customContent?: ReactNode,
  /**
   * Whether or not this section is currently active.
   */
  active?: boolean,
  /**
   * A css class to pass to the <li> tag.
   */
  className?: string,
  hidden?: boolean,
  /**
   * The items in this group. This property will create a accordion to include the items
   */
  children?: MenuSection[],
  /**
   * initial value to accordion when using children prop
   */
  open?: boolean,
}

interface BaseMenuProps {
  /**
   * The sections of the menu.
   */
  sections?: MenuSection[],
  /**
   * The content of the menu as a React Element. Use this to create anything you want as the menu content, but prefer using `content`
   * instead, which is a predefined menu.
   */
  customContent?: ReactNode,
  /**
   * Options for the settings button.
   */
  settings?: {
    /**
     * Whether or not to show the settings button.
     */
    show?: boolean,
    /**
     * A function to call when the button is clicked.
     */
    onClick?: () => void,
    /**
     * A url to go to when the button is clicked.
     */
    href?: string,
    /**
     * Whether or not this button represents the page currently active.
     */
    active?: boolean,
    /**
     * A css class to pass to the button.
     */
    className?: string,
  },
  /**
   * Options for the rate button.
   */
  rateUs?: {
    /**
     * Whether or not to show the rate button.
     */
    show?: boolean,
    /**
     * A function to call when the button is clicked.
     */
    onClick?: () => void,
    /**
     * A url to go to when the button is clicked.
     */
    href?: string,
    /**
     * Whether or not this button represents the page currently active.
     */
    active?: boolean,
    /**
     * A css class to pass to the button.
     */
    className?: string,
  },
  /**
   * Options for the contact us button.
   */
  contactUs?: {
    /**
     * Whether or not to show the rate button.
     */
    show?: boolean,
    /**
     * A function to call when the button is clicked.
     */
    onClick?: () => void,
    /**
     * A url to go to when the button is clicked.
     */
    href?: string,
    /**
     * Whether or not this button represents the page currently active.
     */
    active?: boolean,
    /**
     * A css class to pass to the button.
     */
    className?: string,
    /**
     * Target of the URL to open.
     */
    target?: React.AnchorHTMLAttributes<HTMLAnchorElement>['target'],
  },
}

export interface MenuPropsWithStaticContent extends BaseMenuProps {
  /**
   * The config for creating the menu content.
   */
  content?: MenuSectionContent,
}

export interface MenuPropsWithDynamicContent extends BaseMenuProps {
  /**
   * The function that creates a config to render a menu content. It will be called only when the content is rendered, i.e. only when the
   * content really needs to be rendered.
   * 
   * Tip: this function can be a React Hook.
   */
  content: MenuSectionContent | (() => MenuSectionContent),
  /**
   * Identifies each content that might be rendered by the menu. This prevents React Hook errors when the content is a React Hook function.
   */
  contentKey: React.Key,
}

export type MenuProps = MenuPropsWithStaticContent | MenuPropsWithDynamicContent
