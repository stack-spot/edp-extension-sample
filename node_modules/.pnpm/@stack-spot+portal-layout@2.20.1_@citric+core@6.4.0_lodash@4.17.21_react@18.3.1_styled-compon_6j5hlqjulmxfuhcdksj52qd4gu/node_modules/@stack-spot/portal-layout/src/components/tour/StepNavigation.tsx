import { Button, Flex, Text } from '@citric/core'
import '@stack-spot/portal-theme/dist/theme.css'
import { useTranslate } from '@stack-spot/portal-translate'
import { useTour } from './hook'

interface CustomNavigationButton {
  /**
   * The text content to render.
   */
  text: string,
  onClick?: () => void,
}

export interface NavigationProps {
  /**
   * The unique identifier of the step.
   */
  stepKey: string,
  /**
   * The text and click handler for the button "next".
   */
  nextButton?: CustomNavigationButton,
  /**
   * The text and click handler for the button "previous".
   */
  prevButton?: CustomNavigationButton,
}

/**
 * Tutorial: the component in a React Tour overlay that shows the next and previous buttons (for step navigation).
 * @param props the react props for the component {@link NavigationProps}.
 */
export const StepNavigation = ({ stepKey, nextButton, prevButton }: NavigationProps) => {
  const { currentStep, steps, prevStep, finishStep } = useTour()
  const t = useTranslate(translations)

  return <Flex w={12} px={5} py={2} mt="-1px" bg="inverse.500" justifyContent="space-between" alignItems="center">
    <Text appearance="microtext1" colorScheme="inverse.contrastText">{currentStep + 1} {t.of} {steps.length}</Text>
    <Flex sx={{ gap: '8px' }}>
      {currentStep >= 1 &&
        <Button sx={{ paddingInline: '20px' }} onClick={() => {
          prevStep?.()
          prevButton?.onClick?.()
        }} size="sm" appearance="text" colorScheme="light">
          {prevButton?.text || t.back}
        </Button>}
      <Button sx={{ paddingInline: '20px' }} onClick={() => {
        nextButton?.onClick?.()
        finishStep(stepKey)
      }} size="sm" colorScheme="light">
        {nextButton?.text || (currentStep < steps.length - 1 ? t.next : t.done)}
      </Button>
    </Flex>
  </Flex>
}

const translations = {
  en: {
    of: 'of',
    back: 'Back',
    next: 'Next',
    done: 'Done',
  },
  pt: {
    of: 'de',
    back: 'Voltar',
    next: 'Pr√≥ximo',
    done: 'Finalizado',
  },
}
