import { Flex, Text } from '@citric/core'
import { TimesMini } from '@citric/icons'
import { IconButton } from '@citric/ui'
import { useAnchorTag } from '@stack-spot/portal-components/anchor'
import { useMemo } from 'react'
import type { CloseButton as DefaultCloseButton } from 'react-toastify'
import { ToastContainer, toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
import { useDictionary } from '../dictionary'

type CloseButtonProps = Parameters<typeof DefaultCloseButton>[0]

export const TOASTER_CLOSE_BTN_CLASS = 'btn-close'

const CloseButton = ({ closeToast }: CloseButtonProps) => {
  const t = useDictionary()
  return (
    <IconButton appearance="circle" color="light" size="xs" className={TOASTER_CLOSE_BTN_CLASS} onClick={closeToast} title={t.dismiss}>
      <TimesMini />
    </IconButton>
  )
}

/**
 * Uses react-toastify to render a Toaster based on the Citric DS.
 */
export const Toaster = () => <ToastContainer closeButton={CloseButton} />

export interface ToasterAction {
  /**
   * The button's label.
   */
  label: string,
  /**
   * A function to run once the button is clicked.
   */
  onClick?: (event: React.MouseEvent) => void,
  /**
   * If this is set, instead of a button, an anchor is rendered with this href.
   */
  href?: string,
  /**
   * Whether or not to close the toaster once the button is clicked.
   * @default true
   */
  closeOnClick?: boolean,
}

interface ToasterContentProps {
  id: number | string,
  actions?: ToasterAction[],
  onClick?: (event: React.MouseEvent) => void,
  title?: string,
  message: React.ReactNode,
}

const actionStyle: React.CSSProperties = {
  background: 'transparent',
  border: 'none',
  padding: 0,
  color: 'inherit',
  font: 'inherit',
  fontWeight: 500,
  cursor: 'pointer',
}

/**
 * Renders a toaster with the default layout for toasters.
 */
export const ToasterContent = ({ id, message, actions, onClick, title }: ToasterContentProps) => {
  const Link = useAnchorTag()
  const buttons = useMemo(() => actions?.map(
    ({ label, href, onClick, closeOnClick = true }) => (
      <Text
        key={label}
        as={href ? Link : 'button'}
        href={href}
        style={actionStyle}
        onClick={(event: React.MouseEvent) => {
          onClick?.(event)
          if (closeOnClick) toast.dismiss(id)
        }}
      >
        {label}
      </Text>
    ),
  ), [actions])
  return (
    <div onClick={onClick}>
      <h2 style={{ textTransform: 'capitalize' }}>{title}</h2>
      {typeof message === 'string' ? <p>{message}</p> : message}
      {buttons?.length ? <Flex style={{ gap: '12px', marginTop: '12px' }}>{buttons}</Flex> : null}
    </div>
  )
}
