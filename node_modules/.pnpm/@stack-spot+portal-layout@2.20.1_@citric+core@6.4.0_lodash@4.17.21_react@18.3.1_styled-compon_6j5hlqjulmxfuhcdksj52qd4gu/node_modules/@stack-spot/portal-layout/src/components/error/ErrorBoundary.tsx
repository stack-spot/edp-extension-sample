import { ErrorDescription, ErrorFeedback } from '@stack-spot/portal-components/error'
import { Component } from 'react'
import { ErrorManager } from './ErrorManager'

interface State extends ErrorDescription {
  hasError: boolean,
}

interface Props {
  children: React.ReactNode,
}

/**
 * An Error Boundary that renders an ErrorFeedback instead of its content if any of its children throws.
 * 
 * To customize what properties are passed to the ErrorFeedback component, setup an error descriptor for the ErrorManager class. If you're
 * using the component `Layout` or `RawLayout`, you can use the property `errorDescriptor`.
 * 
 * To run an error handler every time an error is catch by this boundary, setup an error handler for the ErrorManager class. If you're
 * using the component `Layout` or `RawLayout`, you can use the property `onError`.
 */
export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: any) {
    return { hasError: true, ...ErrorManager.describe(error) }
  }

  componentDidCatch(error: any, errorInfo: any) {
    // eslint-disable-next-line no-console
    console.error(error, errorInfo)
    ErrorManager.runErrorHandler(error)
  }

  componentDidUpdate(prevProps: Readonly<Props>) {
    if (this.props.children !== prevProps.children) this.setState({ hasError: false })
  }

  render() {
    return this.state.hasError
      ? <ErrorFeedback code={this.state.code} message={this.state.message} debug={this.state.debug} />
      : this.props.children
  }
}
