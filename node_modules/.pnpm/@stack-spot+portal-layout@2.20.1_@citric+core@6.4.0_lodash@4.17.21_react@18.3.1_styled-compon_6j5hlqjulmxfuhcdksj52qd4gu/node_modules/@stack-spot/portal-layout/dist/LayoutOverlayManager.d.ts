import { ReactElement } from 'react';
import { DialogOptions } from './components/Dialog.js';
import { OverlayContentProps } from './components/OverlayContent.js';
import { CustomToasterOptions, DefaultToasterOptions, closeReactToaster } from './toaster.js';
import { CustomModalSize, ModalSize, RightPanelSize } from './types.js';
interface AlertOptions extends Omit<DialogOptions, 'cancel'> {
    /**
     * Whether or not to show an "ok" button. If false, the dialog can still be closed through the close button, by clicking outside it or by
     * pressing ESC.
     */
    showButton?: boolean;
}
type BottomDialogOptions = Omit<DialogOptions, 'title'>;
interface CustomModalOptions {
    /**
     * The size of the modal.
     */
    size?: CustomModalSize;
    /**
     * A function to call when the modal closes.
     */
    onClose?: () => void;
    /**
     * Property that defines whether the modal should ignore the initial focus on the close button.
     * @default true
     */
    ignoreFirstFocusOnCloseButton?: boolean;
}
interface CustomRightPanelOptions {
    /**
     * The size of the right panel.
     */
    size?: RightPanelSize;
    /**
     * A function to call when the right panel closes.
     */
    onClose?: () => void;
}
declare class LayoutOverlayManager {
    static readonly instance?: LayoutOverlayManager;
    private setContent;
    private elements?;
    private onModalClose?;
    /**
     * Last element with focus before an overlay is shown.
     */
    private lastActiveElement;
    private closeCustomBackdrops;
    private onClickBackdrop;
    private onPressKeyInBackdrop;
    private setupElements;
    private getAllVisibleCustomBackdrops;
    /**
     * Enables or disables the interactivity of an element.
     * @param element the element to have its interactivity changed.
     * @param interactive false to disable interactivity, true to enable.
     */
    private setInteractivity;
    private setMainContentInteractivity;
    private showOverlay;
    private hideOverlay;
    /**
     * Shows the backdrop. The element passed as parameter must be a child of backdrop. Some accessibility features will be attached to
     * the element.
     *
     * Consider using the component <Backdrop> from this library instead of calling this function directly.
     * @param element the element to show inside the backdrop. It must already be a child of the backdrop.
     */
    showBackdrop(element?: HTMLElement | null): void;
    /**
     * Closes the backdrop. The element passed as parameter must be a child of backdrop. Some accessibility features will be run on the
     * element.
     *
     * Consider using the component <Backdrop> from this library instead of calling this function directly.
     * @param element the element showing inside the backdrop. It must be a child of the backdrop.
     */
    closeBackdrop(element?: HTMLElement | null): void;
    /**
     * @returns true if the modal is currently opened. False otherwise.
     */
    isModalOpen(): boolean;
    /**
     * @returns true if the right panel is currently opened. False otherwise.
     */
    isRightPanelOpen(): boolean;
    /**
     * @returns true if the bottom dialog is currently opened. False otherwise.
     */
    isBottomDialogOpen(): boolean;
    /**
     * Opens a modal with custom content.
     *
     * Attention: the modal state must be declared within the modal. If the state is declared outside the modal, its content won't be updated
     * accordingly. To force an update of an outside state, you need to call `showCustomModal` again with the new state value.
     *
     * @param content a react element with the modal content.
     * @param options the modal options {@link CustomModalOptions}.
     */
    showCustomModal(content: React.ReactElement, { size, onClose, ignoreFirstFocusOnCloseButton }?: CustomModalOptions): void;
    /**
     * Opens a modal.
     *
     * Attention: the modal state must be declared within the modal. If the state is declared outside the modal, its content won't be updated
     * accordingly. To force an update of an outside state, you need to call `showModal` again with the new state value.
     *
     * @param options the modal options: {@link OverlayContentProps} & { size: {@link ModalSize} }.
     */
    showModal({ size, ignoreFirstFocusOnCloseButton, ...props }: OverlayContentProps & {
        size?: ModalSize;
        ignoreFirstFocusOnCloseButton?: boolean;
    }): void;
    private showDialog;
    /**
     * Shows a confirmation dialog and returns a promise that resolves as soon as the dialog is closed. The result of the promise is true if
     * the user confirms and false otherwise.
     *
     * If you need the user to type something to confirm the action, use the property `validate` in the options parameter.
     * @param options the dialog options: {@link DialogOptions}.
     * @returns a promise that resolves with the user's answer.
     */
    confirm({ confirm, cancel, ...options }: DialogOptions): Promise<boolean>;
    /**
     * Shows an alert dialog and returns a promise that resolves as soon as the dialog is closed.
     *
     * @param options the dialog options: {@link AlertOptions}.
     * @returns a promise that resolves to undefined as soon as the dialog is closed.
     */
    alert({ confirm, showButton, ...options }: AlertOptions): Promise<void>;
    /**
     * Shows a message at the bottom of the window and asks the user to confirm or decline it. The return value is a promise that resolves as
     * soon as the user presses one of the buttons. The result of the promise is true if the user confirms and false otherwise.
     *
     * Differently than `confirm` and `alert`, this message can only be closed if the user clicks one of the buttons or `closeBottomDialog`
     * is called.
     *
     * @param options the dialog options: {@link BottomDialogOptions}.
     * @returns a promise that resolves with the user's answer.
     */
    showBottomDialog({ children, cancel, confirm }: BottomDialogOptions): Promise<boolean>;
    /**
     * Opens a right panel with custom content.
     *
     * Attention: the right panel state must be declared within the right panel. If the state is declared outside the right panel, its content
     * won't be updated accordingly. To force an update of an outside state, you need to call `showCustomRightPanel` again with the new state
     * value.
     *
     * @param content a react element with the modal content.
     * @param options the modal options {@link CustomModalOptions}.
     */
    showCustomRightPanel(content: ReactElement, { size, onClose }?: CustomRightPanelOptions): void;
    /**
     * Opens a right panel.
     *
     * Attention: the right panel state must be declared within the right panel. If the state is declared outside the right panel, its content
     * won't be updated accordingly. To force an update of an outside state, you need to call `showRightPanel` again with the new state value.
     *
     * @param options the modal options: {@link OverlayContentProps} & { size: {@link ModalSize} }.
     */
    showRightPanel({ size, ...props }: OverlayContentProps & {
        size?: RightPanelSize;
    }): void;
    private focusLastActiveElement;
    /**
     * Closes the modal if it's open.
     * @param runCloseListener whether or not to run the function `onClose` passed to `showModal` or `showCustomModal`. Defaults to true.
     */
    closeModal(runCloseListener?: boolean): void;
    /**
     * Closes the right panel if it's open.
     * @param runCloseListener whether or not to run the function `onClose` passed to `showRightPanel` or `showCustomRightPanel`. Defaults to
     * true.
     */
    closeRightPanel(runCloseListener?: boolean): void;
    /**
     * Closes the bottom dialog if it's open.
     */
    closeBottomDialog(): void;
    /**
     * Verifies if the HTML element passed as parameter is inside the modal.
     * @param element the HTML element to check.
     * @returns true if `element` is inside the modal; false otherwise.
     */
    isInsideModal(element: HTMLElement): boolean;
    /**
     * Verifies if the HTML element passed as parameter is inside the right panel.
     * @param element the HTML element to check.
     * @returns true if `element` is inside the right panel; false otherwise.
     */
    isInsideRightPanel(element: HTMLElement): boolean;
    /**
     * Shows a new toaster on the top right corner of the layout.
     * @example
     * ```
     * overlay.showToaster({ title: 'Welcome', message: 'Hello World' })
     * overlay.showToaster({
     *   title: 'Welcome',
     *   message: 'Hello World',
     *   actions: [
     *     { label: 'Got it!' },
     *     {
     *       label: 'Tell me more',
     *       closeOnClick: false,
     *       onClick: (event) => {
     *         // do something...
     *       },
     *     },
     *   ]
     * })
     * ```
     * @param options the options for the toaster: {@link DefaultToasterOptions}.
     * @returns the toaster's id.
     */
    showToaster(defaultToasterConfig: DefaultToasterOptions): number | string;
    /**
     * Shows a fully customized toaster on the top right corner of the layout.
     * @example
     * ```
     * overlay.showToaster({
     *   custom: true,
     *   message: <MyCustomToasterContent />,
     *   closeButton: <MyCustomCloseButton />,
     * })
     * ```
     * @param options the options for the toaster: {@link CustomToasterOptions}.
     * @returns the toaster's id.
     */
    showToaster(customToasterConfig: CustomToasterOptions): number | string;
    /**
     * Shows the message passed as parameter in a new toaster on the top right corner of the layout.
     * @example
     * ```
     * overlay.showToaster('Hello World!')
     * overlay.showToaster(<p>Hello World</p>)
     * ```
     * @param message the message to show, can be either a string or React Element.
     * @returns the toaster's id.
     */
    showToaster(message: React.ReactNode): number | string;
    /**
     * Closes the toaster with the specified id.
     * @param id the id of the toaster to close.
     */
    closeToaster: typeof closeReactToaster;
}
/**
 * Manages overlay components of the layout like: modal, rightPanel, bottomDialog and toaster.
 */
export declare const overlay: LayoutOverlayManager;
export {};
//# sourceMappingURL=LayoutOverlayManager.d.ts.map