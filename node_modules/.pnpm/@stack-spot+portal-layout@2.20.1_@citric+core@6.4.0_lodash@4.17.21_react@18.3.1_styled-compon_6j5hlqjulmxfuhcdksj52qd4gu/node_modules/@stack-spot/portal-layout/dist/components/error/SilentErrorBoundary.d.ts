import { ErrorDescription } from '@stack-spot/portal-components/error';
import { Component } from 'react';
interface State extends ErrorDescription {
    hasError: boolean;
}
interface Props {
    children: React.ReactNode;
}
/**
 * An Error Boundary that doesn't render anything if any of its children throws. If the environment is not production, a small error icon
 * is rendered instead of nothing.
 *
 * To customize how the error is logged, setup an error descriptor for the ErrorManager class. If you're using the component `Layout` or
 * `RawLayout`, you can use the property `errorDescriptor`.
 *
 * To run an error handler every time an error is catch by this boundary, setup an error handler for the ErrorManager class. If you're
 * using the component `Layout` or `RawLayout`, you can use the property `onError`.
 */
export declare class SilentErrorBoundary extends Component<Props, State> {
    constructor(props: Props);
    static getDerivedStateFromError(error: any): {
        code?: number | undefined;
        message?: string | undefined;
        debug?: boolean | undefined;
        title?: string | undefined;
        description?: string | undefined;
        help?: string | undefined;
        action?: {
            label: string;
            onClick: () => void;
        } | undefined;
        body?: import("react").ReactNode;
        image?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        direction?: "column" | "row" | undefined;
        style?: import("react").CSSProperties | undefined;
        className?: string | undefined;
        hasError: boolean;
    };
    componentDidCatch(error: any, errorInfo: any): void;
    componentDidUpdate(prevProps: Readonly<Props>): void;
    render(): string | number | boolean | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element | null | undefined;
}
export {};
//# sourceMappingURL=SilentErrorBoundary.d.ts.map