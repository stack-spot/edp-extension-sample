import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { Box, Button, Flex, IconBox, Text } from '@citric/core';
import { ArrowRight, TimesMini } from '@citric/icons';
import { IconButton } from '@citric/ui';
import { theme } from '@stack-spot/portal-theme';
import { useTranslate } from '@stack-spot/portal-translate';
import { useCallback, useEffect, useState } from 'react';
import { shouldShowNpsModal } from './hook.js';
import { checkVisibility } from './utils.js';
const style = {
    box: {
        width: '438px',
        bg: 'light.500',
        position: 'absolute',
        top: 0,
        right: 0,
        p: 5,
        zIndex: 1,
        borderRadius: '16px',
        boxShadow: `4px 4px 48px 0px ${theme.color.light[300]}`,
    },
};
export const FeedbackModal = ({ onClick, portal }) => {
    const t = useTranslate(dictionary);
    const [isNpsVisible, setIsNpsVisible] = useState(shouldShowNpsModal());
    const handleClose = () => {
        localStorage.setItem('RATED_US_IN', Date.now().toString());
        setIsNpsVisible(false);
    };
    const visibilityCheck = useCallback((event) => checkVisibility(event, setIsNpsVisible), []);
    useEffect(() => {
        checkVisibility({ key: 'RATED_US_IN' }, setIsNpsVisible);
        window.addEventListener('storage', visibilityCheck);
        return () => {
            window.removeEventListener('storage', visibilityCheck);
        };
    }, []);
    return isNpsVisible ? (_jsxs(Box, { sx: style.box, id: "feedback-modal", children: [_jsxs(Flex, { justifyContent: "space-between", flexWrap: "nowrap", children: [_jsxs(Text, { appearance: "h5", mb: 6, children: [t.title, portal, "?"] }), _jsx(IconButton, { onClick: handleClose, id: "feedback-modal-close-icon", children: _jsx(TimesMini, {}) })] }), _jsx(Text, { sx: { lineHeight: '24px' }, children: t.description }), _jsx(Flex, { flexDirection: "row-reverse", mt: 7, mb: 4, children: _jsxs(Button, { onClick: onClick, size: "md", children: [t.buttonText, _jsx(IconBox, { colorIcon: "inverse.contrastText", ml: 2, children: _jsx(ArrowRight, {}) })] }) })] })) : null;
};
const dictionary = {
    en: {
        title: 'How’s your experience with StackSpot ',
        description: 'Your feedback helps us make the platform more useful and intuitive for you. It only takes a few minutes.',
        buttonText: 'Share your feedback',
    },
    pt: {
        title: 'Como está sua experiência com StackSpot ',
        description: 'Seu feedback nos ajuda a tornar a plataforma mais útil e intuitiva para você. Leva apenas alguns minutos.',
        buttonText: 'Compartilhe seu feedback',
    },
};
//# sourceMappingURL=FeedbackModal.js.map