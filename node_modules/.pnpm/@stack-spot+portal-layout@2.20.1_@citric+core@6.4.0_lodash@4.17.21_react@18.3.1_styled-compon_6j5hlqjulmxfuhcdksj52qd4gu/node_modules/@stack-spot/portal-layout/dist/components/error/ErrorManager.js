/**
 * Setup how the Error Boundaries deal with errors.
 */
export class ErrorManager {
    /**
     * Sets a custom logic for generating error messages and codes. Also setups the environment (debug or not).
     * @param fn a function that, given an error, generates its description.
     */
    static setDescriptionFunction(fn) {
        this.descriptionFunction = fn;
    }
    /**
     * Sets a custom error handler, i.e. a function to run every time an error is catch by an ErrorBoundary.
     * @param fn a function that receives the error.
     */
    static setErrorHandler(handler) {
        this.errorHandler = handler;
    }
    /**
     * Uses the error descriptor to describe an error.
     * @param error the error
     * @returns the error description
     */
    static describe(error) {
        return this.descriptionFunction(error);
    }
    /**
     * Runs the error handler, if any has been setup.
     * @param error the error
     */
    static runErrorHandler(error) {
        this.errorHandler?.(error);
    }
}
Object.defineProperty(ErrorManager, "descriptionFunction", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: error => ({
        message: error.message || `${error}`,
    })
});
//# sourceMappingURL=ErrorManager.js.map