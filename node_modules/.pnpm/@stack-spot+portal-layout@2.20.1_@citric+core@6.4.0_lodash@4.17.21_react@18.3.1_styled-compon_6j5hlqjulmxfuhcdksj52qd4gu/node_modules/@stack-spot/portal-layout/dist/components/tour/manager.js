import WelcomeTour from 'reactour';
import { finishTourStep, isNewTourStep, tourStepBuilder } from './utils.js';
/**
 * Tutorial: the default configuration for a React Tour.
 */
const defaultTourConfig = Object.freeze({
    steps: [],
    isOpen: true,
    onRequestClose: () => '',
    showButtons: false,
    showNavigation: false,
    showNavigationNumber: false,
    showNumber: false,
    showCloseButton: false,
    disableFocusLock: true,
});
/**
 * TourManager: provides state management for React Tour.
 */
class TourManager {
    constructor() {
        Object.defineProperty(this, "_steps", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_currentStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "observers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    get config() {
        const config = {
            ...defaultTourConfig,
            goToStep: this._currentStep,
            update: `${this._currentStep}`,
            steps: this._steps,
            isOpen: !!this._steps.length && (this._currentStep < this._steps.length),
            currentStep: this._currentStep,
            nextStep: () => this.nextStep(),
            prevStep: () => this.prevStep(),
            finishStep: (stepSelector) => this.finishStep(stepSelector),
            addStep: (step) => this.addStep(step),
            closeTour: () => this.closeTour(),
        };
        return config;
    }
    get currentStep() {
        return this._currentStep;
    }
    get steps() {
        return this._steps;
    }
    addStep(step) {
        this.addRawStep(tourStepBuilder(step));
    }
    addRawStep(step) {
        const stepAlreadyAdded = this._steps.some(it => it.selector == step.selector);
        if (!stepAlreadyAdded && isNewTourStep(step)) {
            this._steps = [...this._steps, step];
            this.notify();
        }
    }
    nextStep() {
        this._currentStep = this._currentStep + 1;
        this.notify();
    }
    prevStep() {
        this._currentStep = this._currentStep - 1;
        this.notify();
    }
    finishStep(stepSelector) {
        finishTourStep(stepSelector);
        this.nextStep();
    }
    closeTour() {
        this.steps.forEach((step) => step.selector && finishTourStep(step.selector));
        this._currentStep = this.steps.length;
        this.notify();
    }
    subscribe(updateFn) {
        this.observers.push(updateFn);
        this.notify();
        return () => this.pullListener(updateFn);
    }
    pullListener(updateFn) {
        this.observers = this.observers.filter((obs) => obs !== updateFn);
    }
    notify() {
        this.observers.forEach((updateFn) => updateFn(this.config));
    }
}
const tourManager = new TourManager();
export { WelcomeTour, tourManager };
//# sourceMappingURL=manager.js.map