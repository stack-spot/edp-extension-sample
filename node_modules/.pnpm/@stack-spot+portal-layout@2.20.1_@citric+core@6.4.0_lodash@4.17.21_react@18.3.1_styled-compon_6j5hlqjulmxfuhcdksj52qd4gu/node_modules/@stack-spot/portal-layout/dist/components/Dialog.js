import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Flex, Input, Label } from '@citric/core';
import { interpolate } from '@stack-spot/portal-translate';
import { useState } from 'react';
import { useDictionary } from '../dictionary.js';
import { OverlayContent } from './OverlayContent.js';
const justifyButtons = {
    center: 'center',
    left: 'start',
    right: 'end',
    corners: 'space-between',
};
/**
 * A dialog, i.e. A UI with title, subtitle, close button, content and a set of buttons: cancel and confirm. May be placed under a Modal or
 * RightPanel.
 * @param props the React props of the component {@link Props}.
 */
export const Dialog = ({ children, title, subtitle, cancel, confirm, validation, onConfirm, onCancel, type = 'modal', buttonPlacement = type === 'panel' ? 'left' : 'right', buttonColor = 'primary', }) => {
    const t = useDictionary();
    const [enabled, setEnabled] = useState(!validation);
    function renderValidation() {
        if (!validation)
            return null;
        const value = typeof validation === 'string' ? validation : validation.value;
        const label = typeof validation === 'object' && validation.label
            ? validation.label
            : interpolate(t.validationLabel, value);
        const placeholder = typeof validation === 'object' ? validation.placeholder : undefined;
        return (_jsxs("div", { style: { margin: '24px 0 16px' }, children: [_jsx(Label, { htmlFor: "input-validation", children: label }), _jsx(Input, { id: "input-validation", placeholder: placeholder, onChange: e => setEnabled(e.target.value === value), style: { marginTop: '10px' } })] }));
    }
    return (_jsxs(OverlayContent, { title: title, subtitle: subtitle, onClose: onCancel, type: type, children: [_jsxs(Flex, { flexDirection: "column", flex: 1, children: [children, renderValidation()] }), (cancel || confirm) && _jsxs(Flex, { gap: true, justifyContent: justifyButtons[buttonPlacement], alignItems: "center", sx: { mt: 6 }, children: [cancel && _jsx(Button, { appearance: "outlined", colorScheme: "inverse", onClick: onCancel, children: cancel }), confirm && _jsx(Button, { colorScheme: buttonColor, onClick: onConfirm, disabled: !enabled, children: confirm })] })] }));
};
//# sourceMappingURL=Dialog.js.map