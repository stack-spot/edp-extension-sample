import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { IconBox } from '@citric/core';
import { Bell } from '@citric/icons';
import { IconButton } from '@citric/ui';
import { useEffectOnce } from '@stack-spot/portal-components';
import { useNotificationController, useNotificationList, useUnreadNotifications } from '@stack-spot/portal-components/Notifications';
import { listToClass } from '@stack-spot/portal-theme';
import { useEffect, useState } from 'react';
import { useNotificationsDictionary } from './dictionary.js';
import { NotificationPanel } from './NotificationPanel.js';
import { NotificationBox } from './styled.js';
import { getFiltersFromName, getNameFromFilters } from './utils.js';
const MAX_ITEMS = 10;
export const NotificationCenter = () => {
    const [open, setOpen] = useState(false);
    const t = useNotificationsDictionary();
    const { applyFilters, filters, items, status, error } = useNotificationList({ size: MAX_ITEMS });
    const hasUnreadNotification = useUnreadNotifications();
    const controller = useNotificationController();
    useEffectOnce(() => {
        controller.checkUnread();
    });
    useEffect(() => {
        if (open && (hasUnreadNotification || getNameFromFilters(filters) !== 'ALL')) {
            applyFilters(getFiltersFromName('ALL'));
        }
    }, [open]);
    return (_jsxs(NotificationBox, { children: [_jsx(IconButton, { "aria-label": status === 'startup' ? t.loadingNotifications : t.openNotifications, onClick: status === 'startup' ? undefined : () => setOpen(true), className: listToClass([
                    'notification-button',
                    status === 'startup' && 'loading',
                    status !== 'startup' && hasUnreadNotification && 'unread',
                ]), children: _jsx(IconBox, { size: "md", className: "notificationsTour", children: _jsx(Bell, {}) }) }), _jsx(NotificationPanel, { filter: getNameFromFilters(filters), loading: status === 'loading', error: error, items: items, visible: open, onClose: () => setOpen(false), onFilter: filter => applyFilters({ ...getFiltersFromName(filter), size: MAX_ITEMS }) })] }));
};
//# sourceMappingURL=index.js.map