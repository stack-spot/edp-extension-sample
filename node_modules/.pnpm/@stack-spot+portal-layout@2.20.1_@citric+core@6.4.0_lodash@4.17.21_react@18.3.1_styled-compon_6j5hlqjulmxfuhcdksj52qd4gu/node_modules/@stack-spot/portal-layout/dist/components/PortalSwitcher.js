import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Flex, IconBox } from '@citric/core';
import { ArrowRight, CheckCircleFill, Select } from '@citric/icons';
import { SelectionList } from '@stack-spot/portal-components/SelectionList';
import { AI, CS, EDP, HUB, Logo } from '@stack-spot/portal-components/svg';
import { theme } from '@stack-spot/portal-theme';
import { useState } from 'react';
import styled from 'styled-components';
const Logos = {
    'AI': _jsx(AI, {}),
    'EDP': _jsx(EDP, {}),
    'HUB': _jsx(HUB, {}),
    'CS': _jsx(CS, {}),
    'ACCOUNT': _jsx(Logo, {}),
};
const PortalSwitcherBox = styled(Flex) `
  flex-direction: column;
  align-items: start;
  z-index: 10;

  .current-portal {
    padding: 8px;
    border-radius: 4px;
    cursor: pointer;
    &:hover {
      background-color: ${theme.color.light[500]};
    }
  }

  .selection-list {
    max-width: 360px;
    box-shadow: 4px 4px 48px 0px #000000;
    position: absolute; 
    top: 50px;

    .selection-list-content {
      padding: 8px;
      border-width: 1px;
      border-style: solid;
      border-color: ${theme.color.light['500']};

      &> ul {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .action {
        background-color: ${theme.color.light['400']};
        border-width: 1px;
        border-style: solid;
        border-color: ${theme.color.light['500']};
        border-radius: 4px;

        &:hover, &:hover a {
          background-color: ${theme.color.light['500']};
        }

        a {
          padding: 16px;
          height: auto;
          transition: unset;
          align-items: flex-start;
        }
      }
    }
  }
 
`;
const PORTAL_SWITCHER_ID = 'PortalSwitcher';
/**
 * A selector with different Stackspot portals.
 * Each item contains a logo with a link to the portal.
 * @param props the component Props {@link PortalSwitcherProps}.
 */
export const PortalSwitcher = ({ portals = [] }) => {
    const [visible, setVisible] = useState(false);
    const currentPortal = portals?.find(portal => location.href.startsWith(portal.url));
    return _jsxs(PortalSwitcherBox, { children: [currentPortal ?
                _jsx(Button, { className: "current-portal", appearance: "text", colorScheme: "light", "aria-controls": PORTAL_SWITCHER_ID, "aria-expanded": visible, onClick: () => {
                        setVisible(!visible);
                    }, children: _jsxs(Flex, { alignItems: "center", className: "portal-switcher", children: [Logos[currentPortal.acronym], _jsx(IconBox, { size: "xs", ml: 3, children: _jsx(Select, {}) })] }) }) :
                _jsx(Logo, {}), _jsx(SelectionList, { id: PORTAL_SWITCHER_ID, items: portals?.filter((portal) => portal.showOnList !== false).map(portal => ({
                    label: {
                        id: portal.acronym,
                        element: _jsx(Flex, { w: "250px", children: Logos[portal.acronym] }),
                    },
                    target: '_self',
                    href: portal.url,
                    active: currentPortal?.acronym == portal.acronym,
                    iconActive: _jsx(CheckCircleFill, {}),
                    iconRight: portal.acronym !== currentPortal?.acronym ? _jsx(ArrowRight, {}) : undefined,
                })), visible: visible, maxHeight: "21rem", onHide: () => setVisible(false) })] });
};
//# sourceMappingURL=PortalSwitcher.js.map