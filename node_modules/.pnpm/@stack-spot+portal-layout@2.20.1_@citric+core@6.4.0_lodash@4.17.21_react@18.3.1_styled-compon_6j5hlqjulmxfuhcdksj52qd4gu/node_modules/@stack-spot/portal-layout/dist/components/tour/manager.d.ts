import WelcomeTour, { ReactourProps, ReactourStep } from 'reactour';
import { StackspotTourStep } from './utils.js';
export type TourConfig = Omit<ReactourProps, 'children'>;
export type TourStep = ReactourStep;
export type TourConfigExtra = TourConfig & {
    currentStep: number;
    finishStep: (stepSelector: string) => void;
    addStep: (step: StackspotTourStep) => void;
    closeTour: () => void;
};
type TourConfigListener = (config: TourConfigExtra) => void;
/**
 * TourManager: provides state management for React Tour.
 */
declare class TourManager {
    private _steps;
    private _currentStep;
    private observers;
    get config(): TourConfigExtra;
    get currentStep(): number;
    get steps(): ReactourStep[];
    addStep(step: StackspotTourStep): void;
    addRawStep(step: TourStep): void;
    nextStep(): void;
    prevStep(): void;
    finishStep(stepSelector: string): void;
    closeTour(): void;
    subscribe(updateFn: TourConfigListener): () => void;
    private pullListener;
    private notify;
}
declare const tourManager: TourManager;
export { TourConfigListener, WelcomeTour, tourManager };
//# sourceMappingURL=manager.d.ts.map