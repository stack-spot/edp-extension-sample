import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Flex, Text } from '@citric/core';
import { TimesMini } from '@citric/icons';
import { IconButton } from '@citric/ui';
import { useAnchorTag } from '@stack-spot/portal-components/anchor';
import { useMemo } from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDictionary } from '../dictionary.js';
export const TOASTER_CLOSE_BTN_CLASS = 'btn-close';
const CloseButton = ({ closeToast }) => {
    const t = useDictionary();
    return (_jsx(IconButton, { appearance: "circle", color: "light", size: "xs", className: TOASTER_CLOSE_BTN_CLASS, onClick: closeToast, title: t.dismiss, children: _jsx(TimesMini, {}) }));
};
/**
 * Uses react-toastify to render a Toaster based on the Citric DS.
 */
export const Toaster = () => _jsx(ToastContainer, { closeButton: CloseButton });
const actionStyle = {
    background: 'transparent',
    border: 'none',
    padding: 0,
    color: 'inherit',
    font: 'inherit',
    fontWeight: 500,
    cursor: 'pointer',
};
/**
 * Renders a toaster with the default layout for toasters.
 */
export const ToasterContent = ({ id, message, actions, onClick, title }) => {
    const Link = useAnchorTag();
    const buttons = useMemo(() => actions?.map(({ label, href, onClick, closeOnClick = true }) => (_jsx(Text, { as: href ? Link : 'button', href: href, style: actionStyle, onClick: (event) => {
            onClick?.(event);
            if (closeOnClick)
                toast.dismiss(id);
        }, children: label }, label))), [actions]);
    return (_jsxs("div", { onClick: onClick, children: [_jsx("h2", { style: { textTransform: 'capitalize' }, children: title }), typeof message === 'string' ? _jsx("p", { children: message }) : message, buttons?.length ? _jsx(Flex, { style: { gap: '12px', marginTop: '12px' }, children: buttons }) : null] }));
};
//# sourceMappingURL=Toaster.js.map