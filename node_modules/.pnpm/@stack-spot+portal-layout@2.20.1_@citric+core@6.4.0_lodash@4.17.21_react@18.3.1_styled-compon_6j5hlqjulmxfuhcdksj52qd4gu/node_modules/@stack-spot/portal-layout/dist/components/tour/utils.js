import { jsx as _jsx } from "react/jsx-runtime";
import { getCookie, setCookie } from '@stack-spot/portal-components';
import { theme } from '@stack-spot/portal-theme';
import { StepContainer } from './StepContainer.js';
const TOUR_COOKIE = 'guided-tour-global';
const defaultExpires = new Date();
defaultExpires.setFullYear(new Date().getFullYear() + 1);
const getTourCookie = () => {
    const currentTourObject = getCookie(TOUR_COOKIE);
    return currentTourObject ? currentTourObject.split(',') : [];
};
/**
 * Tutorial: marks the tour step as finished. This sets a cookie, preventing the tour from showing again.
 * @param key the identifier for the step to mark as finished.
 */
export const finishTourStep = (key) => {
    const finishedTours = getTourCookie();
    if (!finishedTours.includes(key))
        finishedTours.push(key);
    setCookie(TOUR_COOKIE, finishedTours.toString(), { expires: defaultExpires.toUTCString() });
};
/**
 * Tutorial: verifies if the React Tour step has not finished yet.
 *
 * A step has not finished if the array stored as a cookie doesn't include the string value of `step.selector`.
 * @param step the step config.
 * @returns true if the step has not yet been marked as finished. False otherwise.
 */
export const isNewTourStep = (step) => !hasFinishedTourStep(`${step.selector}`);
/**
 * Tutorial: verifies if the key passed as parameter refers to a React Tour step that has already finished.
 *
 * The key refers to a finished step if the array stored as a cookie includes it.
 * If the cookie is set to 'disabled', then the step will be considered finished.Particularly useful in scenarios like e2e tests.
 * @param key the step's identifier to check.
 * @returns true if the key refers to a finished step. False otherwise.
 */
export const hasFinishedTourStep = (key) => {
    const tourCookie = getTourCookie();
    return tourCookie.includes(key) || tourCookie[0] === 'disabled';
};
/**
 * Tutorial: utility for building a React Tour step. This already includes some default configuration for tours in Stackspot.
 * @param options the options for building the step: {@link StackspotTourStep}.
 * @returns the React Tour step.
 */
export const tourStepBuilder = ({ selector, position, title, content, style, customNavigation, ...rest }) => ({
    selector,
    content: (_jsx(StepContainer, { stepKey: selector, position: position, title: title, customNavigation: customNavigation, children: content })),
    position,
    style: {
        backgroundColor: theme.color.inverse[500],
        width: '256px',
        padding: 0,
        top: ['right', 'left'].includes(position) ? '-3px' : '0',
        ...(style || {}),
    },
    ...(rest || {}),
});
//# sourceMappingURL=utils.js.map