import { ColorSchemeName } from '@stack-spot/portal-theme';
import { ReactNode } from 'react';
interface Validation {
    /**
     * The expected value of the field.
     */
    value: string;
    /**
     * A custom label for the input field.
     */
    label?: string | ReactNode;
    /**
     * A placeholder for the input field.
     */
    placeholder?: string;
}
export interface DialogOptions {
    /**
     * The dialog's title.
     */
    title: string;
    /**
     * The dialog's subtitle.
     */
    subtitle?: string;
    /**
     * The dialog's content.
     */
    children: ReactNode;
    /**
     * A text for the confirm button. If left blank, the confirm button won't render.
     */
    confirm?: string;
    /**
     * A text for the cancel button. If left blank, the cancel button won't render.
     */
    cancel?: string;
    /**
     * A validation input field. If the validation is incorrect, the confirm button is disabled.
     * If this is a string, the validation input's value must be equal to this string in order to enable the confirm button.
     * If this is an object, a value, label and placeholder may be specified.
     * Use false or undefined to not include a validation field.
     */
    validation?: false | string | Validation;
    /**
     * If this is a modal or a rightPanel.
     * @default modal
     */
    type?: 'modal' | 'panel';
    /**
     * The placement for the confirm/cancel buttons.
     * @default "left" if type is "panel", "right" otherwise.
     */
    buttonPlacement?: 'left' | 'center' | 'right' | 'corners';
    /**
     * The color of the primary button.
     * @default "primary"
     */
    buttonColor?: ColorSchemeName;
}
interface Props extends Omit<DialogOptions, 'message'> {
    /**
     * Function to run when the confirm button is clicked.
     */
    onConfirm: () => void;
    /**
     * Function to run when the cancel button is clicked.
     */
    onCancel: () => void;
}
/**
 * A dialog, i.e. A UI with title, subtitle, close button, content and a set of buttons: cancel and confirm. May be placed under a Modal or
 * RightPanel.
 * @param props the React props of the component {@link Props}.
 */
export declare const Dialog: ({ children, title, subtitle, cancel, confirm, validation, onConfirm, onCancel, type, buttonPlacement, buttonColor, }: Props) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=Dialog.d.ts.map