import { jsx as _jsx } from "react/jsx-runtime";
import { IconBox } from '@citric/core';
import { CheckCircleFill, ExclamationCircleFill, ExclamationTriangleFill, InfoCircleFill } from '@citric/icons';
import { translate } from '@stack-spot/portal-translate';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { ToasterContent } from './components/Toaster.js';
const toasterConfig = {
    error: {
        element: _jsx(ExclamationCircleFill, {}),
        color: 'danger',
        duration: 10,
    },
    success: {
        element: _jsx(CheckCircleFill, {}),
        color: 'success',
        duration: 3,
    },
    warning: {
        element: _jsx(ExclamationTriangleFill, {}),
        color: 'warning',
        duration: 10,
    },
    info: {
        element: _jsx(InfoCircleFill, {}),
        color: 'inverse',
        duration: 10,
    },
};
export function showToaster(options) {
    const isToasterConfig = options && typeof options === 'object' && 'message' in options;
    const { type = 'info', autoClose, ...opts } = isToasterConfig
        ? options
        : { message: options };
    const config = toasterConfig[type];
    const id = opts.id ?? Math.random();
    const closeTime = autoClose ? autoClose : config.duration;
    const bg = `var(--${config.color}-500)`;
    const bgDark = `var(--${config.color}-600)`;
    const fg = `var(--${config.color}-contrastText)`;
    toast(opts.custom
        ? opts.message
        : _jsx(ToasterContent, { ...opts, id: id, title: opts.title ?? translate(dictionary)[type] }), {
        toastId: id,
        type,
        autoClose: autoClose === false ? false : closeTime * 1000,
        className: 'main-toaster',
        style: { backgroundColor: bg, color: fg },
        progressStyle: { background: bgDark },
        bodyClassName: 'toast-body',
        icon: opts.custom ? false : () => (_jsx(IconBox, { colorIcon: `${config.color}.contrastText`, size: "xs", children: config.element })),
        closeOnClick: opts.closeOnClick ?? false,
        closeButton: opts.custom ? (opts.closeButton ?? false) : undefined,
    });
    return id;
}
export function closeReactToaster(id) {
    toast.dismiss(id);
}
const dictionary = {
    en: {
        success: 'Success',
        error: 'Error',
        info: 'Info',
        warning: 'Warning',
    },
    pt: {
        success: 'Sucesso',
        error: 'Erro',
        info: 'Info',
        warning: 'Atenção',
    },
};
//# sourceMappingURL=toaster.js.map