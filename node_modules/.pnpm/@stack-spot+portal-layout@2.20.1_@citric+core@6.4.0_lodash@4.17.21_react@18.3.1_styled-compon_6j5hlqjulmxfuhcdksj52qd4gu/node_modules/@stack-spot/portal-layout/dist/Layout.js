import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CSSToCitricAdapter, listToClass } from '@stack-spot/portal-theme';
import '@stack-spot/portal-theme/dist/theme.css';
import { useEffect } from 'react';
import { overlay } from './LayoutOverlayManager.js';
import { WelcomeTour } from './WelcomeTour.js';
import { Header } from './components/Header.js';
import { Toaster } from './components/Toaster.js';
import { ErrorBoundary } from './components/error/ErrorBoundary.js';
import { ErrorManager } from './components/error/ErrorManager.js';
import { SilentErrorBoundary } from './components/error/SilentErrorBoundary.js';
import { MenuContent } from './components/menu/MenuContent.js';
import { MenuSections } from './components/menu/MenuSections.js';
import { elementIds, getLayoutElements } from './elements.js';
import './layout.css';
/**
 * Renders the layout with the React elements passed in the props.
 * @param props the component's props {@link RawProps}.
 */
export const RawLayout = ({ menuSections, menuContent, header, children, extra, errorDescriptor, onError, className, style }) => {
    const { bottomDialog, modal, rightPanel } = overlay.useOverlays();
    const { layout } = getLayoutElements();
    const isCompactedOnlyIcons = layout?.classList.contains('menu-compact');
    const classes = [
        menuContent && !isCompactedOnlyIcons ? 'menu-content-visible' : undefined,
        menuSections ? undefined : 'no-menu-sections',
        className,
        isCompactedOnlyIcons ? 'menu-compact' : undefined,
    ];
    useEffect(() => {
        if (errorDescriptor)
            ErrorManager.setDescriptionFunction(errorDescriptor);
        if (onError)
            ErrorManager.setErrorHandler(onError);
    }, []);
    return (_jsxs(CSSToCitricAdapter, { children: [_jsx(WelcomeTour, {}), _jsxs("div", { id: elementIds.layout, className: listToClass(classes), style: style, children: [header && _jsx("header", { id: elementIds.header, children: _jsx(SilentErrorBoundary, { children: header }) }), extra && _jsx(SilentErrorBoundary, { children: extra }), _jsxs("aside", { id: elementIds.menu, children: [_jsx("nav", { role: "menubar", id: elementIds.menuContent, children: _jsx(SilentErrorBoundary, { children: menuContent }) }), menuSections &&
                                _jsx("nav", { role: "menubar", id: elementIds.menuSections, children: _jsx(SilentErrorBoundary, { children: menuSections }) })] }), children && _jsx("div", { id: elementIds.page, children: _jsx("article", { id: elementIds.content, children: _jsx(ErrorBoundary, { children: children }) }) }), _jsx("div", { id: elementIds.bottomDialog, role: "dialog", children: _jsx(ErrorBoundary, { children: bottomDialog }) }), _jsxs("div", { id: elementIds.backdrop, children: [_jsx("div", { id: elementIds.rightPanel, "aria-modal": true, role: "dialog", children: _jsx(ErrorBoundary, { children: rightPanel }) }), _jsx("div", { id: elementIds.modal, "aria-modal": true, role: "dialog", children: _jsx(ErrorBoundary, { children: modal }) })] }), _jsx(Toaster, {}), _jsx("div", { id: elementIds.accessibilityAnnouncer, "aria-atomic": true, "aria-live": "assertive" })] })] }));
};
const MenuContentRenderer = ({ content }) => {
    const menuContent = typeof content === 'function' ? content() : content;
    return _jsx(MenuContent, { ...menuContent });
};
/**
 * Renders the layout with a menu and header that follow the config objects passed as parameter.
 * @param props the component's props {@link Props}.
 */
export const Layout = ({ menu, header, children, extra, errorDescriptor, onError, className, style }) => (_jsx(RawLayout, { header: _jsx(Header, { ...header }), menuSections: menu.sections ? _jsx(MenuSections, { ...menu }) : undefined, menuContent: menu.content
        ? _jsx(MenuContentRenderer, { content: menu.content }, 'contentKey' in menu ? menu.contentKey : undefined)
        : undefined, errorDescriptor: errorDescriptor, onError: onError, extra: extra, className: className, style: style, children: children }));
//# sourceMappingURL=Layout.js.map