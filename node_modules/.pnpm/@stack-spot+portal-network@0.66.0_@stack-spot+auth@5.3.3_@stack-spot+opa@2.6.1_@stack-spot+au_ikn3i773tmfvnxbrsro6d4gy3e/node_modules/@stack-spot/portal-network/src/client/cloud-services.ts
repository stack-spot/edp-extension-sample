import { HttpError } from '@oazapfts/runtime'
import {
  BillingAccountSummaryResponse,
  defaults, downloadCsvFiles, enableGuardrail, getAlerts, getAllocationCostCsv, getAllocationCostFilters, getAllTags,
  getCostOverview, getGuardrails, getInstanceDetails, listBillingAccounts, listInstances, listServices,
  processAllocationCostRequest,
} from '../api/cloudServices'
import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { CostAllocationResult, CostAllocationVariables, FixedManagedService, FixVariables, OazapftsFunction, ReplaceResult } from './types'

class CloudServicesClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.cloudServices.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, { en: {}, pt: {} }, error.headers)
  }

  /**
   * Gets overview of costs over the current month, last month and last 3 months.
   */
  costOverview = this.query(getCostOverview as unknown as FixVariables<typeof getCostOverview, { sortOrder?: 'asc' | 'desc' }>)
  /**
   * Gets a CSV file with the data of `costOverview`.
   */
  downloadCostOverviewCSV = this.mutation(downloadCsvFiles)
  /**
   * Gets the alerts in a workspace and environment (paginated).
   */
  alerts = this.infiniteQuery(getAlerts, {
    accumulator: 'data',
    defaultVariables: { pageSize: 40 },
    initialPageParam: 1,
    getNextPageParam: ({ lastPage }) => lastPage.nextPage,
  })
  /**
   * Lists instances of a particular service resource running in a workspace.
   */
  allInstancesOfResource = this.query(listInstances)
  /**
   * Lists all managed services.
   */
  allServices = this.query(listServices as unknown as ReplaceResult<typeof listServices, FixedManagedService[]>)
  /**
   * Gets the description of an instance.
   */
  // we need a manual query here because the backend returns application/json in error responses and application/yaml in successful
  // responses. Oazapfts will handle the request as JSON whenever at least one of the response types is JSON, which I think is wrong, but
  // it is what it is. This manual query changes the accept header to */* and the return type to string, which is the fallback when Oazapfts
  // can't parse what it expects to be a json. 
  instance = this.query({
    name: 'instance',
    request: (signal, variables: Parameters<typeof getInstanceDetails>[0]) => {
      return getInstanceDetails(variables, { signal, headers: { 'accept': '*/*' }}) as unknown as Promise<string>
    },
    permission: this.createPermissionFunctionFor(getInstanceDetails),
  })
  /**
   * Gets all Guard Rails.
   */
  guardRails = this.query(getGuardrails)
  /**
   * Enables a Guard Rail in any level
   */
  enableGuardRail = this.mutation(enableGuardrail)
  /**
   * Retrieves cost and usage metrics for the current account.
   */
  costAllocation = this.query(
    processAllocationCostRequest as unknown as OazapftsFunction<CostAllocationVariables, CostAllocationResult>,
  )
  /**
   * Lists the filters related to the given type.
   */
  costAllocationFilters = this.query(getAllocationCostFilters)
  /**
   * Gets a CSV file with the data of `costAllocation`.
   */
  downloadCostAllocationCSV = this.query(getAllocationCostCsv)
  /**
   * Lists all tags.
   */
  allTags = this.query(getAllTags)
  /**
   * Retrieves a summary for each billing account of the account with the id passed as parameter.
   */
  billingAccounts = this.query(listBillingAccounts as unknown as ReplaceResult<typeof listBillingAccounts, BillingAccountSummaryResponse[]>)
}

export const cloudServicesClient = new CloudServicesClient()
