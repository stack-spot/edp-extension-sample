import { HttpError } from '@oazapfts/runtime'
import { createCloudAccount, defaults, deleteCloudAccountFromEnvironment, deleteManagedAccountsFromWorkspace, getCloudAccountByWorkspace, getManagedCloudRegion, getManagedCloudTemplate, getProvisionWorkflowInWorkspace, listCloudAccounts, provisionManagedAccountsForWorkspace } from '../api/cloudAccount'
import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { removeAuthorizationParam } from '../utils/remove-authorization-param'
import { FixedConnectAccountRequestV2, FixedManagedAccountProvisionRequest, FixVariables } from './types'

const listAccounts = removeAuthorizationParam(listCloudAccounts)

class CloudAccountClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.cloudAccount.url, defaults)
  } 

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, { en: {}, pt: {} }, error.headers)
  }

  /**
   * Lists all cloud accounts according to the parameters (paginated).
   */
  cloudAccounts = this.infiniteQuery(listAccounts, {
    accumulator: 'data',
    getNextPageParam: ({ lastPage }) => lastPage.nextPage,
  })
  /**
   * Gets a list of cloud accounts connected to a workspace
   */
  cloudAccountByWorkspace = this.query(removeAuthorizationParam(getCloudAccountByWorkspace))
  /**
   * Gets the cloud account workflow of a workspace environment
   */
  workflowByWorkspace = this.query(removeAuthorizationParam(getProvisionWorkflowInWorkspace))
  /**
   * Creates a cloud account.
   */
  createCloudAccount = this.mutation(
    createCloudAccount as FixVariables<
      typeof createCloudAccount,
      { jwtToken: never, connectAccountRequestV2: FixedConnectAccountRequestV2 }
    >,
  )
  /**
   * Deletes a cloud account.
   */
  deleteCloudAccount = this.mutation(removeAuthorizationParam(deleteCloudAccountFromEnvironment))
  /**
   * Deletes all accounts in a workspace.
   */
  deleteAllCloudAccounts = this.mutation(removeAuthorizationParam(deleteManagedAccountsFromWorkspace))
  /**
   * Provisions managed accounts in a workspace.
   */
  createCloudServicesAccount = this.mutation(provisionManagedAccountsForWorkspace as unknown as FixVariables<
    typeof provisionManagedAccountsForWorkspace,
    { jwtToken: never, managedAccountProvisionRequest: FixedManagedAccountProvisionRequest }
  >)
  /**
   * Gets all available templates for the managed Cloud Account.
   */
  managedAccountTemplates = this.query(getManagedCloudTemplate)
  /**
   * Gets all the available regions for the managed Cloud Account.
   */
  managesAccountRegions = this.query(getManagedCloudRegion)
}

export const cloudAccountClient = new CloudAccountClient()
