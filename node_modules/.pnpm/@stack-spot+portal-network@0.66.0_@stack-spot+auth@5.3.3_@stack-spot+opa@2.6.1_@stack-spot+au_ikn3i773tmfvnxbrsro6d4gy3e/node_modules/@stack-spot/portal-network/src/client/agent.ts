import { HttpError } from '@oazapfts/runtime'
import { defaults, getV1AgentByAgentId, getV1Agents, getV1PublicAgents } from '../api/agent'
import apis from '../apis.json'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'

interface AgentError {
  code?: string,
  details?: string,
  additionalInformation?: Record<string, any>,
}

class AgentClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.agent.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    const errorData = error.data as AgentError | undefined
    const message = [errorData?.details]
    Object.keys(errorData?.additionalInformation ?? {}).forEach(k => message.push(`  - ${k}: ${errorData?.additionalInformation?.[k]}`))
    return new StackspotAPIError({
      status: error.status,
      headers: error.headers,
      stack: error.stack,
      code: error.data?.code,
      message: message.join('\n'),
    })
  }

  agents = this.query(getV1Agents)
  publicAgents = this.query(getV1PublicAgents)
  agent = this.query(getV1AgentByAgentId)
}

export const agentClient = new AgentClient()
