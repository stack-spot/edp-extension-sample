import { HttpError } from '@oazapfts/runtime'
import {
  ChatResponse3,
  conversationHistoryV1ConversationsConversationIdGet,
  defaults,
  deleteConversationV1ConversationsConversationIdDelete,
  downloadConversationV1ConversationsConversationIdDownloadGet,
  findKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdGet,
  formatFetchStepV1QuickCommandsSlugStepsStepSlugFetchFormatPost,
  formatResultV1QuickCommandsSlugResultFormatPost,
  getQuickCommandV1QuickCommandsSlugGet,
  HttpValidationError,
  listAiStacksV1AiStacksGet,
  listAllV1QuickCommandsAllGet,
  listAssociationV1WorkspaceWorkspaceIdGet,
  listConversationsV1ConversationsGet,
  listKnowledgeSourcesV1KnowledgeSourcesGet,
  postEventV1EventsPost,
  quickActionsV1QuickActionsPost,
  quickCommandsRunV2V2QuickCommandsSlugStepsStepSlugRunPost,
  updateTitleV1ConversationsConversationIdPatch,
} from '../api/ai'
import apis from '../apis.json'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { removeAuthorizationParam } from '../utils/remove-authorization-param'
import { StreamedJson } from '../utils/StreamedJson'
import { FixedChatRequest, FixedConversationResponse, ReplaceResult } from './types'

class AIClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.ai.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new StackspotAPIError({
      status: error.status,
      headers: error.headers,
      stack: error.stack,
      message: (error.data as HttpValidationError | undefined)?.detail?.map(d => d.msg)?.join('\n'),
    })
  }

  runQuickAction = this.mutation(removeAuthorizationParam(quickActionsV1QuickActionsPost))
  aiStacks = this.query(removeAuthorizationParam(listAiStacksV1AiStacksGet))
  workspace = this.query(removeAuthorizationParam(listAssociationV1WorkspaceWorkspaceIdGet))
  quickCommands = this.query(removeAuthorizationParam(listAllV1QuickCommandsAllGet))
  quickCommand = this.query(removeAuthorizationParam(getQuickCommandV1QuickCommandsSlugGet))
  knowledgeSources = this.query(removeAuthorizationParam(listKnowledgeSourcesV1KnowledgeSourcesGet))
  knowledgeSourceDocument = this.query(removeAuthorizationParam(findKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdGet))
  chats = this.infiniteQuery(removeAuthorizationParam(listConversationsV1ConversationsGet))
  chat = this.query(removeAuthorizationParam(
    conversationHistoryV1ConversationsConversationIdGet as ReplaceResult<
      typeof conversationHistoryV1ConversationsConversationIdGet,
      FixedConversationResponse
    >,
  ))
  deleteChat = this.mutation(removeAuthorizationParam(deleteConversationV1ConversationsConversationIdDelete))
  downloadChat = this.mutation(removeAuthorizationParam(downloadConversationV1ConversationsConversationIdDownloadGet))
  renameChat = this.mutation(removeAuthorizationParam(updateTitleV1ConversationsConversationIdPatch))
  createEvent = this.mutation(removeAuthorizationParam(postEventV1EventsPost))
  fetchStepOfQuickCommand = this.mutation(removeAuthorizationParam(formatFetchStepV1QuickCommandsSlugStepsStepSlugFetchFormatPost))
  llmStepOfQuickCommand = this.mutation(removeAuthorizationParam(quickCommandsRunV2V2QuickCommandsSlugStepsStepSlugRunPost))
  formatResultOfQuickCommand = this.mutation(removeAuthorizationParam(formatResultV1QuickCommandsSlugResultFormatPost))

  sendChatMessage(request: FixedChatRequest, minChangeIntervalMS?: number): StreamedJson<ChatResponse3> {
    const abortController = new AbortController()
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'text/event-stream',
    }
    const events = this.stream(
      this.resolveURL('v3/chat'),
      { method: 'post', body: JSON.stringify(request), headers, signal: abortController.signal },
    )
    return new StreamedJson(events, abortController, minChangeIntervalMS)
  }
}

export const aiClient = new AIClient()
