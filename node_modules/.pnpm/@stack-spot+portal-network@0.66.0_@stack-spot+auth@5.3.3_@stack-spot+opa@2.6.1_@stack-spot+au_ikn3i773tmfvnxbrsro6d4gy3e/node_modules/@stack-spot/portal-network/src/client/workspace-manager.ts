/* eslint-disable max-len */
import { HttpError } from '@oazapfts/runtime'
import {
  accountApplicationControllergetAccountApplicationPage,
  accountApplicationControllergetAccountApplicationsFilters,
  accountSharedInfraControllergetAccountSharedInfraFilters,
  accountSharedInfraControllergetAccountSharedInfraPage,
  applicationControllerV2GetApplicationActivities,
  applicationControllerV2GetApplicationAppliedPlugins,
  applicationControllergetApplicationDetails,
  applicationControllergetApplicationFilters,
  applicationControllergetApplicationLinks,
  applicationControllergetApplications,
  contentWorkflowControllercreateApplicationThroughWorkflow,
  contentWorkflowControllercreateSharedInfraThroughWorkflow,
  contextActionControllergetStackActionInputsInAccountContext,
  contextActionControllergetStackActionInputsInWorkspaceContext,
  contextControllerupsertAccountActionsInputContext,
  contextControllerupsertPluginAccountContext,
  contextControllerupsertPluginWorkspaceContext,
  contextControllerupsertWorkspaceActionsInputContext,
  contextWorkflowControllergetAccountWorkflowInputs,
  contextWorkflowControllergetConsolidatedWorkflowInputs,
  contextgetAccountPluginInputs,
  contextgetConsolidatedPluginInputs,
  contextgetConsolidatedPluginInputsWithConnectionInterfaces,
  defaults,
  managerRunControllerdeleteApplication,
  managerRunControllerdeleteSharedInfra,
  sharedInfraControllerV2GetSharedInfraActivities,
  sharedInfraControllerV2GetSharedInfraAppliedPlugins,
  sharedInfraControllergetApplicationLinks,
  sharedInfraControllergetSharedInfra,
  sharedInfraControllergetSharedInfraAppliedPlugins,
  sharedInfraControllergetSharedInfraFilters,
  workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType,
  workspaceControllerdelete,
  workspaceControllergetWorkspaces,
  workspaceStackControlleraddStacksInWorkspace,
  workspaceStackControllerdeleteStacksInWorkspace,
  workspaceStackControllerlistStacks,
  workspaceStackControllerrefreshStacksInWorkspace,
} from '../api/workspaceManager'
import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { workspaceDictionary } from '../error/dictionary/workspace'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { contentClient } from './content'
import { FixedFullInputContextResponse, FixedPaginatedActivityResponse, FixedPluginForAppCreationV2Response, FixedWorkflowForCreationResponse, ReplaceResult } from './types'
import { workspaceClient } from './workspace'

class WorkspaceManagerClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.workspaceManager.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, workspaceDictionary, error.headers)
  }

  /**
   * Gets all stacks in a workspace
   */
  stacksInWorkspace = this.query({
    name: 'stacksInWorkspace',
    request: async (signal, variables: Parameters<typeof workspaceStackControllerlistStacks>[0]) => workspaceStackControllerlistStacks(variables, { signal }),
    permission: async (variables: Parameters<typeof workspaceStackControllerlistStacks>[0]) => {
      const contentStacksPermission = await contentClient.allStackVersionByIds.isAllowed()
      const workspaceStacksPermission = await workspaceClient.stacks.isAllowed(variables)
      return workspaceStacksPermission && contentStacksPermission
    },
  })
  /**
   * Add a stack in a workspace
   */
  addStackToWorkspace = this.mutation({
    name: 'addStackToWorkspace',
    request: async (signal, variables: Parameters<typeof workspaceStackControlleraddStacksInWorkspace>[0]) =>
      workspaceStackControlleraddStacksInWorkspace(variables, { signal }),
    permission: async ({ workspaceId }: Parameters<typeof workspaceStackControlleraddStacksInWorkspace>[0]) =>
      workspaceClient.addStackInWorkspace.isAllowed({ workspaceId }),
  })
  /**
   * Removes a stack from a workspace
   */
  removeStackFromWorkspace = this.mutation({
    name: 'removeStackFromWorkspace',
    request: async (signal, variables: Parameters<typeof workspaceStackControllerdeleteStacksInWorkspace>[0]) =>
      workspaceStackControllerdeleteStacksInWorkspace(variables, { signal }),
    permission: async ({ workspaceId }: Parameters<typeof workspaceStackControllerdeleteStacksInWorkspace>[0]) =>
      workspaceClient.removeStackFromWorkspace.isAllowed({ workspaceId }),
  })
  /**
   * Deletes a workspace
   */
  deleteWorkspace = this.mutation({
    name: 'removeStackFromWorkspace',
    request: async (signal, variables: Parameters<typeof workspaceControllerdelete>[0]) =>
      workspaceControllerdelete(variables, { signal }),
    permission: async ({ workspaceId }: Parameters<typeof workspaceControllerdelete>[0]) =>
      workspaceClient.deleteWorkspace.isAllowed({ workspaceId }),
  })
  /**
   * Gets inputs from a plugin in a workspace stack
   */
  pluginInputsInWorkspace = this.query({
    name: 'pluginInputsInWorkspace',
    request: async (signal, variables: Parameters<typeof contextgetConsolidatedPluginInputs>[0]) => {
      const data = await contextgetConsolidatedPluginInputs(variables, { signal })
      return data as unknown as FixedFullInputContextResponse
    },
    permission: async ({ workspaceId, stackVersionId }: Parameters<typeof contextgetConsolidatedPluginInputs>[0]) => {
      const canViewContext = await workspaceClient.listConsolidatedWorkspaceContext.isAllowed({ $type: 'plugin', workspaceId, stackVersionId })
      const canGetConnectionInterfaceTypes = await contentClient.connectionInterfaceTypes.isAllowed()
      const canGetPluginVersions = await contentClient.pluginVersionsByIds.isAllowed({})
      return canViewContext && canGetConnectionInterfaceTypes && canGetPluginVersions
    },
  })
  /**
   * Gets workflow in a workspace stack
   */
  workflowDataWithInputsInWorkspace = this.query(contextWorkflowControllergetConsolidatedWorkflowInputs as 
    unknown as ReplaceResult<typeof contextWorkflowControllergetConsolidatedWorkflowInputs, FixedWorkflowForCreationResponse>)
  /**
   * Gets workflow inputs in an account stack
   */
  workflowInputsInAccount = this.query(contextWorkflowControllergetAccountWorkflowInputs as 
    unknown as ReplaceResult<typeof contextWorkflowControllergetAccountWorkflowInputs, FixedFullInputContextResponse>)
  /**
   * Gets inputs from a plugin in account context
   */
  pluginInputsAccount = this.query({
    name: 'pluginInputsAccount',
    request: async (signal, variables: Parameters<typeof contextgetAccountPluginInputs>[0]) => {
      const data = await contextgetAccountPluginInputs(variables, { signal })
      return data as unknown as FixedFullInputContextResponse
    },
    permission: async ({ stackVersionId }: Parameters<typeof contextgetAccountPluginInputs>[0]) => {
      const canViewContext = await workspaceClient.listConsolidatedContext.isAllowed({ $type: 'plugin', stackVersionId })
      const canGetConnectionInterfaceTypes = await contentClient.connectionInterfaceTypes.isAllowed()
      const canGetPluginVersions = await contentClient.pluginVersionsByIds.isAllowed({})
      return canViewContext && canGetConnectionInterfaceTypes && canGetPluginVersions
    },
  })
  /**
  * Update context inputs from an action in workspace
  */
  updateInputContextPluginWorkspace = this.mutation({
    name: 'updateInputContextPluginWorkspace',
    request: async (signal, variables: Parameters<typeof contextControllerupsertPluginWorkspaceContext>[0]) =>
      contextControllerupsertPluginWorkspaceContext(variables, { signal }),
    permission: async ({ stackVersionId, workspaceId, pluginVersionId }: Parameters<typeof contextControllerupsertPluginWorkspaceContext>[0]) =>
      workspaceClient.saveContextInWorkspace.isAllowed({ $type: 'plugin', workspaceId, stackVersionId, externalId: pluginVersionId }),
  })
  /**
   * Update context inputs from an action in account
   */
  updateInputContextPluginAccount = this.mutation({
    name: 'updateInputContextPluginAccount',
    request: async (signal, variables: Parameters<typeof contextControllerupsertPluginAccountContext>[0]) =>
      contextControllerupsertPluginAccountContext(variables, { signal }),
    permission: async ({ stackVersionId, pluginVersionId }: Parameters<typeof contextControllerupsertPluginAccountContext>[0]) =>
      workspaceClient.saveContextInAccount.isAllowed({ $type: 'plugin', stackVersionId, externalId: pluginVersionId }),
  })
  /**
   * Gets links in a shared infra for a given env
   */
  sharedInfraLinks = this.query(sharedInfraControllergetApplicationLinks)
  /**
   * Gets links in an application for a given env
   */
  applicationLinks = this.query(applicationControllergetApplicationLinks)
  /**
   * Gets applied plugins in shared infra
   */
  appliedPluginsSharedInfra = this.query(sharedInfraControllerV2GetSharedInfraAppliedPlugins)
  /**
   * Gets applied plugins in application
   */
  appliedPluginsApplication = this.query(applicationControllerV2GetApplicationAppliedPlugins)
  /**
   * Gets plugin inputs and connection interface from a plugin in a stack version in workspace
   */
  pluginInputsWithConnectionInterfaces = this.query(contextgetConsolidatedPluginInputsWithConnectionInterfaces as unknown as ReplaceResult<typeof contextgetConsolidatedPluginInputsWithConnectionInterfaces, FixedPluginForAppCreationV2Response>)
  /**
   * Gets workflows from a given stack and workflow type 
   */
  workflowsByStackIdAndWorkflowType = this.query(workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType)

  /**
   * Creates an infra using workflow
   */
  createInfraUsingWorkflow = this.mutation(contentWorkflowControllercreateSharedInfraThroughWorkflow)
  /**
   * Creates an application using workflow
   */
  createAppUsingWorkflow = this.mutation(contentWorkflowControllercreateApplicationThroughWorkflow)
  /**
  * Gets inputs from an action in a workspace
  */
  actionInputsInWorkspace = this.query({
    name: 'actionInputsInWorkspace',
    request: async (signal, variables: Parameters<typeof contextActionControllergetStackActionInputsInWorkspaceContext>[0]) => {
      const data = await contextActionControllergetStackActionInputsInWorkspaceContext(variables, { signal })
      return data as FixedFullInputContextResponse
    },
    permission: async ({ workspaceId, stackVersionId, actionsVersionId }: Parameters<typeof contextActionControllergetStackActionInputsInWorkspaceContext>[0]) => {
      const canViewContext = await workspaceClient.listConsolidatedWorkspaceContext.isAllowed({ $type: 'action', workspaceId, stackVersionId })
      const canGetActionInput = await contentClient.actionInputs.isAllowed({ actionVersionId: actionsVersionId })
      return canViewContext && canGetActionInput
    },
  })
  /**
   * Gets inputs from an action in account context
   */
  actionInputsAccount = this.query({
    name: 'actionInputsFromStack',
    request: async (signal, variables: Parameters<typeof contextActionControllergetStackActionInputsInAccountContext>[0]) => {
      const data = await contextActionControllergetStackActionInputsInAccountContext(variables, { signal })
      return data as FixedFullInputContextResponse
    },
    permission: async ({ stackVersionId, actionsVersionId }: Parameters<typeof contextActionControllergetStackActionInputsInAccountContext>[0]) => {
      const canViewContext = await workspaceClient.listConsolidatedContext.isAllowed({ $type: 'action', stackVersionId })
      const canGetActionInput = await contentClient.actionInputs.isAllowed({ actionVersionId: actionsVersionId })
      return canViewContext && canGetActionInput
    },
  })
  /**
   * Update context inputs from an action in workspace
   */
  updateInputContextActionWorkspace = this.mutation({
    name: 'updateInputContextActionWorkspace',
    request: async (signal, variables: Parameters<typeof contextControllerupsertWorkspaceActionsInputContext>[0]) =>
      contextControllerupsertWorkspaceActionsInputContext(variables, { signal }),
    permission: async ({ stackVersionId, workspaceId, actionVersionId }: Parameters<typeof contextControllerupsertWorkspaceActionsInputContext>[0]) =>
      workspaceClient.saveContextInWorkspace.isAllowed({ $type: 'action', workspaceId, stackVersionId, externalId: actionVersionId }),
  })
  /**
   * Update context inputs from an action in account
   */
  updateInputContextActionAccount = this.mutation({
    name: 'updateInputContextActionAccount',
    request: async (signal, variables: Parameters<typeof contextControllerupsertAccountActionsInputContext>[0]) =>
      contextControllerupsertAccountActionsInputContext(variables, { signal }),
    permission: async ({ stackVersionId, actionVersionId }: Parameters<typeof contextControllerupsertAccountActionsInputContext>[0]) =>
      workspaceClient.saveContextInAccount.isAllowed({ $type: 'action', stackVersionId, externalId: actionVersionId }),
  })
  /**
   * Gets details of an application in an environment
   */
  applicationDetails = this.query({
    name: 'applicationDetails',
    request: async (signal, variables: Parameters<typeof applicationControllergetApplicationDetails>[0]) => applicationControllergetApplicationDetails(variables, { signal }),
    permission: async ({ applicationId, workspaceId }: Parameters<typeof applicationControllergetApplicationDetails>[0]) =>
      workspaceClient.applicationDetail.isAllowed({ applicationId, workspaceId }),
  })
  /**
   * Deletes an application
   */
  deleteApplication = this.mutation({
    name: 'deleteApplication',
    request: async (signal, variables: Parameters<typeof managerRunControllerdeleteApplication>[0]) => managerRunControllerdeleteApplication(variables, { signal }),
    permission: async (variables: Parameters<typeof managerRunControllerdeleteApplication>[0]) =>
      workspaceClient.deleteApplication.isAllowed(variables),
  })
  /**
   * Gets details of a shared infra in an environment
   */
  sharedInfraDetails = this.query({
    name: 'sharedInfraDetails',
    request: async (signal, variables: Parameters<typeof sharedInfraControllergetSharedInfraAppliedPlugins>[0]) => sharedInfraControllergetSharedInfraAppliedPlugins(variables, { signal }),
    permission: async ({ sharedInfraId, workspaceId }: Parameters<typeof sharedInfraControllergetSharedInfraAppliedPlugins>[0]) =>
      workspaceClient.infraDetail.isAllowed({ sharedInfraId, workspaceId }),
  })
  /**
   * Deletes an infra
   */
  deleteInfra = this.mutation({
    name: 'deleteInfra',
    request: async (signal, variables: Parameters<typeof managerRunControllerdeleteSharedInfra>[0]) => managerRunControllerdeleteSharedInfra(variables, { signal }),
    permission: async (variables: Parameters<typeof managerRunControllerdeleteSharedInfra>[0]) =>
      workspaceClient.deleteInfra.isAllowed(variables),
  })
  /**
   * Gets activities of a shared infra
   */
  activitiesSharedInfra = this.infiniteQuery(sharedInfraControllerV2GetSharedInfraActivities as unknown as ReplaceResult<typeof sharedInfraControllerV2GetSharedInfraActivities, FixedPaginatedActivityResponse>, 
    { accumulator: 'items', initialPageParam: 0 })
  /**
   * Gets activities of an application
   */
  activitiesApplication = this.infiniteQuery(applicationControllerV2GetApplicationActivities  as unknown as ReplaceResult<typeof applicationControllerV2GetApplicationActivities, FixedPaginatedActivityResponse>,
    { accumulator: 'items', initialPageParam: 0 })
  /**
   * Updates Stacks To Latest Version By Workspace
   */
  updateStacksToLatestVersionByWorkspace = this.mutation(workspaceStackControllerrefreshStacksInWorkspace)
  /**
   * Get all workspaces with pagination
   */
  workspacesWithPagination = this.query(workspaceControllergetWorkspaces)
  /**
   * Get all applications by workspace with pagination
   */
  applicationsByWorkspaceWithPagination = this.query(applicationControllergetApplications)
  /**
   * Get all shared infra by workspace with pagination
   */
  sharedInfraByWorkspaceWithPagination = this.query(sharedInfraControllergetSharedInfra)
  /**
   * Get all stacks used to create application in a workspace
   */
  filterStacksFromApplicationInWorkspace = this.query(applicationControllergetApplicationFilters)
  /**
   * Get all stacks used to create infra in a workspace.
   */
  filterStacksFromInfraInWorkspace = this.query(sharedInfraControllergetSharedInfraFilters)  

  /**
   * Get all workspaces associated with an account.
   */
  getAccountWorkspaces = this.query(workspaceControllergetWorkspaces)
  
  /**
   * Get all applications associated with an account.
   */
  getAccountApplications = this.query(accountApplicationControllergetAccountApplicationPage)

  /**
   * Get all shared infrastructures associated with an account.
   */
  getAccountSharedInfra = this.query(accountSharedInfraControllergetAccountSharedInfraPage)

  /** * Gets filters for applications associated with an account. */ 
  getAccountApplicationsFilters = this.query(accountApplicationControllergetAccountApplicationsFilters)
  
  /** * Gets filters for shared infrastructures associated with an account. */ 
  getAccountSharedInfraFilters = this.query(accountSharedInfraControllergetAccountSharedInfraFilters)
}

export const workspaceManagerClient = new WorkspaceManagerClient()
