import { RequestOpts } from '@oazapfts/runtime'
import { AccountScmInfoSaveRequest, AccountScmInfoUpdateRequest, AccountScmStatusResponse } from '../api/account'
import { ChatRequest2, ChatResponse3, ConversationHistoryResponse, ConversationResponse } from '../api/ai'
import { ConnectAccountRequestV2, ManagedAccountProvisionRequest } from '../api/cloudAccount'
import { AllocationCostRequest, AllocationCostResponse, ChargePeriod, getAllocationCostFilters, ManagedService, ServiceResource } from '../api/cloudServices'
import { ActivityResponse, FullInputContextResponse, InputConditionResponse, InputValuesContextResponse, PaginatedActivityResponse, PluginForAppCreationV2Response, PluginInputValuesInConsolidatedContextResponse, ValueByEnvResponse, WorkflowForCreationResponse } from '../api/workspaceManager'

interface BaseSMCStatus {
  /**
   * Indicates the current status of the SCM credential.
   * - 'valid': the SCM credential is valid.
   * - 'missing-account': the SCM credential is not configured at the account level.
   * - 'missing-user': the SCM credential is configured at the account level, but the SCM access is not configured for the user.
   */
  status: 'missing-account' | 'missing-user' | 'valid',
}

interface ValidSCMStatus extends BaseSMCStatus, AccountScmStatusResponse {
  status: 'valid',
}

interface InvalidSCMStatus extends BaseSMCStatus {
  status: 'missing-account' | 'missing-user',
}

export type SCMStatus = InvalidSCMStatus | ValidSCMStatus

interface SCMAuthPATValue {
  user: string,
  pass: string,
}

interface SCMAuthGitValue {
  appId: string,
  installationId: string,
  privateKey: string,
}

export interface CreateSCMRequest {
  accountScmInfoSaveRequest: AccountScmInfoSaveRequest & {
    value: SCMAuthGitValue | SCMAuthPATValue,
  },
}

export interface UpdateSCMRequest {
  accountScmInfoUpdateRequest: AccountScmInfoUpdateRequest & {
    value?: SCMAuthGitValue | SCMAuthPATValue,
  },
}

export type AllocationCostType = Parameters<typeof getAllocationCostFilters>[0]['$type']

export interface CostAllocationVariables {
  allocationCostRequest: Omit<AllocationCostRequest, 'stackSpotAccountId' | 'billingAccountId'> & {
    stackSpotAccountId: string,
    billingAccountId: string[],
  },
}

interface ServiceNameResponse {
  type: 'ServiceNameResponse',
  chargePeriod?: ChargePeriod,
  /** Represents an offering that can be purchased from a cloud provider. */
  serviceName?: string,
  /** Effective cost post discounts and amortizations. */
  effectiveCost?: number,
}

interface TagResponse {
  type: 'TagResponse',
  chargePeriod?: ChargePeriod,
  /** Tag key: Identifies a grouping attribute or category for resources or constructs. */
  tagKey?: string,
  /** Tag value: Specifies the group or category detail that the resource or construct belongs to. */
  tagValue?: string,
  /** Effective cost post discounts and amortizations. */
  effectiveCost?: number,
}

interface UsageUnitResponse {
  type: 'UsageUnitResponse',
  chargePeriod?: ChargePeriod,
  /** Represents an offering that can be purchased from a cloud provider. */
  serviceName?: string,
  /** Represents the volume of a given resource or service used or purchased based on the Usage Unit. */
  usageQuantity?: number,
  /** Defines the unit of measurement for the resource or service. */
  usageUnit?: string,
  /** Effective cost post discounts and amortizations. */
  effectiveCost?: number,
}

export type CostAllocationData = ServiceNameResponse | TagResponse | UsageUnitResponse

export interface CostAllocationResult extends Omit<AllocationCostResponse, 'data'> {
  data: CostAllocationData[],
}

interface FixedServiceResource extends Omit<ServiceResource, 'id'> {
  id: string,
}

export interface FixedManagedService extends Omit<ManagedService, 'resources'> {
  resources: FixedServiceResource[],
}

export interface FixedConnectAccountRequestV2 extends ConnectAccountRequestV2 {
  credential?: {
    iamRole?: string,
    clientId?: string,
    clientSecret?: string,
    tenantId?: string,
    subscriptionId?: string,
  },
}

export interface FixedManagedAccountProvisionRequest extends Omit<ManagedAccountProvisionRequest, 'workspaceId'> {
  workspaceId: string,
}

export interface FixedPluginForAppCreationV2Response extends Omit<PluginForAppCreationV2Response, 'inputs'> {
  inputs: FixedPluginInputValuesInConsolidatedContextResponse[],
}

export type InputType = 'BOOL' | 'INT' | 'MULTISELECT' | 'OBJECT' | 'LIST' | 'REQUIRED-CONNECTION' | 'PASSWORD' |
 'SELECT' | 'TEXT' | 'GENERATED-CONNECTION' | 'TEXTAREA'

export interface FixedInputConditionResponse extends Omit<InputConditionResponse, 'value'> {
  value?: any,
}

export interface FixedValueByEnvResponse extends Omit<ValueByEnvResponse, 'value'> {
  value: any,
}

export interface FixedInputValuesContextResponse extends Omit<InputValuesContextResponse, 
'inputs' | 'input' | 'type' | 'default' | 'condition' | 'valuesByEnv'> {
  inputs: Omit<FixedInputValuesContextResponse, 'valuesByEnv'>[],
  input?: Omit<FixedInputValuesContextResponse, 'valuesByEnv'>,
  type: InputType,
  default?: any,
  condition?: FixedInputConditionResponse,
  valuesByEnv: FixedValueByEnvResponse[],
  scope?: 'default' | 'hidden' | 'env',
}

export interface FixedFullInputContextResponse extends Omit<FullInputContextResponse, 'inputs'> {
  inputs: FixedInputValuesContextResponse[],
}
export interface FixedWorkflowForCreationResponse extends Omit<WorkflowForCreationResponse, 'inputs'> {
  inputs: FixedInputValuesContextResponse[],
}

export interface FixedPluginInputValuesInConsolidatedContextResponse extends 
Omit<PluginInputValuesInConsolidatedContextResponse, 'inputs' | 'input' | 'type' | 'default' | 'condition'> {
  inputs: FixedInputValuesContextResponse[],
  input?: FixedInputValuesContextResponse,
  type: InputType,
  default?: any,
  condition?: FixedInputConditionResponse,
}

export interface FixedActivityResponse extends Omit<ActivityResponse, 'detail'> {
  detail: any,
}

export interface FixedPaginatedActivityResponse extends Omit<PaginatedActivityResponse, 'items'> {
  items: FixedActivityResponse[],
}

export interface FixedChatRequest extends ChatRequest2 {
  context?: {
    workspace?: string,
    conversation_id?: string,
    stack_id?: string,
    language?: string,
    project_recent_files?: string,
    knowledge_sources?: string[],
    agent_id?: string,
    agent_built_in?: boolean,
    platform?: string,
    platform_version?: string,
    stackspot_ai_version?: string,
    os?: string,
  },
}

export interface FixedConversationHistoryResponse extends ConversationHistoryResponse {
  sources: ChatResponse3['sources'],
  custom_agent?: {
    id: string,
    built_in: boolean,
  },
}

export interface FixedConversationResponse extends ConversationResponse {
  history?: FixedConversationHistoryResponse[],
}

export type OazapftsFunction<Variables = any, Result = any> = (variables: Variables, opts?: RequestOpts) => Promise<Result>

type Unpromisify<T> = T extends Promise<infer R> ? Unpromisify<R> : T

export type FixVariables<
  T extends OazapftsFunction,
  Fix extends Record<string, any>,
> = OazapftsFunction<
  Omit<Parameters<T>[0], keyof Fix> & { [K in keyof Fix as Fix[K] extends never ? never : K]: Fix[K] },
  Unpromisify<ReturnType<T>>
>

export type ReplaceResult<T extends (...args: any[]) => Promise<any>, Fix> = (...args: Parameters<T>) => Promise<Fix>
