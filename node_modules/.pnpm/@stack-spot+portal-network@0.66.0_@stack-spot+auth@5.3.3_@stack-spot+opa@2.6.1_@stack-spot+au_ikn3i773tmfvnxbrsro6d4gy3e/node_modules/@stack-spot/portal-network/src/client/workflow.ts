import { HttpError } from '@oazapfts/runtime'
import { createApiServiceWorkflowsCreateApiDispatchPost, defaults, getExecutionDispatchRequestServiceWorkflowsExecutionIdRequestGet, getExecutionStatusServiceWorkflowsExecutionStatusExecutionIdGet, healthCheckServiceWorkflowsHealthCheckDispatchPost, runActionServiceWorkflowsRunActionDispatchPost, v1AcceptWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdAcceptPost, v1GetWorkflowExecutionJobDetailServiceV1ExecutionsExecutionIdJobsJobIdGet, v1GetWorkflowExecutionJobGraphServiceV1ExecutionsExecutionIdGet, v1RefuseWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdRefusePost } from '../api/workflows'
import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { actionDictionary } from '../error/dictionary/action'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { removeAuthorizationParam } from '../utils/remove-authorization-param'

class WorkflowClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.workflows.url, defaults)
  } 

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, actionDictionary, error.headers)
  }

  /**
   * Runs an action
   */
  runAction = this.mutation(removeAuthorizationParam(runActionServiceWorkflowsRunActionDispatchPost))
  
  /**
   * Creates an api
   */
  createApi = this.mutation(createApiServiceWorkflowsCreateApiDispatchPost)

  /**
   * Gets the execution status of a workflow by id
   */
  executionStatus = this.query(removeAuthorizationParam(getExecutionStatusServiceWorkflowsExecutionStatusExecutionIdGet))

  /**
   * Gets the execution dispatch service
   */
  executionDispatchInfo = this.query(removeAuthorizationParam(getExecutionDispatchRequestServiceWorkflowsExecutionIdRequestGet))
 
  /**
   * Gets the health check of an execution id
   */
  executionHealthCheck = this.mutation(removeAuthorizationParam(healthCheckServiceWorkflowsHealthCheckDispatchPost))

  /**
   * Get data about the workflow plus a graph representation of its jobs.
   */
  graph = this.query(removeAuthorizationParam(v1GetWorkflowExecutionJobGraphServiceV1ExecutionsExecutionIdGet))

  /**
   * Gets the steps of a workflow job.
   */
  jobSteps = this.query(removeAuthorizationParam(v1GetWorkflowExecutionJobDetailServiceV1ExecutionsExecutionIdJobsJobIdGet))

  /**
   * Approves a workflow step that is suspended so the execution can continue.
   */
  acceptWorkflowStep = this.mutation(
    removeAuthorizationParam(v1AcceptWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdAcceptPost),
  )

  /**
   * Refuses a workflow step that is suspended so the execution can be canceled.
   */
  refuseWorkflowStep = this.mutation(
    removeAuthorizationParam(v1RefuseWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdRefusePost),
  )
}

export const workflowClient = new WorkflowClient()
