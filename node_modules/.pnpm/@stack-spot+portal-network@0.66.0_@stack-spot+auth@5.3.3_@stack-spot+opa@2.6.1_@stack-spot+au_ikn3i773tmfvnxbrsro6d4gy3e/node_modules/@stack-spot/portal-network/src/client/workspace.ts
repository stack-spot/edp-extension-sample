/* eslint-disable max-len */
import { HttpError } from '@oazapfts/runtime'
import {
  accountVariableControllercreate,
  accountVariableControllerdelete,
  accountVariableControllerfindAll,
  accountVariableControllerfindByName,
  accountVariableControllerupdate,
  accountVariableControllerusage,
  applicationEmbeddedLinkControllerdelete,
  applicationEmbeddedLinkControllergetEmbeddedLink,
  applicationEmbeddedLinkControllergetEmbeddedLinks,
  applicationEmbeddedLinkControllersave,
  applicationEmbeddedLinkControllerupdate,
  applicationEmbeddedLinkControllerupsertBatch,
  applicationLinkControllerdelete,
  applicationLinkControllergetApplicationLink,
  applicationLinkControllersave,
  applicationLinkControllerupdate,
  applicationLinkControllerupdateLinksVisibility,
  availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAnApplication,
  availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAWorkspace,
  checkConnectionSlugAvailabilityControllercheckConnectionSlugAvailability,
  connectionInterfaceControllerdeleteConnectionInterfaceAttributesFromEnvironment,
  connectionInterfaceControllerdeleteConnectionInterfaceFromAllEnvironments,
  connectionInterfaceControllergetConnectionInterface,
  connectionInterfaceControllergetConnectionInterfaces,
  connectionInterfaceControllerupdateConnectionInterfaceAttributes,
  connectionInterfaceControllerupdateConnectionInterfaceVisibility,
  contextControllerlistAccountContext,
  contextControllerlistConsolidatedContext,
  contextV2ControlleraddTypedContextInAccount,
  contextV2ControlleraddTypedContextInWorkspace,
  defaults,
  environmentControllergetEnvironment,
  environmentControllergetEnvironments,
  environmentControllersave,
  environmentControllerupdate,
  sharedInfraLinkControllerdelete,
  sharedInfraLinkControllergetSharedInfraLink,
  sharedInfraLinkControllersave,
  sharedInfraLinkControllerupdate,
  sharedInfraLinkControllerupdateLinksVisibility,
  workflowAccountControllerdeleteAccountWorkflow,
  workflowAccountControllerlistAccountWorkflows,
  workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType,
  workspaceApplicationControllerdeleteApplication,
  workspaceApplicationControllergetApplication,
  workspaceApplicationControllergetApplications,
  workspaceApplicationControllergetDependencyTree,
  workspaceApplicationControllerupdate,
  workspaceControllerdelete,
  workspaceControllergetWorkspaceForId,
  workspaceControllergetWorkspaces,
  workspaceControllergetWorkspacesFromUserPermission,
  workspaceControllersave,
  workspaceControllerupdate,
  workspaceEmbeddedLinkControllerdelete,
  workspaceEmbeddedLinkControllergetEmbeddedLink,
  workspaceEmbeddedLinkControllergetEmbeddedLinks,
  workspaceEmbeddedLinkControllersave,
  workspaceEmbeddedLinkControllerupdate,
  workspaceEmbeddedLinkControllerupsertBatch,
  workspaceLinkControllerdelete,
  workspaceLinkControllergetWorkspaceLinks,
  workspaceLinkControllersave,
  workspaceSharedInfrastructureControllerdeleteSharedInfra,
  workspaceSharedInfrastructureControllergetAllSharedInfrastructure,
  workspaceSharedInfrastructureControllergetDependencyTree,
  workspaceSharedInfrastructureControllergetSharedInfrastructure,
  workspaceSharedInfrastructureControllerupdate,
  workspaceStackControlleraddStack,
  workspaceStackControllerdeleteStack,
  workspaceStackControllergetStackById,
  workspaceStackControllergetStacks,
  workspaceV2ControllergetWorkspacesWithoutStackFilter,
  workspaceVariableV2ControllerfindAll,
  workspaceVariableV2ControllerfindByName,
  workspaceVariableV2Controllerupsert,
} from '../api/workspace'

import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { workspaceDictionary } from '../error/dictionary/workspace'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { OperationObject } from '../network/types'

class WorkspaceClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.workspace.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, workspaceDictionary, error.headers)
  }

  /**
   * Gets all connection interfaces from a workspace
   */
  allConnectionInterfaces = this.query(connectionInterfaceControllergetConnectionInterfaces)

  /**
   * Gets a connection interface from a workspace
   */
  connectionInterface = this.query(connectionInterfaceControllergetConnectionInterface)
  /**
   * Get available connection interface for a workspace by connection interface slug
   */
  workspaceAvailableConnInterfaceBySlug = this.query(availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAWorkspace)
  /**
   * Get available connection interface for an application by connection interface slug
   */
  applicationAvailableConnInterface = this.query(availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAnApplication)
  /**
   * Updates the visibility of a connection interface
   */
  updateConnectionInterfaceVisibility = this.mutation(connectionInterfaceControllerupdateConnectionInterfaceVisibility)

  /**
   * Removes a connection interface 
   */
  deleteConnectionInterface = this.mutation(connectionInterfaceControllerdeleteConnectionInterfaceFromAllEnvironments)

  /**
   * Removes connection interface attributes by environment
   */
  deleteConnectionInterfaceAttributesFromEnvironment = this.mutation(connectionInterfaceControllerdeleteConnectionInterfaceAttributesFromEnvironment)

  /**
   * Updates the attributes of a connection interface
   */
  updateConnectionInterfaceAttributes = this.mutation(connectionInterfaceControllerupdateConnectionInterfaceAttributes)
  /**
   * Checks the availability of a connection interface slug.
   */
  checkConnectionInterfaceAvailability = this.query(checkConnectionSlugAvailabilityControllercheckConnectionSlugAvailability)

  /**
   * Gets all environments
   */
  environments = this.query(environmentControllergetEnvironments)

  /**
   * Gets environment by Id
   */
  environment = this.query(environmentControllergetEnvironment)

  /**
   * Creates an environment
   */
  createEnvironment = this.mutation(environmentControllersave)

  /**
   * Updates environment data
   */
  updateEnvironment = this.mutation(environmentControllerupdate)

  /**
   * Gets embedded link by id
   */
  embeddedLinkInWorkspace = this.query(workspaceEmbeddedLinkControllergetEmbeddedLink)

  /**
   * Gets all embedded links from a workspace
   */
  allEmbeddedLinksInWorkspace = this.query(workspaceEmbeddedLinkControllergetEmbeddedLinks)

  /**
   * Creates an embedded link in a workspace
   */
  createEmbeddedLinkInWorkspace = this.mutation(workspaceEmbeddedLinkControllersave)

  /**
   * Deletes an embedded link from a workspace
   */
  deleteEmbeddedLinkFromWorkspace = this.mutation(workspaceEmbeddedLinkControllerdelete)

  /**
   * Updates an embedded link from a workspace
   */
  updateEmbeddedLinkInWorkspace = this.mutation(workspaceEmbeddedLinkControllerupdate)

  /**
   * Updates all embedded links from a workspace
   */
  updateAllEmbeddedLinksInWorkspace = this.mutation(workspaceEmbeddedLinkControllerupsertBatch)

  /**
   * Gets an embedded link from an application
   */
  embeddedLinkInApplication = this.query(applicationEmbeddedLinkControllergetEmbeddedLink)

  /**
   * Gets all embedded links from an application
   */
  allEmbeddedLinksInApplication = this.query(applicationEmbeddedLinkControllergetEmbeddedLinks)

  /**
   * Creates an embedded link in an application
   */
  createEmbeddedLinkInApplication = this.mutation(applicationEmbeddedLinkControllersave)

  /**
   * Deletes an embedded link from an application
   */
  deleteEmbeddedLinkFromApplication = this.mutation(applicationEmbeddedLinkControllerdelete)

  /**
   * Updates an embedded link in an application
   */
  updateEmbeddedLinkInApplication = this.mutation(applicationEmbeddedLinkControllerupdate)

  /**
   * Updates all embedded links in an application
   */
  updateAllEmbeddedLinksInApplication = this.mutation(applicationEmbeddedLinkControllerupsertBatch)

  /**
   * Gets all workspaces
   */
  workspaces = this.query(workspaceControllergetWorkspaces)

  /**
   * Gets a workspace
   */
  workspace = this.query(workspaceControllergetWorkspaceForId)
  /**
   * Get workspaces within user permission
   */
  workspacesFromUserPermission = this.query(workspaceControllergetWorkspacesFromUserPermission)

  /**
   * Creates a workspace
   */
  createWorkspace = this.mutation(workspaceControllersave)

  /**
   * Updates a workspace
   */
  updateWorkspace = this.mutation(workspaceControllerupdate)

  //App and infra
  /**
   * Gets all applications in a Workspace
   */
  applications = this.query(workspaceApplicationControllergetApplications)
  /**
   * Gets an application
   */
  application = this.query(workspaceApplicationControllergetApplication)

  /**
   * Gets the dependencies of an application
   */
  applicationDependencies = this.query(workspaceApplicationControllergetDependencyTree)
  /**
   * Gets all shared infra in a Workspace
   */
  allSharedInfra = this.query(workspaceSharedInfrastructureControllergetAllSharedInfrastructure)
  /**
   * Gets a shared infra
   */
  sharedInfra = this.query(workspaceSharedInfrastructureControllergetSharedInfrastructure)

  /**
   * Gets the dependencies of a shared infra
   */
  sharedInfraDependencies = this.query(workspaceSharedInfrastructureControllergetDependencyTree)
  
  /**
   * Updates an application
   */
  updateApplication = this.mutation(workspaceApplicationControllerupdate)

  /**
   * Updates a shared infra
   */
  updateInfra = this.mutation(workspaceSharedInfrastructureControllerupdate)

  // Workflow
  /**
   * Gets a workflow by stack id
   */
  workflowsByStackId = this.query(workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType)
  /**
   * Gets account workflows
   */
  accountWorkflows = this.query(workflowAccountControllerlistAccountWorkflows)
  /**
   * Gets workflows from a stack
   */
  stackWorkflows = this.query(workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType)
  /**
   * Removes account workflow
   */
  deleteAccountWorkflow = this.mutation(workflowAccountControllerdeleteAccountWorkflow)

  // Variables Account

  /**
   * Find all account variables
   */
  accountVariables = this.query(accountVariableControllerfindAll)
  /**
   * Get an account variable by name
   */
  getAccountVariable = this.query(accountVariableControllerfindByName)
  /**
   * Get account variable usage
   */
  accountVariableUsage = this.query(accountVariableControllerusage)
  /**
   * Create account variable
   */
  createAccountVariable = this.mutation(accountVariableControllercreate)
  /**
   * Update account variable
   */
  updateAccountVariable = this.mutation(accountVariableControllerupdate)
  /**
   * Delete account variable
   */
  deleteAccountVariable = this.mutation(accountVariableControllerdelete)

  // Variables Workspace

  /**
   * Find all workspace variables
   */
  workspaceVariables = this.query(workspaceVariableV2ControllerfindAll)
  /**
   * Get a workspace variable by name
   */
  getWorkspaceVariable = this.query(workspaceVariableV2ControllerfindByName)
  /**
   * Updates workspace variable based on existing account variable
   */
  updateWorkspaceVariable = this.mutation(workspaceVariableV2Controllerupsert)

  //Links
  /**
   * Gets shared infra links
   */
  linksInWorkspace = this.query(workspaceLinkControllergetWorkspaceLinks)
  /**
   * Adds a link to a workspace
   */
  addLinkInWorkspace = this.mutation(workspaceLinkControllersave)
  /**
   * Deletes a link from a workspace
   */
  removeLinkFromWorkspace = this.mutation(workspaceLinkControllerdelete)
  /**
   * Gets application link 
   */
  linkInApplication = this.query(applicationLinkControllergetApplicationLink)
  /**
   * Adds a link to an application
   */
  addLinkInApplication = this.mutation(applicationLinkControllersave)
  /**
   * Deletes a link from an application
   */
  removeLinkFromApplication = this.mutation(applicationLinkControllerdelete)
  /**
   * Updates a link from an application
   */
  updateLinkInApplication = this.mutation(applicationLinkControllerupdate)
  /**
   * Updates application links visibility
   */
  updateLinkVisibilityInApplication = this.mutation(applicationLinkControllerupdateLinksVisibility)
  /**
   * Gets shared infra link
   */
  linkInInfra = this.query(sharedInfraLinkControllergetSharedInfraLink)
  /**
   * Adds a link to an infra
   */
  addLinkInInfra = this.mutation(sharedInfraLinkControllersave)
  /**
   * Deletes a link from an infra
   */
  removeLinkFromInfra = this.mutation(sharedInfraLinkControllerdelete)
  /**
   * Updates a link from an infra
   */
  updateLinkInInfra = this.mutation(sharedInfraLinkControllerupdate)
  /**
  * Updates infra links visibility
  */
  updateLinkVisibilityInInfra = this.mutation(sharedInfraLinkControllerupdateLinksVisibility)

  /**
   * Gets stacks in a workspace. This fn is only used for permission purposes.
   */
  stacks = this.query(workspaceStackControllergetStacks) as OperationObject<Parameters<typeof workspaceStackControllergetStacks>[0]>
  /**
   * List workspace context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
   */
  listConsolidatedWorkspaceContext = this.query(contextControllerlistConsolidatedContext) as OperationObject<Parameters<typeof contextControllerlistConsolidatedContext>[0]>
  /**
   * List account context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
   */
  listConsolidatedContext = this.query(contextControllerlistAccountContext) as OperationObject<Parameters<typeof contextControllerlistAccountContext>[0]>
  /**
   * Save workspace context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
   */
  saveContextInWorkspace = this.query(contextV2ControlleraddTypedContextInWorkspace) as OperationObject<Parameters<typeof contextV2ControlleraddTypedContextInWorkspace>[0]>
  /**
   * Save workspace context inputs for a plugin or action in the account. This fn is only used for permission purposes.
   */
  saveContextInAccount = this.query(contextV2ControlleraddTypedContextInAccount) as OperationObject<Parameters<typeof contextV2ControlleraddTypedContextInAccount>[0]>
  /**
    * Add stack to workspace. This fn is only used for permission purposes.
    */
  addStackInWorkspace = this.query(workspaceStackControlleraddStack) as OperationObject<Parameters<typeof workspaceStackControlleraddStack>[0]>
  /**
    * Removes a stack from a workspace. This fn is only used for permission purposes.
    */
  removeStackFromWorkspace = this.query(workspaceStackControllerdeleteStack) as OperationObject<Parameters<typeof workspaceStackControllerdeleteStack>[0]>
  /**
    * Gets a stack in a workspace . This fn is only used for permission purposes.
    */
  stackInWorkspace = this.query(workspaceStackControllergetStackById) as OperationObject<Parameters<typeof workspaceStackControllergetStackById>[0]>
  /**
    * Deletes a workspace . This fn is only used for permission purposes.
    */
  deleteWorkspace = this.query(workspaceControllerdelete) as OperationObject<Parameters<typeof workspaceControllerdelete>[0]>
  /**
    * Deletes an application. This fn is only used for permission purposes.
    */
  deleteApplication = this.query(workspaceApplicationControllerdeleteApplication) as OperationObject<Parameters<typeof workspaceApplicationControllerdeleteApplication>[0]>
  /**
    * Deletes an infra. This fn is only used for permission purposes.
    */
  deleteInfra = this.query(workspaceSharedInfrastructureControllerdeleteSharedInfra) as OperationObject<Parameters<typeof workspaceSharedInfrastructureControllerdeleteSharedInfra>[0]>
  /**
    * Gets the detail of an application. This fn is only used for permission purposes.
    */
  applicationDetail = this.query(workspaceApplicationControllergetApplication) as OperationObject<Parameters<typeof workspaceApplicationControllergetApplication>[0]>
  /**
    * Gets the detail of an infra. This fn is only used for permission purposes.
    */
  infraDetail = this.query(workspaceSharedInfrastructureControllergetSharedInfrastructure) as OperationObject<Parameters<typeof workspaceSharedInfrastructureControllergetSharedInfrastructure>[0]>
  /**
   * Get all workspaces without stack version and favorites filter
   */
  getWorkspacesWithoutStackFilter = this.query(workspaceV2ControllergetWorkspacesWithoutStackFilter)
}

export const workspaceClient = new WorkspaceClient()
