import { HttpError } from '@oazapfts/runtime'
import
{
  createCertificate,
  createCidr,
  createDnsRecord,
  createDnsZone,
  createFolder,
  createFoundation,
  createNetwork,
  createProject,
  createSubnet,
  defaults,
  getCertificate,
  getFolder,
  getFoundation,
  getProject,
  listCertificates,
  listCidr,
  listDnsRecord,
  listDnsZone,
  listFoundations,
  listNetwork,
  listSubnet,
  providers,
} from '../api/cloudPlatform'
import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { cntDictionary } from '../error/dictionary/cnt'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { removeAuthorizationParam } from '../utils/remove-authorization-param'

class CloudPlatformClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.cloudPlatform.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, cntDictionary, error.headers)
  }
  /**
   * List foundations
   */
  listFoundations = this.query(removeAuthorizationParam(listFoundations))
  /**
   * Get a foundation by id
   */
  foundation = this.query(removeAuthorizationParam(getFoundation))
  /**
   * Get list of foundations folders or folder by id
   */
  getFolder = this.query(removeAuthorizationParam(getFolder))
  /**
   * Get list of providers for a foundation
   */
  listProviders = this.query(removeAuthorizationParam(providers))
  /**
   * Create a foundation
   */
  createFoundation = this.mutation(removeAuthorizationParam(createFoundation))
  /**
   * Create a foundation folder
   */
  createFolder = this.mutation(removeAuthorizationParam(createFolder))
  /**
   * Get a list of dns zones
   */
  listDnsZones = this.query(removeAuthorizationParam(listDnsZone))
  /**
   * Create a dns zone
   */
  createDnsZone = this.mutation(removeAuthorizationParam(createDnsZone))
  /**
   * Get a list of cidrs
   */
  listCidrs = this.query(removeAuthorizationParam(listCidr))
  /**
   * Create a cidr
   */
  createCidr = this.mutation(removeAuthorizationParam(createCidr))
  /**
   * Get a list of certificates
   */
  listCertificates = this.query(removeAuthorizationParam(listCertificates))
  /**
   * Get a certificate by id
   */
  getCertificate = this.query(removeAuthorizationParam(getCertificate))
  /**
   * Create a certificate
   */
  createCertificate = this.mutation(removeAuthorizationParam(createCertificate))
  /**
   * Create a project
   */
  createProject = this.mutation(removeAuthorizationParam(createProject))
  /**
   * Get a project by id
   */
  getProjectById = this.query(removeAuthorizationParam(getProject))
  /**
   * Get a list of dns records
   */
  listDnsRecords= this.query(removeAuthorizationParam(listDnsRecord))
  /**
   * Create a dns record
   */
  createDnsRecord = this.mutation(removeAuthorizationParam(createDnsRecord))
  /**
   * Get a list of networks
   */
  listNetworks= this.query(removeAuthorizationParam(listNetwork))
  /**
   * Create a network
   */
  createNetwork = this.mutation(removeAuthorizationParam(createNetwork))
  /**
   * Get a list of subnets
   */
  listSubnets= this.query(removeAuthorizationParam(listSubnet))
  /**
   * Create a subnet
   */
  createSubnet = this.mutation(removeAuthorizationParam(createSubnet))
}

export const cloudPlatformClient = new CloudPlatformClient()
