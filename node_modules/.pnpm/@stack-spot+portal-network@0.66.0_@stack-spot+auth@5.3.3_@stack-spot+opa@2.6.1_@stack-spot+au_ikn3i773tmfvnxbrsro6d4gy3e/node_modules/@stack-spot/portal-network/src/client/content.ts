import { HttpError } from '@oazapfts/runtime'
import {
  addAction,
  addLink,
  addWorkflow,
  addWorkspace,
  associateActionToPlugin,
  changeVisibility,
  createStudio,
  defaults,
  deleteAction,
  deleteActionVersion,
  deleteLink,
  deletePluginVersion,
  deleteStudio,
  deleteV1StacksVersionsByStackVersionId,
  delWorkspace,
  deprecateActionVersion,
  deprecatePluginVersion,
  deprecateStackVersionBy,
  downloadAction,
  getActionBySlug,
  getActionsVersions,
  getActionVersionById,
  getAllActionVersions,
  getApplicationDetailsView,
  getApplicationsUsesPlugin,
  getAvailableActionVersionsByActionSlug,
  getAvailableWorkflowVersionsByWorkflowSlug,
  getDependentPluginsVersions,
  getGetPluginView,
  getInfrastructureEnvironmentsUsesPlugin,
  getListOfInputs,
  getPluginInfrastructureView,
  getPluginModalView,
  getPluginVersions,
  getPluginVersionsNotInUse,
  getPluginVersionUsageSummary,
  getStackUsesPlugin,
  getStackVersionById,
  getStackVersionListByIds,
  getStackWorkspaceDetailView,
  getStackWorkspaces,
  getStarterStackVersionsAndPluginsVersions,
  getStarterUsesPlugin,
  getStudioByIdOrSlug,
  getStudios,
  getStudios1,
  getStudiosToCreateButton,
  getStudioTabs,
  getUnusedStackVersions,
  getWorkflow,
  getWorkflowByStudioSlug,
  getWorkflowDoc,
  listAccountWorkflow,
  listActions,
  listActions1,
  listActions2,
  listActionsByFilters1,
  listConnectionInterfaceTypes,
  listLinksByStackVersion,
  listMostUsedStackVersions,
  listPlugins,
  listPluginVersionByIdsController,
  listReasons,
  listStacks,
  listStacks1,
  listStacksByFilters,
  listStarters,
  listWorkflows,
  listWorkflowVersion,
  listWorkspaces,
  Pageable,
  patchStarterV2,
  removeActionFromPlugin,
  removeStackWorkflow,
  stackModalViewSummary,
  stackVersionUsageSummary,
  updateStudio,
  updateStudioTabs,
} from '../api/content'
import apis from '../apis.json'
import { DefaultAPIError } from '../error/DefaultAPIError'
import { cntDictionary } from '../error/dictionary/cnt'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient'
import { OperationObject } from '../network/types'
import { removeAuthorizationParam } from '../utils/remove-authorization-param'

class ContentClient extends ReactQueryNetworkClient {
  constructor() {
    super(apis.content.url, defaults)
  }

  protected buildStackSpotError(error: HttpError): StackspotAPIError {
    return new DefaultAPIError(error.data, error.status, cntDictionary, error.headers)
  }
  /**
   * Gets links in a stack
   */
  linksInStack = this.query(listLinksByStackVersion)
  /**
   * Adds a link in a stack
   */
  addLinkInStack = this.mutation(addLink)
  /**
   * Adds a link in a stack
   */
  deleteLinkFromStack = this.mutation(deleteLink)
  /**
   * Gets all stack version by a list of ids
   */
  allStackVersionByIds = this.query(getStackVersionListByIds)
  /**
   * Gets all studios
   */
  studios = this.query(removeAuthorizationParam(getStudios1))
  /**
   * Gets all studios
   */
  studiosWithPagination = this.query(removeAuthorizationParam(getStudios))
  /**
   * Gets all studios
   */
  studiosUserHasCreatePermission = this.query(removeAuthorizationParam(getStudiosToCreateButton))
  /**
   * Gets a studio
   */
  studio = this.query(getStudioByIdOrSlug)
  /**
   * Creates a studio
   */
  createStudio = this.mutation(removeAuthorizationParam(createStudio))
  /**
   * Updates a studio
   */
  updateStudio = this.mutation(updateStudio)
  /**
   * Deletes a studio
   */
  deleteStudio = this.mutation(deleteStudio)
  /**
   * Changes studio visibility
   */
  changeStudioVisibility = this.mutation(changeVisibility)
  /**
   * Adds a workspace to a studio
   */
  addWorkspaceToStudio = this.mutation(addWorkspace)
  /**
   * Removes a given workspace from a studio
   */
  removeWorkspaceFromStudio = this.mutation(delWorkspace)
  /**
   * Gets all workspaces associated with a given studio
   */
  workspacesAssociatedToStudio = this.query(listWorkspaces)
  /**
   * Gets studio tabs
   */
  studioTabs = this.query(getStudioTabs)
  /**
   * Updates studio tabs
   */
  updateStudioTabs = this.mutation(updateStudioTabs)
  /**
   * Gets content deprecation reasons
   */
  deprecationReasons = this.query(listReasons)
  /**
   * Gets stacks from a given studio
   */
  stacksFromStudios = this.query(listStacksByFilters)

  //Workflow
  /**
   * Gets workflows from a given studio
   */
  workflowsFromStudio = this.infiniteQuery(getWorkflowByStudioSlug, { accumulator: 'content', 
    pageParamName: 'pageable.page',
    initialPageParam: { page: 0 },
    getNextPageParam: ({ variables, lastPage, lastPageParam }) => { 
      const size = variables.pageable.size ?? 1
      const parsedLastPageParam = (lastPageParam as Pageable)?.page ?? 0
      return lastPage.content && lastPage.content.length < size ?  undefined : {  page: parsedLastPageParam + 1 } 
    },
  })
  /**
   * Gets all account workflows 
   */
  accountWorkflows = this.infiniteQuery(listAccountWorkflow, { accumulator: 'content', initialPageParam: 0 })
  /**
   * Gets workflow doc
   */
  workflowDoc = this.query(getWorkflowDoc)
  /**
   * Gets a workflow by slug
   */
  workflow = this.query(getWorkflow)
  /**
   * Gets all the versions of a workflow
   */
  workflowVersions = this.query(listWorkflowVersion)
  /**
   * Gets workflows of a stack version
   */
  workflowsFromStackVersion = this.query(listWorkflows)
  /**
   * Removes a workflow from a stack version
   */
  removeWorkflowsFromStack = this.mutation(removeStackWorkflow)
  /**
   * Adds a workflow from a stack version
   */
  addWorkflowToStack = this.mutation(addWorkflow)
  /**
   * Gets workflow doc
   */
  availableWorkflowVersionsBySlug = this.query(getAvailableWorkflowVersionsByWorkflowSlug)
  /**
   * Gets usage summary of stack
   */
  stackUsageSummary = this.query(stackModalViewSummary)
  /**
   * Gets list of Workspaces using the Stack
   */
  workspacesUsingStack = this.query(getStackWorkspaces)
  /**
   * Gets list StackVersions used by Workspace
   */
  stackVersionsUsedByWorkspace = this.query(getStackWorkspaceDetailView)
  /**
   * Gets list of StackVersions not used by any Content
   */
  stackVersionsNotInUse = this.query(getUnusedStackVersions)
  /**
  * Get usage summary of plugin
  */
  pluginUsageSummary = this.query(getPluginModalView)
  /**
   * Gets list of Stacks using the plugin
   */
  stacksUsingPlugin = this.query(getStackUsesPlugin)
  /**
   * Gets list of PluginVersions used by Stack
   */
  pluginVersionsUsedByStack = this.query(getPluginVersions)
  /**
   * Gets list of Plugin that requires the plugin
   */
  pluginsRequiresPlugin = this.query(getGetPluginView)
  /**
   * Gets list of PluginVersions used by Plugin
   */
  pluginVersionsUsedByPlugin = this.query(getDependentPluginsVersions)
  /**
   * Gets list of Starter using the plugin
   */
  starterUsingPlugin = this.query(getStarterUsesPlugin)
  /**
   * Gets list of PluginVersions used by Starter
   */
  pluginVersionsUsedByStarter = this.query(getStarterStackVersionsAndPluginsVersions)
  /**
   * Gets list of Infrastructure using the plugin
   */
  infrastructureUsingPlugin = this.query(getPluginInfrastructureView)
  /**
   * Gets list of PluginVersions used by Infrastructure
   */
  pluginVersionsUsedByInfrastructure = this.query(getInfrastructureEnvironmentsUsesPlugin)
  /**
   * Gets list of Application using the plugin
   */
  applicationUsingPlugin = this.query(getApplicationsUsesPlugin)
  /**
   * Gets list of PluginVersions used by Applications
   */
  pluginVersionsUsedByApplication = this.query(getApplicationDetailsView)
  /**
   * Gets list of PluginVersions not used by any Content
   */
  pluginVersionsNotInUse = this.query(getPluginVersionsNotInUse)
  /**
   * Get Stack Version Usage Summary
   */
  stackVersionsUsageSummary = this.query(stackVersionUsageSummary)
  /**
   * Get Plugin Version Usage Summary
   */
  pluginVersionUsageSummary = this.query(getPluginVersionUsageSummary)
  /**
   * Deprecate a stack version
   */
  deprecateStackVersion = this.mutation(removeAuthorizationParam(deprecateStackVersionBy))
  /**
   * Delete a stack version of type draft or unpublish
   */
  deleteStackVersion = this.mutation(deleteV1StacksVersionsByStackVersionId)
  /**
   * Deprecate a plugin version
   */
  deprecatePluginVersion = this.mutation(removeAuthorizationParam(deprecatePluginVersion))
  /**
   * Delete a Plugin version of type draft or unpublish
   */
  deletePluginVersion = this.mutation(deletePluginVersion)
  /**
   * Gets Action by Slug and Studio
   */
  action = this.query(getActionBySlug)
  /**
   * Gets all Versions of Action
   */
  actionVersions = this.query(getAllActionVersions)
  /**
   * Gets Action by Action Version Id
   */
  actionByActionVersionId = this.query(getActionVersionById)
  /**
   * Gets list of Actions V2
   */
  actionsV2 = this.query(listActions)
  /**
   * Gets list of Actions V1
   */
  actions = this.query(listActions2)
  /**
   * Get list of Actions in Stack
   */
  actionsInStack = this.query(listActions1)
  /**
   * Add Action to Stack Version
   */
  addActionsToStackVersion = this.mutation(addAction)
  /**
   * Add Action to Plugin Version
   */
  addActionsToPluginVersion = this.mutation(associateActionToPlugin)
  /**
   * Remove Action Version from Stack 
   */
  removeActionVersionFromStack = this.mutation(deleteAction)
  /**
   * Remove Action Version from Plugin
   */
  removeActionVersionFromPlugin = this.mutation(removeActionFromPlugin)
  /**
   * Delete Action Version
   */
  deleteActionVersion = this.mutation(deleteActionVersion)
  /**
   * Deprecate Action Version
   */
  deprecateActionVersion = this.mutation(deprecateActionVersion)
  /**
   * Download Action Version
   */
  downloadActionVersion = this.query(downloadAction)
  /**
   * Get Action Version range by Action Slug
   */
  actionVersionRange = this.query(getAvailableActionVersionsByActionSlug)
  /**
   * Get Actions from Stack 
   */
  actionsFromStack = this.query(listActionsByFilters1)
  /*
   * Update starter
   */
  updateStarter = this.mutation(patchStarterV2)
  /**
   * Gets connection interface types
   */
  connectionInterfaceTypes = this.query(listConnectionInterfaceTypes)
  /**
   * Gets a list of plugin versions from list of ids.
   */
  pluginVersionsByIds = this.query(listPluginVersionByIdsController)
  /**
   * Gets plugins from a stack version
   */
  listPluginsFromStack = this.query(listPlugins)
  /**
   * Gets the inputs of a specific Action. This fn is only used for permission purposes.
   */
  actionInputs = this.query(getListOfInputs) as
    OperationObject<Parameters<typeof getListOfInputs>[0]>
  /**
   * Gets action versions by ids
   */
  actionsVersions = this.query(getActionsVersions)
  /**
   * Gets all starters from a stack version id
   */
  startersInStackVersion = this.query(listStarters)
  /**
   * Gets a stack from a stack version id
   */
  getStackByVersionId = this.query(getStackVersionById)
  
  /**
   * View all stacks V3 by account
   */
  getAllStacksV3 = this.query(listStacks)

  /**
   * View all stacks by account
   */
  getAllStacks = this.query(listStacks1)

  /**
   * List most used stack versions
   */

  listMostUsedStackVersions = this.query(listMostUsedStackVersions)
}

export const contentClient = new ContentClient()
