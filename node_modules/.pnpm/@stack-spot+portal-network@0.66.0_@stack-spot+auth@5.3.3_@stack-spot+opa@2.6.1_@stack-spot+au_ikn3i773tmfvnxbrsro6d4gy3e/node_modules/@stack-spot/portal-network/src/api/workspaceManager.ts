/**
 * Workspace Manager API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "https://workspace-workspace-manager.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://workspace-workspace-manager.dev.stackspot.com"
};
export type ExternalItemsResponse = {
    source: string;
    value: string;
    label?: string;
};
export type InputConditionResponse = {
    variable: string;
    operator: string;
    value?: object;
};
export type ActionConsolidatedAttributeResponse = {
    key?: string;
    value?: object;
    final: boolean;
    label: string;
    "type": string;
    required: boolean;
    help?: string;
    pattern?: string;
    "default"?: object;
    items?: string[];
    externalItems?: ExternalItemsResponse;
    condition?: InputConditionResponse;
    source: "ACCOUNT" | "STACK" | "WORKSPACE";
    readOnly: boolean;
    connectionInterfaceType?: string;
    addQuestion?: string;
    input?: object;
    inputs: object[];
};
export type ComputedInputResponse = {
    name: string;
    expression: string;
};
export type WorkflowActionWithContextResponse = {
    actionId: string;
    versionRange: string;
    name: string;
    stepType?: "CREATE_REPO";
    valuesContext: ActionConsolidatedAttributeResponse[];
    computedInputs: ComputedInputResponse[];
    globalComputedInputs: ComputedInputResponse[];
};
export type WorkflowAccountContextResponse = {
    actionsBefore: WorkflowActionWithContextResponse[];
    actionsAfter: WorkflowActionWithContextResponse[];
};
export type ContextAttribute = {
    key: string;
    value: object;
    final: boolean;
    sourceType?: "ACCOUNT" | "STACK" | "WORKSPACE";
};
export type ContextWorkflowRequest = {
    actionId: string;
    versionRange: string;
    valuesContext: ContextAttribute[];
};
export type WorkflowContextSaveRequest = {
    actionsBefore: ContextWorkflowRequest[];
    actionsAfter: ContextWorkflowRequest[];
};
export type AddStackInWorkspaceRequest = {
    /** Stack version id. */
    stackVersionId: string;
};
export type ConnectionInterfaceAttribute = {
    /** Attribute key. */
    key: string;
    /** Attribute value. */
    value: object;
    /** Indicates if this attribute value is sensitive or not. */
    sensitive: boolean;
    /** Indicates the outuput id for the respective attribute and is used for validation. */
    id: string;
};
export type ConnectionInterfaceAttributesByEnv = {
    /** Environment id. */
    environmentId: string;
    /** List of attributes */
    attributes: ConnectionInterfaceAttribute[];
};
export type ValueByEnvWorkspaceResponse = {
    envName: string;
    value: object;
    mandate: boolean;
    source: string;
};
export type PluginInputValuesInConsolidatedContextResponse = {
    name: string;
    label: string;
    "type": string;
    inputEnv: boolean;
    required?: boolean;
    "default"?: object;
    pattern?: string;
    help?: string;
    items?: string[];
    itemsValues?: string[];
    externalItems?: ExternalItemsResponse;
    valuesByEnv: ValueByEnvWorkspaceResponse[];
    condition?: InputConditionResponse;
    isGlobal?: boolean;
    connectionInterfaceType?: string;
    addQuestion?: string;
    input?: object;
    inputs: object[];
};
export type UpsertPluginInputContextRequest = {
    /** Context's environment (omit or null for all in account) */
    envName?: string;
    key: string;
    value: object;
    mandate?: boolean;
};
export type UpsertActionInputContextRequest = {
    /** Context's environment (omit or null for all in account) */
    envName?: string;
    key: string;
    value: object;
    mandate?: boolean;
};
export type ValueByEnvAccountResponse = {
    envName: string;
    value: object;
    mandate: boolean;
};
export type PluginInputValuesInAccountContextResponse = {
    name: string;
    label: string;
    "type": string;
    inputEnv: boolean;
    required?: boolean;
    "default"?: object;
    pattern?: string;
    help?: string;
    items?: string[];
    externalItems?: ExternalItemsResponse;
    valuesByEnv: ValueByEnvAccountResponse[];
    condition?: InputConditionResponse;
    isGlobal?: boolean;
    connectionInterfaceType?: string;
    addQuestion?: string;
    input?: object;
    inputs: object[];
};
export type StudioResponse = {
    slug: string;
    name: string;
    imageUrl?: string;
};
export type SimpleStackResponse = {
    stackId: string;
    name: string;
    slug: string;
    imageUrl?: string;
    studio: StudioResponse;
};
export type WorkflowAccountSettingsResponse = {
    name: string;
    description: string;
    "type": "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    isDefault: boolean;
    stacks: SimpleStackResponse[];
};
export type WorkflowSettingsSaveRequest = {
    name: string;
    description: string;
    "type": "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    isDefault: boolean;
    stacksId: string[];
};
export type ActionResponse = {
    actionId: string;
    name: string;
    order: number;
    versionRange: string;
    stepType?: "CREATE_REPO";
};
export type WorkflowActionResponse = {
    actionsBefore: ActionResponse[];
    actionsAfter: ActionResponse[];
};
export type WorkflowActionSimpleRequest = {
    actionId: string;
    order: number;
    versionRange: string;
    stepType?: "CREATE_REPO";
};
export type WorkflowActionsRequest = {
    actionsBefore: WorkflowActionSimpleRequest[];
    actionsAfter: WorkflowActionSimpleRequest[];
};
export type RequiresRequest = {
    /** Connections requires name. */
    selected: string;
    /** Connections requires alias. */
    alias: string;
    /** Connections requires type. */
    "type": string;
};
export type GeneratesRequest = {
    /** Connections generates name. */
    selected: string;
    /** Connections generates alias. */
    alias: string;
    /** Connections generates type. */
    "type": string;
};
export type PluginsConnectionsRequest = {
    /** List of connections requires. */
    requires?: RequiresRequest[];
    /** List of connections generates. */
    generates?: GeneratesRequest[];
};
export type PluginRequest = {
    /** Name used in workflow. */
    name: string;
    alias: string;
    pluginVersionId?: string;
    /** Inputs used in workflow. */
    inputs: {
        [key: string]: object;
    };
    /** Inputs sensitives used in workflow. */
    inputsSensitive?: string[];
    /** Inputs Env used in workflow. */
    inputsEnv: {
        [key: string]: {
            [key: string]: object;
        };
    };
    connections?: PluginsConnectionsRequest;
};
export type Infra = {
    /** Shared Infrastructure apiId that will be used in case of retry. */
    sharedInfraId?: string;
    stack: string;
    /** Stack used to generate this shared infra. */
    stackVersionId: string;
    /** SharedInfra name. */
    name: string;
    /** SharedInfra repository url. */
    repo?: string;
    /** SharedInfra description. */
    description?: string;
    /** SharedInfra repository base branch. */
    repoBaseBranch: string;
    /** Starter Id used to generate this shared infra. */
    starterId?: string;
    plugins: PluginRequest[];
};
export type ActionsConnectionsRequest = {
    /** List of connections requires. */
    requires: RequiresRequest[];
};
export type ActionsBeforeRequest = {
    /** Actions before name. */
    name: string;
    /** Actions before inputs. */
    inputs: {
        [key: string]: object;
    };
    /** Actions before inputs sensitive. */
    inputsSensitive?: string[];
    /** Create repo?. */
    repoCreate: boolean;
    connections?: ActionsConnectionsRequest;
};
export type ActionsAfterRequest = {
    /** Actions after name. */
    name: string;
    /** Actions after inputs. */
    inputs: {
        [key: string]: object;
    };
    /** Actions after inputs sensitive. */
    inputsSensitive?: string[];
    /** Create repo?. */
    repoCreate: boolean;
    connections?: ActionsConnectionsRequest;
};
export type CreateSharedRequest = {
    infra: Infra;
    actionsBefore?: ActionsBeforeRequest[];
    actionsAfter?: ActionsAfterRequest[];
    /** Data that will be used in case of retry. */
    frontData?: object;
};
export type CreateShareInfraResponse = {
    sharedInfraId: string;
    workflowId: string;
    logs?: string;
};
export type App = {
    /** Application apiId that will be used in case of retry. */
    applicationId?: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starter: string;
    /** Starter Id used to generate this application. */
    starterId: string;
    /** Application name. */
    name: string;
    /** Application repository url. */
    repo?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Application description. */
    description?: string;
    plugins: PluginRequest[];
};
export type Definitions = {
    environmentId: string;
    gatewayUrl: string;
    openApiContent: string;
};
export type ApiRequest = {
    /** Name used in create api. */
    name: string;
    /** Description used in create api. */
    description: string;
    connectionInterfaceSlug?: string;
    /** Description used in create api. */
    definitions: Definitions[];
};
export type CreateAppRequest = {
    app: App;
    /** Before Actions for execute in workflow . */
    actionsBefore?: ActionsBeforeRequest[];
    /** After Actions for execute in workflow . */
    actionsAfter?: ActionsAfterRequest[];
    api?: ApiRequest;
    /** Data that will be used in case of retry. */
    frontData?: object;
};
export type CreateApplicationResponse = {
    applicationId: string;
    apiId?: string;
    workflowId: string;
    logs?: string;
};
export type ContentWorkflowSaveRequest = {
    name: string;
    description: string;
    targetId?: string;
    stackVersionId: string;
    inputs: {
        [key: string]: object;
    };
    frontData?: object;
};
export type ContentWorkflowSaveResponse = {
    targetId: string;
    executionId: string;
};
export type StackVersionLatestAvailableResponse = {
    stackVersionId: string;
    semanticVersion: string;
};
export type WorkspaceStackResponseStackResponse = {
    id: string;
    version: number;
    displayName: string;
    imageUrl?: string;
    slug: string;
    description: string;
    studio: StudioResponse;
    latestVersionAvailable?: StackVersionLatestAvailableResponse;
};
export type WorkspaceStackResponse = {
    stackVersionId: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    status: string;
    hasDeprecatedContent: boolean;
    workspaceId: string;
    accountId: string;
    qualifier: string;
    stack: WorkspaceStackResponseStackResponse;
};
export type CreateConnectionInterfaceRequest = {
    /** Connection interface type id. */
    typeId: string;
    /** Connection interface id generated by client. */
    connectionInterfaceId: string;
    /** Connection interface owner applications. */
    applicationId?: string;
    /** Connection interface owner shared infra. */
    sharedInfraId?: string;
    /** Version id from plugin that generated this connection interface. */
    sourcePluginVersionId?: string;
    /** Indicates if this connection interface was generated by a plugin or manually. */
    automaticallyGenerated: boolean;
    /** Connection interface attributes. */
    attributesByEnv: ConnectionInterfaceAttributesByEnv[];
};
export type IdResponse = {
    id: string;
};
export type ImportContextRequest = {
    stackVersionId: string;
    stackVersionReference: string;
};
export type WorkflowActionWithContextRequest = {
    actionId: string;
    order: number;
    versionRange: string;
    stepType?: "CREATE_REPO";
    valuesContext: ContextAttribute[];
};
export type AccountWorkflowCreateRequest = {
    name: string;
    description: string;
    "type": "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    isDefault: boolean;
    stacksId: string[];
    actionsBefore: WorkflowActionWithContextRequest[];
    actionsAfter: WorkflowActionWithContextRequest[];
};
export type IdResponseString = {
    id: string;
};
export type ManagerRunResponse = {
    environmentName?: string;
    runId: string;
};
export type SharedInfraAppliedPluginsV2ResponsePluginsResponseConnectionInterfacesIdResponse = {
    connectionInterfaceId: string;
    typeId: string;
    alias?: string;
    typeName: string;
};
export type SharedInfraAppliedPluginsV2ResponsePluginsResponseActionsResponseRequiresConnectionInterfaceResponse = {
    typeId?: string;
    typeName: string;
    alias: string;
    optional?: boolean;
    source?: string;
};
export type SharedInfraAppliedPluginsV2ResponsePluginsResponseActionsResponseRequires = {
    connectionInterfaces: SharedInfraAppliedPluginsV2ResponsePluginsResponseActionsResponseRequiresConnectionInterfaceResponse[];
};
export type SharedInfraAppliedPluginsV2ResponsePluginsResponseActionsResponse = {
    versionId: string;
    qualifier: string;
    description: string;
    slug: string;
    displayName: string;
    requires: SharedInfraAppliedPluginsV2ResponsePluginsResponseActionsResponseRequires;
};
export type SharedInfraAppliedPluginsV2ResponsePluginsResponseLink = {
    name: string;
    url: string;
    imageUrl?: string;
};
export type SharedInfraAppliedPluginsV2ResponsePluginsResponse = {
    versionId: string;
    qualifier: string;
    slug: string;
    description: string;
    displayName: string;
    "type": string;
    status: string;
    deployStatus: string;
    inCloud?: boolean;
    singleUse?: boolean;
    attributes?: {
        [key: string]: object;
    };
    connectionInterfaces?: SharedInfraAppliedPluginsV2ResponsePluginsResponseConnectionInterfacesIdResponse[];
    actions?: SharedInfraAppliedPluginsV2ResponsePluginsResponseActionsResponse[];
    links?: SharedInfraAppliedPluginsV2ResponsePluginsResponseLink[];
};
export type SharedInfraAppliedPluginsV2Response = {
    plugins: SharedInfraAppliedPluginsV2ResponsePluginsResponse[];
};
export type ActivityResponse = {
    title: string;
    owner?: string;
    status: "SUCCESS" | "FAILED" | "RUNNING" | "PENDING" | "SKIPPED" | "CANCELLED" | "NONE" | "DRIFT" | "SUCCEEDED" | "RUNTIME_ERROR" | "USER_ERROR" | "INTERNAL_ERROR" | "ABORTED" | "ABORTING" | "EXTERNAL_ERROR" | "READY_TO_RUN" | "TIMEOUT";
    source: "STACK" | "RUNTIME" | "WORKFLOW" | "SCM";
    "type": "DEPLOY" | "DESTROY" | "ROLLBACK" | "CREATE" | "ACTION" | "CUSTOMER_WORKFLOW";
    action?: "CREATE" | "UPDATE" | "DELETE" | "RUN";
    requestedBy?: string;
    time: number;
    version: string;
    detail: {
        [key: string]: object;
    };
};
export type PaginatedActivityResponse = {
    items: ActivityResponse[];
    currentPage: number;
    totalItems: number;
    totalPages: number;
};
export type ApplicationAppliedPluginsV2ResponsePluginsResponseConnectionInterfacesIdResponse = {
    connectionInterfaceId: string;
    typeId: string;
    alias?: string;
    typeName: string;
};
export type ApplicationAppliedPluginsV2ResponsePluginsResponseActionsResponseConnectionInterfaceResponse = {
    typeId?: string;
    typeName: string;
    alias: string;
    optional?: boolean;
    source?: string;
};
export type ApplicationAppliedPluginsV2ResponsePluginsResponseActionsResponseRequires = {
    connectionInterfaces: ApplicationAppliedPluginsV2ResponsePluginsResponseActionsResponseConnectionInterfaceResponse[];
};
export type ApplicationAppliedPluginsV2ResponsePluginsResponseActionsResponse = {
    versionId: string;
    qualifier: string;
    description: string;
    slug: string;
    displayName: string;
    requires: ApplicationAppliedPluginsV2ResponsePluginsResponseActionsResponseRequires;
};
export type ApplicationAppliedPluginsV2ResponsePluginsResponseLink = {
    name: string;
    url: string;
    imageUrl?: string;
};
export type ApplicationAppliedPluginsV2ResponsePluginsResponse = {
    versionId: string;
    qualifier: string;
    slug: string;
    description: string;
    displayName: string;
    "type": string;
    status: string;
    deployStatus: string;
    inCloud?: boolean;
    singleUse?: boolean;
    attributes?: {
        [key: string]: object;
    };
    connectionInterfaces?: ApplicationAppliedPluginsV2ResponsePluginsResponseConnectionInterfacesIdResponse[];
    actions?: ApplicationAppliedPluginsV2ResponsePluginsResponseActionsResponse[];
    links?: ApplicationAppliedPluginsV2ResponsePluginsResponseLink[];
};
export type ApplicationAppliedPluginsV2Response = {
    plugins: ApplicationAppliedPluginsV2ResponsePluginsResponse[];
};
export type WorkspaceContextV2ResponseWorkspacePluginAttributeContext = {
    /** Key identifier of an input */
    key: string;
    /** Value of an input */
    value: object;
    /** Identifies whether this attribute can be overwritten or not */
    mandate: boolean;
    /** Source */
    source: string;
};
export type WorkspaceContextV2ResponseEnvironment = {
    /** Identifier of a environment */
    environmentId: string;
    /** name of a environment */
    environmentName?: string;
    /** Attributes environments */
    attributes: WorkspaceContextV2ResponseWorkspacePluginAttributeContext[];
};
export type WorkspaceContextV2ResponseConnectionInterfaceRequired = {
    /** Connection interface type required */
    typeName: string;
    /** Identifier of the pluginVersionId that should be used for the connection interface type */
    pluginVersionId?: string;
    alias?: string;
};
export type WorkspaceContextV2ResponsePlugin = {
    /** Identifier of a plugin version */
    pluginVersionId: string;
    /** Plugin slugs name with format `accountSlug/studioSlug/pluginSlug@x.y.z` */
    pluginQualifier: string;
    /** Plugin type */
    pluginType: string;
    /** Status Plugin */
    status: string;
    /** Attributes show by environments */
    environments: WorkspaceContextV2ResponseEnvironment[];
    /** Connection interfaces required */
    connectionInterfaceRequired: WorkspaceContextV2ResponseConnectionInterfaceRequired[];
};
export type WorkspaceContextV2ResponseConnectionInterface = {
    /** Connection interface type */
    typeName: string;
    /** Connection interface id. */
    id?: string;
    /** Connection interface id generated by client. */
    connectionInterfaceId: string;
    /** Automatically generated */
    automaticallyGenerated: boolean;
};
export type WorkspaceContextV2Response = {
    /** Cloud accounts information */
    cloudAccounts: object[];
    /** Context information for each environment and plugin in stack */
    context: WorkspaceContextV2ResponsePlugin[];
    /** Workspace Connection Interfaces information */
    connectionInterfaces: WorkspaceContextV2ResponseConnectionInterface[];
};
export type PluginForAppCreationV2ResponseRequiredConnectionInterfaceByTypeAvailableConnectionInterface = {
    id: string;
    slug: string;
    sourcePluginUri?: string;
};
export type PluginForAppCreationV2ResponseRequiredConnectionInterfaceByTypeConnectionInterfaceInput = {
    name: string;
    "type": "BOOLEAN" | "NUMBER" | "STRING" | "SECRET" | "ARRAY" | "OBJECT";
};
export type PluginForAppCreationV2ResponseRequiredConnectionInterfaceByType = {
    typeId: string;
    typeName: string;
    alias: string;
    available: PluginForAppCreationV2ResponseRequiredConnectionInterfaceByTypeAvailableConnectionInterface[];
    inputDefinitions: PluginForAppCreationV2ResponseRequiredConnectionInterfaceByTypeConnectionInterfaceInput[];
};
export type PluginForAppCreationV2ResponseGeneratesConnectionInterfaceByType = {
    typeId: string;
    typeName: string;
    alias: string;
};
export type PluginForAppCreationV2Response = {
    displayName: string;
    status: string;
    uri: string;
    version: string;
    singleUse?: boolean;
    inputs: PluginInputValuesInConsolidatedContextResponse[];
    computedInputs: ComputedInputResponse[];
    globalComputedInputs: ComputedInputResponse[];
    requiredConnectionInterfacesByType: PluginForAppCreationV2ResponseRequiredConnectionInterfaceByType[];
    generatesConnectionInterfacesByType: PluginForAppCreationV2ResponseGeneratesConnectionInterfaceByType[];
};
export type ValueByEnvResponse = {
    envName: string;
    value: object;
    mandate: boolean;
    source: string;
};
export type InputValuesContextResponse = {
    name?: string;
    label: string;
    "type": string;
    items?: string[];
    externalItems?: ExternalItemsResponse;
    inputEnv: boolean;
    "default"?: object;
    required?: boolean;
    pattern?: string;
    help?: string;
    valuesByEnv: ValueByEnvResponse[];
    connectionInterfaceType?: string;
    addQuestion?: string;
    input?: object;
    inputs: object[];
    condition?: InputConditionResponse;
    isGlobal?: boolean;
    scope?: string;
};
export type FullInputContextResponse = {
    inputs: InputValuesContextResponse[];
    computedInputs: ComputedInputResponse[];
    globalComputedInputs: ComputedInputResponse[];
};
export type WorkspaceResponse = {
    /** Workspace id. */
    id: string;
    /** Workspace name */
    name: string;
    /** Workspace description */
    description?: string;
    /** Workspace image */
    imageUrl?: string;
};
export type WorkspacePageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: WorkspaceResponse[];
};
export type WorkflowCompleteResponse = {
    workflowId: string;
    name: string;
    description: string;
    "type": "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    isDefault: boolean;
    actionsBefore: WorkflowActionWithContextResponse[];
    actionsAfter: WorkflowActionWithContextResponse[];
};
export type StackVersionResponse = {
    stackVersionId: string;
    version: number;
    status?: string;
    hasDeprecatedContent: boolean;
    published: boolean;
    publishedBy?: string;
    publishedAt?: string;
    unpublishedBy?: string;
    unpublishedAt?: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    hasContext?: boolean;
};
export type WorkspaceStackContextResponseVersionStackResponse = {
    id: string;
    version: number;
    displayName: string;
    imageUrl?: string;
    slug: string;
    description: string;
    studio: StudioResponse;
    versions: StackVersionResponse[];
};
export type WorkspaceStackContextResponse = {
    stackVersionId: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    status: string;
    hasDeprecatedContent: boolean;
    hasVersionsWithContext: boolean;
    workspaceId: string;
    accountId: string;
    qualifier: string;
    hasContext: boolean;
    stack: WorkspaceStackContextResponseVersionStackResponse;
};
export type Stack = {
    stackId: string;
    displayName: string;
    imageUrl?: string;
};
export type StackVersion = {
    stackVersionId: string;
    semanticVersion?: string;
};
export type SharedInfraSimplesResponse = {
    id: string;
    name: string;
    createdAt: string;
    stack?: Stack;
    status: string;
    stackVersion?: StackVersion;
};
export type SharedInfraPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: SharedInfraSimplesResponse[];
};
export type LinksConsolidateResponse = {
    id: string;
    name: string;
    url: string;
    imageUrl?: string;
    readOnly: boolean;
    visible: boolean;
    "type": "STACK" | "PLUGIN" | "APPLICATION" | "SHAREDINFRA" | "WORKSPACE";
};
export type ExtraRepositoriesResponse = {
    name: string;
    description: string;
    provider: string;
    url: string;
};
export type SharedInfraResponse = {
    /** Shared-infra id. */
    id: string;
    /** Shared-infra name. */
    name: string;
    /** Shared-infra description. */
    description?: string;
    /** Shared-infra repository url. */
    repoUrl?: string;
    /** Shared-infra repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this shared-infra. */
    stackVersionId: string;
    /** Starter used to generate this shared-infra. */
    version?: string;
    /** Shared-infra Deploy Status. */
    status?: string;
    /** Shared-infra extra repositories. */
    extraRepositories: ExtraRepositoriesResponse[];
    /** Shared-infra createBy. */
    createdBy: string;
    /** Shared-infra createAt. */
    createdAt: string;
    /** Shared-infra updateBy. */
    updatedBy: string;
    /** Shared-infra updateAt. */
    updatedAt: string;
};
export type WorkspaceActivitiesResponse = {
    title: string;
    owner?: string;
    status: "SUCCESS" | "FAILED" | "RUNNING" | "PENDING" | "SKIPPED" | "CANCELLED" | "NONE" | "DRIFT" | "SUCCEEDED" | "RUNTIME_ERROR" | "USER_ERROR" | "INTERNAL_ERROR" | "ABORTED" | "ABORTING" | "EXTERNAL_ERROR" | "READY_TO_RUN" | "TIMEOUT";
    "type"?: "DEPLOY" | "CUSTOMER_WORKFLOW" | "ACTION" | "WORKFLOW" | "DESTROY" | "ROLLBACK" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
    action?: "CREATE" | "UPDATE" | "DELETE" | "RUN";
    requestedBy?: string;
    time: number;
    version: string;
    detail: {
        [key: string]: object;
    };
};
export type SimpleStackVersionResponse = {
    semanticVersion: string;
    stackVersionId: string;
};
export type StackResponse = {
    stackId: string;
    displayName: string;
    imageUrl?: string;
    stackVersions: SimpleStackVersionResponse[];
};
export type StackFilterResponse = {
    stacks: StackResponse[];
};
export type WorkspacePluginResponseStudio = {
    id: string;
    slug: string;
    name: string;
};
export type WorkspacePluginConnectionsResponse = {
    typeId: string;
    "type": string;
    alias: string;
};
export type WorkspacePluginResponse = {
    stackVersionId: string;
    stackSlug: string;
    stackSemanticVersion: string;
    pluginId: string;
    pluginVersionId: string;
    slug: string;
    displayName: string;
    description: string;
    pluginQualifier: string;
    studio: WorkspacePluginResponseStudio;
    uri: string;
    requiredConnectionInterfacesByType?: WorkspacePluginConnectionsResponse[];
    generatesConnectionInterfacesByType: WorkspacePluginConnectionsResponse[];
};
export type ConnectionInterfaceDetailsResponseVisibility = {
    "type": string;
    ids: string[];
};
export type ConnectionInterfaceDetailsResponseConnectionInterfaceAttribute = {
    id?: string;
    key: string;
    value: object;
    sensitive: boolean;
    schema?: object;
};
export type ConnectionInterfaceDetailsResponseConnectionInterfaceAttributesByEnv = {
    environmentId: string;
    envName: string;
    attributes: ConnectionInterfaceDetailsResponseConnectionInterfaceAttribute[];
};
export type ConnectionInterfaceDetailsResponse = {
    /** Connection Interface Details id. */
    id: string;
    /** Connection Interface Type id. */
    typeId: string;
    /** Connection Interface id. */
    connectionInterfaceId: string;
    visibility?: ConnectionInterfaceDetailsResponseVisibility;
    /** Source Plugin Version id. */
    sourcePluginVersionId?: string;
    /** Was this Connection Interface automatically generated?. */
    automaticallyGenerated: boolean;
    /** Connection interface attribute's by environment. */
    attributesByEnv: ConnectionInterfaceDetailsResponseConnectionInterfaceAttributesByEnv[];
};
export type AvailableConnectionInterfaceResponse = {
    slug: string;
    typeId: string;
    typeName: string;
    automaticallyGenerated: boolean;
};
export type ApplicationSimpleResponse = {
    id: string;
    name: string;
    createdAt: string;
    stack?: Stack;
    status: string;
    stackVersion?: StackVersion;
};
export type ApplicationPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: ApplicationSimpleResponse[];
};
export type ApplicationResponse = {
    /** Application id. */
    id: string;
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starterId: string;
    /** Version of the infrastructure deployed for this application. */
    version?: string;
    /** Application Deploy Version. */
    appVersion?: string;
    /** Application Deploy Status. */
    status?: string;
    /** Application extra repositories. */
    extraRepositories: ExtraRepositoriesResponse[];
    /** Application createdBy */
    createdBy: string;
    /** Application createdAt */
    createdAt: string;
    /** Application updateBy */
    updatedBy: string;
    /** Application updateAt */
    updatedAt: string;
};
export type Workspace = {
    id: string;
    name: string;
};
export type AccountSharedInfraSimplesResponse = {
    id: string;
    name: string;
    createdAt: string;
    stack?: Stack;
    status: string;
    stackVersion?: StackVersion;
    workspace: Workspace;
};
export type AccountSharedInfraPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: AccountSharedInfraSimplesResponse[];
};
export type WorkflowVersionInfoResponse = {
    id: string;
    displayName: string;
    label: string;
    description: string;
    semanticVersion: string;
    targetApp: boolean;
    targetInfra: boolean;
    createdAt: string;
};
export type WorkflowForCreationResponse = {
    id: string;
    slug: string;
    "type": string;
    inputs: InputValuesContextResponse[];
    computedInputs: ComputedInputResponse[];
    globalComputedInputs: ComputedInputResponse[];
    versionInfo?: WorkflowVersionInfoResponse;
};
export type StackActionInputValuesByEnvInWorkspaceContextResponse = {
    name: string;
    label: string;
    "type": string;
    items?: string[];
    externalItems?: ExternalItemsResponse;
    inputEnv: boolean;
    "default"?: object;
    required?: boolean;
    pattern?: string;
    help?: string;
    valuesByEnv: ValueByEnvWorkspaceResponse[];
    connectionInterfaceType?: string;
    addQuestion?: string;
    input?: object;
    inputs: object[];
};
export type StackActionInputValuesByEnvInAccountContextResponse = {
    name: string;
    label: string;
    "type": string;
    items?: string[];
    externalItems?: ExternalItemsResponse;
    inputEnv: boolean;
    "default"?: object;
    required?: boolean;
    pattern?: string;
    help?: string;
    valuesByEnv: ValueByEnvAccountResponse[];
    connectionInterfaceType?: string;
    addQuestion?: string;
    input?: object;
    inputs: object[];
};
export type AccountApplicationSimpleResponse = {
    id: string;
    name: string;
    createdAt: string;
    stack?: Stack;
    status: string;
    stackVersion?: StackVersion;
    workspace: Workspace;
};
export type AccountApplicationPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: AccountApplicationSimpleResponse[];
};
export type StacksByAccountWithWorkflowResponseStackVersion = {
    stackVersionId: string;
    version: number;
    published: boolean;
    publishedBy?: string;
    publishedAt?: string;
    unpublishedBy?: string;
    unpublishedAt?: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
};
export type StacksByAccountWithWorkflowResponseStackVersionShortForm = {
    stackVersionId: string;
    version: number;
    published: boolean;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
};
export type StacksByAccountWithWorkflowResponseWorkflow = {
    id: string;
    name: string;
    "type": "CREATE_APP" | "CREATE_INFRA" | "CREATE_API";
    isDefault: boolean;
};
export type StacksByAccountWithWorkflowResponse = {
    stack: StackResponse;
    latestVersion: StacksByAccountWithWorkflowResponseStackVersion;
    versions: StacksByAccountWithWorkflowResponseStackVersionShortForm[];
    workflows: StacksByAccountWithWorkflowResponseWorkflow[];
};
export type StackVersionWksResponse = {
    stackVersionId: string;
    version: number;
    status: string;
    hasDeprecatedContent: boolean;
    hasContext?: boolean;
    published: boolean;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
};
export type AccountContextStackResponse = {
    stackVersionId: string;
    hasContext: boolean;
    hasVersionsWithContext: boolean;
    versions: StackVersionWksResponse[];
};
export function workflowWorkspaceControllerfindWorkflowStackContext({ workspaceId, stackId, workflowId }: {
    workspaceId: string;
    stackId: string;
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowAccountContextResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
export function workflowWorkspaceControllersaveWorkflowWorkspaceContext({ workspaceId, stackId, workflowId, workflowContextSaveRequest }: {
    workspaceId: string;
    stackId: string;
    workflowId: string;
    workflowContextSaveRequest: WorkflowContextSaveRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowContextSaveRequest
    })));
}
export function workspaceStackControllerrefreshStacksInWorkspace({ workspaceId, addStackInWorkspaceRequest }: {
    workspaceId: string;
    addStackInWorkspaceRequest: AddStackInWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/-/update`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: addStackInWorkspaceRequest
    })));
}
export function connectionInterfaceControllerupdateConnectionInterfaceAttributes({ workspaceId, connectionInterfaceId, connectionInterfaceAttributesByEnv }: {
    workspaceId: string;
    connectionInterfaceId: string;
    connectionInterfaceAttributesByEnv: ConnectionInterfaceAttributesByEnv;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}/attributes`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: connectionInterfaceAttributesByEnv
    })));
}
export function contextControllergetConsolidatedPluginInputs({ workspaceId, stackVersionId, pluginVersionId, envName }: {
    workspaceId: string;
    stackVersionId: string;
    pluginVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginInputValuesInConsolidatedContextResponse[];
    }>(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllerupsertPluginWorkspaceContext({ workspaceId, stackVersionId, pluginVersionId, body }: {
    workspaceId: string;
    stackVersionId: string;
    pluginVersionId: string;
    body: UpsertPluginInputContextRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function contextControllerupsertWorkspaceActionsInputContext({ workspaceId, stackVersionId, actionVersionId, body }: {
    workspaceId: string;
    stackVersionId: string;
    actionVersionId: string;
    body: UpsertActionInputContextRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function contextControllergetAccountPluginInputs({ stackVersionId, pluginVersionId, envName }: {
    stackVersionId: string;
    pluginVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginInputValuesInAccountContextResponse[];
    }>(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllerupsertPluginAccountContext({ stackVersionId, pluginVersionId, body }: {
    stackVersionId: string;
    pluginVersionId: string;
    body: UpsertPluginInputContextRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function contextControllerupsertAccountActionsInputContext({ stackVersionId, actionVersionId, body }: {
    stackVersionId: string;
    actionVersionId: string;
    body: UpsertActionInputContextRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function workflowAccountControllerfindWorkflowSettings({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowAccountSettingsResponse;
    }>(`/v1/account/workflows/${encodeURIComponent(workflowId)}/settings`, {
        ...opts
    }));
}
export function workflowAccountControllersaveWorkflowSettings({ workflowId, workflowSettingsSaveRequest }: {
    workflowId: string;
    workflowSettingsSaveRequest: WorkflowSettingsSaveRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/workflows/${encodeURIComponent(workflowId)}/settings`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowSettingsSaveRequest
    })));
}
export function workflowAccountControllerfindWorkflowContext({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowAccountContextResponse;
    }>(`/v1/account/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
export function workflowAccountControllersaveWorkflowContext({ workflowId, workflowContextSaveRequest }: {
    workflowId: string;
    workflowContextSaveRequest: WorkflowContextSaveRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowContextSaveRequest
    })));
}
export function workflowAccountControllergetWorkflowActions({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowActionResponse;
    }>(`/v1/account/workflows/${encodeURIComponent(workflowId)}/actions`, {
        ...opts
    }));
}
export function workflowAccountControllerupdateWorkflowActions({ workflowId, workflowActionsRequest }: {
    workflowId: string;
    workflowActionsRequest: WorkflowActionsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/workflows/${encodeURIComponent(workflowId)}/actions`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowActionsRequest
    })));
}
export function workflowStackControllerfindWorkflowStackContext({ stackId, workflowId }: {
    stackId: string;
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowAccountContextResponse;
    }>(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
export function workflowStackControllersaveWorkflowStackContext({ stackId, workflowId, workflowContextSaveRequest }: {
    stackId: string;
    workflowId: string;
    workflowContextSaveRequest: WorkflowContextSaveRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowContextSaveRequest
    })));
}
export function sharedInfraControllerV2CreateSharedInfra({ workspaceId, createSharedRequest }: {
    workspaceId: string;
    createSharedRequest: CreateSharedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateShareInfraResponse;
    }>(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createSharedRequest
    })));
}
export function applicationControllerV2CreateApp({ workspaceId, createAppRequest }: {
    workspaceId: string;
    createAppRequest: CreateAppRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateApplicationResponse;
    }>(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createAppRequest
    })));
}
export function contentWorkflowControllercreateSharedInfraThroughWorkflow({ workspaceId, workflowVersionId, contentWorkflowSaveRequest }: {
    workspaceId: string;
    workflowVersionId: string;
    contentWorkflowSaveRequest: ContentWorkflowSaveRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: ContentWorkflowSaveResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowVersionId)}/shared-infra`, oazapfts.json({
        ...opts,
        method: "POST",
        body: contentWorkflowSaveRequest
    })));
}
export function contentWorkflowControllercreateApplicationThroughWorkflow({ workspaceId, workflowVersionId, contentWorkflowSaveRequest }: {
    workspaceId: string;
    workflowVersionId: string;
    contentWorkflowSaveRequest: ContentWorkflowSaveRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: ContentWorkflowSaveResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowVersionId)}/applications`, oazapfts.json({
        ...opts,
        method: "POST",
        body: contentWorkflowSaveRequest
    })));
}
export function workspaceStackControllerlistStacks({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspaceStackResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks`, {
        ...opts
    }));
}
export function workspaceStackControlleraddStacksInWorkspace({ workspaceId, addStackInWorkspaceRequest }: {
    workspaceId: string;
    addStackInWorkspaceRequest: AddStackInWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addStackInWorkspaceRequest
    })));
}
export function connectionInterfaceControllercreateConnectionInterface({ workspaceId, createConnectionInterfaceRequest }: {
    workspaceId: string;
    createConnectionInterfaceRequest: CreateConnectionInterfaceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: IdResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceRequest
    })));
}
export function contextControllerimportContextInWorkspace({ workspaceId, body }: {
    workspaceId: string;
    body: ImportContextRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/import-context`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
export function contextControllerimportContextInAccount({ body }: {
    body: ImportContextRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText("/v1/contexts/account/stacks/import-context", oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
export function workflowAccountControllercreateAccountWorkflow({ accountWorkflowCreateRequest }: {
    accountWorkflowCreateRequest: AccountWorkflowCreateRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: IdResponseString;
    }>("/v1/account/workflows", oazapfts.json({
        ...opts,
        method: "POST",
        body: accountWorkflowCreateRequest
    })));
}
export function managerRunControllerarchiveApplication({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ManagerRunResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/archive`, {
        ...opts,
        method: "PATCH"
    }));
}
export function sharedInfraControllerV2GetSharedInfraAppliedPlugins({ workspaceId, sharedInfraId, envName, pluginType, containsLinks }: {
    workspaceId: string;
    sharedInfraId: string;
    envName: string;
    pluginType?: string;
    containsLinks?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SharedInfraAppliedPluginsV2Response;
    }>(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/plugins${QS.query(QS.explode({
        pluginType,
        containsLinks
    }))}`, {
        ...opts
    }));
}
export function sharedInfraControllerV2GetSharedInfraActivities({ workspaceId, sharedInfraId, envName, $type, page, size }: {
    workspaceId: string;
    sharedInfraId: string;
    envName: string;
    $type?: "DEPLOY" | "DESTROY" | "ROLLBACK" | "CREATE" | "ACTION" | "CUSTOMER_WORKFLOW";
    page: number;
    size: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PaginatedActivityResponse;
    }>(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type,
        page,
        size
    }))}`, {
        ...opts
    }));
}
export function applicationControllerV2GetApplicationAppliedPlugins({ workspaceId, applicationId, envName, pluginType, containsLinks }: {
    workspaceId: string;
    applicationId: string;
    envName: string;
    pluginType?: string;
    containsLinks?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApplicationAppliedPluginsV2Response;
    }>(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/plugins${QS.query(QS.explode({
        pluginType,
        containsLinks
    }))}`, {
        ...opts
    }));
}
export function applicationControllerV2GetApplicationActivities({ workspaceId, applicationId, envName, $type, page, size }: {
    workspaceId: string;
    applicationId: string;
    envName: string;
    $type?: "DEPLOY" | "DESTROY" | "ROLLBACK" | "CREATE" | "ACTION" | "CUSTOMER_WORKFLOW";
    page: number;
    size: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PaginatedActivityResponse;
    }>(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type,
        page,
        size
    }))}`, {
        ...opts
    }));
}
export function contextStackControllergetWorkspaceContext({ workspaceId, stackVersionId, envName }: {
    workspaceId: string;
    stackVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspaceContextV2Response;
    }>(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextgetConsolidatedPluginInputsWithConnectionInterfaces({ workspaceId, stackVersionId, pluginVersionId }: {
    workspaceId: string;
    stackVersionId: string;
    pluginVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginForAppCreationV2Response;
    }>(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}`, {
        ...opts
    }));
}
export function contextgetConsolidatedPluginInputs({ workspaceId, stackVersionId, pluginVersionId, envName }: {
    workspaceId: string;
    stackVersionId: string;
    pluginVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FullInputContextResponse;
    }>(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextActionControllergetStackActionInputsInWorkspaceContext({ workspaceId, stackVersionId, actionsVersionId, envName }: {
    workspaceId: string;
    stackVersionId: string;
    actionsVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FullInputContextResponse;
    }>(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextgetAccountPluginInputs({ stackVersionId, pluginVersionId, envName }: {
    stackVersionId: string;
    pluginVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FullInputContextResponse;
    }>(`/v2/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextActionControllergetStackActionInputsInAccountContext({ stackVersionId, actionsVersionId, envName }: {
    stackVersionId: string;
    actionsVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FullInputContextResponse;
    }>(`/v2/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function workspaceControllergetWorkspaces({ name, aclOnly, accountId, page, size, sortBy, sortDir, tabFilter }: {
    name?: string;
    aclOnly?: boolean;
    accountId?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "DESCRIPTION";
    sortDir?: "ASC" | "DESC";
    tabFilter?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspacePageResponse;
    }>(`/v1/workspaces${QS.query(QS.explode({
        name,
        aclOnly,
        page,
        size,
        sortBy,
        sortDir,
        tabFilter
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
export function workflowWorkspaceControllerlistStacks({ workspaceId, workflowId }: {
    workspaceId: string;
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SimpleStackResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowId)}/stacks`, {
        ...opts
    }));
}
export function workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType({ workspaceId, stackId, workflowType }: {
    workspaceId: string;
    stackId: string;
    workflowType: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowCompleteResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowType)}`, {
        ...opts
    }));
}
export function workspaceStackControllerlistStacksContext({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspaceStackContextResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/with-context`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfra({ workspaceId, stackId, stackVersionId, name, page, size, sortBy, sortDir }: {
    workspaceId: string;
    stackId?: string;
    stackVersionId?: string;
    name?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SharedInfraPageResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra${QS.query(QS.explode({
        stackId,
        stackVersionId,
        name,
        page,
        size,
        sortBy,
        sortDir
    }))}`, {
        ...opts
    }));
}
export function sharedInfraControllergetApplicationLinks({ workspaceId, sharedInfraId, envName }: {
    workspaceId: string;
    sharedInfraId: string;
    envName: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: LinksConsolidateResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/links`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfraAppliedPlugins({ workspaceId, sharedInfraId, envName }: {
    workspaceId: string;
    sharedInfraId: string;
    envName: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SharedInfraResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/details`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfraActivities({ workspaceId, sharedInfraId, envName, $type }: {
    workspaceId: string;
    sharedInfraId: string;
    envName: string;
    $type?: "DEPLOY" | "CUSTOMER_WORKFLOW" | "ACTION" | "WORKFLOW" | "DESTROY" | "ROLLBACK" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspaceActivitiesResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfraFilters({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackFilterResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/filters`, {
        ...opts
    }));
}
export function workspacePluginControllerlistPluginsFromWorkspace({ workspaceId, typePlugin }: {
    workspaceId: string;
    typePlugin?: "INFRA" | "APP";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspacePluginResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/plugins${QS.query(QS.explode({
        typePlugin
    }))}`, {
        ...opts
    }));
}
export function connectionInterfaceControllergetConnectionInterfaceDetails({ workspaceId, connectionInterfaceId }: {
    workspaceId: string;
    connectionInterfaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceDetailsResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}`, {
        ...opts
    }));
}
export function availableConnectionInterfaceControllergetAvailableConnectionInterfaces({ workspaceId, typeName, automaticallyGenerated }: {
    workspaceId: string;
    typeName?: string;
    automaticallyGenerated?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AvailableConnectionInterfaceResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/available-connection-interfaces${QS.query(QS.explode({
        typeName,
        automaticallyGenerated
    }))}`, {
        ...opts
    }));
}
export function applicationControllergetApplications({ workspaceId, stackVersionId, stackId, name, page, size, sortBy, sortDir }: {
    workspaceId: string;
    stackVersionId?: string;
    stackId?: string;
    name?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApplicationPageResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications${QS.query(QS.explode({
        stackVersionId,
        stackId,
        name,
        page,
        size,
        sortBy,
        sortDir
    }))}`, {
        ...opts
    }));
}
export function applicationControllergetApplicationLinks({ workspaceId, applicationId, envName }: {
    workspaceId: string;
    applicationId: string;
    envName: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: LinksConsolidateResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/links`, {
        ...opts
    }));
}
export function applicationControllergetApplicationDetails({ workspaceId, applicationId, envName }: {
    workspaceId: string;
    applicationId: string;
    envName: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApplicationResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/details`, {
        ...opts
    }));
}
export function applicationControllergetApplicationActivities({ workspaceId, applicationId, envName, $type }: {
    workspaceId: string;
    applicationId: string;
    envName: string;
    $type?: "DEPLOY" | "CUSTOMER_WORKFLOW" | "ACTION" | "WORKFLOW" | "DESTROY" | "ROLLBACK" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkspaceActivitiesResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
export function applicationControllergetApplicationFilters({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackFilterResponse;
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/filters`, {
        ...opts
    }));
}
export function accountSharedInfraControllergetAccountSharedInfraPage({ page, size, sortBy, sortDir, name, tab, stackVersionId, stackId }: {
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
    name?: string;
    tab?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE";
    stackVersionId?: string;
    stackId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AccountSharedInfraPageResponse;
    }>(`/v1/shared-infra${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir,
        name,
        tab,
        stackVersionId,
        stackId
    }))}`, {
        ...opts
    }));
}
export function accountSharedInfraControllergetAccountSharedInfraFilters(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackFilterResponse;
    }>("/v1/shared-infra/filters", {
        ...opts
    }));
}
export function contextWorkflowControllergetConsolidatedWorkflowInputs({ workspaceId, stackVersionId, workflowVersionId }: {
    workspaceId: string;
    stackVersionId: string;
    workflowVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowForCreationResponse;
    }>(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowVersionId)}`, {
        ...opts
    }));
}
export function contextWorkflowControllergetWorkspaceWorkflowInputs({ workspaceId, stackVersionId, workflowVersionId, envName }: {
    workspaceId: string;
    stackVersionId: string;
    workflowVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FullInputContextResponse;
    }>(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllergetStackActionInputsInWorkspaceContext({ workspaceId, stackVersionId, actionsVersionId, envName }: {
    workspaceId: string;
    stackVersionId: string;
    actionsVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackActionInputValuesByEnvInWorkspaceContextResponse[];
    }>(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextWorkflowControllergetAccountWorkflowInputs({ stackVersionId, workflowVersionId, envName }: {
    stackVersionId: string;
    workflowVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FullInputContextResponse;
    }>(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllergetStackActionInputsInAccountContext({ stackVersionId, actionsVersionId, envName }: {
    stackVersionId: string;
    actionsVersionId: string;
    envName?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackActionInputValuesByEnvInAccountContextResponse[];
    }>(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function accountApplicationControllergetAccountApplicationPage({ page, size, sortBy, sortDir, tab, name, stackVersionId, stackId }: {
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
    tab?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE";
    name?: string;
    stackVersionId?: string;
    stackId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AccountApplicationPageResponse;
    }>(`/v1/applications${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir,
        tab,
        name,
        stackVersionId,
        stackId
    }))}`, {
        ...opts
    }));
}
export function accountApplicationControllergetAccountApplicationsFilters(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackFilterResponse;
    }>("/v1/applications/filters", {
        ...opts
    }));
}
export function accountStackControllerlistStacksByAccountWithWorkflow({ workspaceId }: {
    workspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StacksByAccountWithWorkflowResponse[];
    }>(`/v1/account/stacks${QS.query(QS.explode({
        workspaceId
    }))}`, {
        ...opts
    }));
}
export function accountStackControllerlistWorkflowsByStack({ stackId }: {
    stackId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowCompleteResponse[];
    }>(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows`, {
        ...opts
    }));
}
export function accountStackControllerlistMostUsedStacksInAppsAndSharedInfras({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string[];
    }>("/v1/account/stacks/most-used", {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
export function accountStackControllerlistVersionsWithContext({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AccountContextStackResponse;
    }>(`/v1/account/stackVersionId/${encodeURIComponent(stackVersionId)}`, {
        ...opts
    }));
}
export function workspaceControllerdelete({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
export function workspaceStackControllerdeleteStacksInWorkspace({ workspaceId, stackVersionId }: {
    workspaceId: string;
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
export function managerRunControllerdeleteSharedInfra({ workspaceId, sharedInfraId }: {
    workspaceId: string;
    sharedInfraId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
export function managerRunControllerdeleteApplication({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ManagerRunResponse[];
    }>(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
