/**
 * Search Engine API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "https://workspace-search-engine-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://workspace-search-engine-api.dev.stackspot.com"
};
export type ExtraDataResponse = {
    key: string;
    value: string;
};
export type SearchDataItemResponse = {
    /** The resource identifier. */
    identifier?: string;
    /** The resource slug. */
    identifierSlug?: string;
    /** The resource description. */
    description?: string;
    /** The resource display name. */
    name?: string;
    /** The resource extra data correlated to itself (ie: the workspace ID of an application) */
    extraData?: ExtraDataResponse[];
};
export type SearchDataResponse = {
    /** The resource type category of the items */
    category?: string;
    /** The total result count for the searched text */
    totalCount?: number;
    /** List of the resources found */
    items?: SearchDataItemResponse[];
};
export type Pagination = {
    /** Total pages */
    totalPages?: number;
    /** Total pageable elements */
    totalElements?: number;
    /** Current page number starting from 0 */
    pageNumber?: number;
    /** Current page size. Fixed 50 items. */
    pageSize?: number;
    /** Has more results to return. */
    hasNext?: boolean;
};
export type SearchResponse = {
    content: SearchDataResponse[];
    pagination?: Pagination;
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type ErrorResponse = {
    code: string;
    status: number;
    details: string;
    validationDetails?: ValidationDetails[];
};
export type HistoryItemResponse = {
    id: string;
    searchText: string;
};
export type SearchHistoryResponse = {
    items: HistoryItemResponse[];
};
/**
 * Search all Stackspot resources using semantic search.
 */
export function search({ q, category, page }: {
    q: string;
    category?: string;
    page?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SearchResponse;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/search${QS.query(QS.explode({
        q,
        category,
        page
    }))}`, {
        ...opts
    }));
}
/**
 * Get the logged-in user search history list.
 */
export function getUserHistory(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SearchHistoryResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/search/history", {
        ...opts
    }));
}
/**
 * Clear the logged-in user search history.
 */
export function clearUserHistory(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/search/history", {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete the logged-in user specific search history item.
 */
export function deleteUserHistoryItem({ itemId }: {
    itemId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/search/history/${encodeURIComponent(itemId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
