/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "https://cloud-cloud-runtime-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://cloud-cloud-runtime-api.dev.stackspot.com"
};
export type ScheduleRequest = {
    applicationId: string;
    runtimeId: string;
    startDate: string;
    endDate: string;
    time: string;
    repeats: "NEVER" | "DAILY" | "WEEKLY" | "MONTHLY";
    action: "START" | "STOP" | "RESTART" | "DEPLOY";
};
export type ScheduleResponse = {
    applicationId: string;
    runtimeId: string;
    startDate: string;
    endDate: string;
    time: string;
    repeats: "NEVER" | "DAILY" | "WEEKLY" | "MONTHLY";
    action: "START" | "STOP" | "RESTART" | "DEPLOY";
};
export type StatusType = number;
export type EnvVar = {
    key: string;
    value: string;
};
export type SecretVar = {
    key: string;
    value: string;
};
export type ReplicaNum = {
    min?: number;
    max?: number;
};
export type CreateDeploymentRequestV2 = {
    runtimeId: string;
    applicationId?: string;
    applicationName?: string;
    action: string;
    containerPort?: number;
    healthCheckPath?: string;
    imageUrl: string;
    tag: string;
    mem?: number;
    envVars?: EnvVar[];
    secretVars?: SecretVar[];
    cpu?: number;
    replicaNum?: ReplicaNum;
    awsAccount?: string;
    idAwsAccount?: string;
    health?: string;
    applicationURL?: string;
};
export type SetAutoscalingRequest = {
    deploymentId: string;
    replicaNum: ReplicaNum;
    applicationName: string;
};
export type CreateDeploymentResponseV2 = {
    id?: string;
    runtimeId: string;
    applicationId?: string;
    applicationName?: string;
    action: string;
    containerPort?: number;
    healthCheckPath?: string;
    imageUrl: string;
    tag: string;
    mem?: number;
    envVars?: EnvVar[];
    secretVars?: SecretVar[];
    cpu?: number;
    replicaNum?: ReplicaNum;
    awsAccount: string;
    idAwsAccount: string;
    health?: string;
    applicationURL?: string;
    status?: string;
};
export type ApplicationDtov2 = {
    id?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    url?: string;
    projectId?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type RuntimeSpecDto = {
    id: string;
};
export type ResourcesDto = {
    memory: string;
    cpu: number;
};
export type HpaDto = {
    enabled: boolean;
    max: number;
    min: number;
    cpu: number;
};
export type ContainerValuesDto = {
    resources: ResourcesDto;
    volume: string;
    hpa: HpaDto;
};
export type ContainerSpecDto = {
    port: string;
    healthCheckPath: string;
    envVars: {
        [key: string]: string;
    };
    imageUrl: string;
    versionTag: string;
    values: ContainerValuesDto;
};
export type SpecDto = {
    runtime: RuntimeSpecDto;
    container: ContainerSpecDto;
};
export type CreateDeploymentRequest = {
    ulid?: string;
    kind: string;
    apiVersion: string;
    runtimeId: number;
    sourceId: string;
    imageUrl: string;
    metadata?: {
        [key: string]: object;
    };
    action: "START" | "STOP" | "RESTART" | "DEPLOY";
    sourceType: string;
    spec: SpecDto;
};
export type ApplicationDto = {
    id?: number;
    ulid?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    projectId: number;
    url?: string;
    projectUlid?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type CreateApplicationResponse = {
    id?: number;
    ulid?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    projectId: number;
    url?: string;
    projectUlid?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type ProjectDtov2 = {
    id: string;
    name: string;
    description: string;
    environment: string;
    region?: string;
};
export type AddOnDto = {
    name: string;
    description: string;
};
export type RuntimeDtov2 = {
    id: string;
    name: string;
    description: string;
    "type": "CONTAINER" | "STATIC";
    projects: ProjectDtov2[];
    tags: string[];
    env?: string;
    addons: AddOnDto[];
};
export type RepositoryResponse = {
    repositoryName: string;
    repositoryUri: string;
};
export type ListRepositoryResponse = {
    repositories: RepositoryResponse[];
    totalCount: number;
    limit: number;
    offset: number;
};
export type ImageResponse = {
    imageUri: string;
    tags: string[];
};
export type GetRuntimesByProjectUlidV2 = {
    runtimes: RuntimeDtov2[];
};
export type PaginatedResponseApplicationDto = {
    content?: ApplicationDto[];
    last?: boolean;
    totalElements?: number;
    totalPages?: number;
    first?: boolean;
    size?: number;
    "number"?: number;
    numberOfElements?: number;
    empty?: boolean;
};
export type StatusResponse = {
    status: "UP" | "DEPLOYING" | "STOPPED" | "UNKNOWN";
};
export type GetDeploymentLogsResponse = {
    logs: string;
};
export type HealthResponse = {
    health: "HEALTHY" | "UNHEALTHY";
};
export type GetApplicationByUlidResponseV2 = {
    id?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    url?: string;
    projectId?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type GetInstanceResponse = {
    used: number;
    available: number;
};
export type ApplicationHistoryResponse = {
    applicationId?: string;
    runtimeName?: string;
    creator?: string;
    action: string;
    date: string;
};
export type ListApplicationHistoryResponse = {
    applicationId: string;
    applicationHistory: ApplicationHistoryResponse[];
};
export type BasicDeploymentResponse = {
    deploymentId: string;
    runtimeName: string;
    deploymentStatus: string;
    runtimeEnv: string;
};
export type GetApplicationByProjectResponse = {
    name: string;
    id: string;
    description: string;
    "type": string;
    creator: string;
    projectId: string;
    url?: string;
};
export type PaginatedResponseGetApplicationByProjectResponse = {
    content?: GetApplicationByProjectResponse[];
    last?: boolean;
    totalElements?: number;
    totalPages?: number;
    first?: boolean;
    size?: number;
    "number"?: number;
    numberOfElements?: number;
    empty?: boolean;
};
export type ProjectDto = {
    ulid: string;
    name: string;
    description: string;
    environment: string;
    region?: string;
};
export type GetRuntimeByUlidResponse = {
    ulid: string;
    name: string;
    description: string;
    "type": "CONTAINER" | "STATIC";
    projects: ProjectDto[];
    tags: {
        [key: string]: string;
    };
};
export type RegistryDto = {
    id: string;
    name?: string;
    projectId?: string;
    "type": "ECR";
};
export type ListResponseRegistryDto = {
    totalCount: number;
    limit: number;
    offset: number;
    data: RegistryDto[];
};
export type RepositoryDto = {
    id: string;
    name: string;
    registryId: string;
    repositoryUri: string;
};
export type ImageDto = {
    imageUri: string;
    tags: string[];
    digest?: string;
};
export type RuntimeDto = {
    ulid: string;
    name: string;
    description: string;
    "type": "CONTAINER" | "STATIC";
    projects: ProjectDto[];
    tags: {
        [key: string]: string;
    };
};
export type GetRuntimesByProjectUlid = {
    runtimes: RuntimeDto[];
};
export type GetApplicationByUlidResponse = {
    id?: number;
    ulid?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    projectId: number;
    url?: string;
    projectUlid?: string;
    createdAt?: string;
    updatedAt?: string;
};
export function createSchedule({ scheduleRequest }: {
    scheduleRequest: ScheduleRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ScheduleResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v2/schedule", oazapfts.json({
        ...opts,
        method: "POST",
        body: scheduleRequest
    })));
}
export function createDeployment({ authorization, createDeploymentRequestV2 }: {
    authorization: string;
    createDeploymentRequestV2: CreateDeploymentRequestV2;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v2/deployments", oazapfts.json({
        ...opts,
        method: "POST",
        body: createDeploymentRequestV2,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function setAutoscaling({ authorization, setAutoscalingRequest }: {
    authorization: string;
    setAutoscalingRequest: SetAutoscalingRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateDeploymentResponseV2;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v2/deployments/autoscaling", oazapfts.json({
        ...opts,
        method: "POST",
        body: setAutoscalingRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function cleanDeployments({ authorization }: {
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v2/clean/deployments", {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function cleanApplications({ authorization }: {
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v2/clean/applications", {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createApplication({ authorization, applicationDtov2 }: {
    authorization: string;
    applicationDtov2: ApplicationDtov2;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApplicationDtov2;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v2/applications", oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDtov2,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function stopApplication({ authorization, applicationId, runtimeId }: {
    authorization: string;
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/stop${QS.query(QS.explode({
        applicationId,
        runtimeId
    }))}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function startApplication({ authorization, applicationId, runtimeId }: {
    authorization: string;
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/start${QS.query(QS.explode({
        applicationId,
        runtimeId
    }))}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function restartApplication({ authorization, applicationId, runtimeId }: {
    authorization: string;
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/restart${QS.query(QS.explode({
        applicationId,
        runtimeId
    }))}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createRuntimeTag({ tagId, runtimeId }: {
    tagId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/tags/${encodeURIComponent(tagId)}/${encodeURIComponent(runtimeId)}`, {
        ...opts,
        method: "POST"
    }));
}
export function createDeployment1({ createDeploymentRequest }: {
    createDeploymentRequest: CreateDeploymentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v1/deployments", oazapfts.json({
        ...opts,
        method: "POST",
        body: createDeploymentRequest
    })));
}
export function getNamespace(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v1/deployments/namespace", {
        ...opts
    }));
}
export function createNamespace(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v1/deployments/namespace", {
        ...opts,
        method: "POST"
    }));
}
export function createApplication1({ applicationDto }: {
    applicationDto: ApplicationDto;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateApplicationResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>("/v1/applications", oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDto
    })));
}
export function getScheduling({ applicationId, runtimeId }: {
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ScheduleResponse[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/schedule/${encodeURIComponent(applicationId)}/runtime/${encodeURIComponent(runtimeId)}`, {
        ...opts
    }));
}
export function getRuntimeByUlid({ runtimeId }: {
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: RuntimeDtov2;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/runtimes/${encodeURIComponent(runtimeId)}`, {
        ...opts
    }));
}
export function listRepositories({ limit, offset }: {
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListRepositoryResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/registries/repositories${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getRepositoryImages({ repositoryId }: {
    repositoryId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ImageResponse[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/registries/repositories/${encodeURIComponent(repositoryId)}/images`, {
        ...opts
    }));
}
export function listRuntimes({ projectId }: {
    projectId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetRuntimesByProjectUlidV2;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/projects/${encodeURIComponent(projectId)}/runtimes`, {
        ...opts
    }));
}
export function listApplications({ projectId, limit, offset }: {
    projectId: string;
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PaginatedResponseApplicationDto;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/projects/${encodeURIComponent(projectId)}/applications${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getDeployment({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateDeploymentResponseV2;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/deployments/${encodeURIComponent(deploymentId)}`, {
        ...opts
    }));
}
export function getDeploymentStatus({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StatusResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/deployments/${encodeURIComponent(deploymentId)}/status`, {
        ...opts
    }));
}
export function getDeploymentLogs({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetDeploymentLogsResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/deployments/${encodeURIComponent(deploymentId)}/logs`, {
        ...opts
    }));
}
export function getDeploymentHealth({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: HealthResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/deployments/${encodeURIComponent(deploymentId)}/health`, {
        ...opts
    }));
}
export function getApplication({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetApplicationByUlidResponseV2;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function getSecrets({ applicationId, runtimeId }: {
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SecretVar[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/${encodeURIComponent(applicationId)}/${encodeURIComponent(runtimeId)}/secrets`, {
        ...opts
    }));
}
export function getInstances({ applicationId, runtimeId }: {
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetInstanceResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/${encodeURIComponent(applicationId)}/${encodeURIComponent(runtimeId)}/instances`, {
        ...opts
    }));
}
export function getApplicationHistory({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListApplicationHistoryResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/${encodeURIComponent(applicationId)}/history`, {
        ...opts
    }));
}
export function listDeployments({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: BasicDeploymentResponse[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/${encodeURIComponent(applicationId)}/deployments`, {
        ...opts
    }));
}
export function getLastDeploymentByRuntime({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: BasicDeploymentResponse[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/${encodeURIComponent(applicationId)}/deployments/last/runtime`, {
        ...opts
    }));
}
export function listApplications1({ projectId, limit, offset }: {
    projectId: string;
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PaginatedResponseGetApplicationByProjectResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v2/applications/project/${encodeURIComponent(projectId)}${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getRuntimeByUlid1({ runtimeId }: {
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetRuntimeByUlidResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/runtimes/${encodeURIComponent(runtimeId)}`, {
        ...opts
    }));
}
export function getRevisions({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/revision/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function list({ limit, offset }: {
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListResponseRegistryDto;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/registries${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function listRepositoriesByRegistryId({ limit, offset, id }: {
    limit?: number;
    offset?: number;
    id: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: RepositoryDto[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/registries/${encodeURIComponent(id)}/repositories${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function listRepositoriesByDefaultRegistryId({ limit, offset }: {
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/registries/repositories${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getImages({ repositoryName }: {
    repositoryName: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ImageDto[];
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/registries/repositories/${encodeURIComponent(repositoryName)}/images`, {
        ...opts
    }));
}
export function getRepositoryById({ id, registryId }: {
    id: string;
    registryId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: RepositoryDto;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/registries/repositories/${encodeURIComponent(id)}${QS.query(QS.explode({
        registryId
    }))}`, {
        ...opts
    }));
}
export function listRuntimes1({ projectId }: {
    projectId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetRuntimesByProjectUlid;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/projects/${encodeURIComponent(projectId)}/runtimes`, {
        ...opts
    }));
}
export function listApplications2({ projectId, limit, offset }: {
    projectId: string;
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PaginatedResponseApplicationDto;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/projects/${encodeURIComponent(projectId)}/applications${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getDeployment1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/deployments/${encodeURIComponent(deploymentId)}`, {
        ...opts
    }));
}
export function getDeploymentStatus1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/deployments/${encodeURIComponent(deploymentId)}/status`, {
        ...opts
    }));
}
export function getDeploymentLogs1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetDeploymentLogsResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/deployments/${encodeURIComponent(deploymentId)}/logs`, {
        ...opts
    }));
}
export function getDeploymentHealth1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/deployments/${encodeURIComponent(deploymentId)}/health`, {
        ...opts
    }));
}
export function getDeploymentsId({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/deployments/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function getApplication1({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetApplicationByUlidResponse;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function deleteDeployment({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    } | {
        status: 500;
        data: {
            instance?: string;
            "type"?: string;
            parameters?: {
                [key: string]: object;
            };
            title?: string;
            status?: StatusType;
            detail?: string;
        };
    }>(`/v1/deployments/${encodeURIComponent(id)}`, {
        ...opts,
        method: "DELETE"
    }));
}
