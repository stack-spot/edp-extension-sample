/**
 * Workflow API
 * 0.1.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "/",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {};
export type ConnectionRequest = {
    selected: string;
    alias: string;
};
export type ActionConnectionRequest = {
    requires?: ConnectionRequest[];
};
export type OriginRequest = {
    id: string;
    "type": "SHARED_INFRA" | "APPLICATION";
};
export type RunActionRequest = {
    name: string;
    inputs?: object;
    inputsSensitive?: string[];
    connections?: ActionConnectionRequest;
    workspaceId: string;
    env?: string | null;
    origin: OriginRequest;
    frontData?: object | null;
};
export type WorkflowResponse = {
    id: string;
    logs: string;
};
export type ExceptionType = "ACTIONAPI_0000_UNEXPECTED_ERROR" | "ACTIONAPI_0003_INVALID_WORKFLOW_URL" | "ACTIONAPI_0004_WORKFLOW_NOT_IMPLEMENTED" | "ACTIONAPI_0005_WORKFLOW_SCRIPT_DOWNLOAD_UNAUTHORIZED" | "ACTIONAPI_0006_UPDATE_MAX_TRY" | "ACTIONAPI_2000_VALIDATION_ERROR" | "ACTIONAPI_5999_HTTP_UNEXPECTED_ERROR" | "ACTIONAPI_2200_NOT_FOUND" | "ACTIONAPI_2201_CONFLICT" | "ACTIONAPI_2202_OPERATION_NOT_ALLOWED" | "ACTIONAPI_2203_REFERENCE_NOT_FOUND" | "ACTIONAPI_2204_JOB_IS_NOT_VALID_REFERENCE" | "ACTIONAPI_2205_INVALID_REFERENCE_STEP_IS_NOT_WORKFLOW" | "ACTIONAPI_3000_AWS_SECRET_MANAGER_GET_SECRET_FAILURE" | "ACTIONAPI_3001_AWS_SECRET_MANAGER_PARSE_SECRET_ERROR" | "ACTIONAPI_5000_GITHUB_DISPATCH_WORKFLOW_FAILURE" | "ACTIONAPI_5001_GITHUB_DISPATCH_WORKFLOW_NOT_FOUND" | "ACTIONAPI_5002_GITHUB_DISPATCH_WORKFLOW_UNAUTHORIZED" | "ACTIONAPI_5003_GITHUB_DISPATCH_WORKFLOW_FORBIDDEN" | "ACTIONAPI_5004_GITHUB_SAML_ERROR" | "ACTIONAPI_5009_GITHUB_AUTHORIZATION_ENCODING_ERROR" | "ACTIONAPI_5010_GITHUB_ACTIONS_RUNS_FAILURE" | "ACTIONAPI_5011_GITHUB_ACTIONS_RUNS_NOT_FOUND" | "ACTIONAPI_5012_GITHUB_ACTIONS_RUNS_UNAUTHORIZED" | "ACTIONAPI_5019_GITHUB_ACTIONS_RUNS_PAYLOAD_PARSER_ERROR" | "ACTIONAPI_5020_GITHUB_APP_INSTALLATION_ACCESS_TOKEN_FAILURE" | "ACTIONAPI_5021_GITHUB_APP_INSTALLATION_ACCESS_TOKEN_NOT_FOUND" | "ACTIONAPI_5022_GITHUB_APP_INSTALLATION_ACCESS_TOKEN_UNAUTHORIZED" | "ACTIONAPI_5029_GITHUB_APP_INSTALLATION_ACCESS_TOKEN_PAYLOAD_PARSER_ERROR" | "ACTIONAPI_5030_GITHUB_CREATE_ISSUE_FAILURE" | "ACTIONAPI_5031_GITHUB_CREATE_ISSUE_NOT_FOUND" | "ACTIONAPI_5032_GITHUB_CREATE_ISSUE_UNAUTHORIZED" | "ACTIONAPI_5033_GITHUB_CREATE_ISSUE_FORBIDDEN" | "ACTIONAPI_5039_GITHUB_CREATE_ISSUE_PAYLOAD_PARSER_ERROR" | "ACTIONAPI_5040_GITHUB_LIST_EXECUTION_JOBS_FAILURE" | "ACTIONAPI_5049_GITHUB_LIST_EXECUTION_JOBS_PAYLOAD_PARSER_ERROR" | "ACTIONAPI_5100_ACCOUNT_SERVICE_GET_ACCOUNT_PROVIDER_FAILURE" | "ACTIONAPI_5101_ACCOUNT_SERVICE_GET_ACCOUNT_PROVIDER_FORBIDDEN" | "ACTIONAPI_5102_ACCOUNT_SERVICE_GET_ACCOUNT_PROVIDER_NOT_FOUND" | "ACTIONAPI_5103_ACCOUNT_SERVICE_GET_ACCOUNT_PROVIDER_NOT_IMPLEMENTED" | "ACTIONAPI_5109_ACCOUNT_SERVICE_GET_ACCOUNT_PROVIDER_PARSE_RESPONSE_ERROR" | "ACTIONAPI_E5110_ACCOUNT_SERVICE_GET_ACCOUNT_TOKEN_FAILURE" | "ACTIONAPI_E5111_ACCOUNT_SERVICE_GET_ACCOUNT_TOKEN_FORBIDDEN" | "ACTIONAPI_E5112_ACCOUNT_SERVICE_GET_ACCOUNT_TOKEN_NOT_FOUND" | "ACTIONAPI_E5119_ACCOUNT_SERVICE_GET_ACCOUNT_TOKEN_RESPONSE_PARSE_ERROR" | "ACTIONAPI_E5120_ACCOUNT_SERVICE_GET_USER_SCM_FAILURE" | "ACTIONAPI_E5121_ACCOUNT_SERVICE_GET_USER_SCM_FORBIDDEN" | "ACTIONAPI_E5122_ACCOUNT_SERVICE_GET_USER_SCM_NOT_FOUND" | "ACTIONAPI_E5129_ACCOUNT_SERVICE_GET_USER_SCM_RESPONSE_PARSE_ERROR" | "ACTIONAPI_E5120_ACCOUNT_SERVICE_LIST_ACCOUNTS_FAILURE" | "ACTIONAPI_E5121_ACCOUNT_SERVICE_LIST_ACCOUNTS_FORBIDDEN" | "ACTIONAPI_E5122_ACCOUNT_SERVICE_LIST_ACCOUNTS_NOT_FOUND" | "ACTIONAPI_E5129_ACCOUNT_SERVICE_LIST_ACCOUNTS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_E5130_ACCOUNT_SERVICE_LIST_FEATURE_FLAGS_FAILURE" | "ACTIONAPI_E5131_ACCOUNT_SERVICE_LIST_FEATURE_FLAGS_FORBIDDEN" | "ACTIONAPI_E5132_ACCOUNT_SERVICE_LIST_FEATURE_FLAGS_NOT_FOUND" | "ACTIONAPI_E5139_ACCOUNT_SERVICE_LIST_FEATURE_FLAGS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_E5150_ACCOUNT_SERVICE_GET_MEMBERS_FAILURE" | "ACTIONAPI_E5151_ACCOUNT_SERVICE_GET_MEMBERS_FORBIDDEN" | "ACTIONAPI_E5152_ACCOUNT_SERVICE_GET_MEMBERS_NOT_FOUND" | "ACTIONAPI_E5159_ACCOUNT_SERVICE_GET_MEMBERS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_E5160_ACCOUNT_SERVICE_GET_SERVICE_CREDENTIALS_FAILURE" | "ACTIONAPI_E5161_ACCOUNT_SERVICE_GET_SERVICE_CREDENTIALS_FORBIDDEN" | "ACTIONAPI_E5162_ACCOUNT_SERVICE_GET_SERVICE_CREDENTIALS_NOT_FOUND" | "ACTIONAPI_E5169_ACCOUNT_SERVICE_GET_SERVICE_CREDENTIALS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5200_AZURE_LIST_PIPELINE_FAILURE" | "ACTIONAPI_5201_AZURE_LIST_PIPELINE_NOT_FOUND" | "ACTIONAPI_5202_AZURE_LIST_PIPELINE_UNAUTHORIZED" | "ACTIONAPI_5209_AZURE_LIST_PIPELINE_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5210_AZURE_RUN_PIPELINE_FAILURE" | "ACTIONAPI_5211_AZURE_RUN_PIPELINE_NOT_FOUND" | "ACTIONAPI_5212_AZURE_RUN_PIPELINE_UNAUTHORIZED" | "ACTIONAPI_5219_AZURE_RUN_PIPELINE_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5220_AZURE_GET_BUILD_FAILURE" | "ACTIONAPI_5221_AZURE_GET_BUILD_NOT_FOUND" | "ACTIONAPI_5222_AZURE_GET_BUILD_UNAUTHORIZED" | "ACTIONAPI_5223_AZURE_GET_BUILD_FORBIDDEN" | "ACTIONAPI_E5300_WORKSPACE_SERVICE_GET_WORKSPACE_FAILURE" | "ACTIONAPI_E5301_WORKSPACE_SERVICE_GET_WORKSPACE_FORBIDDEN" | "ACTIONAPI_E5302_WORKSPACE_SERVICE_GET_WORKSPACE_NOT_FOUND" | "ACTIONAPI_E5309_WORKSPACE_SERVICE_GET_WORKSPACE_RESPONSE_PARSE_ERROR" | "ACTIONAPI_E5300_WORKSPACE_SERVICE_GET_APP_FAILURE" | "ACTIONAPI_E5301_WORKSPACE_SERVICE_GET_APP_FORBIDDEN" | "ACTIONAPI_E5302_WORKSPACE_SERVICE_GET_APP_NOT_FOUND" | "ACTIONAPI_E5309_WORKSPACE_SERVICE_GET_APP_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5400_BITBUCKET_RUN_PIPELINE_FAILURE" | "ACTIONAPI_5401_BITBUCKET_RUN_PIPELINE_NOT_FOUND" | "ACTIONAPI_5402_BITBUCKET_RUN_PIPELINE_UNAUTHORIZED" | "ACTIONAPI_5403_BITBUCKET_RUN_PIPELINE_BAD_REQUEST" | "ACTIONAPI_5409_BITBUCKET_RUN_PIPELINE_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5410_BITBUCKET_GET_PIPELINE_FAILURE" | "ACTIONAPI_5411_BITBUCKET_GET_PIPELINE_NOT_FOUND" | "ACTIONAPI_5412_BITBUCKET_GET_PIPELINE_UNAUTHORIZED" | "ACTIONAPI_5419_BITBUCKET_GET_PIPELINE_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5420_BITBUCKET_LIST_PIPELINE_STEPS_FAILURE" | "ACTIONAPI_5421_BITBUCKET_LIST_PIPELINE_STEPS_NOT_FOUND" | "ACTIONAPI_5422_BITBUCKET_LIST_PIPELINE_STEPS_UNAUTHORIZED" | "ACTIONAPI_5429_BITBUCKET_LIST_PIPELINE_STEPS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5500_GITLAB_TRIGGER_PIPELINE_FAILURE" | "ACTIONAPI_5501_GITLAB_TRIGGER_PIPELINE_NOT_FOUND" | "ACTIONAPI_5502_GITLAB_TRIGGER_PIPELINE_UNAUTHORIZED" | "ACTIONAPI_5509_GITLAB_TRIGGER_PIPELINE_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5510_GITLAB_GET_TRIGGERS_FAILURE" | "ACTIONAPI_5511_GITLAB_GET_TRIGGERS_NOT_FOUND" | "ACTIONAPI_5512_GITLAB_GET_TRIGGERS_UNAUTHORIZED" | "ACTIONAPI_5519_GITLAB_GET_TRIGGERS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5520_GITLAB_LIST_TRIGGERS_FAILURE" | "ACTIONAPI_5522_GITLAB_LIST_TRIGGERS_UNAUTHORIZED" | "ACTIONAPI_5529_GITLAB_LIST_TRIGGERS_RESPONSE_PARSE_ERROR" | "ACTIONAPI_5600_IAM_GENERATE_TOKEN_FAILURE" | "ACTIONAPI_5610_IAM_INTROSPECT_TOKEN_FAILURE" | "ACTIONAPI_5619_IAM_INTROSPECT_TOKEN_RESPONSE_PARSE_ERROR";
export type BadRequestExceptionTypes = "ACTIONAPI_1001_DECODE_JWT_ERROR" | "ACTIONAPI_2001_BAD_REQUEST_REQUIRED_FIELD" | "ACTIONAPI_2002_BAD_REQUEST_EMPTY_FIELD_NOT_ALLOWED" | "ACTIONAPI_2003_BAD_REQUEST_TYPE_FIELD_NOT_ALLOWED" | "ACTIONAPI_2004_BAD_REQUEST_VALUE_FIELD_NOT_ALLOWED" | "ACTIONAPI_2005_BAD_REQUEST_VALUE_FIELD_MAX_LENGTH" | "ACTIONAPI_2006_BAD_REQUEST_VALUE_FIELD_MIN_LENGTH" | "ACTIONAPI_2007_BAD_REQUEST_VALUE_REGEX_DOESNT_MATCH" | "ACTIONAPI_2008_BAD_REQUEST_VALUE_FIELD_NUMBER_NOT_LT" | "ACTIONAPI_2100_CREATE_BODY_REPO_AND_REPO_CREATE_ACTION" | "ACTIONAPI_2101_CREATE_BODY_NOT_REPO_AND_NOT_REPO_CREATE_ACTION" | "ACTIONAPI_2102_BAD_REQUEST_DATE_MAX_INTERVAL" | "ACTIONAPI_2103_BAD_REQUEST_INVALID_PAGE" | "ACTIONAPI_2104_BAD_REQUEST_DUPLICATED_ALIAS" | "ACTIONAPI_2105_BAD_REQUEST_INVALID_REPO_URL" | "ACTIONAPI_2110_BAD_REQUEST_PUT_STEP_STATUS_COMPLETED_WITHOUT_CONCLUSION" | "ACTIONAPI_2112_BAD_REQUEST_PUT_STEP_STATUS_NOT_COMPLETED_AND_CONCLUSION_DEFINED" | "ACTIONAPI_2113_BAD_REQUEST_PUT_STEP_STATUS_COMPLETED_AND_COMPLETED_AT_NOT_DEFINED" | "ACTIONAPI_2114_BAD_REQUEST_PUT_STEP_STATUS_IN_PROGRESS_AND_STARTED_AT_NOT_DEFINED" | "ACTIONAPI_2115_BAD_REQUEST_PUT_STEP_COMPLETED_AT_DEFINED_AND_STATUS_NOT_COMPLETED" | "ACTIONAPI_2116_BAD_REQUEST_PUT_STEP_STARTED_AT_DEFINED_AND_STATUS_PENDING" | "ACTIONAPI_2117_BAD_REQUEST_PUT_STEP_LOG_DEFINED_AND_CONCLUSION_IS_NOT_FAILURE" | "ACTIONAPI_2120_BAD_REQUEST_MULTIPLE_INTEGRATION" | "ACTIONAPI_2121_BAD_REQUEST_EMPTY_INTEGRATION" | "ACTIONAPI_2999_BAD_REQUEST_UNMAPPED";
export type InvalidPayloadDetails = {
    code: BadRequestExceptionTypes;
    field: string | null;
};
export type HttpErrorResponse = {
    status: string;
    code: ExceptionType;
    details: string;
    validationDetails?: InvalidPayloadDetails[] | null;
};
export type OriginRequest2 = {
    id: string;
};
export type PluConnectionRequest = {
    selected: string;
    alias: string;
    "type": string;
};
export type PluginConnectionsRequest = {
    requires?: PluConnectionRequest[];
    generates?: PluConnectionRequest[];
};
export type PluginRequest = {
    name: string;
    alias: string;
    inputs?: object;
    inputsSensitive?: string[];
    inputsEnv?: {
        [key: string]: object;
    };
    connections?: PluginConnectionsRequest;
};
export type AppRequest = {
    starter: string;
    name: string;
    repo?: string | null;
    description: string;
    plugins: PluginRequest[];
};
export type ActConnectionRequest = {
    selected: string;
    alias: string;
};
export type ActionConnectionRequest2 = {
    requires?: ActConnectionRequest[];
};
export type ActionRequest = {
    name: string;
    inputs?: object;
    inputsSensitive?: string[];
    repoCreate?: boolean;
    connections?: ActionConnectionRequest2;
};
export type CreateAppRequest = {
    workspaceId: string;
    origin: OriginRequest2;
    app: AppRequest;
    actionsBefore?: ActionRequest[];
    actionsAfter?: ActionRequest[];
    originBranch?: string | null;
    newBranch?: string | null;
    frontData?: object | null;
};
export type ApiRequest = {
    id: string;
    repo?: string | null;
};
export type ActionConnectionRequest3 = {
    requires?: ActConnectionRequest[];
};
export type ActionRequest2 = {
    name: string;
    inputs?: object | null;
    inputsSensitive?: string[] | null;
    repoCreate?: boolean | null;
    connections?: ActionConnectionRequest3 | null;
};
export type CreateApiRequest = {
    workspaceId: string;
    api: ApiRequest;
    actionsAfter?: ActionRequest2[];
    actionsBefore?: ActionRequest2[];
    originBranch?: string | null;
    newBranch?: string | null;
    frontData?: object | null;
};
export type OriginRequest3 = {
    id: string;
};
export type PluginConnectionsRequest2 = {
    requires?: PluConnectionRequest[];
    generates?: PluConnectionRequest[];
};
export type PluginRequest2 = {
    name: string;
    alias: string;
    inputs?: object;
    inputsSensitive?: string[];
    inputsEnv?: {
        [key: string]: object;
    };
    connections?: PluginConnectionsRequest2;
};
export type InfraRequest = {
    stack: string;
    name: string;
    repo?: string | null;
    description: string;
    plugins: PluginRequest2[];
};
export type ActionConnectionRequest4 = {
    requires?: ActConnectionRequest[];
};
export type ActionRequest3 = {
    name: string;
    inputs?: object;
    inputsSensitive?: string[];
    repoCreate?: boolean;
    connections?: ActionConnectionRequest4;
};
export type CreateInfraRequest = {
    workspaceId: string;
    origin: OriginRequest3;
    infra: InfraRequest;
    actionsBefore?: ActionRequest3[];
    actionsAfter?: ActionRequest3[];
    originBranch?: string | null;
    newBranch?: string | null;
    frontData?: object | null;
};
export type OriginRequest4 = {
    id: string;
    "type": "SHARED_INFRA" | "APPLICATION";
};
export type PluginConnectionsRequest3 = {
    requires?: ConnectionRequest[];
};
export type ApplyPluginRequest = {
    workspaceId: string;
    origin: OriginRequest4;
    name: string;
    alias: string;
    repo: string;
    connections?: PluginConnectionsRequest3;
    inputs: object;
    inputsEnv: {
        [key: string]: object;
    };
    inputsSensitive: string[] | null;
    originBranch?: string | null;
    newBranch?: string | null;
    frontData?: object | null;
};
export type AuthorizationPat = {
    user: string | null;
    token: string;
};
export type AuthorizationGithubApp = {
    app_id: string;
    private_key: string;
    installation_id: string;
};
export type Provider = "github_issues" | "github" | "azure" | "bitbucket" | "gitlab";
export type HealthCheckRequest = {
    scm_auth?: AuthorizationPat | AuthorizationGithubApp | null;
    workflow_url?: string | null;
    provider?: Provider | null;
};
export type ConclusionStatus = "success" | "failure" | "skipped" | "cancelled" | "deleted" | "timeout" | null;
export type StepReportRequest = {
    name: string;
    conclusion: ConclusionStatus;
    started_at: string;
    completed_at: string;
    log?: string | null;
};
export type ValidationError = {
    loc: (string | number)[];
    msg: string;
    "type": string;
};
export type HttpValidationError = {
    detail?: ValidationError[];
};
export type ExecutionStatus = "pending" | "in_progress" | "completed" | "timeout" | null;
export type ProviderDataResponse = {
    htmlUrl?: string | null;
};
export type StepResponse = {
    name: string;
    /** (queued, in_progress, completed) */
    status: ExecutionStatus;
    startedAt?: string | null;
    completedAt?: string | null;
    conclusion?: ConclusionStatus | null;
    log?: string | null;
};
export type JobResponse = {
    name: string;
    /** (queued, in_progress, completed) */
    status: ExecutionStatus | null;
    startedAt?: string | null;
    completedAt?: string | null;
    conclusion?: ConclusionStatus | null;
    steps?: StepResponse[];
};
export type ExecutionResponse = {
    executionId: string;
    externalId?: string | null;
    /** (pending, queued, in_progress, completed) */
    status: ExecutionStatus | null;
    conclusion?: ConclusionStatus | null;
    providerData?: ProviderDataResponse | null;
    jobs?: JobResponse[];
    createdAt: string;
    updatedAt?: string | null;
    user_id?: string | null;
};
export type CreateSemaphoreResponse = {
    id: string;
};
export type SemaphoreStatus = "pending" | "success" | "fail";
export type GetSemaphoreResponse = {
    id: string;
    created_at: string;
    updated_at: string;
    status: SemaphoreStatus;
    details: string;
};
export type UpdateSemaphoreRequest = {
    status: SemaphoreStatus;
    details?: string;
};
export type WorkspaceRequest = {
    id: string;
    slug: string;
};
export type GitlabIntegrationRequest = {
    projectId: string;
    triggerDescription?: string;
    triggerId?: string | null;
    branch?: string | null;
    apiDomain?: string;
};
export type GithubIntegrationRequest = {
    workflowName?: string;
    org: string;
    repositoryName: string;
    branch?: string | null;
};
export type AzureIntegrationRequest = {
    pipelineName?: string;
    org: string;
    projectName: string;
};
export type ScmIntegrationRequest = {
    gitlab?: GitlabIntegrationRequest | null;
    github?: GithubIntegrationRequest | null;
    azure?: AzureIntegrationRequest | null;
};
export type CreateWorkflowExecutionRequest = {
    workspace?: WorkspaceRequest | null;
    integration?: ScmIntegrationRequest | null;
};
export type WorkflowExecutionStatus = "pending" | "in_progress" | "completed" | "suspended";
export type WorkflowExecutionConclusion = "error" | "success" | "skipped" | "canceled";
export type WorkflowExecutionResponse = {
    id: string;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    webUrl: string;
};
export type WorkflowType = "starter" | "create" | "deploy" | "rollback" | "destroy" | "reusable";
export type StepWorkflowRequest = {
    "type": "workflow";
    jobs: JobRequest[];
};
export type StepActionRequest = {
    "type": "action";
};
export type StepPluginRequest = {
    "type": "plugin";
};
export type StepSuspendRequest = {
    "type": "suspend";
    checkRole?: boolean;
};
export type StepRunShellRequest = {
    "type": "run";
};
export type StepRequest = {
    id: string;
    label?: string | null;
    spec: StepWorkflowRequest | StepActionRequest | StepPluginRequest | StepSuspendRequest | StepRunShellRequest;
};
export type JobRequest = {
    id: string;
    label: string;
    dependsOn?: string[];
    steps: StepRequest[];
};
export type TargetType = "app" | "infra";
export type TargetRequest = {
    id: string;
    "type": TargetType;
};
export type EnvRequest = {
    id: string;
    slug: string;
};
export type CreateWorkflowExecutionWorkflowRequest = {
    name: string;
    label: string;
    "type": WorkflowType;
    inputs: {
        [key: string]: any | null;
    };
    jobs: JobRequest[];
    targets: TargetRequest[];
    env?: EnvRequest | null;
};
export type PutWorkflowExecutionWorkflowStepRequest = {
    reference: string;
    status: WorkflowExecutionStatus;
    conclusion?: WorkflowExecutionConclusion | null;
    startedAt?: string | null;
    completedAt?: string | null;
    log?: string | null;
    cliState?: object;
};
export type UserResponse = {
    id: string;
    ip?: string | null;
    name: string;
    email: string | null;
};
export type StepResponse2 = {
    label: string;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    startedAt?: string | null;
    completedAt?: string | null;
    completedBy?: UserResponse | null;
};
export type JobResponse2 = {
    label: string;
    dependsOn?: string[];
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    startedAt?: string | null;
    completedAt?: string | null;
    suspendMessage?: string | null;
    steps: StepResponse2[];
    progress: number;
};
export type WorkflowResponse2 = {
    name: string;
    label: string;
    "type": WorkflowType;
    inputs: {
        [key: string]: any | null;
    };
    jobs: {
        [key: string]: JobResponse2;
    };
    progress: number;
};
export type GetWorkflowExecutionJobGraphResponse = {
    id: string;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    workflow?: WorkflowResponse2 | null;
    createdBy: UserResponse;
    startedAt?: string | null;
    completedAt?: string | null;
};
export type StepTypeEnum = "action" | "workflow" | "plugin" | "suspend" | "run";
export type StepResponse3 = {
    label: string;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    log?: string | null;
    "type": StepTypeEnum;
    startedAt?: string | null;
    completedAt?: string | null;
    completedBy?: UserResponse | null;
};
export type WorkflowJobDetailResponse = {
    label: string;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    steps: StepResponse3[];
    startedAt?: string | null;
    completedAt?: string | null;
};
export type EnvResponse = {
    id: string;
    slug: string;
};
export type StepResponse4 = {
    id: string;
    cliState: object;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    jobs: JobResponse3[];
};
export type JobResponse3 = {
    id: string;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
    steps: StepResponse4[];
};
export type WorkflowResponse3 = {
    name: string;
    inputs: {
        [key: string]: any | null;
    };
    env: EnvResponse | null;
    jobs: JobResponse3[];
};
export type WorkspaceResponse = {
    id: string;
    slug: string;
};
export type GetWorkflowExecutionCliStateResponse = {
    workflow: WorkflowResponse3;
    workspace: WorkspaceResponse | null;
    status: WorkflowExecutionStatus;
    conclusion: WorkflowExecutionConclusion | null;
};
export type WorkflowRequest = {
    name: string;
    label: string;
    "type": WorkflowType;
    inputs: {
        [key: string]: any | null;
    };
    targets: TargetRequest[];
    env?: EnvRequest | null;
};
export type DispatchWorkflowExecutionRequest = {
    workspace: WorkspaceRequest;
    workflow: WorkflowRequest;
    frontData?: object | null;
};
/**
 * Run Action Service
 */
export function runActionServiceWorkflowsRunActionDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, runActionRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    xExecutionId?: string | null;
    runActionRequest: RunActionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/workflows/run-action/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: runActionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Create App Service
 */
export function createAppServiceWorkflowsCreateAppDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, createAppRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    xExecutionId?: string | null;
    createAppRequest: CreateAppRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/workflows/create-app/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: createAppRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Create Api Service
 */
export function createApiServiceWorkflowsCreateApiDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, createApiRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    xExecutionId?: string | null;
    createApiRequest: CreateApiRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/workflows/create-api/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: createApiRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Create Infra Service
 */
export function createInfraServiceWorkflowsCreateInfraDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, createInfraRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    xExecutionId?: string | null;
    createInfraRequest: CreateInfraRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/workflows/create-infra/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: createInfraRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Apply Plugin Service
 */
export function applyPluginServiceWorkflowsApplyPluginDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, applyPluginRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    xExecutionId?: string | null;
    applyPluginRequest: ApplyPluginRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/workflows/apply-plugin/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: applyPluginRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Health Check Service
 */
export function healthCheckServiceWorkflowsHealthCheckDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, body }: {
    authorization: string;
    stackspotCustomerIp?: string;
    xExecutionId?: string | null;
    body?: HealthCheckRequest | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/workflows/health-check/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Step Report Service
 */
export function stepReportServiceExecutionsExecutionIdWorkflowsStepsReportPost({ executionId, authorization, stepReportRequest }: {
    executionId: string;
    authorization: string;
    stepReportRequest: StepReportRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/executions/${encodeURIComponent(executionId)}/workflows/steps/report`, oazapfts.json({
        ...opts,
        method: "POST",
        body: stepReportRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * Get Execution Dispatch Request Service
 */
export function getExecutionDispatchRequestServiceWorkflowsExecutionIdRequestGet({ executionId, authorization }: {
    executionId: string;
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/workflows/${encodeURIComponent(executionId)}/request`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Get Execution Status Service
 */
export function getExecutionStatusServiceWorkflowsExecutionStatusExecutionIdGet({ executionId, authorization }: {
    executionId: string;
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ExecutionResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/workflows/execution-status/${encodeURIComponent(executionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Create Semaphore Service
 */
export function createSemaphoreServiceSemaphoresPost({ authorization }: {
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateSemaphoreResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/semaphores", {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Get Semaphore Service
 */
export function getSemaphoreServiceSemaphoresSemaphoreIdGet({ semaphoreId, authorization }: {
    semaphoreId: string;
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetSemaphoreResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/semaphores/${encodeURIComponent(semaphoreId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Update Semaphore Service
 */
export function updateSemaphoreServiceSemaphoresSemaphoreIdPut({ semaphoreId, authorization, updateSemaphoreRequest }: {
    semaphoreId: string;
    authorization: string;
    updateSemaphoreRequest: UpdateSemaphoreRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/semaphores/${encodeURIComponent(semaphoreId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateSemaphoreRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * V1 Create Workflow Execution Service
 */
export function v1CreateWorkflowExecutionServiceV1ExecutionsPost({ authorization, stackspotCustomerIp, createWorkflowExecutionRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    createWorkflowExecutionRequest: CreateWorkflowExecutionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 201;
        data: WorkflowExecutionResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/v1/executions", oazapfts.json({
        ...opts,
        method: "POST",
        body: createWorkflowExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
/**
 * V1 Put Workflow Execution Workflow Service
 */
export function v1PutWorkflowExecutionWorkflowServiceV1ExecutionsExecutionIdWorkflowsPut({ executionId, authorization, createWorkflowExecutionWorkflowRequest }: {
    executionId: string;
    authorization: string;
    createWorkflowExecutionWorkflowRequest: CreateWorkflowExecutionWorkflowRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}/workflows`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: createWorkflowExecutionWorkflowRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * V1 Report Workflow Step Service
 */
export function v1ReportWorkflowStepServiceV1ExecutionsExecutionIdStepsPut({ executionId, authorization, putWorkflowExecutionWorkflowStepRequest }: {
    executionId: string;
    authorization: string;
    putWorkflowExecutionWorkflowStepRequest: PutWorkflowExecutionWorkflowStepRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowExecutionResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}/steps`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: putWorkflowExecutionWorkflowStepRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * V1 Get Workflow Execution Job Graph Service
 */
export function v1GetWorkflowExecutionJobGraphServiceV1ExecutionsExecutionIdGet({ executionId, authorization }: {
    executionId: string;
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetWorkflowExecutionJobGraphResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * V1 Get Workflow Execution Job Detail Service
 */
export function v1GetWorkflowExecutionJobDetailServiceV1ExecutionsExecutionIdJobsJobIdGet({ executionId, jobId, authorization }: {
    executionId: string;
    jobId: string;
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowJobDetailResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}/jobs/${encodeURIComponent(jobId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * V1 Accept Workflow Execution Job Suspended Service
 */
export function v1AcceptWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdAcceptPost({ executionId, jobId, authorization, stackspotCustomerIp }: {
    executionId: string;
    jobId: string;
    authorization: string;
    stackspotCustomerIp?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetWorkflowExecutionJobGraphResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}/jobs/${encodeURIComponent(jobId)}/accept`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    }));
}
/**
 * V1 Refuse Workflow Execution Job Suspended Service
 */
export function v1RefuseWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdRefusePost({ executionId, jobId, authorization, stackspotCustomerIp }: {
    executionId: string;
    jobId: string;
    authorization: string;
    stackspotCustomerIp?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetWorkflowExecutionJobGraphResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}/jobs/${encodeURIComponent(jobId)}/refuse`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    }));
}
/**
 * V1 Get Workflow Execution Cli State Service
 */
export function v1GetWorkflowExecutionCliStateServiceV1ExecutionsExecutionIdStateGet({ executionId, authorization }: {
    executionId: string;
    authorization: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetWorkflowExecutionCliStateResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>(`/v1/executions/${encodeURIComponent(executionId)}/state`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * V1 Dispatch Workflow Execution Service
 */
export function v1DispatchWorkflowExecutionServiceV1WorkflowsDispatchPost({ authorization, stackspotCustomerIp, dispatchWorkflowExecutionRequest }: {
    authorization: string;
    stackspotCustomerIp?: string;
    dispatchWorkflowExecutionRequest: DispatchWorkflowExecutionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowExecutionResponse;
    } | {
        status: 400;
        data: HttpErrorResponse;
    } | {
        status: 401;
        data: HttpErrorResponse;
    } | {
        status: 404;
        data: HttpErrorResponse;
    } | {
        status: 422;
    } | {
        status: 500;
        data: HttpErrorResponse;
    } | {
        status: 503;
        data: HttpErrorResponse;
    }>("/v1/workflows/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: dispatchWorkflowExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
