/**
 * Workspace Secrets API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "https://workspace-workspace-secrets-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://workspace-workspace-secrets-api.dev.stackspot.com"
};
export type SecretValueResponse = {
    key: string;
    description: string;
    value: string;
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type ErrorResponse = {
    code: string;
    status: number;
    details: string;
    validationDetails?: ValidationDetails[];
};
export type UpdateSecretValueRequest = {
    value: string;
};
export type EditKeyRequest = {
    description: string;
};
export type SecretKeyResponse = {
    key: string;
    description: string;
};
export type CreateKeyRequest = {
    key: string;
    description: string;
};
export type EncryptRequest = {
    value: string;
};
export type EncryptResponse = {
    value: string;
};
export type DecryptRequest = {
    value: string;
};
export type DecryptResponse = {
    value: string;
};
export type SecretAvailabilityResponse = {
    definedKeys: string[];
    undefinedKeys: string[];
};
/**
 * Get a Secret Key value.
 */
export function getSecretValue({ key, executionId }: {
    key: string;
    executionId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SecretValueResponse;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/values/${encodeURIComponent(key)}${QS.query(QS.explode({
        executionId
    }))}`, {
        ...opts
    }));
}
/**
 * Edit a Secret Key value.
 */
export function updateSecretValue({ key, updateSecretValueRequest }: {
    key: string;
    updateSecretValueRequest: UpdateSecretValueRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/values/${encodeURIComponent(key)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateSecretValueRequest
    })));
}
/**
 * Delete a Secret Key value.
 */
export function deleteSecretValue({ key }: {
    key: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/values/${encodeURIComponent(key)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Edit a Secret Key.
 */
export function editKey({ key, editKeyRequest }: {
    key: string;
    editKeyRequest: EditKeyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/keys/${encodeURIComponent(key)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: editKeyRequest
    })));
}
/**
 * Delete a Secret Key.
 */
export function deleteKey({ key }: {
    key: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/keys/${encodeURIComponent(key)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * List all Secret Keys.
 */
export function getAll1(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SecretKeyResponse[];
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/secrets/keys", {
        ...opts
    }));
}
/**
 * Create a new Secret Key.
 */
export function createKey({ createKeyRequest }: {
    createKeyRequest: CreateKeyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/secrets/keys", oazapfts.json({
        ...opts,
        method: "POST",
        body: createKeyRequest
    })));
}
/**
 * Encrypt a value.
 */
export function encrypt({ encryptRequest }: {
    encryptRequest: EncryptRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: EncryptResponse;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/secrets/encryption/encrypt", oazapfts.json({
        ...opts,
        method: "POST",
        body: encryptRequest
    })));
}
/**
 * Decrypt a value.
 */
export function decrypt({ executionId, decryptRequest }: {
    executionId?: string;
    decryptRequest: DecryptRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: DecryptResponse;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/encryption/decrypt${QS.query(QS.explode({
        executionId
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: decryptRequest
    })));
}
/**
 * List all configured Secret Keys values.
 */
export function getAll({ executionId }: {
    executionId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SecretValueResponse[];
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/secrets/values${QS.query(QS.explode({
        executionId
    }))}`, {
        ...opts
    }));
}
/**
 * List all defined and not defined secret keys by the user.
 */
export function getAvailability(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SecretAvailabilityResponse;
    } | {
        status: 400;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/secrets/availability", {
        ...opts
    }));
}
