/**
 * FastAPI
 * 0.1.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "/",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {};
export type VisibilityLevelEnum = "account" | "personal" | "shared" | "workspace";
export type OrderEnum = "a-to-z" | "z-to-a" | "oldest-first" | "newest-first";
export type GetAiStackResponse = {
    id: string;
    name: string;
    use_case: string;
    programming_language: string;
    framework: string | null;
    test_framework: string | null;
    observability: string | null;
    patterns?: string[] | null;
    dependencies?: string[] | null;
    studio_id: string | null;
    image: string | null;
    cloud_provider: string | null;
    cloud_attributes: string[] | null;
    creator: string | null;
    visibility_level: string;
};
export type ValidationError = {
    loc: (string | number)[];
    msg: string;
    "type": string;
};
export type HttpValidationError = {
    detail?: ValidationError[];
};
export type NewAiStackRequest = {
    name: string;
    use_case: string;
    programming_language: string;
    framework?: string | null;
    test_framework?: string | null;
    observability?: string | null;
    patterns?: string[] | null;
    dependencies?: string[] | null;
    image?: string | null;
    cloud_provider?: string | null;
    cloud_attributes?: string[] | null;
};
export type NewAiStackResponse = {
    id: string;
};
export type UpdateAiStackRequest = {
    name: string | null;
    use_case: string | null;
    programming_language: string | null;
    framework: string | null;
    test_framework: string | null;
    observability: string | null;
    patterns: string[] | null;
    dependencies: string[] | null;
    image: string | null;
    cloud_provider: string | null;
    cloud_attributes: string[] | null;
};
export type AiStackForkRequest = {
    name: string;
    description: string | null;
};
export type NewProjectFilesRequest = {
    context?: object | null;
    project_id: string;
    encoded_project_files: string;
};
export type QuickActionsRequest = {
    context?: object | null;
    action: string;
    code: string;
    qc_execution_id?: string | null;
};
export type SimpleResponse = {
    answer: string;
    prompt_tokens: number;
    completion_tokens: number;
    total_cost?: string | null;
};
export type ChatRequest = {
    context?: object | null;
    user_prompt: string;
    project_id?: string | null;
};
export type SourceStackAi = {
    "type": "ai_stack";
    name: string;
    id: string;
};
export type SourceKnowledgeSource = {
    "type": "knowledge_source" | "cross_account";
    name: string;
    slug: string;
    document_type: string;
    document_score: number;
    document_id: string;
    id?: string | null;
};
export type SourceProjectFile = {
    "type"?: "project_file";
    name: string;
    slug: string;
    document_score: number;
    document_id: string;
    path: string;
};
export type KnowledgeSourceEvent = {
    "type": "knowledge_source";
    document_type?: string | null;
    name: string;
    slug: string;
    document_score?: number | null;
    document_id?: string | null;
    id?: string | null;
};
export type ChatResponse = {
    answer: string;
    prompt_tokens: number;
    completion_tokens: number;
    total_cost?: string | null;
    sources: (SourceStackAi | SourceKnowledgeSource | SourceProjectFile | KnowledgeSourceEvent)[];
};
export type EventTypeEnum = "code_injected" | "code_copied" | "custom_quick_command_execution" | "user_feedback_provided" | "copied_all";
export type SourceProjectFile2 = {
    "type"?: "project_file";
    name: string;
    slug: string;
    document_score: number;
    document_id: string;
    path: string;
};
export type QuickCommandEvent = {
    slug: string;
    "type": string;
    duration_execution: number;
    status_execution: string;
    message_error?: string | null;
    tokens_consumed?: string | null;
    execution_id?: string | null;
    qc_execution_id?: string | null;
    id?: string | null;
};
export type GenericEventRequest = {
    "type": EventTypeEnum;
    code: string;
    size: number;
    generated_at: number;
    feedback?: ("LIKE" | "DISLIKE") | null;
    chosen_feedback_options?: string[] | null;
    additional_feedback?: string | null;
    message_id?: string | null;
    knowledge_sources?: (string | SourceStackAi | SourceKnowledgeSource | SourceProjectFile2 | KnowledgeSourceEvent)[] | null;
    quick_command_event?: QuickCommandEvent | null;
    context?: object | null;
};
export type FileUploadType = "PROJECT" | "KNOWLEDGE_SOURCE";
export type NewFileUploadUrlRequest = {
    file_name: string;
    target_id: string;
    target_type: FileUploadType;
    expiration?: number | null;
};
export type NewFileUploadUrlResponse = {
    id: string;
    upload_url: string;
};
export type NewFileUploadFormResponse = {
    id: string;
    url: string;
    form: {
        [key: string]: string;
    };
};
export type FileUploadStatus = "NEW" | "PROCESSING" | "INDEXED" | "EXPIRED" | "ERROR" | "INDEXED_BUT_CLEANUP_FAILED";
export type SummaryPartResponse = {
    added: number;
    preserved: number;
    removed: number;
    errors: {
        [key: string]: string;
    };
};
export type FileUploadStatusResponse = {
    id: string;
    file_name: string;
    target_id: string;
    target_type: FileUploadType;
    status: FileUploadStatus;
    error_description: string | null;
    summary: SummaryPartResponse | null;
};
export type NewKnowledgeSourceRequest = {
    slug: string;
    name: string;
    description: string;
    "type": "API" | "SNIPPET" | "CUSTOM";
};
export type KnowledgeSourceTypeEnum = "snippet" | "api" | "event" | "custom" | "project_file" | "memory";
export type KnowledgeSourceItemResponse = {
    id: string;
    slug: string;
    name: string;
    description: string;
    "type": string;
    object_count: number;
    creator: string | null;
    visibility_level: string;
};
export type KnowledgeSourceResponse = {
    slug: string;
    name: string;
    description: string;
    "type": string;
    creator: string | null;
    "default": boolean;
    visibility_level: string;
};
export type KnowledgeSourcePatchesRequest = {
    name: string;
    description: string;
};
export type KnowledgeSourceDependenciesResponse = {
    workspaces?: string[];
};
export type KnowledgeSourceSimilaritySearchItemResponse = {
    doc: string;
    score: number;
    file_path: string | null;
};
export type KnowSourcePublishBatchRequest = {
    ids: string[];
};
export type ForkKnowledgeSourceRequest = {
    slug: string;
    name: string;
    description: string;
};
export type BodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost = {
    upload: Blob;
};
export type DocumentResponse = {
    page_content: string;
    metadata: object;
};
export type BodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost = {
    objects_zip: Blob;
};
export type SnippetKnowledgeSourceRequest = {
    use_case: string;
    code: string;
    language?: string | null;
};
export type CustomKnowledgeSourceRequest = {
    content: string;
};
export type SearchKnowledgeSourcesRequest = {
    knowledge_source_ids: string[];
};
export type KnowledgeSourcesDependenciesRequest = {
    ids: string[];
};
export type KnowledgeSourcesDependenciesResponseV2 = {
    ks_names?: string[] | null;
    error_ks_names?: string[] | null;
    missing_ks_list?: string[] | null;
};
export type AccountSettingsChangeLlmRequest = {
    llm_type: string | null;
    llm_data: object | null;
};
export type AccountSettingsChangeLimitRequest = {
    limit: number;
};
export type AccountSettingsChangeErqcRequest = {
    active: boolean;
    endpoint: string;
    headers?: object | null;
    auth_endpoint?: string | null;
    client_id?: string | null;
    client_secret?: string | null;
    client_cert?: string | null;
    client_key?: string | null;
};
export type TokensCurrentUsageResponse = {
    used: number;
    limit: number;
    renewal_date: string;
};
export type TokensMonthlyUsageResponse = {
    used: number;
    month: number;
};
export type AddWorkspaceKnowledgeSourceRequest = {
    knowledge_source_slugs: string[];
};
export type QuickCommandTypeRequest = "IDE" | "REMOTE";
export type Method = "GET" | "OPTIONS" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE";
export type QuickCommandsStepFetchRequest = {
    slug: string;
    url: string;
    method: Method;
    headers?: {
        [key: string]: string;
    } | null;
    data?: string | null;
};
export type QuickCommandsStepPromptRequest = {
    slug: string;
    prompt: string;
    use_stack?: boolean;
    use_project_files?: boolean;
    knowledge_source_slugs?: string[] | null;
    agent_id?: string | null;
    agent_built_in?: boolean | null;
};
export type QuickCommandsReturnType = "CHAT" | "REPLACE_CODE" | "BEFORE_CODE" | "AFTER_CODE";
export type CustomInputRequest = {
    slug: string;
    question: string;
    mandatory?: boolean;
};
export type QuickCommandsCreateRequest = {
    slug: string;
    name: string;
    "type"?: QuickCommandTypeRequest;
    description: string;
    final_result: string;
    steps: (QuickCommandsStepFetchRequest | QuickCommandsStepPromptRequest)[];
    return_type?: QuickCommandsReturnType | null;
    preserve_conversation?: boolean;
    custom_inputs?: CustomInputRequest[] | null;
    flow?: object | null;
};
export type BaseContextualRequest = {
    context?: object | null;
};
export type QuickCommandListResponse = {
    slug: string;
    name: string;
    "type": QuickCommandTypeRequest;
    description: string;
    studio_id?: string | null;
    flow?: object | null;
    preserve_conversation: boolean;
    use_selected_code: boolean;
    return_type?: QuickCommandsReturnType | null;
    creator: string | null;
    visibility_level: string;
    id: string;
};
export type QuickCommandsUpdateRequest = {
    name?: string | null;
    description?: string | null;
    steps?: (QuickCommandsStepFetchRequest | QuickCommandsStepPromptRequest)[] | null;
    return_type?: QuickCommandsReturnType | null;
    knowledge_source_slugs?: string[] | null;
    final_result?: string | null;
    preserve_conversation?: boolean;
    custom_inputs?: CustomInputRequest[] | null;
    flow?: object | null;
};
export type QuickCommandStepType = "LLM" | "FETCH";
export type Method2 = "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
export type QuickCommandStepFetchResponse = {
    slug: string;
    "type": QuickCommandStepType;
    url: string;
    method: Method2;
    headers?: {
        [key: string]: string;
    } | null;
    data?: string | null;
};
export type AgentType = "CONVERSATIONAL" | "SINGLE_ANSWER";
export type LlmConfig = {
    model_slug: string;
    temperature?: number;
};
export type KnowledgeSource = {
    similarity_function: string;
    max_number_of_kos: number;
    relevancy_threshold?: number;
    post_processing?: boolean;
    knowledge_sources: string[] | null;
    sealed?: boolean;
};
export type AgentDefinitionResponse = {
    id: string;
    name: string;
    slug: string;
    description?: string | null;
    system_prompt?: string | null;
    avatar?: string | null;
    suggested_prompts?: string[] | null;
    "type": AgentType;
    llm_config?: LlmConfig | null;
    visibility_level?: string | null;
    knowledge_sources_config?: KnowledgeSource | null;
    built_in?: boolean;
    creator_name: string;
    created_by: string;
    created_at: string;
    updated_by?: string | null;
    updated_at?: string | null;
};
export type QuickCommandStepLlmResponse = {
    slug: string;
    "type": QuickCommandStepType;
    knowledge_source_slugs?: string[] | null;
    prompt: string;
    use_stack?: boolean;
    use_project_files?: boolean;
    agent_id?: string | null;
    agent_built_in?: boolean | null;
    agent_data?: AgentDefinitionResponse | null;
};
export type CustomInputResponse = {
    slug: string;
    question: string;
    mandatory?: boolean;
};
export type QuickCommandResponse = {
    slug: string;
    name?: string | null;
    "type"?: QuickCommandTypeRequest | null;
    description?: string | null;
    studio_id?: string | null;
    return_type?: QuickCommandsReturnType | null;
    final_result?: string | null;
    steps?: (QuickCommandStepFetchResponse | QuickCommandStepLlmResponse)[] | null;
    flow?: object | null;
    preserve_conversation?: boolean | null;
    use_selected_code?: boolean | null;
    creator: string | null;
    visibility_level: string;
    custom_inputs?: CustomInputResponse[] | null;
    id: string;
};
export type QuickCommandsMakeACopyRequest = {
    suggested_slug: string;
    name: string;
    description: string;
};
export type QuickCommandDependenciesResponse = {
    studios?: string[] | null;
    workspaces?: string[] | null;
};
export type QuickCommandPromptResponse = {
    answer: string;
    sources?: (SourceStackAi | SourceKnowledgeSource | SourceProjectFile2 | KnowledgeSourceEvent)[] | null;
};
export type QuickCommandFetchResponseResult = {
    headers?: {
        [key: string]: string;
    } | null;
    data?: string | null;
    status: number;
};
export type QuickCommandsExecutionRequest = {
    context?: object | null;
    /** This field is deprecated and will be removed in future releases. Use 'input_data' instead. */
    code_selection?: string | null;
    input_data?: string | null;
    slugs_executions?: {
        [key: string]: string | QuickCommandPromptResponse | QuickCommandFetchResponseResult;
    } | null;
    qc_execution_id?: string | null;
};
export type QuickCommandPromptResponse2 = {
    answer: string;
    sources?: (SourceStackAi | SourceKnowledgeSource | SourceProjectFile | KnowledgeSourceEvent)[] | null;
};
export type QuickCommandFinalResultResponse = {
    result: string;
};
export type QuickCommandCreateRequest = {
    input_data?: string | object | null;
    ai_stack_id?: string | null;
    custom_inputs?: object | null;
};
export type Progress = {
    start: string;
    end?: string | null;
    duration?: number | null;
    execution_percentage: number;
    status: string;
};
export type StepFetch = {
    status_code: number;
    headers?: {
        [key: string]: string;
    } | null;
    data?: string | null;
    json_data?: object | null;
};
export type StepLlm = {
    answer: string;
    sources: (SourceStackAi | SourceKnowledgeSource | SourceProjectFile | KnowledgeSourceEvent)[];
};
export type Step = {
    step_name: string;
    execution_order: number;
    "type": QuickCommandStepType;
    step_result: StepFetch | StepLlm;
};
export type QuickCommandExecutionResponse = {
    execution_id: string;
    quick_command_slug: string;
    conversation_id: string;
    progress: Progress;
    steps?: Step[] | null;
    result?: string | null;
};
export type ImportContentType = "ai_stack" | "knowledge_source" | "quick_command";
export type ImportPublicContent = {
    "type": ImportContentType;
    content_id: string;
    content_slug_name: string;
    studio_id: string | null;
    workspace_ids?: string[] | null;
};
export type ConversationHistoryAgentEnum = "AI" | "USER";
export type ConversationHistoryResponse = {
    message_id: string;
    agent: ConversationHistoryAgentEnum;
    content: string;
    sources: any[];
    custom_agent?: object | null;
    updated: string;
};
export type ConversationResponse = {
    id: string;
    title: string;
    workspace_id: string | null;
    ai_stack_id: string | null;
    created: string | null;
    updated: string | null;
    history?: ConversationHistoryResponse[];
};
export type ConversationUpdateTitleRequest = {
    title: string;
};
export type BodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost = {
    objects_zip: Blob;
};
export type ChatRequest2 = {
    context?: object;
    user_prompt: string;
    project_id?: string | null;
};
export type SourceProjectFile3 = {
    "type": "project_file";
    path: string;
    document_score: number;
};
export type ChatResponse2 = {
    answer: string;
    sources: (SourceStackAi | SourceKnowledgeSource | SourceProjectFile3)[];
};
export type QuickCommandDependenciesResponseV2 = {
    ks_names?: string[] | null;
    error_ks_names?: string[] | null;
    missing_ks_id_list?: string[] | null;
};
export type BodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost = {
    upload: Blob;
};
export type BodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost = {
    objects_zip: Blob;
};
export type SourceProjectFile4 = {
    "type": "project_file";
    path: string;
    document_score: number;
};
export type ChatResponse3 = {
    answer: string;
    sources: (SourceStackAi | SourceKnowledgeSource | SourceProjectFile4)[];
    message_id: string | null;
};
/**
 * Metrics
 */
export function metricsMetricsGet(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    }>("/metrics", {
        ...opts
    }));
}
/**
 * List Ai Stacks
 */
export function listAiStacksV1AiStacksGet({ visibility, order, authorization, xAccountId }: {
    visibility?: VisibilityLevelEnum;
    order?: OrderEnum;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetAiStackResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks${QS.query(QS.explode({
        visibility,
        order
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Ai Stack
 */
export function createAiStackV1AiStacksPost({ authorization, xAccountId, newAiStackRequest }: {
    authorization: string;
    xAccountId?: string | null;
    newAiStackRequest: NewAiStackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: NewAiStackResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/ai-stacks", oazapfts.json({
        ...opts,
        method: "POST",
        body: newAiStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Update Ai Stack
 */
export function updateAiStackV1AiStacksStackIdPatch({ stackId, authorization, xAccountId, updateAiStackRequest }: {
    stackId: string;
    authorization: string;
    xAccountId?: string | null;
    updateAiStackRequest: UpdateAiStackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateAiStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Ai Stack
 */
export function getAiStackV1AiStacksStackIdGet({ stackId, authorization, xAccountId }: {
    stackId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetAiStackResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Remove Ai Stack
 */
export function removeAiStackV1AiStacksStackIdDelete({ stackId, authorization, xAccountId }: {
    stackId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Get Ai Stack
 */
export function getAiStackV1AiStacksStackNameExistsGet({ stackName, authorization, xAccountId }: {
    stackName: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackName)}/exists`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Fork
 */
export function forkV1AiStacksStackIdForkPost({ stackId, authorization, xAccountId, aiStackForkRequest }: {
    stackId: string;
    authorization: string;
    xAccountId?: string | null;
    aiStackForkRequest: AiStackForkRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: NewAiStackResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackId)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: aiStackForkRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Share
 */
export function shareV1AiStacksStackIdSharePost({ stackId, authorization, xAccountId }: {
    stackId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackId)}/share`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish
 */
export function publishV1AiStacksStackIdPublishPost({ stackId, authorization, xAccountId }: {
    stackId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/ai-stacks/${encodeURIComponent(stackId)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Project Files
 */
export function projectFilesV1ProjectFilesPost({ authorization, xAccountId, newProjectFilesRequest }: {
    authorization: string;
    xAccountId?: string | null;
    newProjectFilesRequest: NewProjectFilesRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 202;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/project-files", oazapfts.json({
        ...opts,
        method: "POST",
        body: newProjectFilesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Quick Actions
 */
export function quickActionsV1QuickActionsPost({ authorization, xAccountId, quickActionsRequest }: {
    authorization: string;
    xAccountId?: string | null;
    quickActionsRequest: QuickActionsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: SimpleResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/quick-actions", oazapfts.json({
        ...opts,
        method: "POST",
        body: quickActionsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Dev Assistant
 */
export function devAssistantV1ChatPost({ authorization, xAccountId, codeBuddyApiV1SchemasChatRequest }: {
    authorization: string;
    xAccountId?: string | null;
    codeBuddyApiV1SchemasChatRequest: ChatRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ChatResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/chat", oazapfts.json({
        ...opts,
        method: "POST",
        body: codeBuddyApiV1SchemasChatRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Post Event
 */
export function postEventV1EventsPost({ authorization, xAccountId, body }: {
    authorization: string;
    xAccountId?: string | null;
    body: GenericEventRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/events", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Upload Url
 */
export function getUploadUrlV1FileUploadUrlPost({ authorization, xAccountId, newFileUploadUrlRequest }: {
    authorization: string;
    xAccountId?: string | null;
    newFileUploadUrlRequest: NewFileUploadUrlRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: NewFileUploadUrlResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/file-upload/url", oazapfts.json({
        ...opts,
        method: "POST",
        body: newFileUploadUrlRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Upload Form
 */
export function getUploadFormV1FileUploadFormPost({ authorization, xAccountId, newFileUploadUrlRequest }: {
    authorization: string;
    xAccountId?: string | null;
    newFileUploadUrlRequest: NewFileUploadUrlRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: NewFileUploadFormResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/file-upload/form", oazapfts.json({
        ...opts,
        method: "POST",
        body: newFileUploadUrlRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get File Upload Status
 */
export function getFileUploadStatusV1FileUploadFileUploadIdGet({ fileUploadId, authorization, xAccountId }: {
    fileUploadId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FileUploadStatusResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/file-upload/${encodeURIComponent(fileUploadId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Report Health
 */
export function reportHealthHealthzGet(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    }>("/healthz", {
        ...opts
    }));
}
/**
 * Create Knowledge Source
 */
export function createKnowledgeSourceV1KnowledgeSourcesPost({ authorization, xAccountId, newKnowledgeSourceRequest }: {
    authorization: string;
    xAccountId?: string | null;
    newKnowledgeSourceRequest: NewKnowledgeSourceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/knowledge-sources", oazapfts.json({
        ...opts,
        method: "POST",
        body: newKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Knowledge Sources
 */
export function listKnowledgeSourcesV1KnowledgeSourcesGet({ visibility, order, $default, types, authorization, xAccountId }: {
    visibility?: VisibilityLevelEnum;
    order?: OrderEnum;
    $default?: boolean | null;
    types?: KnowledgeSourceTypeEnum[] | null;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: KnowledgeSourceItemResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources${QS.query(QS.explode({
        visibility,
        order,
        "default": $default,
        types
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Find Knowledge Source
 */
export function findKnowledgeSourceV1KnowledgeSourcesSlugGet({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: KnowledgeSourceResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Update Knowledge Source
 */
export function updateKnowledgeSourceV1KnowledgeSourcesSlugPatch({ slug, authorization, xAccountId, knowledgeSourcePatchesRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    knowledgeSourcePatchesRequest: KnowledgeSourcePatchesRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: knowledgeSourcePatchesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Delete Knowledge Source
 */
export function deleteKnowledgeSourceV1KnowledgeSourcesSlugDelete({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Find Knowledge Source Dependencies
 */
export function findKnowledgeSourceDependenciesV1KnowledgeSourcesSlugDependenciesGet({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: KnowledgeSourceDependenciesResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/dependencies`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Search
 */
export function searchV1KnowledgeSourcesSlugSimilaritySearchGet({ slug, q, size, authorization, xAccountId }: {
    slug: string;
    q: string;
    size?: number;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: KnowledgeSourceSimilaritySearchItemResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/similarity-search${QS.query(QS.explode({
        q,
        size
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Share Knowledge Source
 */
export function shareKnowledgeSourceV1KnowledgeSourcesSlugSharePost({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/share`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish Knowledge Source
 */
export function publishKnowledgeSourceV1KnowledgeSourcesSlugPublishPost({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish Knowledge Source In Batch
 */
export function publishKnowledgeSourceInBatchV1KnowledgeSourcesPublishBatchPost({ authorization, xAccountId, knowSourcePublishBatchRequest }: {
    authorization: string;
    xAccountId?: string | null;
    knowSourcePublishBatchRequest: KnowSourcePublishBatchRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/knowledge-sources/publish/batch", oazapfts.json({
        ...opts,
        method: "POST",
        body: knowSourcePublishBatchRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Configure Knowledge Source Default Flag
 */
export function configureKnowledgeSourceDefaultFlagV1KnowledgeSourcesSlugDefaultPut({ slug, value, authorization, xAccountId }: {
    slug: string;
    value: boolean;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/default${QS.query(QS.explode({
        value
    }))}`, {
        ...opts,
        method: "PUT",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Fork Knowledge Source
 */
export function forkKnowledgeSourceV1KnowledgeSourcesSlugForkPost({ slug, authorization, xAccountId, forkKnowledgeSourceRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    forkKnowledgeSourceRequest: ForkKnowledgeSourceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: forkKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Vectorize Objects From File
 */
export function vectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost({ slug, authorization, xAccountId, bodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    bodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost: BodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Knowledge Objects
 */
export function listKnowledgeObjectsV1KnowledgeSourcesSlugObjectsGet({ slug, standalone, authorization, xAccountId }: {
    slug: string;
    standalone?: boolean | null;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects${QS.query(QS.explode({
        standalone
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Reset Knowledge Objects
 */
export function resetKnowledgeObjectsV1KnowledgeSourcesSlugObjectsDelete({ slug, standalone, authorization, xAccountId }: {
    slug: string;
    standalone?: boolean | null;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects${QS.query(QS.explode({
        standalone
    }))}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Upload Knowledge Objects Zip
 */
export function uploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost({ slug, autoDelete, authorization, xAccountId, bodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost }: {
    slug: string;
    autoDelete?: boolean;
    authorization: string;
    xAccountId?: string | null;
    bodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost: BodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects/batch${QS.query(QS.explode({
        "auto-delete": autoDelete
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Knowledge Object By Custom Id
 */
export function findKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdGet({ slug, customId, authorization, xAccountId }: {
    slug: string;
    customId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects/${encodeURIComponent(customId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Delete Knowledge Object By Custom Id
 */
export function deleteKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdDelete({ customId, slug, authorization, xAccountId }: {
    customId: string;
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects/${encodeURIComponent(customId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Find Snippet Doc By Custom Id
 */
export function findSnippetDocByCustomIdV1KnowledgeSourcesSlugSnippetsIdGet({ slug, id, authorization, xAccountId }: {
    slug: string;
    id: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/snippets/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Snippet Knowledge Source
 */
export function vectorizeSnippetKnowledgeSourceV1KnowledgeSourcesSlugSnippetsPost({ slug, authorization, xAccountId, snippetKnowledgeSourceRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    snippetKnowledgeSourceRequest: SnippetKnowledgeSourceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/snippets`, oazapfts.json({
        ...opts,
        method: "POST",
        body: snippetKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Api Doc By Custom Id
 */
export function findApiDocByCustomIdV1KnowledgeSourcesSlugApisIdGet({ slug, id, authorization, xAccountId }: {
    slug: string;
    id: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/apis/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Api Knowledge Source
 */
export function vectorizeApiKnowledgeSourceV1KnowledgeSourcesSlugApisPost({ slug, authorization, xAccountId, body }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    body: object;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/apis`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Event Doc By Custom Id
 */
export function findEventDocByCustomIdV1KnowledgeSourcesSlugEventsIdGet({ slug, id, authorization, xAccountId }: {
    slug: string;
    id: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/events/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Event Knowledge Source
 */
export function vectorizeEventKnowledgeSourceV1KnowledgeSourcesSlugEventsPost({ slug, authorization, xAccountId, body }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    body: object;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/events`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Custom Doc By Custom Id
 */
export function findCustomDocByCustomIdV1KnowledgeSourcesSlugCustomIdGet({ slug, id, authorization, xAccountId }: {
    slug: string;
    id: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/custom/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Custom Knowledge Source
 */
export function vectorizeCustomKnowledgeSourceV1KnowledgeSourcesSlugCustomPost({ slug, authorization, xAccountId, customKnowledgeSourceRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    customKnowledgeSourceRequest: CustomKnowledgeSourceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/knowledge-sources/${encodeURIComponent(slug)}/custom`, oazapfts.json({
        ...opts,
        method: "POST",
        body: customKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Sync Embedding Model
 */
export function syncEmbeddingModelV1KnowledgeSourcesSyncPost(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 202;
        data: any;
    } | {
        status: 404;
    }>("/v1/knowledge-sources/sync", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Search Knowledge Sources
 */
export function searchKnowledgeSourcesV1KnowledgeSourcesSearchPost({ authorization, xAccountId, searchKnowledgeSourcesRequest }: {
    authorization: string;
    xAccountId?: string | null;
    searchKnowledgeSourcesRequest: SearchKnowledgeSourcesRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/knowledge-sources/search", oazapfts.json({
        ...opts,
        method: "POST",
        body: searchKnowledgeSourcesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Ks Dependencies
 */
export function ksDependenciesV1KnowledgeSourcesDependenciesPost({ authorization, xAccountId, knowledgeSourcesDependenciesRequest }: {
    authorization: string;
    xAccountId?: string | null;
    knowledgeSourcesDependenciesRequest: KnowledgeSourcesDependenciesRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: KnowledgeSourcesDependenciesResponseV2;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/knowledge-sources/dependencies", oazapfts.json({
        ...opts,
        method: "POST",
        body: knowledgeSourcesDependenciesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Change Llm
 */
export function changeLlmV1AccountsLlmPatch({ authorization, xAccountId, accountSettingsChangeLlmRequest }: {
    authorization: string;
    xAccountId?: string | null;
    accountSettingsChangeLlmRequest: AccountSettingsChangeLlmRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/accounts/llm", oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountSettingsChangeLlmRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Change Limit
 */
export function changeLimitV1AccountsTokenLimitsPut({ authorization, xAccountId, accountSettingsChangeLimitRequest }: {
    authorization: string;
    xAccountId?: string | null;
    accountSettingsChangeLimitRequest: AccountSettingsChangeLimitRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/accounts/token-limits", oazapfts.json({
        ...opts,
        method: "PUT",
        body: accountSettingsChangeLimitRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Reset Limit
 */
export function resetLimitV1AccountsTokenLimitsDelete({ authorization, xAccountId }: {
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/accounts/token-limits", {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Change External Rqc
 */
export function changeExternalRqcV1AccountsExternalRqcPatch({ authorization, xAccountId, accountSettingsChangeErqcRequest }: {
    authorization: string;
    xAccountId?: string | null;
    accountSettingsChangeErqcRequest: AccountSettingsChangeErqcRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/accounts/external-rqc", oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountSettingsChangeErqcRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Current
 */
export function currentV1TokensUsageCurrentGet({ year, month, authorization, xAccountId }: {
    year: number;
    month: number;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TokensCurrentUsageResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/tokens-usage/current${QS.query(QS.explode({
        year,
        month
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Monthly
 */
export function monthlyV1TokensUsageMonthlyGet({ year, authorization, xAccountId }: {
    year: number;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TokensMonthlyUsageResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/tokens-usage/monthly${QS.query(QS.explode({
        year
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Top Users
 */
export function topUsersV1TokensUsageTopUsersGet({ year, month, authorization, xAccountId }: {
    year: number;
    month: number;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/tokens-usage/top-users${QS.query(QS.explode({
        year,
        month
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Add Association
 */
export function addAssociationV1WorkspaceWorkspaceIdPost({ workspaceId, authorization, xAccountId, addWorkspaceKnowledgeSourceRequest }: {
    workspaceId: string;
    authorization: string;
    xAccountId?: string | null;
    addWorkspaceKnowledgeSourceRequest: AddWorkspaceKnowledgeSourceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/workspace/${encodeURIComponent(workspaceId)}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addWorkspaceKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Association
 */
export function listAssociationV1WorkspaceWorkspaceIdGet({ workspaceId, authorization, xAccountId }: {
    workspaceId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: KnowledgeSourceResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Delete Association
 */
export function deleteAssociationV1WorkspaceWorkspaceIdKnowledgeSourceKnowledgeSourceSlugDelete({ workspaceId, knowledgeSourceSlug, authorization, xAccountId }: {
    workspaceId: string;
    knowledgeSourceSlug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/workspace/${encodeURIComponent(workspaceId)}/knowledge_source/${encodeURIComponent(knowledgeSourceSlug)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Quick Command
 */
export function createQuickCommandV1QuickCommandsPost({ authorization, xAccountId, quickCommandsCreateRequest }: {
    authorization: string;
    xAccountId?: string | null;
    quickCommandsCreateRequest: QuickCommandsCreateRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/quick-commands", oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsCreateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List All Deprecated
 */
export function listAllDeprecatedV1QuickCommandsAllPost({ origin, authorization, xAccountId, baseContextualRequest }: {
    origin?: string;
    authorization: string;
    xAccountId?: string | null;
    baseContextualRequest: BaseContextualRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandListResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/quick-commands/all", oazapfts.json({
        ...opts,
        method: "POST",
        body: baseContextualRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            origin,
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List All
 */
export function listAllV1QuickCommandsAllGet({ visibility, order, types, authorization, xAccountId }: {
    visibility?: VisibilityLevelEnum | null;
    order?: OrderEnum;
    types?: QuickCommandTypeRequest[] | null;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandListResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/all${QS.query(QS.explode({
        visibility,
        order,
        types
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Update Quick Command
 */
export function updateQuickCommandV1QuickCommandsSlugPatch({ slug, authorization, xAccountId, quickCommandsUpdateRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    quickCommandsUpdateRequest: QuickCommandsUpdateRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: quickCommandsUpdateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Quick Command
 */
export function getQuickCommandV1QuickCommandsSlugGet({ slug, findAgents, authorization, xAccountId }: {
    slug: string;
    findAgents?: boolean;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}${QS.query(QS.explode({
        find_agents: findAgents
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Delete Quick Command
 */
export function deleteQuickCommandV1QuickCommandsSlugDelete({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Share
 */
export function shareV1QuickCommandsSlugSharePost({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/share`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish
 */
export function publishV1QuickCommandsSlugPublishPost({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Fork
 */
export function forkV1QuickCommandsSlugForkPost({ slug, authorization, xAccountId, quickCommandsMakeACopyRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    quickCommandsMakeACopyRequest: QuickCommandsMakeACopyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsMakeACopyRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Quick Command By Ks Slug
 */
export function getQuickCommandByKsSlugV1QuickCommandsKnowledgeSourcesSlugGet({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandListResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Get Quick Commands By Agent Id
 */
export function getQuickCommandsByAgentIdV1QuickCommandsAgentsAgentIdGet({ agentId, authorization, xAccountId }: {
    agentId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandListResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/agents/${encodeURIComponent(agentId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * List By Workspace Id
 */
export function listByWorkspaceIdV1QuickCommandsWorkspacesWorkspaceIdGet({ workspaceId, authorization, xAccountId }: {
    workspaceId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandListResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Dependencies
 */
export function dependenciesV1QuickCommandsSlugDependenciesGet({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandDependenciesResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/dependencies`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Quick Commands Run
 */
export function quickCommandsRunV1QuickCommandsSlugStepsStepSlugRunPost({ slug, stepSlug, authorization, xAccountId, quickCommandsExecutionRequest }: {
    slug: string;
    stepSlug: string;
    authorization: string;
    xAccountId?: string | null;
    quickCommandsExecutionRequest: QuickCommandsExecutionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandPromptResponse2;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/steps/${encodeURIComponent(stepSlug)}/run`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Format Fetch Step
 */
export function formatFetchStepV1QuickCommandsSlugStepsStepSlugFetchFormatPost({ slug, stepSlug, authorization, xAccountId, quickCommandsExecutionRequest }: {
    slug: string;
    stepSlug: string;
    authorization: string;
    xAccountId?: string | null;
    quickCommandsExecutionRequest: QuickCommandsExecutionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandStepFetchResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/steps/${encodeURIComponent(stepSlug)}/fetch_format`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Format Result
 */
export function formatResultV1QuickCommandsSlugResultFormatPost({ slug, authorization, xAccountId, quickCommandsExecutionRequest }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    quickCommandsExecutionRequest: QuickCommandsExecutionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandFinalResultResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/result_format`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Add Workspace
 */
export function addWorkspaceV1QuickCommandsSlugWorkspacesWorkspaceIdAddPost({ slug, workspaceId, authorization, xAccountId }: {
    slug: string;
    workspaceId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/workspaces/${encodeURIComponent(workspaceId)}/add`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Remove Workspace
 */
export function removeWorkspaceV1QuickCommandsSlugWorkspacesWorkspaceIdRemoveDelete({ slug, workspaceId, authorization, xAccountId }: {
    slug: string;
    workspaceId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/${encodeURIComponent(slug)}/workspaces/${encodeURIComponent(workspaceId)}/remove`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Execution
 */
export function createExecutionV1QuickCommandsCreateExecutionSlugPost({ slug, conversationId, authorization, xAccountId, quickCommandCreateRequest }: {
    slug: string;
    conversationId?: string | null;
    authorization: string;
    xAccountId?: string | null;
    quickCommandCreateRequest?: QuickCommandCreateRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/create-execution/${encodeURIComponent(slug)}${QS.query(QS.explode({
        conversation_id: conversationId
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandCreateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Callback
 */
export function callbackV1QuickCommandsCallbackExecutionIdGet({ executionId, authorization, xAccountId }: {
    executionId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandExecutionResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/quick-commands/callback/${encodeURIComponent(executionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Import Content
 */
export function importContentV1ImportPost({ authorization, xAccountId, importPublicContent }: {
    authorization: string;
    xAccountId?: string | null;
    importPublicContent: ImportPublicContent;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/import", oazapfts.json({
        ...opts,
        method: "POST",
        body: importPublicContent,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Conversations
 */
export function listConversationsV1ConversationsGet({ size, page, authorization, xAccountId }: {
    size?: number;
    page?: number;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConversationResponse[];
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/conversations${QS.query(QS.explode({
        size,
        page
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Conversation History
 */
export function conversationHistoryV1ConversationsConversationIdGet({ conversationId, authorization, xAccountId }: {
    conversationId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConversationResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/conversations/${encodeURIComponent(conversationId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Update Title
 */
export function updateTitleV1ConversationsConversationIdPatch({ conversationId, authorization, xAccountId, conversationUpdateTitleRequest }: {
    conversationId: string;
    authorization: string;
    xAccountId?: string | null;
    conversationUpdateTitleRequest: ConversationUpdateTitleRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConversationResponse;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/conversations/${encodeURIComponent(conversationId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: conversationUpdateTitleRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Delete Conversation
 */
export function deleteConversationV1ConversationsConversationIdDelete({ conversationId, authorization, xAccountId }: {
    conversationId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/conversations/${encodeURIComponent(conversationId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Download Conversation
 */
export function downloadConversationV1ConversationsConversationIdDownloadGet({ conversationId, authorization, xAccountId }: {
    conversationId: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/conversations/${encodeURIComponent(conversationId)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Knowledge Source
 */
export function createKnowledgeSourceV1DefaultKnowledgeSourcesPost({ newKnowledgeSourceRequest }: {
    newKnowledgeSourceRequest: NewKnowledgeSourceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v1/default-knowledge-sources", oazapfts.json({
        ...opts,
        method: "POST",
        body: newKnowledgeSourceRequest
    })));
}
/**
 * Delete Knowledge Source
 */
export function deleteKnowledgeSourceV1DefaultKnowledgeSourcesSlugDelete({ slug }: {
    slug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/default-knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Upload Knowledge Objects Zip
 */
export function uploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost({ slug, autoDelete, bodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost }: {
    slug: string;
    autoDelete?: boolean;
    bodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost: BodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v1/default-knowledge-sources/${encodeURIComponent(slug)}/objects/batch${QS.query(QS.explode({
        "auto-delete": autoDelete
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost
    })));
}
/**
 * Dev Assistant V2
 */
export function devAssistantV2V2ChatPost({ accept, authorization, xAccountId, codeBuddyApiV2SchemasChatRequest }: {
    accept?: string | null;
    authorization: string;
    xAccountId?: string | null;
    codeBuddyApiV2SchemasChatRequest: ChatRequest2;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string | ChatResponse2;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v2/chat", oazapfts.json({
        ...opts,
        method: "POST",
        body: codeBuddyApiV2SchemasChatRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accept,
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Quick Commands Run V2
 */
export function quickCommandsRunV2V2QuickCommandsSlugStepsStepSlugRunPost({ slug, stepSlug, accept, authorization, xAccountId, quickCommandsExecutionRequest }: {
    slug: string;
    stepSlug: string;
    accept?: string | null;
    authorization: string;
    xAccountId?: string | null;
    quickCommandsExecutionRequest: QuickCommandsExecutionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string | QuickCommandPromptResponse2;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v2/quick-commands/${encodeURIComponent(slug)}/steps/${encodeURIComponent(stepSlug)}/run`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accept,
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Dependencies
 */
export function getDependenciesV2QuickCommandsSlugDependenciesGet({ slug, authorization, xAccountId }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: QuickCommandDependenciesResponseV2;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v2/quick-commands/${encodeURIComponent(slug)}/dependencies`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Objects From File
 */
export function vectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost({ slug, authorization, xAccountId, bodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost }: {
    slug: string;
    authorization: string;
    xAccountId?: string | null;
    bodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost: BodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 202;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v2/knowledge-sources/${encodeURIComponent(slug)}/objects`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Upload Knowledge Objects Zip
 */
export function uploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost({ slug, autoDelete, authorization, xAccountId, bodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost }: {
    slug: string;
    autoDelete?: boolean;
    authorization: string;
    xAccountId?: string | null;
    bodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost: BodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 202;
        data: any;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>(`/v2/knowledge-sources/${encodeURIComponent(slug)}/objects/batch${QS.query(QS.explode({
        "auto-delete": autoDelete
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Dev Assistant V3
 */
export function devAssistantV3V3ChatPost({ authorization, xAccountId, codeBuddyApiV2SchemasChatRequest }: {
    authorization: string;
    xAccountId?: string | null;
    codeBuddyApiV2SchemasChatRequest: ChatRequest2;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string | ChatResponse3;
    } | {
        status: 404;
    } | {
        status: 422;
        data: HttpValidationError;
    }>("/v3/chat", oazapfts.json({
        ...opts,
        method: "POST",
        body: codeBuddyApiV2SchemasChatRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
