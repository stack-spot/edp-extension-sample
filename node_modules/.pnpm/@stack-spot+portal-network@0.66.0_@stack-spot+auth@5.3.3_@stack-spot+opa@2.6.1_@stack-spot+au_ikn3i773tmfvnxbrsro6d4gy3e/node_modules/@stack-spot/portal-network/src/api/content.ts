/**
 * Content API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "https://content-content-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://content-content-api.dev.stackspot.com"
};
export type ValidationDetails = {
    code?: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type CreateStackVersionRequest = {
    copyFromStackVersionId: string;
};
export type StackVersionSummaryWarningResponse = {
    code?: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type StackVersionSummaryResponse = {
    stackId: string;
    stackVersionId: string;
    semanticVersion?: string;
    version: number;
    referenceCopyStackVersionId?: string;
    warnings: StackVersionSummaryWarningResponse[];
};
export type AddPluginRequest = {
    pluginId: string;
    "type": "VERSION" | "RANGE";
    value: string;
};
export type CreateStarterV2Request = {
    slug: string;
    "type": "INFRA" | "APP";
    description?: string;
    plugins: AddPluginRequest[];
    optionalPlugins?: AddPluginRequest[];
};
export type StarterPluginResponse = {
    pluginId: string;
    pluginVersionId: string;
    pluginQualifier: string;
    range?: string;
    index: number;
};
export type DocumentationContentLanguageResponse = {
    language: "ENGLISH" | "PTBR";
    status: "DRAFT" | "PUBLISHED";
    lastUpdated: string;
};
export type DocumentationContentResponse = {
    documentationId: string;
    languages: DocumentationContentLanguageResponse[];
};
export type StarterResponseWithRange = {
    id: string;
    slug: string;
    "type": string;
    description?: string;
    pluginVersions: StarterPluginResponse[];
    optionalPluginVersions: StarterPluginResponse[];
    documentation?: DocumentationContentResponse;
    status: string;
};
export type PublishStackVersionRequest = {
    publishType: "V1" | "MAJOR" | "MINOR" | "PATCH" | "CUSTOM";
    semanticVersion?: string;
};
export type AddActionRequest = {
    actionId: string;
    "type": "VERSION" | "RANGE";
    value: string;
};
export type JsonNode = object;
export type CreateConnectionInterfaceOutputResponseV2 = {
    id: string;
    name: string;
    "type": "STRING" | "NUMBER" | "INTEGER" | "OBJECT" | "BOOLEAN";
    sensitive: boolean;
    schema?: JsonNode;
};
export type ConnectionInterfaceResponseV2 = {
    id: string;
    slug: string;
    description: string;
    outputs: CreateConnectionInterfaceOutputResponseV2[];
};
export type CreateConnectionInterfaceTypeOutputRequest = {
    name: string;
    "type": "STRING" | "NUMBER" | "INTEGER" | "OBJECT" | "BOOLEAN";
    sensitive: boolean;
    schema?: JsonNode;
};
export type CreateConnectionInterfaceTypeRequest = {
    slug: string;
    description: string;
    outputs: CreateConnectionInterfaceTypeOutputRequest[];
};
export type ListWorkflowsByVersionIdsRequest = {
    ids: string[];
};
export type ListWorkflowsByVersionIdsStudioResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
};
export type ListWorkflowsByVersionIdsLatestVersionResponse = {
    id: string;
    displayName: string;
    label: string;
    description: string;
    semanticVersion: string;
    targetApp: boolean;
    targetInfra: boolean;
    createdAt: string;
};
export type ListWorkflowsByVersionIdsResponse = {
    id: string;
    slug: string;
    "type": "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter";
    studio: ListWorkflowsByVersionIdsStudioResponse;
    versionInfo?: ListWorkflowsByVersionIdsLatestVersionResponse;
};
export type YamlValidationError = {
    details: string;
    "type": "STK_VAL_0000_YAML_BASE_ERROR" | "STK_VAL_5010_YAML_FIELDS_ERROR" | "STK_VAL_5011_YAML_REQUIRED_FIELD" | "STK_VAL_5012_YAML_INVALID_FIELD_FORMAT" | "STK_VAL_5013_YAML_INVALID_VALUE_BY_ENUM" | "STK_VAL_5015_YAML_ADDITIONAL_FIELD" | "STK_VAL_5016_YAML_FIELD_INVALID_TYPE" | "STK_VAL_5018_INVALID_TECHNOLOGIES" | "STK_VAL_5021_MARKDOWN_LINK_NOT_FOUND" | "STK_VAL_5022_INVALID_INPUT_DEFAULT" | "STK_VAL_5024_PLUGIN_VERSION_NOT_FOUND" | "STK_VAL_5026_FILE_NOT_FOUND" | "STK_VAL_5027_FILE_EMPTY" | "STK_VAL_5030_FUNCTION_RUN_IS_REQUIRED" | "STK_VAL_5031_INVALID_INPUT_CONDITION_OPERATOR" | "STK_VAL_5032_INVALID_INPUT_CONDITION_VALUE" | "STK_VAL_5034_INVALID_INPUT_CONDITION_VARIABLE_DOES_NOT_EXIST" | "STK_VAL_5035_INVALID_CONNECTION_TYPE" | "STK_VAL_5036_INVALID_CONNECTION_TYPE_OUTPUT" | "STK_VAL_5037_DUPLICATED_CONNECTION_ALIAS" | "STK_VAL_5039_INVALID_LINK_URL_TYPE" | "STK_VAL_5040_INVALID_CONNECTION_LINK_VARIABLE" | "STK_VAL_5041_INVALID_CONNECTION_ALIAS_LINK_VARIABLE" | "STK_VAL_5042_INVALID_CONNECTION_OUTPUT_LINK_VARIABLE" | "STK_VAL_5043_DUPLICATED_LINK_NAME" | "STK_VAL_5044_INPUT_NAME_AS_RESERVED_WORD" | "STK_VAL_5045_DYNAMIC_LINK_VARIABLE_NOT_FOUND" | "STK_VAL_5046_LINK_WITH_COMPLEX_JINJA_EXPRESSION" | "STK_VAL_5047_INVALID_DYNAMIC_LINK_URL" | "STK_VAL_5048_DUPLICATED_INPUT_NAMES" | "STK_VAL_5049_INVALID_INPUT_DEFAULT_NOT_IN_ITEMS" | "STK_VAL_5053_MISSING_ACTION_IN_REQUIRES" | "STK_VAL_5054_DUPLICATED_NAME" | "STK_VAL_5055_DUPLICATED_VALUE" | "STK_VAL_5057_ACTION_NOT_DECLARED" | "STK_VAL_5058_OLD_DOCS_DECLARED" | "STK_VAL_5059_OLD_DOCS_WILL_BE_IGNORED" | "STK_VAL_5061_ACTION_VERSION_NOT_FOUND" | "STK_VAL_5062_PLUGIN_OF_STARTER_IS_NOT_DECLARED" | "STK_VAL_5063_STARTER_MUST_CONTAIN_PLUGIN" | "STK_VAL_5064_REQUIRED_PLUGIN_NOT_PUBLISHED" | "STK_VAL_5065_REQUIRED_ACTION_NOT_PUBLISHED" | "STK_VAL_5066_MISSING_PLUGIN_REQUIRED_IN_STACK" | "STK_VAL_5067_MISSING_ACTION_REQUIRED_IN_STACK" | "STK_VAL_5068_INFRA_PLUGIN_APP_ALLOWED_FALSE" | "STK_VAL_5073_SOURCE_AND_ITEMS_BEING_USED" | "STK_VAL_5076_MISSING_OUTPUT_FROM_GENERATES" | "STK_VAL_5077_MISSING_PLUGIN_REQUIRED_IN_STARTER" | "STK_VAL_5078_WRONG_PLUGIN_TYPE_IN_STACK" | "STK_VAL_5079_DUPLICATED_SLUG" | "STK_VAL_5080_INVALID_VARIABLE" | "STK_VAL_5081_INVALID_VARIABLE_REFERENCE" | "STK_VAL_5082_DUPLICATED_JOB" | "STK_VAL_5083_DUPLICATED_STEP" | "STK_VAL_5084_WORKFLOW_VERSION_NOT_FOUND" | "STK_VAL_5085_MISSING_INPUT_REQUIRED_IN_STEP_JOB" | "STK_VAL_5086_CYCLIC_DEPENDENCY_JOB" | "STK_VAL_5087_CYCLIC_DEPENDENCY_WORKFLOW" | "STK_VAL_5088_WORKFLOW_CREATE_DEPENDENCY" | "STK_VAL_5089_INVALID_DEPENDS_ON_JOBS" | "STK_VAL_5090_INVALID_JOB_STEP_WORKFLOW_TYPE" | "STK_VAL_5091_MULTIPLE_GENERATED_CONNECTION_DEFINITION" | "STK_VAL_VERSION_BREAK_CHANGE_SCHEMA_VERSION_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_APP_ALLOWED_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_INPUT_TYPE_CHANGE_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_INPUTS_CHANGE_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_INPUT_CONDITION_CHANGE_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_INPUT_CONNECTION_INTERFACE_TYPE_CHANGE_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_GENERATES_CONNECTION_INTERFACE_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_REQUIRES_CONNECTION_INTERFACE_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_REQUIRES_PLUGIN_ERROR" | "STK_VAL_VERSION_BREAK_CHANGE_REQUIRES_ACTION_ERROR" | "STK_VAL_PLUGIN_VERSION_ALREADY_EXISTS_IN_STUDIO" | "STK_VAL_ACTION_VERSION_ALREADY_EXISTS_IN_STUDIO" | "STK_VAL_STACK_VERSION_ALREADY_EXISTS_IN_STUDIO" | "STK_VAL_STACK_PUBLISH_REQUIRED_CONTENT_ERROR" | "STK_VAL_WORKFLOW_SPECIFICATION_MULTIPLE_TARGETS_NOT_ALLOWED" | "STK_VAL_VERSION_BREAK_CHANGE_WORKFLOW_TARGETS_MODIFIED_ERROR" | "STK_VAL_WORKFLOW_ITSELF_DEPENDENCY" | "STK_VAL_INVALID_PLUGIN_ON_STEP_BY_WORKFLOW_APP_TARGET" | "STK_VAL_INVALID_PLUGIN_ON_STEP_BY_WORKFLOW_INFRA_TARGET";
    field?: string;
    value?: object;
    examples: string[];
};
export type ValidateResponse = {
    kind: "PLUGIN" | "ACTION" | "STACK" | "STARTER" | "WORKFLOW";
    schemaVersion?: "V1" | "V2" | "V3";
    specType?: "INFRA" | "APP" | "SHELL" | "PYTHON" | "DEPLOY" | "STARTER" | "DESTROY" | "ROLLBACK" | "REUSABLE" | "CREATE";
    errors: YamlValidationError[];
    warnings: YamlValidationError[];
    path: string;
};
export type StudioResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
    verified: boolean;
    description: string;
    accountSlug: string;
    editAllowed: boolean;
    createdBy: string;
    visibility: "ACCOUNT_ONLY" | "SELECTED_WORKSPACES" | "RESTRICTED_ACCESS" | "PUBLIC";
    isGoverned: boolean;
    tabs: string[];
    teams: string[];
};
export type CreateStudioRequest = {
    name: string;
    slug: string;
    description: string;
    image?: string;
};
export type CreateStudioResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
    verified: boolean;
    description: string;
    accountSlug: string;
    createdBy: string;
    visibility: string;
    tabs: string[];
};
export type StudioWorkspaceResponse = {
    id: string;
    name: string;
    imageUrl?: string;
    inUse: boolean;
};
export type StudioWorkspaceRequest = {
    workspacesIds: string[];
};
export type WarningResponse = {
    code?: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type PublishWorkflowResponse = {
    workflowId: string;
    workflowVersionId: string;
    warnings?: WarningResponse[];
};
export type GetStackVersionStudioResponse = {
    slug: string;
    name: string;
    imageUrl?: string;
};
export type GetStackVersionStackResponse = {
    stackId: string;
    slug: string;
    displayName: string;
    description: string;
    imageUrl?: string;
    existsDraft: boolean;
    createdBy: string;
    createdAt: string;
    lastModificationAt: string;
    studio: GetStackVersionStudioResponse;
    tabs: string[];
    tags?: string[];
};
export type StackVersionResponse = {
    stackVersionId: string;
    version: number;
    published: boolean;
    publishedBy?: string;
    publishedAt?: string;
    unpublishedBy?: string;
    unpublishedAt?: string;
    status: string;
    hasDeprecatedContent: boolean;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    documentation?: DocumentationContentResponse;
};
export type StackPluginStudioResponse = {
    id: string;
    slug: string;
    name: string;
};
export type PluginRequiresConnectionResponse = {
    typeId: string;
    "type": string;
    alias: string;
    optional: boolean;
    source: string;
};
export type PluginVersionRequiresActionsResponse = {
    slug: string;
    displayName: string;
    resolved?: boolean;
};
export type PluginVersionRequiresPluginsResponse = {
    slug: string;
    displayName: string;
    "type": "INFRA" | "APP";
    resolved?: boolean;
};
export type PluginRequiresResponse = {
    connections: PluginRequiresConnectionResponse[];
    actions: PluginVersionRequiresActionsResponse[];
    plugins: PluginVersionRequiresPluginsResponse[];
    variables: string[];
};
export type StackPluginActionRequiresConnectionsResponse = {
    typeId: string;
    "type": string;
    alias: string;
    optional?: boolean;
    source?: string;
};
export type StackPluginGeneratesResponse = {
    connections: StackPluginActionRequiresConnectionsResponse[];
};
export type StackPluginActionsRequiresResponse = {
    connections: StackPluginActionRequiresConnectionsResponse[];
    variables: string[];
};
export type StackPluginActionsResponse = {
    id: string;
    versionId: string;
    version: string;
    range?: string;
    slug: string;
    displayName: string;
    description: string;
    qualifier: string;
    status: string;
    requires?: StackPluginActionsRequiresResponse;
};
export type StackPluginResponse = {
    pluginId: string;
    pluginVersionId: string;
    slug: string;
    displayName: string;
    description?: string;
    pluginQualifier: string;
    studio: StackPluginStudioResponse;
    range?: string;
    version: string;
    "type": string;
    status: string;
    requires: PluginRequiresResponse;
    generates: StackPluginGeneratesResponse;
    appAllowed: boolean;
    singleUse: boolean;
    stkProjectsOnly: boolean;
    actions?: StackPluginActionsResponse[];
};
export type GetStackPluginsResponse = {
    stackSlug: string;
    stackSemanticVersion: string;
    appPluginVersions: StackPluginResponse[];
    infraPluginVersions: StackPluginResponse[];
};
export type GetStackActionStudioResponse = {
    slug: string;
    name: string;
    description?: string;
    imageUrl?: string;
};
export type GetStackActionResponse = {
    id: string;
    versionId: string;
    slug: string;
    displayName: string;
    description: string;
    accountSlug: string;
    studio: GetStackActionStudioResponse;
    range?: string;
    version: string;
    "type": string;
    qualifier: string;
    status: string;
    isDocumented: boolean;
};
export type GetStackWorkflowStudioResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
};
export type GetStackWorkflowLatestVersionResponse = {
    id: string;
    displayName: string;
    label: string;
    description: string;
    semanticVersion: string;
    targetApp: boolean;
    targetInfra: boolean;
    addedAt: string;
};
export type GetStackWorkflowResponse = {
    id: string;
    slug: string;
    "type": "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter";
    studio: GetStackWorkflowStudioResponse;
    latestVersion?: GetStackWorkflowLatestVersionResponse;
};
export type GetStackVersionResponse = {
    stack: GetStackVersionStackResponse;
    version: StackVersionResponse;
    plugins?: GetStackPluginsResponse;
    actions?: GetStackActionResponse[];
    workflows?: GetStackWorkflowResponse[];
};
export type Pageable = {
    page?: number;
    size?: number;
    sort?: any;
};
export type FilterStackRequest = {
    filter?: string;
    tags: string[];
    technologies: string[];
};
export type StackVersionV2Dto = {
    stackVersionId: string;
    version: number;
    published: boolean;
    publishedBy?: string;
    publishedAt?: string;
    unpublishedBy?: string;
    unpublishedAt?: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    status: string;
    hasDeprecatedContent: boolean;
};
export type GetStackStudioResponse = {
    stackSlug: string;
    displayName: string;
    description: string;
    imageUrl?: string;
    latestSemanticVersion?: string;
    latestVersion?: StackVersionV2Dto;
};
export type SortObject = {
    direction?: string;
    nullHandling?: string;
    ascending?: boolean;
    property?: string;
    ignoreCase?: boolean;
};
export type PageableObject = {
    offset?: number;
    sort?: SortObject[];
    paged?: boolean;
    pageSize?: number;
    pageNumber?: number;
    unpaged?: boolean;
};
export type PageGetStackStudioResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetStackStudioResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PublishPluginWarningResponse = {
    code?: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type PublishPluginResponse = {
    id: string;
    versionId: string;
    warnings: PublishPluginWarningResponse[];
};
export type GetAvailablePluginVersionsResponse = {
    pluginVersionId: string;
    version: string;
};
export type GetAvailablePluginVersionsRequest = {
    range: string;
};
export type PublishConditionRequest = {
    variable: string;
    operator: string;
    value: object;
};
export type PublishInputRequest = {
    label: string;
    name: string;
    "type": string;
    required: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string[];
    condition?: PublishConditionRequest;
    envInput?: boolean;
};
export type PublishValidatorConnectionRequest = {
    "type": string;
    alias: string;
};
export type PublishValidatorRequiresRequest = {
    connections: PublishValidatorConnectionRequest[];
};
export type PublishValidatorGeneratesRequest = {
    connections: PublishValidatorConnectionRequest[];
};
export type PublishValidatorSpecificationRequest = {
    requires?: PublishValidatorRequiresRequest;
    generates?: PublishValidatorGeneratesRequest;
};
export type PublishValidatorRequest = {
    slug: string;
    schemaVersion: "V1" | "V2" | "V3";
    version: string;
    inputs?: PublishInputRequest[];
    spec: PublishValidatorSpecificationRequest;
};
export type PublishProcessRequest = {
    pluginVersionId: string;
};
export type FilterPluginVersionRequest = {
    "type"?: "INFRA" | "APP";
    technologies?: string[];
    text?: string;
};
export type PluginStudioResponse = {
    slug: string;
    name: string;
    imageUrl?: string;
    description?: string;
};
export type PluginEnvironmentResponse = {
    environments: string[];
};
export type OutputResponse = {
    "from": string;
    to: string;
};
export type PluginGeneratesConnectionResponse = {
    typeId: string;
    "type": string;
    alias: string;
    optional: boolean;
    source: string;
    outputs?: OutputResponse[];
};
export type PluginGeneratesLinkResponse = {
    id: string;
    imageUrl?: string;
    name: string;
    url: string;
    "type": string;
};
export type PluginGeneratesResponse = {
    connections: PluginGeneratesConnectionResponse[];
    links?: PluginGeneratesLinkResponse[];
};
export type PluginGovernanceResponse = {
    id?: string;
    pendingDiscussionReading?: boolean;
    status: string;
};
export type PluginVersionResponse = {
    id: string;
    studio: PluginStudioResponse;
    studioSlug: string;
    accountSlug?: string;
    pluginId: string;
    pluginVersionId: string;
    picture?: string;
    qualifier: string;
    "type": string;
    status: string;
    version: string;
    slug: string;
    displayName?: string;
    description?: string;
    appAllowed: boolean;
    runtime?: PluginEnvironmentResponse;
    requires: PluginRequiresResponse;
    generates: PluginGeneratesResponse;
    isDocumented: boolean;
    governance?: PluginGovernanceResponse;
    singleUse: boolean;
    stkProjectsOnly: boolean;
};
export type PagePluginVersionResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginVersionResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetActionCommandResponse = {
    "default": string;
    workspace: string;
};
export type ActionVersionInputExternalItemsResponse = {
    source: string;
    value: string;
    label?: string;
};
export type ActionVersionInputConditionResponse = {
    variable: string;
    operator: string;
    value: object;
};
export type ActionVersionSubInputResponse = {
    label: string;
    "type": string;
    required: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string[];
    condition?: ActionVersionInputConditionResponse;
    externalItems?: ActionVersionInputExternalItemsResponse;
    connectionInterfaceType?: string;
    input?: ActionVersionSubInputResponse;
    inputs?: ActionVersionInputResponse[];
};
export type ActionVersionInputResponse = {
    label: string;
    name: string;
    "type": string;
    required: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string[];
    externalItems?: ActionVersionInputExternalItemsResponse;
    condition?: ActionVersionInputConditionResponse;
    envInput?: boolean;
    connectionInterfaceType?: string;
    input?: ActionVersionSubInputResponse;
};
export type GetActionConnectionResponse = {
    "type": string;
    alias: string;
    optional: boolean;
    source: string;
};
export type GetActionRequiresResponse = {
    connections?: GetActionConnectionResponse[];
    variables?: string[];
};
export type ActionGovernanceResponse = {
    id?: string;
    status: string;
    pendingDiscussionReading?: boolean;
};
export type GetActionResponse = {
    id: string;
    versionId: string;
    "type": string;
    version: string;
    imageUrl?: string;
    slug: string;
    displayName?: string;
    description?: string;
    scopes: string[];
    command: string;
    commands: GetActionCommandResponse;
    repository?: string;
    requirements?: string;
    about?: string;
    usage?: string;
    implementation?: string;
    releaseNotes?: string;
    createdAt: string;
    updatedAt?: string;
    createdBy: string;
    inputs?: ActionVersionInputResponse[];
    requires?: GetActionRequiresResponse;
    isDocumented: boolean;
    qualifier: string;
    studioSlug: string;
    accountSlug: string;
    status: string;
    governance?: ActionGovernanceResponse;
    documentation?: DocumentationContentResponse;
    justify?: string;
};
export type PublishActionWarningResponse = {
    code?: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type PublishActionResponse = {
    actionId: string;
    versionId: string;
    warnings?: PublishActionWarningResponse[];
};
export type GetAvailableActionVersionsResponse = {
    actionVersionId: string;
    version: string;
};
export type GetAvailableActionVersionsRequest = {
    range: string;
};
export type FilterActionRequest = {
    filter?: string;
};
export type ActionResponse = {
    id: string;
    versionId: string;
    "type": string;
    version: string;
    imageUrl?: string;
    slug: string;
    studioSlug: string;
    accountSlug: string;
    displayName?: string;
    description?: string;
    isDocumented: boolean;
    repository?: string;
    governance?: ActionGovernanceResponse;
    status: string;
    hasRequiredConnection: boolean;
};
export type PageActionResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: ActionResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type FilterStudioRequest = {
    ids: string[];
};
export type FilterStudioResponse = {
    id: string;
    slug: string;
    description: string;
    displayName: string;
    imageUrl: string;
};
export type CreateStackRequest = {
    slug: string;
    displayName: string;
    description: string;
    studioSlug: string;
    image?: string;
    tags?: string[];
};
export type StackVersionListDocumentationLanguageResponse = {
    language: "ENGLISH" | "PTBR";
    status: "DRAFT" | "PUBLISHED";
    lastUpdated: string;
};
export type StackVersionListDocumentationResponse = {
    documentationId: string;
    languages: StackVersionListDocumentationLanguageResponse[];
};
export type StackVersionListResponse = {
    stackVersionId: string;
    stackVersionStatus: string;
    version: number;
    hasDeprecatedContent: boolean;
    published: boolean;
    publishedAt?: string;
    publishedBy?: string;
    unpublishedAt?: string;
    unpublishedBy?: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    documentation?: StackVersionListDocumentationResponse;
};
export type ListStackWorkflowResponse = {
    id: string;
    slug: string;
    "type": "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter";
    target: "app" | "infra";
    studio: GetStackWorkflowStudioResponse;
    range?: string;
    latestVersion?: GetStackWorkflowLatestVersionResponse;
};
export type PageListStackWorkflowResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: ListStackWorkflowResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type AddWorkflowRequest = {
    workflowId: string;
    "type": "VERSION" | "RANGE";
    value: string;
};
export type DeprecateContentRequest = {
    reason: string;
};
export type FilterStarterRequest = {
    filter?: string;
    "type"?: "INFRA" | "APP";
};
export type PageStarterResponseWithRange = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: StarterResponseWithRange[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type FilterStackVersionPluginRequest = {
    "type"?: "INFRA" | "APP";
    technologies: string[];
    text?: string;
};
export type PageStackPluginResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: StackPluginResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetLinkPluginVersionStudioResponse = {
    id: string;
    slug: string;
    name: string;
};
export type GetLinkPluginVersionActionRequiresConnectionsResponse = {
    "type": string;
    alias: string;
};
export type GetLinkPluginVersionActionRequiresResponse = {
    connections: GetLinkPluginVersionActionRequiresConnectionsResponse[];
    variables: string[];
};
export type GetLinkPluginVersionActionsResponse = {
    id: string;
    versionId: string;
    version: string;
    slug: string;
    displayName: string;
    description: string;
    qualifier: string;
    requires?: GetLinkPluginVersionActionRequiresResponse;
};
export type GetLinkPluginVersionResponse = {
    pluginId: string;
    id: string;
    slug: string;
    displayName: string;
    description?: string;
    qualifier: string;
    studio: GetLinkPluginVersionStudioResponse;
    actions?: GetLinkPluginVersionActionsResponse[];
};
export type GetLinkResponse = {
    id: string;
    name: string;
    url: string;
    source: "PLUGIN" | "STACK";
    "type"?: string;
    imageUrl?: string;
    pluginVersion?: GetLinkPluginVersionResponse;
};
export type AddLinkRequest = {
    name: string;
    url: string;
    image?: string;
};
export type LinkResponse = {
    id: string;
    name: string;
    url: string;
    source: "PLUGIN" | "STACK";
    imageUrl?: string;
};
export type GetConnectionInterfaceSuggestionResponse = {
    id: string;
    parentId?: string;
    stackVersionId: string;
    connectionType: string;
    connectionTypeAlias?: string;
    referencedByPluginId?: string;
    referencedByPluginVersionId?: string;
    suggestionPluginId?: string;
    suggestionPluginVersionId?: string;
    stackAllowedAppValue?: boolean;
    pluginAllowedAppValue?: boolean;
    subConnectionTypes: GetConnectionInterfaceSuggestionResponse[];
};
export type CreateSubConnectionInterfaceTypesRequest = {
    connectionType: string;
    connectionTypeAlias: string;
    suggestionPluginVersionId?: string;
    stackAllowedAppValue?: boolean;
    subConnectionTypes: CreateSubConnectionInterfaceTypesRequest[];
};
export type CreateConnectionInterfaceSuggestionRequest = {
    connectionType: string;
    connectionTypeAlias: string;
    referencedByPluginVersionId: string;
    suggestionPluginVersionId?: string;
    stackAllowedAppValue?: boolean;
    subConnectionTypes: CreateSubConnectionInterfaceTypesRequest[];
};
export type FilterStackActionRequest = {
    filter?: string;
};
export type PageGetStackActionResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetStackActionResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type FilterStackVersionRequest = {
    ids: string[];
    withPlugins?: boolean;
    withActions?: boolean;
    withWorkflows?: boolean;
};
export type StackValidateResponse = {
    stack: ValidateResponse;
    starters: ValidateResponse[];
};
export type FilterStackByIdsRequest = {
    ids: string[];
};
export type StackSummaryStackInfoResponse = {
    id: string;
    slug: string;
    name: string;
};
export type StackSummaryStudioInfoResponse = {
    slug: string;
    name: string;
};
export type StackSummaryResponse = {
    stack: StackSummaryStackInfoResponse;
    studio: StackSummaryStudioInfoResponse;
};
export type FilterPluginVersionByIdsRequest = {
    ids: string[];
};
export type CreateDocRequest = {
    contentId: string;
    documentationType: string;
    language: string;
    content: string;
    publish: boolean;
};
export type DocumentationIdResponse = {
    id: string;
};
export type AddContentEvaluationRevisionRequest = {
    status: "APPROVED" | "DECLINED" | "CHANGES_REQUESTED" | "COMMENT";
    isApprover: boolean;
    comments?: string;
};
export type ConnectionInterfaceOutputResponse = {
    id: string;
    name: string;
    "type": "STRING" | "NUMBER" | "INTEGER" | "OBJECT" | "BOOLEAN";
    sensitive: boolean;
};
export type ConnectionInterfaceResponse = {
    id: string;
    slug: string;
    description: string;
    outputs: ConnectionInterfaceOutputResponse[];
};
export type ValidateConnectionInterfaceTypeSchemaRequest = {
    value: JsonNode;
};
export type ActionIdAndVersionReferenceRequest = {
    /** Action Identifier */
    id: string;
    /** Action version reference. This value can be simple semantic version or range semantic version. */
    versionReference: string;
};
export type ComputedInputResponse = {
    name: string;
    expression: string;
};
export type ActionVersionDataSubInputResponse = {
    label: string;
    "type": string;
    required?: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string[];
    condition?: ActionVersionInputConditionResponse;
    externalItems?: ActionVersionInputExternalItemsResponse;
    connectionInterfaceType?: string;
    input?: ActionVersionSubInputResponse;
};
export type ActionVersionDataInputResponse = {
    label: string;
    name: string;
    "type": string;
    required: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string[];
    externalItems?: ActionVersionInputExternalItemsResponse;
    condition?: ActionVersionInputConditionResponse;
    connectionInterfaceType?: string;
    input?: ActionVersionDataSubInputResponse;
};
export type ActionVersionDataWithInputsResponse = {
    id: string;
    versionId: string;
    versionReference?: string;
    "type": string;
    version: string;
    versionMajor: number;
    versionMinor: number;
    versionPatch: number;
    imageUrl?: string;
    slug: string;
    displayName?: string;
    description?: string;
    computedInputs: ComputedInputResponse[];
    globalComputedInputs: ComputedInputResponse[];
    inputs?: ActionVersionDataInputResponse[];
    studioSlug: string;
    accountSlug: string;
    status: string;
};
export type PatchStarterV2Request = {
    description?: string;
    plugins?: AddPluginRequest[];
    optionalPlugins?: AddPluginRequest[];
};
export type UpdateConnectionInterfaceTypeOutputRequest = {
    id: string;
    name: string;
    "type": "STRING" | "NUMBER" | "INTEGER" | "OBJECT" | "BOOLEAN";
    sensitive: boolean;
    schema?: JsonNode;
};
export type UpdateConnectionInterfaceTypeRequest = {
    description?: string;
    outputs: UpdateConnectionInterfaceTypeOutputRequest[];
};
export type ChangeVisibilityRequest = {
    visibility: "ACCOUNT_ONLY" | "SELECTED_WORKSPACES" | "RESTRICTED_ACCESS" | "PUBLIC";
};
export type VerifyHasContentPendingReviewResponse = {
    hasContentPendingReview: boolean;
};
export type ManageStudioGovernanceRequest = {
    manageContent: boolean;
    automaticallyApproveContent?: boolean;
};
export type UpdateStudioRequest = {
    name?: string;
    description?: string;
    image?: string;
};
export type UpdateStackRequest = {
    displayName?: string;
    description?: string;
    image?: string;
    tags?: string[];
};
export type EditLinkRequest = {
    name?: string;
    url?: string;
    image?: string;
};
export type DocumentationResponse = {
    documentationId: string;
    documentationType: "STUDIO_GOVERNANCE" | "ACTION" | "PLUGIN" | "STACK" | "STARTER" | "WORKFLOW";
    language: "ENGLISH" | "PTBR";
    content: string;
    status: "DRAFT" | "PUBLISHED";
    createdAt: string;
    updatedAt?: string;
};
export type UpdateDocRequest = {
    content: string;
    publish: boolean;
};
export type Studio = {
    name: string;
    imageUrl?: string;
    slug: string;
};
export type GetStackV3Response = {
    id: string;
    name: string;
    slug: string;
    imageUrl?: string;
    description: string;
    latestVersion: string;
    updatedAt?: string;
    studio: Studio;
};
export type PageGetStackV3Response = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetStackV3Response[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PageStudioResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: StudioResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GovernanceDto = {
    id?: string;
    status: string;
    pendingDiscussionReading?: boolean;
};
export type PluginVersionDto = {
    pluginVersionId: string;
    slug: string;
    version: string;
    createdBy: string;
    createdAt: string;
    status: string;
    governance?: GovernanceDto;
};
export type PagePluginVersionDto = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginVersionDto[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type DownloadBase64Response = {
    fileBase64: string;
    fileName: string;
    actionVersionId: string;
};
export type ActionVersionDto = {
    actionVersionId: string;
    version: string;
    createdBy: string;
    createdAt: string;
    updatedAt?: string;
    status: string;
    governance?: GovernanceDto;
};
export type PageActionVersionDto = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: ActionVersionDto[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type StackStudioV2Response = {
    slug: string;
    name: string;
    imageUrl?: string;
};
export type StackV2Response = {
    stackId: string;
    slug: string;
    displayName: string;
    description: string;
    imageUrl?: string;
    existsDraft: boolean;
    createdBy: string;
    createdAt: string;
    lastModificationAt: string;
    studio: StackStudioV2Response;
    tags?: string[];
};
export type StackVersionV2Response = {
    stackVersionId: string;
    version: number;
    published: boolean;
    publishedBy?: string;
    publishedAt?: string;
    unpublishedBy?: string;
    unpublishedAt?: string;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    status: string;
    hasDeprecatedContent: boolean;
};
export type StackVersionShortV2Response = {
    stackVersionId: string;
    version: number;
    published: boolean;
    semanticVersion?: string;
    copyFromStackVersionId?: string;
    status: string;
    hasDeprecatedContent: boolean;
};
export type GetStackV2Response = {
    stack: StackV2Response;
    latestVersion: StackVersionV2Response;
    versions: StackVersionShortV2Response[];
};
export type PluginInputExternalItemsResponse = {
    source: string;
    value: string;
    label?: string;
};
export type PluginInputConditionResponse = {
    variable?: string;
    operator?: string;
    value?: JsonNode;
};
export type PluginOutputResponse = {
    "from": string;
    to: string;
};
export type PluginInputResponse = {
    label?: string;
    name?: string;
    "type"?: string;
    required: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string;
    externalItems?: PluginInputExternalItemsResponse;
    itemsValues?: string[];
    condition?: PluginInputConditionResponse;
    isGlobal?: boolean;
    inputEnv?: boolean;
    connectionInterfaceType?: string;
    outputs?: PluginOutputResponse[];
    input?: PluginInputResponse;
};
export type PluginComputedInputResponse = {
    name: string;
    expression: string;
};
export type PluginInputV2Response = {
    inputs: PluginInputResponse[];
    computedInputs: PluginComputedInputResponse[];
    globalComputedInputs: PluginComputedInputResponse[];
};
export type LatestVersionV2Response = {
    versionId: string;
    semanticVersion: string;
    displayName?: string;
    description?: string;
    isDocumented: boolean;
    status: "DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED";
    hasRequiredConnection: boolean;
};
export type ListActionVersionV2Response = {
    id: string;
    version: string;
    createdBy: string;
    createdAt: string;
    status: "DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED";
};
export type ListActionV2Response = {
    id: string;
    slug: string;
    "type": string;
    studioSlug: string;
    accountSlug: string;
    latestVersion?: LatestVersionV2Response;
    versions: ListActionVersionV2Response[];
};
export type PageListActionV2Response = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: ListActionV2Response[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type ActionInputV2Response = {
    computedInputs: ComputedInputResponse[];
    globalComputedInputs: ComputedInputResponse[];
    inputs: ActionVersionInputResponse[];
};
export type AccountStudioResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
};
export type AccountWorkflowVersionResponse = {
    id: string;
    displayName: string;
    label: string;
    description: string;
    semanticVersion: string;
    targetApp: boolean;
    targetInfra: boolean;
    status: "PUBLISHED" | "DEPRECATED";
    createdAt: string;
};
export type AccountWorkflowResponse = {
    id: string;
    slug: string;
    "type": "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter";
    studio: AccountStudioResponse;
    latestVersion: AccountWorkflowVersionResponse;
};
export type PageAccountWorkflowResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: AccountWorkflowResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type WorkflowInputExternalItemsResponse = {
    source: string;
    value: string;
    label?: string;
};
export type WorkflowInputConditionResponse = {
    variable?: string;
    operator?: string;
    value?: JsonNode;
};
export type WorkflowOutputResponse = {
    "from": string;
    to: string;
};
export type WorkflowInputResponse = {
    label?: string;
    name?: string;
    "type"?: string;
    required: boolean;
    pattern?: string;
    help?: string;
    "default"?: JsonNode;
    items?: string;
    externalItems?: WorkflowInputExternalItemsResponse;
    itemsValues?: string[];
    condition?: WorkflowInputConditionResponse;
    connectionInterfaceType?: string;
    outputs?: WorkflowOutputResponse[];
    input?: WorkflowInputResponse;
    scope: string;
};
export type WorkflowComputedInputResponse = {
    name: string;
    expression: string;
};
export type WorkflowInputV2Response = {
    inputs: WorkflowInputResponse[];
    computedInputs: WorkflowComputedInputResponse[];
};
export type GetWorkflowsByStudioDataResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
};
export type GetWorkflowsByStudioLatestVersionDataResponse = {
    id: string;
    displayName: string;
    label: string;
    description: string;
    semanticVersion: string;
    targetApp: boolean;
    targetInfra: boolean;
    createdAt: string;
};
export type GetWorkflowsByStudioResponse = {
    id: string;
    slug: string;
    "type": "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter";
    studio: GetWorkflowsByStudioDataResponse;
    latestVersion?: GetWorkflowsByStudioLatestVersionDataResponse;
};
export type PageGetWorkflowsByStudioResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetWorkflowsByStudioResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type ListWorkflowVersionsResponse = {
    workflowVersionId: string;
    version: string;
    createdBy: string;
    createdAt: string;
    updatedAt?: string;
    status: "PUBLISHED" | "DEPRECATED";
};
export type PageListWorkflowVersionsResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: ListWorkflowVersionsResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type DownloadWorkflowBase64Response = {
    file_base_64: string;
    file_name: string;
    workflowVersionId: string;
};
export type WorkflowStudioResponse = {
    slug: string;
    name: string;
    imageUrl?: string;
    description?: string;
};
export type GetWorkflowCommandResponse = {
    "default": string;
    workspace: string;
};
export type WorkflowVersionJobStepsResponse = {
    id: string;
    identifier: string;
    name?: string;
    label?: string;
    ordination: number;
    optional: boolean;
    workdir?: string;
    "type": string;
    alias?: string;
};
export type WorkflowVersionJobsResponse = {
    id: string;
    identifier: string;
    label: string;
    ordination: number;
    optional: boolean;
    steps?: WorkflowVersionJobStepsResponse[];
};
export type GetWorkflowResponse = {
    id: string;
    studio: WorkflowStudioResponse;
    workflowVersionId: string;
    "type": string;
    version: string;
    slug: string;
    displayName?: string;
    description?: string;
    commands?: GetWorkflowCommandResponse;
    createdAt: string;
    createdBy: string;
    updatedAt?: string;
    repository?: string;
    qualifier: string;
    accountSlug?: string;
    studioSlug: string;
    status: string;
    isDocumented: boolean;
    documentation?: DocumentationContentResponse;
    jobs?: WorkflowVersionJobsResponse[];
};
export type GetAvailableWorkflowVersionsResponse = {
    workflowVersionId: string;
    version: string;
};
export type PageGetAvailableWorkflowVersionsResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetAvailableWorkflowVersionsResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type StackWorkspaceViewResponse = {
    id: string;
    name: string;
    description?: string;
    imageUrl?: string;
    totalLinkedVersions: number;
};
export type PageStackWorkspaceViewResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: StackWorkspaceViewResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type StackVersionInWorkspaceDetailResponse = {
    id: string;
    version?: string;
    status: string;
    totalLinkedApps: number;
    totalLinkedInfra: number;
};
export type StackWorkspaceDetailViewEnvironmentResponse = {
    id?: string;
    name?: string;
};
export type StackWorkspaceDetailViewResponse = {
    stackVersion: StackVersionInWorkspaceDetailResponse;
    environment?: StackWorkspaceDetailViewEnvironmentResponse;
};
export type PageStackWorkspaceDetailViewResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: StackWorkspaceDetailViewResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetUnusedStackVersionsResponse = {
    stackVersionId: string;
    publishedAt?: string;
    version?: string;
    status?: string;
};
export type PageGetUnusedStackVersionsResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetUnusedStackVersionsResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type StackModalViewResponse = {
    totalUsedInWorkspaces: number;
    totalNotUsed: number;
};
export type PluginVersionShortResponse = {
    id: string;
    pluginId: string;
    version: string;
    displayName: string;
    description: string;
    createdAt: string;
    createdBy: string;
    status: string;
    pluginType: "INFRA" | "APP";
    appAllowed: boolean;
    singleUse: boolean;
    stkProjectOnly: boolean;
    stkProjectsOnly: boolean;
    governance?: PluginGovernanceResponse;
    requires?: PluginRequiresResponse;
};
export type GetRequirementsActionStudioResponse = {
    slug: string;
};
export type GetRequirementsPluginActionsResponse = {
    actionId: string;
    actionVersionId: string;
    version: string;
    range?: string;
    slug: string;
    displayName: string;
    description: string;
    actionQualifier: string;
    status: string;
    studio: GetRequirementsActionStudioResponse;
};
export type GetRequirementsPluginStudioResponse = {
    id: string;
    slug: string;
    name: string;
};
export type GetRequirementsPluginConnectionsResponse = {
    typeId: string;
    "type": string;
    alias: string;
};
export type GetRequirementsPluginGeneratesResponse = {
    connections: GetRequirementsPluginConnectionsResponse[];
};
export type GetRequirementsPluginResponse = {
    pluginId: string;
    pluginVersionId: string;
    slug: string;
    "type": string;
    displayName: string;
    description?: string;
    pluginQualifier: string;
    studio: GetRequirementsPluginStudioResponse;
    range?: string;
    version: string;
    status: string;
    generates: GetRequirementsPluginGeneratesResponse;
    appAllowed: boolean;
};
export type DependencyTree = {
    qualifier: string;
    actions: DependencyTree[];
    plugins: DependencyTree[];
};
export type GetPluginRequirementsResponse = {
    actions: GetRequirementsPluginActionsResponse[];
    plugins: GetRequirementsPluginResponse[];
    dependencyTree: DependencyTree;
};
export type PluginDownloadBase64Response = {
    file_base_64: string;
    file_name: string;
    pluginVersionId: string;
};
export type GetPluginCommandResponse = {
    "default": string;
    workspace: string;
};
export type GetPluginResponse = {
    id: string;
    studio: PluginStudioResponse;
    pluginVersionId: string;
    "type": string;
    version: string;
    picture?: string;
    slug: string;
    displayName?: string;
    description?: string;
    technologies?: string[];
    compatibility?: string[];
    repository?: string;
    requirements?: string;
    about?: string;
    usage?: string;
    implementation?: string;
    command?: string;
    commands?: GetPluginCommandResponse;
    releaseNotes?: string;
    appAllowed: boolean;
    createdAt: string;
    createdBy: string;
    updatedAt?: string;
    runtime?: PluginEnvironmentResponse;
    inputs: PluginInputResponse[];
    inputsEnvs: PluginInputResponse[];
    computedInputs?: string;
    requires?: PluginRequiresResponse;
    generates: PluginGeneratesResponse;
    qualifier: string;
    accountSlug?: string;
    studioSlug: string;
    status: string;
    isDocumented: boolean;
    governance?: PluginGovernanceResponse;
    documentation?: DocumentationContentResponse;
    singleUse: boolean;
    justify?: string;
    stkProjectOnly: boolean;
    stkProjectsOnly: boolean;
};
export type StackResponse = {
    slug: string;
    name: string;
    imageUrl?: string;
};
export type PluginStarterResponse = {
    slug: string;
    "type": string;
    description?: string;
    totalLinkedVersions: number;
    studio: PluginStudioResponse;
    stack: StackResponse;
};
export type PagePluginStarterResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginStarterResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetPluginStackStarterUsageStackResponse = {
    id: string;
    version: string;
};
export type GetPluginStackStarterUsagePluginResponse = {
    id: string;
    version: string;
    status: "DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED";
};
export type GetPluginStackStarterUsageResponse = {
    stackVersion: GetPluginStackStarterUsageStackResponse;
    pluginVersion: GetPluginStackStarterUsagePluginResponse;
};
export type PageGetPluginStackStarterUsageResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetPluginStackStarterUsageResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PluginStacksResponse = {
    id: string;
    slug: string;
    displayName: string;
    description: string;
    imageUrl: string;
    totalLinkedVersions: number;
    studio: PluginStudioResponse;
};
export type PagePluginStacksResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginStacksResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetPluginStackUsageStackResponse = {
    id: string;
    version: string;
};
export type GetPluginStackUsagePluginResponse = {
    id: string;
    version: string;
    status: "DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED";
};
export type GetPluginStackUsageResponse = {
    stackVersion: GetPluginStackUsageStackResponse;
    pluginVersion: GetPluginStackUsagePluginResponse;
};
export type PageGetPluginStackUsageResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetPluginStackUsageResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PluginInfrastructureWorkspaceResponse = {
    id: string;
    name: string;
    description?: string;
    imageUrl?: string;
};
export type PluginInfrastructureViewResponse = {
    id: string;
    name: string;
    description?: string;
    totalLinkedVersions: number;
    workspace: PluginInfrastructureWorkspaceResponse;
};
export type PagePluginInfrastructureViewResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginInfrastructureViewResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetInfrastructureEnvironmentsUsageEnvironmentResponse = {
    id: string;
    name: string;
};
export type GetInfrastructureEnvironmentsUsagePluginVersionResponse = {
    id: string;
    version: string;
    status: string;
};
export type InfrastructureEnvironmentsUsesPluginResponse = {
    environment: GetInfrastructureEnvironmentsUsageEnvironmentResponse;
    pluginVersion: GetInfrastructureEnvironmentsUsagePluginVersionResponse;
};
export type PageInfrastructureEnvironmentsUsesPluginResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: InfrastructureEnvironmentsUsesPluginResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PluginViewUsageMonitorResponse = {
    id: string;
    slug: string;
    "type": string;
    totalLinkedVersions: number;
    studio: PluginStudioResponse;
};
export type PagePluginViewUsageMonitorResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginViewUsageMonitorResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type DependentPluginVersionResponse = {
    id: string;
    version: string;
    status: "DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED";
};
export type GetDependentPluginsVersionsResponse = {
    pluginVersion: DependentPluginVersionResponse;
};
export type PageGetDependentPluginsVersionsResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetDependentPluginsVersionsResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetPluginVersionsNotInUseResponse = {
    id: string;
    version: string;
    status: "DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED";
};
export type PageGetPluginVersionsNotInUseResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: GetPluginVersionsNotInUseResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PluginInUseSummaryResponse = {
    totalUsedInStacks: number;
    totalUsedInPlugins: number;
    totalUsedInStarter: number;
    totalUsedInInfrastructures: number;
    totalUsedInApplications: number;
    totalNotUsed: number;
};
export type PluginApplicationsWorkspaceResponse = {
    id: string;
    name: string;
    description?: string;
    imageUrl?: string;
};
export type PluginApplicationsResponse = {
    id: string;
    name: string;
    description?: string;
    totalLinkedVersions: number;
    workspace: PluginApplicationsWorkspaceResponse;
};
export type PagePluginApplicationsResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginApplicationsResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type PluginUsageMonitorApplicationViewVersionResponse = {
    id: string;
    version: string;
    status: string;
};
export type PluginUsageMonitorApplicationViewEnvironmentResponse = {
    id: string;
    name: string;
};
export type PluginUsageMonitorApplicationViewResponse = {
    pluginVersion: PluginUsageMonitorApplicationViewVersionResponse;
    environment: PluginUsageMonitorApplicationViewEnvironmentResponse;
};
export type PagePluginUsageMonitorApplicationViewResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: PluginUsageMonitorApplicationViewResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type ListActionVersionItemResponse = {
    actionVersionId: string;
    version: string;
    createdBy: string;
    createdAt: string;
    updatedAt?: string;
    status: string;
    governance?: ActionGovernanceResponse;
};
export type ListActionVersionResponse = {
    actionId: string;
    versions: ListActionVersionItemResponse[];
};
export type StudioSummaryResponse = {
    id: string;
    slug: string;
    name: string;
    imageUrl?: string;
    visibility: string;
};
export type DeleteStackVersionResponse = {
    stack?: GetStackVersionStackResponse;
    version?: StackVersionResponse;
};
export type GetStackWorkspaceResponse = {
    id: string;
    name: string;
    imageUrl?: string;
};
export type StackWorkspaceResponse = {
    displayName: string;
    imageUrl?: string;
};
export type GetValidateVisibilityResponse = {
    visible: boolean;
};
export type GetPublishSuggestionResponse = {
    majorVersion?: string;
    minorVersion?: string;
    patchVersion?: string;
};
export type StackVersionUsageSummaryResponse = {
    totalUsedInWorkspaces: number;
};
export type StudioInfo = {
    name: string;
    imageUrl?: string;
    slug: string;
};
export type StackVersionMostUsedListResponse = {
    id: string;
    slug: string;
    displayName: string;
    description: string;
    imageUrl?: string;
    version: string;
    lastUpdated: string;
    studio: StudioInfo;
    stackId: string;
};
export type PageStackVersionMostUsedListResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: StackVersionMostUsedListResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type GetPluginYamlResponse = {
    schemaVersion: string;
    yaml?: JsonNode;
};
export type PluginVersionUsageSummaryResponse = {
    totalUsedInStacks: number;
    totalUsedInPlugins: number;
    totalUsedInStarter: number;
    totalUsedInInfrastructures: number;
    totalUsedInApplications: number;
};
export type PluginSummaryResponse = {
    id: string;
    versionId: string;
    "type": string;
    versionMajor: number;
    versionMinor: number;
    versionPatch: number;
    slug: string;
    fullQualifier: string;
    qualifier: string;
    studioSlug: string;
    accountSlug: string;
};
export type PluginVersionByConnectionVersionResponse = {
    id: string;
    displayName?: string;
    version: string;
    description?: string;
    appAllowed: boolean;
    requires?: PluginRequiresResponse;
    generates: PluginGeneratesResponse;
};
export type PluginVersionByConnectionResponse = {
    id: string;
    slug: string;
    accountSlug?: string;
    studio: PluginStudioResponse;
    pluginVersions?: PluginVersionByConnectionVersionResponse[];
};
export type ContentStudioResponse = {
    slug: string;
    createdBy: string;
    visibility: "ACCOUNT_ONLY" | "SELECTED_WORKSPACES" | "RESTRICTED_ACCESS" | "PUBLIC";
    workspaces: string[];
};
export type ContentDataResponse = {
    id: string;
    slug: string;
    contentType: "STUDIO" | "ACTION" | "PLUGIN" | "STACK" | "STARTER" | "ACTION_VERSION" | "PLUGIN_VERSION" | "STACK_VERSION" | "WORKFLOW" | "WORKFLOW_VERSION";
};
export type ContentResponse = {
    studio: ContentStudioResponse;
    content: ContentDataResponse;
    parent?: ContentDataResponse;
};
export type ContentEvaluationResponse = {
    id: string;
    status: "PENDING_APPROVAL" | "PENDING_CREATOR_UPDATE" | "PUBLICATION_APPROVED" | "PUBLICATION_DECLINED";
    qualifier: string;
    "type": "ACTION" | "PLUGIN";
    requestDate: string;
    studio: string;
    requestUser: string;
    pendingDiscussionReading: boolean;
};
export type PageContentEvaluationResponse = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: ContentEvaluationResponse[];
    "number"?: number;
    sort?: SortObject[];
    first?: boolean;
    last?: boolean;
    numberOfElements?: number;
    pageable?: PageableObject;
    empty?: boolean;
};
export type ContentEvaluationSummaryDetailsResponse = {
    id: string;
    creator: string;
    justification: string;
    status: "PENDING_APPROVAL" | "PENDING_CREATOR_UPDATE" | "PUBLICATION_APPROVED" | "PUBLICATION_DECLINED";
    reviewer?: string;
    reviewerComment?: string;
    dateReview?: string;
    contentVersion: string;
    contentSlug: string;
};
export type DiscussionMessageResponse = {
    "type": "APPROVED" | "DECLINED" | "CHANGES_REQUESTED" | "COMMENT";
    commentator: string;
    isEvaluator: boolean;
    date: string;
    message: string;
};
export type ActionSummaryResponse = {
    id: string;
    versionId: string;
    "type": string;
    versionMajor: number;
    versionMinor: number;
    versionPatch: number;
    slug: string;
    fullQualifier: string;
    qualifier: string;
    studioSlug: string;
    accountSlug: string;
};
export type AccountInfoResponse = {
    id: string;
    slug: string;
    qtdStudios: number;
    hasGovernedStudios: boolean;
};
export type DocumentationLanguageResponse = {
    language: "ENGLISH" | "PTBR";
    status: "DRAFT" | "PUBLISHED";
    lastUpdated: string;
};
export type ListDocumentationResponse = {
    documentationId: string;
    languages: DocumentationLanguageResponse[];
};
/**
 * Update Workflow Documentation
 */
export function updateWorkflowDocumentation({ studioSlug, workflowSlug, body }: {
    studioSlug: string;
    workflowSlug: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 204;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/docs`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update Stack and starter docs
 */
export function updateStackDoc({ studioSlug, stackSlug, $type, body }: {
    studioSlug: string;
    stackSlug: string;
    $type?: "STACK" | "STARTER";
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/docs${QS.query(QS.explode({
        "type": $type
    }))}`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update Plugin Documentation
 */
export function updateDocumentation({ studioSlug, pluginSlug, body }: {
    studioSlug: string;
    pluginSlug: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 204;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/docs`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update Action Documentation
 */
export function updateActionDocumentation({ studioSlug, actionSlug, body }: {
    studioSlug: string;
    actionSlug: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 204;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/docs`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Create new stack version
 */
export function createStackVersion({ stackId, createStackVersionRequest }: {
    stackId: string;
    createStackVersionRequest: CreateStackVersionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: StackVersionSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/${encodeURIComponent(stackId)}/versions`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createStackVersionRequest
    })));
}
/**
 * Create Starter on StackVersion
 */
export function createStarterV2({ stackVersionId, createStarterV2Request }: {
    stackVersionId: string;
    createStarterV2Request: CreateStarterV2Request;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StarterResponseWithRange;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/starters`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createStarterV2Request
    })));
}
/**
 * Publish a new stack version
 */
export function publish({ stackVersionId, userAgent, publishStackVersionRequest }: {
    stackVersionId: string;
    userAgent?: string;
    publishStackVersionRequest: PublishStackVersionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: StackVersionSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/publish`, oazapfts.json({
        ...opts,
        method: "POST",
        body: publishStackVersionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * Add plugin to a stack
 */
export function addPlugin({ stackVersionId, body }: {
    stackVersionId: string;
    body: AddPluginRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Associate actions to a plugin
 */
export function associateActionToPlugin({ stackVersionId, pluginVersionId, body }: {
    stackVersionId: string;
    pluginVersionId: string;
    body: AddActionRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/actions`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Add action version to a stack version
 */
export function addAction({ stackVersionId, body }: {
    stackVersionId: string;
    body: AddActionRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/actions`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List Connection Interface Types
 */
export function listConnectionInterfaceTypes(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceResponseV2[];
    } | {
        status: 403;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v2/connection-interface-types", {
        ...opts
    }));
}
/**
 * Create New Connection Interface Type
 */
export function createConnectionInterfaceType({ createConnectionInterfaceTypeRequest }: {
    createConnectionInterfaceTypeRequest: CreateConnectionInterfaceTypeRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: ConnectionInterfaceResponseV2;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 409;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v2/connection-interface-types", oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceTypeRequest
    })));
}
/**
 * List workflows by version ids
 */
export function listWorkflowsByVersionIds({ xWorkspaceId, listWorkflowsByVersionIdsRequest }: {
    xWorkspaceId?: string;
    listWorkflowsByVersionIdsRequest: ListWorkflowsByVersionIdsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListWorkflowsByVersionIdsResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/workflows/versions", oazapfts.json({
        ...opts,
        method: "POST",
        body: listWorkflowsByVersionIdsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate and return info from a workflow
 */
export function validateWorkflow({ studioSlug, body }: {
    studioSlug?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ValidateResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/workflows/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Find studios
 */
export function getStudios1({ xWorkspaceId, aclOnly, filter, isAccountHolder }: {
    xWorkspaceId?: string;
    aclOnly?: boolean;
    filter?: string;
    isAccountHolder?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StudioResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios${QS.query(QS.explode({
        aclOnly,
        filter,
        isAccountHolder
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create a new studio
 */
export function createStudio({ createStudioRequest }: {
    createStudioRequest: CreateStudioRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CreateStudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/studios", oazapfts.json({
        ...opts,
        method: "POST",
        body: createStudioRequest
    })));
}
/**
 * List all workspaces for selected studio visibility
 */
export function listWorkspaces({ studioSlug }: {
    studioSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StudioWorkspaceResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workspaces`, {
        ...opts
    }));
}
/**
 * Add workspace to given studio
 */
export function addWorkspace({ studioSlug, studioWorkspaceRequest }: {
    studioSlug: string;
    studioWorkspaceRequest: StudioWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workspaces`, oazapfts.json({
        ...opts,
        method: "POST",
        body: studioWorkspaceRequest
    })));
}
/**
 * Publish Workflow
 */
export function publishWorkflow({ studioSlug, workflowSlug, userAgent, body }: {
    studioSlug: string;
    workflowSlug: string;
    userAgent?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PublishWorkflowResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * Get Stack by slugs
 */
export function getStackBySlug({ studioSlug, stackSlug, semanticVersion, onlyPublished, xWorkspaceId }: {
    studioSlug: string;
    stackSlug: string;
    semanticVersion?: string;
    onlyPublished?: boolean;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}${QS.query(QS.explode({
        semanticVersion,
        onlyPublished
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Publish Stack
 */
export function publishStack({ studioSlug, stackSlug, userAgent, body }: {
    studioSlug: string;
    stackSlug: string;
    userAgent?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackVersionSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * List stacks from studio by filters
 */
export function listStacksByFilters({ xWorkspaceId, studioSlug, pageable, filterStackRequest }: {
    xWorkspaceId?: string;
    studioSlug: string;
    pageable: Pageable;
    filterStackRequest: FilterStackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetStackStudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Publish plugin
 */
export function publishPluginController({ studioSlug, pluginSlug, body }: {
    studioSlug: string;
    pluginSlug: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PublishPluginResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Get available plugin versions by plugin slug
 */
export function getAvailablePluginVersionsByPluginSlug1({ studioSlug, pluginSlug, xWorkspaceId, range, appAllowed }: {
    studioSlug: string;
    pluginSlug: string;
    xWorkspaceId?: string;
    range: string;
    appAllowed?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetAvailablePluginVersionsResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        appAllowed
    }))}`, {
        ...opts
    }));
}
/**
 * Get available plugin versions by plugin slug
 */
export function oldGetAvailablePluginVersionsByPluginSlug({ studioSlug, pluginSlug, xWorkspaceId, getAvailablePluginVersionsRequest }: {
    studioSlug: string;
    pluginSlug: string;
    xWorkspaceId?: string;
    getAvailablePluginVersionsRequest: GetAvailablePluginVersionsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetAvailablePluginVersionsResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/range`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getAvailablePluginVersionsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate a plugin publish
 */
export function validatePluginPublish({ studioSlug, publishValidatorRequest }: {
    studioSlug: string;
    publishValidatorRequest: PublishValidatorRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/publish/validate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: publishValidatorRequest
    })));
}
/**
 * Process a plugin publish
 */
export function processPluginPublish({ studioSlug, publishProcessRequest }: {
    studioSlug: string;
    publishProcessRequest: PublishProcessRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/publish/process`, oazapfts.json({
        ...opts,
        method: "POST",
        body: publishProcessRequest
    })));
}
/**
 * Get a filtered list of available plugins
 */
export function filteredList({ xWorkspaceId, studioSlug, accountOnly, pageable, filterPluginVersionRequest }: {
    xWorkspaceId?: string;
    studioSlug: string;
    accountOnly?: boolean;
    pageable: Pageable;
    filterPluginVersionRequest: FilterPluginVersionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/filters${QS.query(QS.explode({
        accountOnly,
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterPluginVersionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Get Action by slug
 */
export function getActionBySlug({ studioSlug, actionSlug, version, xWorkspaceId }: {
    studioSlug: string;
    actionSlug: string;
    version?: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetActionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}${QS.query(QS.explode({
        version
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Publish Action
 */
export function createAction({ studioSlug, actionSlug, body }: {
    studioSlug: string;
    actionSlug: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PublishActionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Get available action versions by action slug
 */
export function getAvailableActionVersionsByActionSlug1({ studioSlug, actionSlug, xWorkspaceId, range, requiresConnection }: {
    studioSlug: string;
    actionSlug: string;
    xWorkspaceId?: string;
    range: string;
    requiresConnection?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetAvailableActionVersionsResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        requiresConnection
    }))}`, {
        ...opts
    }));
}
/**
 * Get available action versions by action slug
 */
export function oldGetAvailableActionVersionsByActionSlug({ studioSlug, actionSlug, xWorkspaceId, getAvailableActionVersionsRequest }: {
    studioSlug: string;
    actionSlug: string;
    xWorkspaceId?: string;
    getAvailableActionVersionsRequest: GetAvailableActionVersionsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetAvailableActionVersionsResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/range`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getAvailableActionVersionsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * List actions from studio by filters
 */
export function listActionsByFilters({ xWorkspaceId, studioSlug, pageable, filterActionRequest }: {
    xWorkspaceId?: string;
    studioSlug: string;
    pageable: Pageable;
    filterActionRequest: FilterActionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageActionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterActionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * List studios by filters
 */
export function listStudios({ xWorkspaceId, filterStudioRequest }: {
    xWorkspaceId?: string;
    filterStudioRequest: FilterStudioRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: FilterStudioResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/studios/filters", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStudioRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate and return info from a starter
 */
export function validateStack({ starterPath, studioSlug, body }: {
    starterPath: string;
    studioSlug?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ValidateResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/starters/validate${QS.query(QS.explode({
        starterPath,
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List stacks from account
 */
export function listStacks2({ xWorkspaceId, isAccountHolder }: {
    xWorkspaceId?: string;
    isAccountHolder?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks${QS.query(QS.explode({
        isAccountHolder
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create New Stack
 */
export function createStack({ userAgent, createStackRequest }: {
    userAgent?: string;
    createStackRequest: CreateStackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: StackVersionSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/stacks", oazapfts.json({
        ...opts,
        method: "POST",
        body: createStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * List stack versions
 */
export function listStackVersions({ stackId, xWorkspaceId, startersOnly, infraOnly, workspaceId }: {
    stackId: string;
    xWorkspaceId?: string;
    startersOnly?: boolean;
    infraOnly?: boolean;
    workspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackVersionListResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/${encodeURIComponent(stackId)}/versions${QS.query(QS.explode({
        startersOnly,
        infraOnly,
        workspaceId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create new stack version
 */
export function createStackVersion1({ stackId }: {
    stackId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: StackVersionSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/${encodeURIComponent(stackId)}/versions`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Create association between a Stack Version and a Workspace
 */
export function addStackWorkspace({ stackVersionId, workspaceId, accountId }: {
    stackVersionId: string;
    workspaceId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Remove association between a Stack Version and a Workspace
 */
export function removeStackWorkspace({ stackVersionId, workspaceId }: {
    stackVersionId: string;
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * List all workflows versions from a stack version
 */
export function listWorkflows({ stackVersionId, xWorkspaceId, displayName, $type, target, pageable }: {
    stackVersionId: string;
    xWorkspaceId?: string;
    displayName?: string;
    $type?: string;
    target?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageListStackWorkflowResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workflows${QS.query(QS.explode({
        displayName,
        "type": $type,
        target,
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Add workflow version to a stack version
 */
export function addWorkflow({ stackVersionId, body }: {
    stackVersionId: string;
    body: AddWorkflowRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workflows`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Deprecate a starter
 */
export function deprecateStarterBy({ stackVersionId, starterId, deprecateContentRequest }: {
    stackVersionId: string;
    starterId: string;
    deprecateContentRequest: DeprecateContentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/${encodeURIComponent(starterId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Get a starter list paginated from a StackVersion with filters
 */
export function listStartersWithFilter({ stackVersionId, xWorkspaceId, pageable, filterStarterRequest }: {
    stackVersionId: string;
    xWorkspaceId?: string;
    pageable: Pageable;
    filterStarterRequest: FilterStarterRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageStarterResponseWithRange;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStarterRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Publish a stack
 */
export function publish1({ stackVersionId, userAgent }: {
    stackVersionId: string;
    userAgent?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    }));
}
/**
 * Deprecate  plugin used by stack
 */
export function deprecatePluginInStack({ stackVersionId, pluginVersionId, deprecateContentRequest }: {
    stackVersionId: string;
    pluginVersionId: string;
    deprecateContentRequest: DeprecateContentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
        data: object;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/versions/${encodeURIComponent(pluginVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Filter Plugins by stack version id
 */
export function filterStackVersionPlugins({ xWorkspaceId, stackVersionId, pageable, filterStackVersionPluginRequest }: {
    xWorkspaceId?: string;
    stackVersionId: string;
    pageable: Pageable;
    filterStackVersionPluginRequest: FilterStackVersionPluginRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageStackPluginResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackVersionPluginRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * List links by stack version
 */
export function listLinksByStackVersion({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetLinkResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links`, {
        ...opts
    }));
}
/**
 * Add a link to stack versions
 */
export function addLink({ stackVersionId, addLinkRequest }: {
    stackVersionId: string;
    addLinkRequest: AddLinkRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: LinkResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addLinkRequest
    })));
}
/**
 * Deprecate a stack
 */
export function deprecateStackVersionBy({ stackVersionId, deprecateContentRequest }: {
    stackVersionId: string;
    deprecateContentRequest: DeprecateContentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Get suggestion of connections interfaces
 */
export function getConnectionInterfaceSuggestion({ stackVersionId, xWorkspaceId }: {
    stackVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetConnectionInterfaceSuggestionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/connections`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create suggestion of connections interfaces
 */
export function createConnectionInterfaceSuggestion({ stackVersionId, createConnectionInterfaceSuggestionRequest }: {
    stackVersionId: string;
    createConnectionInterfaceSuggestionRequest: CreateConnectionInterfaceSuggestionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/connections`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceSuggestionRequest
    })));
}
/**
 * Deprecate an action used by stack
 */
export function deprecateActionInStack({ stackVersionId, actionVersionId, deprecateContentRequest }: {
    stackVersionId: string;
    actionVersionId: string;
    deprecateContentRequest: DeprecateContentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
        data: object;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions/versions/${encodeURIComponent(actionVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * List actions from stack by filters
 */
export function listActionsByFilters1({ xWorkspaceId, stackVersionId, pageable, filterStackActionRequest }: {
    xWorkspaceId?: string;
    stackVersionId: string;
    pageable: Pageable;
    filterStackActionRequest: FilterStackActionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetStackActionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackActionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Find a list of stack versions from filters
 */
export function getStackVersionListByIds({ xWorkspaceId, filterStackVersionRequest }: {
    xWorkspaceId?: string;
    filterStackVersionRequest: FilterStackVersionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/stacks/versions/filters", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackVersionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate and return info from a stack
 */
export function validateStack1({ studioSlug, body }: {
    studioSlug?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackValidateResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List of stacks by its ids
 */
export function listStackByIdsController({ filterStackByIdsRequest }: {
    filterStackByIdsRequest: FilterStackByIdsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackSummaryResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/stacks/summary", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackByIdsRequest
    })));
}
/**
 * List plugins version by its ids
 */
export function listPluginVersionByIdsController({ xWorkspaceId, filterPluginVersionByIdsRequest }: {
    xWorkspaceId?: string;
    filterPluginVersionByIdsRequest: FilterPluginVersionByIdsRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginVersionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/plugins/versions", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterPluginVersionByIdsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Deprecate a plugin version
 */
export function deprecatePluginVersion({ pluginVersionId, deprecateContentRequest }: {
    pluginVersionId: string;
    deprecateContentRequest: DeprecateContentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Validate and return info from a plugin
 */
export function validatePlugin({ studioSlug, body }: {
    studioSlug?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ValidateResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Create new documentation
 */
export function createDoc({ createDocRequest }: {
    createDocRequest: CreateDocRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: DocumentationIdResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 409;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/docs", oazapfts.json({
        ...opts,
        method: "POST",
        body: createDocRequest
    })));
}
/**
 * Add revision to content evaluation
 */
export function contentEvaluationRevision({ contentEvaluationId, addContentEvaluationRevisionRequest }: {
    contentEvaluationId: string;
    addContentEvaluationRevisionRequest: AddContentEvaluationRevisionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/contents-evaluation/${encodeURIComponent(contentEvaluationId)}/revision`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addContentEvaluationRevisionRequest
    })));
}
/**
 * List Connection Interface Types
 */
export function listConnectionInterfaceTypes1(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceResponse[];
    } | {
        status: 403;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/connection-interface-types", {
        ...opts
    }));
}
/**
 * Create New Connection Interface Type
 */
export function createConnectionInterfaceType1({ createConnectionInterfaceTypeRequest }: {
    createConnectionInterfaceTypeRequest: CreateConnectionInterfaceTypeRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: ConnectionInterfaceResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 409;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/connection-interface-types", oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceTypeRequest
    })));
}
/**
 * Validate Connection Interface Type Object Output Schema
 */
export function validateConnectionInterfaceTypeObjectOutputSchema({ connectionInterfaceTypeIdOrSlug, outputId, validateConnectionInterfaceTypeSchemaRequest }: {
    connectionInterfaceTypeIdOrSlug: string;
    outputId: string;
    validateConnectionInterfaceTypeSchemaRequest: ValidateConnectionInterfaceTypeSchemaRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeIdOrSlug)}/outputs/${encodeURIComponent(outputId)}/validate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: validateConnectionInterfaceTypeSchemaRequest
    })));
}
/**
 * List actions versions by id and action version or range
 */
export function getActionsVersions({ body }: {
    body: ActionIdAndVersionReferenceRequest[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ActionVersionDataWithInputsResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/actions/versions", oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Deprecate an action version
 */
export function deprecateActionVersion({ actionVersionId, deprecateContentRequest }: {
    actionVersionId: string;
    deprecateContentRequest: DeprecateContentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Validate and return info from a action
 */
export function validateAction({ studioSlug, body }: {
    studioSlug?: string;
    body?: {
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ValidateResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Update a starter from a StackVersion
 */
export function patchStarterV2({ stackVersionId, starterId, patchStarterV2Request }: {
    stackVersionId: string;
    starterId: string;
    patchStarterV2Request: PatchStarterV2Request;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StarterResponseWithRange;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/${encodeURIComponent(starterId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: patchStarterV2Request
    })));
}
/**
 * Edit a Connection Interface Type
 */
export function updateConnectionInterfaceType({ connectionInterfaceTypeId, updateConnectionInterfaceTypeRequest }: {
    connectionInterfaceTypeId: string;
    updateConnectionInterfaceTypeRequest: UpdateConnectionInterfaceTypeRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceResponseV2;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateConnectionInterfaceTypeRequest
    })));
}
/**
 * Change the visibility of given studio
 */
export function changeVisibility({ studioSlug, changeVisibilityRequest }: {
    studioSlug: string;
    changeVisibilityRequest: ChangeVisibilityRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/visibility`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: changeVisibilityRequest
    })));
}
/**
 * Get studio tabs
 */
export function getStudioTabs({ studioSlug }: {
    studioSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/tabs`, {
        ...opts
    }));
}
/**
 * Updates studio tabs
 */
export function updateStudioTabs({ studioSlug, body }: {
    studioSlug: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/tabs`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body
    })));
}
/**
 * Get stack tabs
 */
export function getStackTabs({ studioSlug, stackSlug }: {
    studioSlug: string;
    stackSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/tabs`, {
        ...opts
    }));
}
/**
 * Updates stack tabs
 */
export function updateStackTabs({ studioSlug, stackSlug, body }: {
    studioSlug: string;
    stackSlug: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/tabs`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body
    })));
}
/**
 * Checks for content pending review
 */
export function verifyHasContentPendingReview({ studioSlug }: {
    studioSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: VerifyHasContentPendingReviewResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/governance`, {
        ...opts
    }));
}
/**
 * Enable or disable studio governance
 */
export function manageStudioGovernance({ studioSlug, manageStudioGovernanceRequest }: {
    studioSlug: string;
    manageStudioGovernanceRequest: ManageStudioGovernanceRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/governance`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: manageStudioGovernanceRequest
    })));
}
/**
 * Delete a studio
 */
export function deleteStudio({ studioId }: {
    studioId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Updates studio
 */
export function updateStudio({ studioId, updateStudioRequest }: {
    studioId: string;
    updateStudioRequest: UpdateStudioRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateStudioRequest
    })));
}
/**
 * get stack
 */
export function getStackById({ stackId, semanticVersion, xWorkspaceId }: {
    stackId: string;
    semanticVersion?: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/${encodeURIComponent(stackId)}${QS.query(QS.explode({
        semanticVersion
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * update stack
 */
export function updateStackById({ stackId, updateStackRequest }: {
    stackId: string;
    updateStackRequest: UpdateStackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionStackResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/${encodeURIComponent(stackId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateStackRequest
    })));
}
/**
 * Delete a link from a stack versions
 */
export function deleteLink({ stackVersionId, linkId }: {
    stackVersionId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Edit a link in a stack versions
 */
export function editLink({ stackVersionId, linkId, editLinkRequest }: {
    stackVersionId: string;
    linkId: string;
    editLinkRequest: EditLinkRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: LinkResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links/${encodeURIComponent(linkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: editLinkRequest
    })));
}
/**
 * Get a documentation
 */
export function getDoc({ documentationId, language, status }: {
    documentationId: string;
    language: string;
    status: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Delete a documentation
 */
export function deleteDoc({ documentationId, language, status }: {
    documentationId: string;
    language: string;
    status: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update a documentation
 */
export function updateDoc({ documentationId, language, updateDocRequest }: {
    documentationId: string;
    language: string;
    updateDocRequest: UpdateDocRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateDocRequest
    })));
}
/**
 * Edit a Connection Interface Type
 */
export function updateConnectionInterfaceType1({ connectionInterfaceTypeId, updateConnectionInterfaceTypeRequest }: {
    connectionInterfaceTypeId: string;
    updateConnectionInterfaceTypeRequest: UpdateConnectionInterfaceTypeRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateConnectionInterfaceTypeRequest
    })));
}
/**
 * List stacks from the account
 */
export function listStacks({ isAccountHolder, view, filter, page, size, sort, direction }: {
    isAccountHolder?: boolean;
    view?: "FAVORITES" | "ALL";
    filter?: string;
    page?: number;
    size?: number;
    sort?: "NAME" | "DATE" | "STUDIO_NAME" | "VERSION";
    direction?: "ASC" | "DESC";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetStackV3Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v3/stacks${QS.query(QS.explode({
        isAccountHolder,
        view,
        filter,
        page,
        size,
        sort,
        direction
    }))}`, {
        ...opts
    }));
}
/**
 * Find studios
 */
export function getStudios({ xWorkspaceId, authorization, aclOnly, filter, view, isAccountHolder, startersOnly, infraOnly, workspaceId, pageable }: {
    xWorkspaceId?: string;
    authorization: string;
    aclOnly?: boolean;
    filter?: string;
    view?: "FAVORITES" | "ALL";
    isAccountHolder?: boolean;
    startersOnly?: boolean;
    infraOnly?: boolean;
    workspaceId?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageStudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/studios${QS.query(QS.explode({
        aclOnly,
        filter,
        view,
        isAccountHolder,
        startersOnly,
        infraOnly,
        workspaceId,
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId,
            Authorization: authorization
        })
    }));
}
/**
 * Get available plugin versions by plugin slug
 */
export function getAvailablePluginVersionsByPluginSlug({ studioSlug, pluginSlug, xWorkspaceId, range, appAllowed, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    xWorkspaceId?: string;
    range: string;
    appAllowed?: boolean;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginVersionDto;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        appAllowed,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Download an action by version
 */
export function downloadAction({ studioSlug, actionSlug, version, xWorkspaceId }: {
    studioSlug: string;
    actionSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DownloadBase64Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get available action versions by action slug
 */
export function getAvailableActionVersionsByActionSlug({ studioSlug, actionSlug, xWorkspaceId, range, requiresConnection, pageable }: {
    studioSlug: string;
    actionSlug: string;
    xWorkspaceId?: string;
    range: string;
    requiresConnection?: boolean;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageActionVersionDto;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        requiresConnection,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List stacks from account
 */
export function listStacks1({ xWorkspaceId, isAccountHolder }: {
    xWorkspaceId?: string;
    isAccountHolder?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackV2Response[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/stacks${QS.query(QS.explode({
        isAccountHolder
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get inputs from a plugin version
 */
export function getInputs({ pluginVersionId, xWorkspaceId }: {
    pluginVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginInputV2Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/plugins/versions/${encodeURIComponent(pluginVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get Connection Interface Type by Id
 */
export function getConnectionInterfaceType({ connectionInterfaceTypeIdOrSlug }: {
    connectionInterfaceTypeIdOrSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceResponseV2;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeIdOrSlug)}`, {
        ...opts
    }));
}
/**
 * List of actions
 */
export function listActions({ studioSlug, actionSlug, requiresConnection, filter, pageable }: {
    studioSlug?: string;
    actionSlug?: string;
    requiresConnection?: boolean;
    filter?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageListActionV2Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/actions${QS.query(QS.explode({
        studioSlug,
        actionSlug,
        requiresConnection,
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List inputs of an action version
 */
export function listInputs({ actionVersionId, xWorkspaceId, accountId }: {
    actionVersionId: string;
    xWorkspaceId?: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ActionInputV2Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v2/actions/versions/${encodeURIComponent(actionVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId,
            "account-id": accountId
        })
    }));
}
/**
 * List account workflow latest versions
 */
export function listAccountWorkflow({ filter, accountOnly, page, size }: {
    filter?: string;
    accountOnly?: boolean;
    page?: number;
    size?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageAccountWorkflowResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/workflows${QS.query(QS.explode({
        filter,
        accountOnly,
        page,
        size
    }))}`, {
        ...opts
    }));
}
/**
 * Validate an workflow version to delete
 */
export function validateUnpublishWorkflowVersion({ workflowVersionId }: {
    workflowVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/workflows/versions/${encodeURIComponent(workflowVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * Get inputs from a workflow version
 */
export function getInputs1({ workflowVersionId, xWorkspaceId }: {
    workflowVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkflowInputV2Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/workflows/versions/${encodeURIComponent(workflowVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get workflows from studio
 */
export function getWorkflowByStudioSlug({ studioSlug, xWorkspaceId, displayName, $type, slug, description, pageable }: {
    studioSlug: string;
    xWorkspaceId?: string;
    displayName?: string;
    $type?: "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter";
    slug?: string;
    description?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetWorkflowsByStudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        displayName,
        "type": $type,
        slug,
        description,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List all workflow versions
 */
export function listWorkflowVersion({ studioSlug, workflowSlug, status, xWorkspaceId, pageable }: {
    studioSlug: string;
    workflowSlug: string;
    status?: "PUBLISHED" | "DEPRECATED";
    xWorkspaceId?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageListWorkflowVersionsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/versions${QS.query(QS.explode({
        status,
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a workflow by version
 */
export function downloadWorkflow({ studioSlug, workflowSlug, version, xWorkspaceId }: {
    studioSlug: string;
    workflowSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a workflow by version (base64 response version)
 */
export function downloadWorkflowBase64({ studioSlug, workflowSlug, version, xWorkspaceId }: {
    studioSlug: string;
    workflowSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DownloadWorkflowBase64Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/versions/${encodeURIComponent(version)}/download/base64`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get workflow version
 */
export function getWorkflow({ studioSlug, workflowSlug, version, xWorkspaceId }: {
    studioSlug: string;
    workflowSlug: string;
    version?: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetWorkflowResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/version${QS.query(QS.explode({
        version
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get available workflow versions by workflow slug
 */
export function getAvailableWorkflowVersionsByWorkflowSlug({ studioSlug, workflowSlug, xWorkspaceId, range, pageable }: {
    studioSlug: string;
    workflowSlug: string;
    xWorkspaceId?: string;
    range: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetAvailableWorkflowVersionsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get an workflow documentation
 */
export function getWorkflowDoc({ studioSlug, documentationId, language, status }: {
    studioSlug: string;
    documentationId: string;
    language: string;
    status?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Get a starter documentation
 */
export function getStarterDoc({ studioSlug, documentationId, language, status }: {
    studioSlug: string;
    documentationId: string;
    language: string;
    status?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/starters/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * List Stacks inside a studio
 */
export function listStacksInStudio({ studioSlug, onlyPublished, xWorkspaceId, startersOnly, infraOnly, workspaceId }: {
    studioSlug: string;
    onlyPublished?: boolean;
    xWorkspaceId?: string;
    startersOnly?: boolean;
    infraOnly?: boolean;
    workspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackStudioResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks${QS.query(QS.explode({
        onlyPublished,
        startersOnly,
        infraOnly,
        workspaceId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List stacks workspaces view
 */
export function getStackWorkspaces({ studioSlug, stackSlug, filter, pageable }: {
    studioSlug: string;
    stackSlug: string;
    filter?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageStackWorkspaceViewResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/workspaces${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List stacks workspaces details view
 */
export function getStackWorkspaceDetailView({ studioSlug, stackSlug, workspaceId, pageable }: {
    studioSlug: string;
    stackSlug: string;
    workspaceId: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageStackWorkspaceDetailViewResponse;
    } | {
        status: 403;
        data: PageStackWorkspaceDetailViewResponse;
    } | {
        status: 404;
        data: PageStackWorkspaceDetailViewResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/workspace/${encodeURIComponent(workspaceId)}/stack-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * list starters in a stack
 */
export function listStartersInStack({ studioSlug, stackSlug, semanticVersion, $type, xWorkspaceId }: {
    studioSlug: string;
    stackSlug: string;
    semanticVersion?: string;
    $type?: "APP" | "INFRA";
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StarterResponseWithRange[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/starters${QS.query(QS.explode({
        semanticVersion,
        "type": $type
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get unused stack versions
 */
export function getUnusedStackVersions({ studioSlug, stackSlug, pageable }: {
    studioSlug: string;
    stackSlug: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetUnusedStackVersionsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/not-in-use${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Stack Modal View Summary
 */
export function stackModalViewSummary({ studioSlug, stackSlug }: {
    studioSlug: string;
    stackSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackModalViewResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * Get a stack documentation
 */
export function getStackDoc({ studioSlug, documentationId, language, status }: {
    studioSlug: string;
    documentationId: string;
    language: string;
    status?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * List versions of a plugin
 */
export function listVersionsOfPlugin({ studioSlug, pluginSlug, appAllowed, xWorkspaceId }: {
    studioSlug: string;
    pluginSlug: string;
    appAllowed?: boolean;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginVersionShortResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions${QS.query(QS.explode({
        appAllowed
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get plugins requirements
 */
export function getRequirements({ studioSlug, pluginSlug, version, xWorkspaceId }: {
    studioSlug: string;
    pluginSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetPluginRequirementsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions/${encodeURIComponent(version)}/requirements`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a plugin by version
 */
export function downloadPlugin({ studioSlug, pluginSlug, version, xWorkspaceId }: {
    studioSlug: string;
    pluginSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a plugin by version (base64 response version)
 */
export function downloadPluginBase64({ studioSlug, pluginSlug, version, xWorkspaceId }: {
    studioSlug: string;
    pluginSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginDownloadBase64Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions/${encodeURIComponent(version)}/download/base64`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get plugin version
 */
export function getPlugin({ studioSlug, pluginSlug, version, xWorkspaceId }: {
    studioSlug: string;
    pluginSlug: string;
    version?: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetPluginResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/version${QS.query(QS.explode({
        version
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List all starters that use a given plugin
 */
export function getStarterUsesPlugin({ studioSlug, pluginSlug, filter, $type, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    filter?: string;
    $type?: "APP" | "INFRA";
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginStarterResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/starters${QS.query(QS.explode({
        filter,
        "type": $type,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get starters that use a plugin
 */
export function getStarterStackVersionsAndPluginsVersions({ studioSlug, pluginSlug, starterSlug, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    starterSlug: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetPluginStackStarterUsageResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/starter/${encodeURIComponent(starterSlug)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List all Stacks tha uses a given plugin
 */
export function getStackUsesPlugin({ studioSlug, pluginSlug, filter, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    filter?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginStacksResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/stacks${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugin versions by stack
 */
export function getPluginVersions({ studioSlug, pluginSlug, stackId, xWorkspaceId, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    stackId: string;
    xWorkspaceId?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetPluginStackUsageResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/stack/${encodeURIComponent(stackId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Plugin Infrastructure View
 */
export function getPluginInfrastructureView({ studioSlug, pluginSlug, filter, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    filter?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginInfrastructureViewResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/shared-infra${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get a list of environments associated to a given infrastructure that uses a plugin
 */
export function getInfrastructureEnvironmentsUsesPlugin({ studioSlug, pluginSlug, infraId, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    infraId: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageInfrastructureEnvironmentsUsesPluginResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/shared-infra/${encodeURIComponent(infraId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List all plugin view of usage insights
 */
export function getGetPluginView({ studioSlug, pluginSlug, studio, filter, $type, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    studio?: string;
    filter?: string;
    $type?: "INFRA" | "APP";
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginViewUsageMonitorResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/plugins${QS.query(QS.explode({
        studio,
        filter,
        "type": $type,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugins versions that depend on a plugin
 */
export function getDependentPluginsVersions({ studioSlug, pluginSlug, pluginId, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    pluginId: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetDependentPluginsVersionsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/plugin/${encodeURIComponent(pluginId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugin versions that are not in use
 */
export function getPluginVersionsNotInUse({ studioSlug, pluginSlug, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageGetPluginVersionsNotInUseResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/not-in-use${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Usage monitor get a summary of usage by given plugin
 */
export function getPluginModalView({ studioSlug, pluginSlug }: {
    studioSlug: string;
    pluginSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginInUseSummaryResponse;
    } | {
        status: 403;
        data: PluginInUseSummaryResponse;
    } | {
        status: 404;
        data: PluginInUseSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * List all Applications that uses a given plugin
 */
export function getApplicationsUsesPlugin({ studioSlug, pluginSlug, filter, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    filter?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginApplicationsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/applications${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Usage monitor get a application view details by plugin
 */
export function getApplicationDetailsView({ studioSlug, pluginSlug, applicationId, pageable }: {
    studioSlug: string;
    pluginSlug: string;
    applicationId: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PagePluginUsageMonitorApplicationViewResponse;
    } | {
        status: 403;
        data: PagePluginUsageMonitorApplicationViewResponse;
    } | {
        status: 404;
        data: PagePluginUsageMonitorApplicationViewResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/application/${encodeURIComponent(applicationId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List plugin technologies
 */
export function listPluginTechnologies({ studioSlug, xWorkspaceId, filterForStack }: {
    studioSlug: string;
    xWorkspaceId?: string;
    filterForStack?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/technologies${QS.query(QS.explode({
        filterForStack
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get a plugin documentation
 */
export function getPluginDoc({ studioSlug, documentationId, language, status }: {
    studioSlug: string;
    documentationId: string;
    language: string;
    status?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * List all action versions
 */
export function getAllActionVersions({ studioSlug, actionSlug, status, xWorkspaceId, requiresConnection }: {
    studioSlug: string;
    actionSlug: string;
    status?: ("DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED")[];
    xWorkspaceId?: string;
    requiresConnection?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListActionVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions${QS.query(QS.explode({
        status,
        requiresConnection
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download an action by version
 */
export function downloadAction1({ studioSlug, actionSlug, version, xWorkspaceId }: {
    studioSlug: string;
    actionSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download an action by version
 */
export function downloadActionBase64({ studioSlug, actionSlug, version, xWorkspaceId }: {
    studioSlug: string;
    actionSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DownloadBase64Response;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download/base64`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get an action documentation
 */
export function getActionDoc({ studioSlug, documentationId, language, status }: {
    studioSlug: string;
    documentationId: string;
    language: string;
    status?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DocumentationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Get a studio by id or slug
 */
export function getStudioByIdOrSlug({ studioIdOrSlug, xWorkspaceId }: {
    studioIdOrSlug: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StudioResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioIdOrSlug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get studios from token
 */
export function getStudiosToCreateButton(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StudioSummaryResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/studios/create", {
        ...opts
    }));
}
/**
 * Get a stack version list from its ids
 */
export function getStackVersionListByIds1({ stackVersionIds, xWorkspaceId }: {
    stackVersionIds: string[];
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions${QS.query(QS.explode({
        stackVersionIds
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get a stack version from its id
 */
export function getStackVersionById({ stackVersionId, xWorkspaceId }: {
    stackVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Delete a stack version of type draft or unpublish
 */
export function deleteV1StacksVersionsByStackVersionId({ stackVersionId, deletionType }: {
    stackVersionId: string;
    deletionType: "DRAFT" | "UNPUBLISH";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeleteStackVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}${QS.query(QS.explode({
        deletionType
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Get all workspaces associated with a stack version id
 */
export function getWorkspaces({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackWorkspaceResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspaces`, {
        ...opts
    }));
}
/**
 * Get a stack version displayName and imageUrl
 */
export function getStackVersionWorkspaces({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackWorkspaceResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspaces/summary`, {
        ...opts
    }));
}
/**
 * Validates the visibility of the given stack version with its studio
 */
export function validateVisibility({ xWorkspaceId, stackVersionId }: {
    xWorkspaceId: string;
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetValidateVisibilityResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/validate-visibility`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Validate a stack version to delete
 */
export function validate({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * Get a starter list from a StackVersion
 */
export function listStarters({ stackVersionId, $type, appAllowed, xWorkspaceId }: {
    stackVersionId: string;
    $type?: "APP" | "INFRA";
    appAllowed?: boolean;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StarterResponseWithRange[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters${QS.query(QS.explode({
        "type": $type,
        appAllowed
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get suggestions of version for a publish of stack version
 */
export function getPublishSuggestions({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetPublishSuggestionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/publish/suggestions`, {
        ...opts
    }));
}
/**
 * List Plugins by stack version id
 */
export function listPlugins({ stackVersionId, starterType, xWorkspaceId }: {
    stackVersionId: string;
    starterType?: "APP" | "INFRA";
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackPluginsResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins${QS.query(QS.explode({
        starterType
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Stack Version Usage Summary
 */
export function stackVersionUsageSummary({ stackVersionId }: {
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: StackVersionUsageSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * List all action versions from a stack version
 */
export function listActions1({ stackVersionId, forPluginVersionId, xWorkspaceId }: {
    stackVersionId: string;
    forPluginVersionId?: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetStackActionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions${QS.query(QS.explode({
        forPluginVersionId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List stack tags
 */
export function listStackTags({ xWorkspaceId, studioSlug, filter, size }: {
    xWorkspaceId?: string;
    studioSlug?: string;
    filter?: string;
    size?: number;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/tags${QS.query(QS.explode({
        studioSlug,
        filter,
        size
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List most used stack versions
 */
export function listMostUsedStackVersions({ filter, pageable }: {
    filter?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageStackVersionMostUsedListResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/most-used${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List plugins version
 */
export function listPlugins1({ studioSlug, pluginVersionId, name, $type, technologies, status, filter, starterType, accountOnly, xWorkspaceId }: {
    studioSlug?: string;
    pluginVersionId?: string;
    name?: string;
    $type?: "INFRA" | "APP";
    technologies?: string[];
    status?: ("PENDING_APPROVAL" | "PENDING_CREATOR_UPDATE" | "PUBLICATION_APPROVED" | "PUBLICATION_DECLINED")[];
    filter?: string;
    starterType?: "APP" | "INFRA";
    accountOnly?: boolean;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginVersionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins${QS.query(QS.explode({
        studioSlug,
        pluginVersionId,
        name,
        "type": $type,
        technologies,
        status,
        filter,
        starterType,
        accountOnly
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Validate a plugin version to delete
 */
export function validatePluginVersion({ pluginVersionId }: {
    pluginVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * Get a plugin version yaml content
 */
export function getPluginYamlContent({ pluginVersionId, xWorkspaceId }: {
    pluginVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetPluginYamlResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/manifest`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get inputs from a plugin version
 */
export function getInputs2({ pluginVersionId, xWorkspaceId }: {
    pluginVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginInputResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Plugin Version Usage Summary
 */
export function getPluginVersionUsageSummary({ pluginVersionId }: {
    pluginVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginVersionUsageSummaryResponse;
    } | {
        status: 403;
        data: PluginVersionUsageSummaryResponse;
    } | {
        status: 404;
        data: PluginVersionUsageSummaryResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * Get Plugins Versions by require variable
 */
export function getPluginVersionsByVariable({ variableName, accountId }: {
    variableName: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginSummaryResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/variables/${encodeURIComponent(variableName)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * List plugins version by connection
 */
export function listPluginsByConnectionInterface({ xWorkspaceId, connTypeSlug, studioSlug }: {
    xWorkspaceId?: string;
    connTypeSlug: string;
    studioSlug?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PluginVersionByConnectionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/generates/connections/${encodeURIComponent(connTypeSlug)}${QS.query(QS.explode({
        studioSlug
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List reasons to deprecate content
 */
export function listReasons(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/deprecated-reasons", {
        ...opts
    }));
}
/**
 * Get Studio and Content data from Content Type and Content ID
 */
export function getContent({ contentType, contentIdentifier, studioSlug, accountId }: {
    contentType: "STUDIO" | "ACTION" | "PLUGIN" | "STACK" | "STARTER" | "ACTION_VERSION" | "PLUGIN_VERSION" | "STACK_VERSION" | "WORKFLOW" | "WORKFLOW_VERSION";
    contentIdentifier: string;
    studioSlug?: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ContentResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/contents${QS.query(QS.explode({
        contentType,
        contentIdentifier,
        studioSlug,
        accountId
    }))}`, {
        ...opts
    }));
}
/**
 * List contents evaluation
 */
export function listContentsEvaluation({ filter, page, size, statusRevision }: {
    filter?: string;
    page?: number;
    size?: number;
    statusRevision?: "REVIEW_IN_PROGRESS" | "REVIEW_DONE";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageContentEvaluationResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/contents-evaluation${QS.query(QS.explode({
        filter,
        page,
        size,
        statusRevision
    }))}`, {
        ...opts
    }));
}
/**
 * Content evaluation summary details
 */
export function contentEvaluationDetails({ contentEvaluationId }: {
    contentEvaluationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ContentEvaluationSummaryDetailsResponse;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/contents-evaluation/${encodeURIComponent(contentEvaluationId)}`, {
        ...opts
    }));
}
/**
 * List discussion messages
 */
export function getDiscussionMessages({ contentEvaluationId }: {
    contentEvaluationId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DiscussionMessageResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/contents-evaluation/${encodeURIComponent(contentEvaluationId)}/discussion`, {
        ...opts
    }));
}
/**
 * Get Connection Interface Type by Id
 */
export function getConnectionInterfaceType1({ connectionInterfaceTypeIdOrSlug }: {
    connectionInterfaceTypeIdOrSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ConnectionInterfaceResponse;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeIdOrSlug)}`, {
        ...opts
    }));
}
/**
 * List of actions
 */
export function listActions2({ studioSlug, name, $type, technologies, status, filter, accountOnly, xWorkspaceId, requiresConnection }: {
    studioSlug?: string;
    name?: string;
    $type?: string;
    technologies?: string[];
    status?: ("PENDING_APPROVAL" | "PENDING_CREATOR_UPDATE" | "PUBLICATION_APPROVED" | "PUBLICATION_DECLINED")[];
    filter?: string;
    accountOnly?: boolean;
    xWorkspaceId?: string;
    requiresConnection?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ActionResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions${QS.query(QS.explode({
        studioSlug,
        name,
        "type": $type,
        technologies,
        status,
        filter,
        accountOnly,
        requiresConnection
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get Action by actionVersionId
 */
export function getActionVersionById({ actionVersionId, xWorkspaceId }: {
    actionVersionId: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: GetActionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Remove an action version
 */
export function deleteActionVersion({ actionVersionId }: {
    actionVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Validate an action version to delete
 */
export function validateActionVersion({ actionVersionId }: {
    actionVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * List inputs of an action version
 */
export function getListOfInputs({ actionVersionId, xWorkspaceId, accountId }: {
    actionVersionId: string;
    xWorkspaceId?: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ActionVersionInputResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId,
            "account-id": accountId
        })
    }));
}
/**
 * Get Actions Versions by require variable
 */
export function getActionVersionsByVariable({ variableName, accountId }: {
    variableName: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ActionSummaryResponse[];
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/actions/variables/${encodeURIComponent(variableName)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get accountInfo
 */
export function getAccountInfo(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AccountInfoResponse;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>("/v1/accounts", {
        ...opts
    }));
}
/**
 * List all action versions
 */
export function getAllActionVersions1({ accountSlug, studioSlug, actionSlug, status, xWorkspaceId }: {
    accountSlug: string;
    studioSlug: string;
    actionSlug: string;
    status?: ("DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED")[];
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListActionVersionResponse;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/accounts/${encodeURIComponent(accountSlug)}/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions${QS.query(QS.explode({
        status
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download an action by version
 */
export function downloadAction2({ accountSlug, studioSlug, actionSlug, version, xWorkspaceId }: {
    accountSlug: string;
    studioSlug: string;
    actionSlug: string;
    version: string;
    xWorkspaceId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: string;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/accounts/${encodeURIComponent(accountSlug)}/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List account documentations
 */
export function listDocs({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ListDocumentationResponse;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/accounts/${encodeURIComponent(accountId)}/docs`, {
        ...opts
    }));
}
/**
 * Remove a workflow version
 */
export function unpublishWorkflowVersion({ workflowVersionId }: {
    workflowVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/workflows/versions/${encodeURIComponent(workflowVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove workspace of given studio
 */
export function delWorkspace({ studioSlug, workspaceId }: {
    studioSlug: string;
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/studios/${encodeURIComponent(studioSlug)}/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove a workflow from a Stack Version
 */
export function removeStackWorkflow({ stackVersionId, workflowId }: {
    stackVersionId: string;
    workflowId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Deletes a Starter from a StackVersion
 */
export function deleteStarter({ stackVersionId, starterId }: {
    stackVersionId: string;
    starterId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/${encodeURIComponent(starterId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete plugin by id
 */
export function deletePlugin({ stackVersionId, pluginVersionId }: {
    stackVersionId: string;
    pluginVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove an associated action from a plugin
 */
export function removeActionFromPlugin({ stackVersionId, pluginVersionId, actionVersionId }: {
    stackVersionId: string;
    pluginVersionId: string;
    actionVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/actions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove an action from a stack version
 */
export function deleteAction({ stackVersionId, actionVersionId }: {
    stackVersionId: string;
    actionVersionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove a plugin version
 */
export function deletePluginVersion({ pluginVersionId, $override }: {
    pluginVersionId: string;
    $override?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 422;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    } | {
        status: 500;
        data: {
            code: string;
            status: number;
            details: string;
            validationDetails?: ValidationDetails[];
        };
    }>(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}${QS.query(QS.explode({
        "override": $override
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
