/**
 * Runtime Manager API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "https://runtime-manager.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://runtime-manager.dev.stackspot.com"
};
export type TaskDataS3BackendResponse = {
    bucket: string;
    region: string;
    key: string;
};
export type TaskIacDataResponsePlugin = {
    pluginAppliedAlias: string;
    name: string;
    inputs: {
        [key: string]: object;
    };
};
export type TaskIacDataResponseConnector = {
    connector: string;
    alias: string;
    "type": string;
    pluginName: string;
    attributes: {
        [key: string]: object;
    };
    writeToFile: boolean;
};
export type TaskIacDataResponse = {
    schemaVersion: string;
    runId: string;
    runTaskId: string;
    realm: string;
    iacBackend: TaskDataS3BackendResponse;
    workspaceName: string;
    plugin: TaskIacDataResponsePlugin;
    connectors: TaskIacDataResponseConnector[];
    metadata?: {
        [key: string]: object;
    };
    runEnvironment: string[];
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type ErrorResponse = {
    code: "RTM_ACCESS_TOKEN_NOT_RECEIVED_FROM_IDM" | "RTM_EVENTS_NOT_SENT" | "RTM_BAD_REQUEST_ERROR" | "RTM_MANDATORY_PARAM_NOT_INFORMED" | "RTM_MANDATORY_ATTR_NOT_INFORMED" | "RTM_ATTR_INVALID" | "RTM_ATTR_INVALID_FORMAT" | "RTM_ATTR_INVALID_EVALUATED_FROM_VALIDATIONS_LENGTH" | "RTM_ATTR_INVALID_EVALUATED_FROM_VALIDATIONS_EMAIL" | "RTM_ATTR_INVALID_EVALUATED_FROM_VALIDATIONS_PATTERN" | "RTM_UNABLE_TO_PARSE_REQUEST" | "RTM_CANNOT_DESTROY" | "RTM_ALREADY_DESTROYED" | "RTM_CONNECTION_INTERFACE_IN_USE" | "RTM_CANNOT_IDENTIFY_USER" | "RTM_TASK_TYPE_NOT_CORRECT" | "RTM_GENERIC_BUSINESS_ERROR" | "RTM_TASK_NOT_READY_TO_RUN" | "RTM_TASK_NOT_RUNNING" | "RTM_DEPLOYMENT_WITHOUT_INFRA_OR_APP_ID" | "RTM_CREATING_CONN_INTERFACE_ERROR" | "RTM_CREATING_CONN_INTERFACE_MISSING_ATTRIBUTES" | "RTM_IMPERSONATE_TOKEN_ERROR" | "RTM_UNEXPECTED_RUNTIME_ENVIRONMENT_CONFIG" | "RTM_RUN_WITH_NO_TASKS_ERROR" | "RTM_TASK_TYPE_NOT_SUPPORTED" | "RTM_SELF_HOSTED_BACKEND_NOT_CONFIGURED" | "RTM_DEPENDENCIES_HAS_CYCLE" | "RTM_UNAVAILABLE_DESTROY_PROCESS" | "RTM_DEPLOYMENT_WITH_INFRA_AND_APP" | "RTM_DEPLOYMENT_JUST_ONE_RUN_NOT_FINISHED" | "RTM_GENERIC_CONFLICT_ERROR" | "RTM_DEPLOYMENT_APP_ALREADY_RUNNING_CONFLICT_ERROR" | "RTM_DEPLOYMENT_INFRA_ALREADY_RUNNING_CONFLICT_ERROR" | "RTM_DEPLOYMENT_TAG_ALREADY_EXISTS" | "RTM_NOT_FOUND" | "RTM_PROVIDER_NOT_FOUND" | "RTM_STATE_NOT_FOUND" | "RTM_ENVIRONMENT_NOT_FOUND_ERROR" | "RTM_DEPLOYMENT_NOT_FOUND_ERROR" | "RTM_PLUGIN_DEPLOYMENT_NOT_FOUND_ERROR" | "RTM_WORKSPACE_NOT_FOUND" | "RTM_APPLICATION_NOT_FOUND" | "RTM_INFRA_LINK_NOT_FOUND" | "RTM_RUN_NOT_FOUND" | "RTM_RUN_TASK_NOT_FOUND" | "RTM_CONNECTION_INTERFACE_NOT_FOUND" | "RTM_PLUGIN_MANIFESTO_NOT_FOUND" | "RTM_PLUGIN_DATA_NOT_FOUND" | "RTM_DEPLOYMENT_TAG_NOT_FOUND" | "RTM_RUN_WITH_TOO_MANY_PLUGINS" | "RTM_TOO_MANY_RUNS" | "RTM_FORBIDDEN" | "RTM_MISSING_ACCOUNT" | "RTM_MISSING_AUTHENTICATION" | "RTM_WORKSPACE_API_FORBIDDEN" | "RTM_WORKSPACE_API_UNHANDLED_ERROR" | "RTM_WORKSPACE_API_UNPROCESSABLE_ENTITY" | "RTM_WORKSPACE_API_INTERNAL_ERROR" | "RTM_WORKSPACE_API_BAD_GATEWAY" | "RTM_CONTENT_API_FORBIDDEN" | "RTM_CONTENT_API_UNHANDLED_ERROR" | "RTM_CONTENT_API_INTERNAL_ERROR" | "RTM_CLOUD_SERVICES_API_FORBIDDEN" | "RTM_CLOUD_SERVICES_API_UNHANDLED_ERROR" | "RTM_CLOUD_SERVICES_FAILED_TO_RETRIEVE_EXTERNAL_ID" | "RTM_CLOUD_SERVICES_API_INTERNAL_ERROR" | "RTM_GENERIC_INTEGRATION_ERROR" | "RTM_ACCOUNT_API_PAT_NOT_FOUND_ERROR" | "RTM_ACCOUNT_API_FORBIDDEN" | "RTM_ACCOUNT_API_UNHANDLED_ERROR" | "RTM_ACCOUNT_API_INTERNAL_ERROR" | "RTM_S3_UNHANDLED_ERROR" | "RTM_INTERNAL_SERVER_ERROR" | "RTM_CREATING_CONN_INTERFACE_WORKER_ERROR" | "RTM_SECURITY_KEY_ALREADY_REGISTERED_IN_BLOCK_LIST" | "RTM_SECURITY_BLOCK_LIST_ERROR" | "RTM_RUN_TYPE_NOT_CORRECT" | "RTM_IAC_PATH_NOT_PRESENT";
    status: number;
    details: string;
    validationDetails?: ValidationDetails[];
};
export type RunSelfHostedTaskIacCompletedRequest = {
    /** The schema version */
    schemaVersion: string;
    /** The Run ULID */
    runId: string;
    /** The Task ULID */
    runTaskId: string;
    /** Whether this task completed successfully or not */
    status: "SUCCESS" | "INTERNAL_ERROR";
    /** The error message, if it exists */
    messageError?: string;
    /** Metadata */
    metadata?: {
        [key: string]: object;
    };
};
export type TaskDestroyDataResponse = {
    schemaVersion: string;
    runId: string;
    runTaskId: string;
    iacBackend: TaskDataS3BackendResponse;
    tfBackend: TaskDataS3BackendResponse;
    metadata?: {
        [key: string]: object;
    };
    runEnvironment: string[];
};
export type RunSelfHostedTaskDestroyCompletedRequest = {
    /** The schema version */
    schemaVersion: string;
    /** The Run ULID */
    runId: string;
    /** The Task ULID */
    runTaskId: string;
    /** Whether this task completed successfully or not */
    status: "SUCCESS" | "INTERNAL_ERROR" | "FAILED";
    /** The error message, if it exists */
    messageError?: string;
    /** The deploy output, to be used to generate the connection interfaces */
    output?: {
        [key: string]: object;
    };
    /** Metadata */
    metadata?: {
        [key: string]: object;
    };
    /** partialResources */
    partialResources?: string[];
};
export type TaskDeployDataResponse = {
    schemaVersion: string;
    runId: string;
    runTaskId: string;
    iacBackend: TaskDataS3BackendResponse;
    tfBackend: TaskDataS3BackendResponse;
    metadata?: {
        [key: string]: object;
    };
    runEnvironment: string[];
};
export type RunSelfHostedTaskDeployCompletedRequest = {
    /** The schema version */
    schemaVersion: string;
    /** The Run ULID */
    runId: string;
    /** The Task ULID */
    runTaskId: string;
    /** Whether this task completed successfully or not */
    status: "SUCCESS" | "INTERNAL_ERROR" | "FAILED";
    /** The error message, if it exists */
    messageError?: string;
    /** The deploy output, to be used to generate the connection interfaces */
    output?: {
        [key: string]: object;
    };
    /** Metadata */
    metadata?: {
        [key: string]: object;
    };
    partialResources?: string[];
};
export type ConfigTerraform = {
    /** name of the bucket to save state files */
    bucket: string;
    /** name of the region of the bucket */
    region: string;
};
export type Config = {
    tfstate: ConfigTerraform;
    iac: ConfigTerraform;
};
export type RunSelfHostedRollbackRequest = {
    /** Application Id */
    appId?: string;
    /** Shared Infra Id */
    infraId?: string;
    /** Environment Id */
    envId: string;
    /** Current version tag to rollback */
    tag: string;
    config: Config;
    /** Url of pipeline currently running */
    pipelineUrl: string;
};
export type RunSelfHostedTaskResponse = {
    order: number;
    runTaskId: string;
    taskType: string;
    pluginAppliedAlias: string;
};
export type RunSelfHostedResponse = {
    runId: string;
    runType: string;
    tasks: RunSelfHostedTaskResponse[];
};
export type RunSelfHostedDestroyRequest = {
    /** Application Id */
    appId?: string;
    /** Shared Infra Id */
    infraId?: string;
    /** Workspace Id */
    workspaceId: string;
    /** Environment Id */
    envId: string;
    config: Config;
    /** Url of pipeline currently running */
    pipelineUrl: string;
};
export type ManifestoMetadata = {
    /** Name */
    name: string;
    isTest?: string;
};
export type Connection = {
    /** Required connector name */
    selected: string;
    /** Required connector type */
    "type": string;
    /** Required connector label reference */
    alias: string;
};
export type ManifestoConnection = {
    requires?: Connection[];
    generates?: Connection[];
};
export type Link = {
    /** Required link name */
    name: string;
    /** Required link url */
    url: string;
    /** Required link type */
    "type": string;
    /** Link picture path */
    picture: string;
};
export type ManifestoLink = {
    generates?: Link[];
};
export type AppliedPlugin = {
    /** Plugin Alias */
    alias: string;
    /** Plugin Name */
    name: string;
    /** Plugin Version Id */
    pluginVersionId: string;
    /** Stack Version Id */
    stackVersionId: string;
    /** Plugin Type */
    "type": string;
    inputs: {
        [key: string]: object;
    };
    connections: ManifestoConnection;
    links?: ManifestoLink;
};
export type ManifestoSpec = {
    /** Application Or Infra Id ( */
    id: string;
    /** Repository */
    repository?: string;
    appliedPlugins: AppliedPlugin[];
};
export type Manifesto = {
    /** Schema Version */
    schemaVersion: string;
    /** Manifesto Kind */
    kind: string;
    metadata: ManifestoMetadata;
    spec: ManifestoSpec;
};
export type RunSelfHostedDeployRequest = {
    /** Environment Id */
    envId: string;
    /** Workspace Id */
    workspaceId: string;
    /** Version tag that will be generated by the deploy run if successful */
    versionTag: string;
    /** Run Configuration */
    runConfig?: {
        [key: string]: object;
    };
    manifesto: Manifesto;
    /** Whether this application exposes an API or not */
    isApi?: boolean;
    /** Path (in the repository) of the API contract file in open api format */
    apiContractPath?: string;
    config: Config;
    /** Url of pipeline currently running */
    pipelineUrl: string;
};
export type RunDestroyRequest = {
    /** Application Id */
    appId?: string;
    /** Shared Infra Id */
    infraId?: string;
    /** Workspace Id */
    workspaceId: string;
    /** Environment Id */
    envId: string;
};
export type RunCreatedResponse = {
    runId: string;
};
export type WorkerResponse = {
    allowed: boolean;
    reason?: string;
};
export type RunRollbackRequest = {
    /** Application Id */
    appId?: string;
    /** Shared Infra Id */
    infraId?: string;
    /** Environment Id */
    envId: string;
    /** Current version tag to rollback */
    tag: string;
};
export type RunDeployRequest = {
    /** Environment Id */
    envId: string;
    /** Workspace Id */
    workspaceId: string;
    /** Version tag that will be generated by the deploy run if successful */
    versionTag: string;
    /** Run Configuration */
    runConfig?: {
        [key: string]: object;
    };
    manifesto: Manifesto;
    /** Whether this application exposes an API or not */
    isApi?: boolean;
    /** Path (in the repository) of the API contract file in open api format */
    apiContractPath?: string;
};
export type Unit = object;
export type FinishWorkerIacSchema = {
    schemaVersion: string;
    runTaskId: string;
    runId?: string;
    status: "SUCCESS" | "INTERNAL_ERROR";
    messageError: string;
    metadata?: {
        [key: string]: object;
    };
};
export type FinishWorkerDestroySchema = {
    schemaVersion: string;
    runTaskId: string;
    runId?: string;
    status: "SUCCESS" | "INTERNAL_ERROR" | "FAILED";
    messageError: string;
    tfstatePath?: string;
    metadata?: {
        [key: string]: object;
    };
    partialResources?: string[];
};
export type FinishWorkerDeploySchema = {
    schemaVersion: string;
    runTaskId: string;
    runId?: string;
    status: "SUCCESS" | "INTERNAL_ERROR" | "FAILED";
    messageError: string;
    metadata?: {
        [key: string]: object;
    };
    output?: {
        [key: string]: object;
    };
    partialResources?: string[];
};
export type TagResponse = {
    name: string;
    createdAt: string;
    head: boolean;
};
export type EnvironmentResponse = {
    name?: string;
};
export type RunTaskResponse = {
    id?: string;
    "type": "IAC" | "DEPLOY" | "DESTROY" | "IAC_SELF_HOSTED" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED";
    status: "PENDING" | "READY_TO_RUN" | "RUNNING" | "SUCCEEDED" | "FAILED" | "INTERNAL_ERROR" | "EXTERNAL_ERROR" | "ABORTED";
    errorDetails?: string;
    logs?: string;
};
export type RunPluginResponse = {
    pluginAppliedAlias: string;
    tasks: RunTaskResponse[];
};
export type RunResponse = {
    runId: string;
    appId?: string;
    infraId?: string;
    envId: string;
    deploymentId?: string;
    "type": "DEPLOY" | "DESTROY" | "ROLLBACK" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
    status: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTING" | "ABORTED";
    createdAt: string;
    updatedAt?: string;
    appliedPlugins?: RunPluginResponse[];
};
export type RunLightResponse = {
    runId: string;
    appId?: string;
    infraId?: string;
    envId: string;
    deploymentId?: string;
    author?: string;
    "type": "DEPLOY" | "DESTROY" | "ROLLBACK" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
    status: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTING" | "ABORTED";
    createdAt: string;
    updatedAt?: string;
};
export type ConnectionInterfaceResponse = {
    name: string;
    "type": string;
    outputs: {
        [key: string]: object;
    };
};
export type PluginDeploymentResponse = {
    pluginAppliedAlias: string;
    pluginVersionId: string;
    stackVersionId: string;
    inputs: {
        [key: string]: object;
    };
    connectors: ConnectionInterfaceResponse[];
};
export type DeploymentResponse = {
    deploymentId: string;
    appId?: string;
    infraId?: string;
    envId: string;
    head: boolean;
    tag?: string;
    createdAt?: string;
    plugins: PluginDeploymentResponse[];
};
export type DeploymentStatusModel = {
    status: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTING" | "ABORTED";
};
export type DiffPluginResponse = {
    appManifesto: {
        [key: string]: object;
    };
};
export type Pageable = {
    page?: number;
    size?: number;
    sort?: string[];
};
export type SortObject = {
    unsorted?: boolean;
    sorted?: boolean;
    empty?: boolean;
};
export type PageableObject = {
    paged?: boolean;
    unpaged?: boolean;
    pageNumber?: number;
    pageSize?: number;
    offset?: number;
    sort?: SortObject;
};
export type AdminRunTaskResponse = {
    id?: string;
    "type": "IAC" | "DEPLOY" | "DESTROY" | "IAC_SELF_HOSTED" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED";
    status: "PENDING" | "READY_TO_RUN" | "RUNNING" | "SUCCEEDED" | "FAILED" | "INTERNAL_ERROR" | "EXTERNAL_ERROR" | "ABORTED";
    errorDetails?: string;
    logs?: string;
    iac?: string;
};
export type AdminRunPluginResponse = {
    pluginAppliedAlias: string;
    tasks: AdminRunTaskResponse[];
};
export type AdminRunResponse = {
    runId: string;
    appId?: string;
    infraId?: string;
    envId: string;
    deploymentId?: string;
    manifesto: {
        [key: string]: object;
    };
    "type": "DEPLOY" | "DESTROY" | "ROLLBACK" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
    status: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTING" | "ABORTED";
    createdAt: string;
    updatedAt?: string;
    appliedPlugins?: AdminRunPluginResponse[];
};
export type PageAdminRunResponse = {
    totalPages?: number;
    totalElements?: number;
    pageable?: PageableObject;
    numberOfElements?: number;
    size?: number;
    content?: AdminRunResponse[];
    "number"?: number;
    sort?: SortObject;
    first?: boolean;
    last?: boolean;
    empty?: boolean;
};
export type SelfHostedConfigModel = {
    terraformBucket: string;
    terraformRegion: string;
    iacBucket: string;
    iacRegion: string;
};
export type AdminRunTaskDetailResponse = {
    runTaskId: string;
    runId: string;
    deploymentId: string;
    userRef?: string;
    workspaceId: string;
    workspaceName: string;
    accountId: string;
    envId: string;
    appId?: string;
    infraId?: string;
    realm: string;
    pluginAppliedAlias: string;
    pluginManifesto: {
        [key: string]: object;
    };
    pluginFQDN: string;
    runTaskType: "IAC" | "DEPLOY" | "DESTROY" | "IAC_SELF_HOSTED" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED";
    runTasksStatus: "PENDING" | "READY_TO_RUN" | "RUNNING" | "SUCCEEDED" | "FAILED" | "INTERNAL_ERROR" | "EXTERNAL_ERROR" | "ABORTED";
    errorDetails?: string;
    iacPath?: string;
    workerUrl?: string;
    runTaskData: {
        [key: string]: object;
    };
    requiredRunTasks: string[];
    order: number;
    selfHostedConfig?: SelfHostedConfigModel;
    exception?: string;
    iacDownloadUrl?: string;
    logsDownloadUrl?: string;
};
/**
 * Endpoint to get the necessary data to perform an IAC Task
 */
export function getIacTask({ taskId }: {
    taskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TaskIacDataResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v2/run/self-hosted/task/iac/${encodeURIComponent(taskId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to inform the completion of an IAC Task
 */
export function putIacTaskResponse({ taskId, runSelfHostedTaskIacCompletedRequest }: {
    taskId: string;
    runSelfHostedTaskIacCompletedRequest: RunSelfHostedTaskIacCompletedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>(`/v2/run/self-hosted/task/iac/${encodeURIComponent(taskId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runSelfHostedTaskIacCompletedRequest
    })));
}
/**
 * Endpoint to get the necessary data to perform an Destroy Task
 */
export function getDestroyTask({ taskId }: {
    taskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TaskDestroyDataResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v2/run/self-hosted/task/destroy/${encodeURIComponent(taskId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to inform the completion of a Destroy Task
 */
export function putDestroyTaskResponse({ taskId, runSelfHostedTaskDestroyCompletedRequest }: {
    taskId: string;
    runSelfHostedTaskDestroyCompletedRequest: RunSelfHostedTaskDestroyCompletedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>(`/v2/run/self-hosted/task/destroy/${encodeURIComponent(taskId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runSelfHostedTaskDestroyCompletedRequest
    })));
}
/**
 * Endpoint to get the necessary data to perform a Deploy Task
 */
export function getDeployTask({ taskId }: {
    taskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TaskDeployDataResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v2/run/self-hosted/task/deploy/${encodeURIComponent(taskId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to inform the completion of a Deploy Task
 */
export function putDeployTaskResponse({ taskId, runSelfHostedTaskDeployCompletedRequest }: {
    taskId: string;
    runSelfHostedTaskDeployCompletedRequest: RunSelfHostedTaskDeployCompletedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>(`/v2/run/self-hosted/task/deploy/${encodeURIComponent(taskId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runSelfHostedTaskDeployCompletedRequest
    })));
}
/**
 * Endpoint to get the necessary data to perform an IAC Task
 */
export function getIacTask1({ taskId }: {
    taskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TaskIacDataResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/self-hosted/task/iac/${encodeURIComponent(taskId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to inform the completion of an IAC Task
 */
export function putIacTaskResponse1({ taskId, runSelfHostedTaskIacCompletedRequest }: {
    taskId: string;
    runSelfHostedTaskIacCompletedRequest: RunSelfHostedTaskIacCompletedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>(`/v1/run/self-hosted/task/iac/${encodeURIComponent(taskId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runSelfHostedTaskIacCompletedRequest
    })));
}
/**
 * Endpoint to get the necessary data to perform an Destroy Task
 */
export function getDestroyTask1({ taskId }: {
    taskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TaskDestroyDataResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/self-hosted/task/destroy/${encodeURIComponent(taskId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to inform the completion of a Destroy Task
 */
export function putDestroyTaskResponse1({ taskId, runSelfHostedTaskDestroyCompletedRequest }: {
    taskId: string;
    runSelfHostedTaskDestroyCompletedRequest: RunSelfHostedTaskDestroyCompletedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>(`/v1/run/self-hosted/task/destroy/${encodeURIComponent(taskId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runSelfHostedTaskDestroyCompletedRequest
    })));
}
/**
 * Endpoint to get the necessary data to perform a Deploy Task
 */
export function getDeployTask1({ taskId }: {
    taskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TaskDeployDataResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/self-hosted/task/deploy/${encodeURIComponent(taskId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to inform the completion of a Deploy Task
 */
export function putDeployTaskResponse1({ taskId, runSelfHostedTaskDeployCompletedRequest }: {
    taskId: string;
    runSelfHostedTaskDeployCompletedRequest: RunSelfHostedTaskDeployCompletedRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>(`/v1/run/self-hosted/task/deploy/${encodeURIComponent(taskId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runSelfHostedTaskDeployCompletedRequest
    })));
}
/**
 * Endpoint to run Infra Rollback
 */
export function runRollbackInfra({ runSelfHostedRollbackRequest }: {
    runSelfHostedRollbackRequest: RunSelfHostedRollbackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v2/run/self-hosted/rollback/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedRollbackRequest
    })));
}
/**
 * Endpoint to run App Rollback
 */
export function runRollbackApp({ runSelfHostedRollbackRequest }: {
    runSelfHostedRollbackRequest: RunSelfHostedRollbackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v2/run/self-hosted/rollback/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedRollbackRequest
    })));
}
/**
 * Endpoint to run Destroy SelfHosted
 */
export function runDestroyInfra({ runSelfHostedDestroyRequest }: {
    runSelfHostedDestroyRequest: RunSelfHostedDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 422;
        data: ErrorResponse;
    }>("/v2/run/self-hosted/destroy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDestroyRequest
    })));
}
/**
 * Endpoint to run Destroy SelfHosted
 */
export function runDestroyApp({ runSelfHostedDestroyRequest }: {
    runSelfHostedDestroyRequest: RunSelfHostedDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 422;
        data: ErrorResponse;
    }>("/v2/run/self-hosted/destroy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDestroyRequest
    })));
}
/**
 * Endpoint to run Infra Deploy
 */
export function runDeployInfra({ runSelfHostedDeployRequest }: {
    runSelfHostedDeployRequest: RunSelfHostedDeployRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v2/run/self-hosted/deploy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDeployRequest
    })));
}
/**
 * Endpoint to run App Deploy
 */
export function runDeployApp({ runSelfHostedDeployRequest }: {
    runSelfHostedDeployRequest: RunSelfHostedDeployRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v2/run/self-hosted/deploy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDeployRequest
    })));
}
/**
 * Endpoint to run Infra Deploy
 */
export function runDestroyInfra1({ runDestroyRequest }: {
    runDestroyRequest: RunDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunCreatedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v2/run/destroy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runDestroyRequest
    })));
}
/**
 * Endpoint to run App Deploy
 */
export function runDestroyApp1({ runDestroyRequest }: {
    runDestroyRequest: RunDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunCreatedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v2/run/destroy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runDestroyRequest
    })));
}
/**
 * Endpoint to identify the worker that got this tasks to process
 */
export function getRunTaskById({ taskId, workerUrl }: {
    taskId: string;
    workerUrl: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: WorkerResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/task/${encodeURIComponent(taskId)}/worker${QS.query(QS.explode({
        workerUrl
    }))}`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Endpoint to run Infra Rollback
 */
export function runRollbackInfra1({ runSelfHostedRollbackRequest }: {
    runSelfHostedRollbackRequest: RunSelfHostedRollbackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/self-hosted/rollback/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedRollbackRequest
    })));
}
/**
 * Endpoint to run App Rollback
 */
export function runRollbackApp1({ runSelfHostedRollbackRequest }: {
    runSelfHostedRollbackRequest: RunSelfHostedRollbackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/self-hosted/rollback/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedRollbackRequest
    })));
}
/**
 * Endpoint to run Destroy SelfHosted
 */
export function runDestroyInfra2({ runSelfHostedDestroyRequest }: {
    runSelfHostedDestroyRequest: RunSelfHostedDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 422;
        data: ErrorResponse;
    }>("/v1/run/self-hosted/destroy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDestroyRequest
    })));
}
/**
 * Endpoint to run Destroy SelfHosted
 */
export function runDestroyApp2({ runSelfHostedDestroyRequest }: {
    runSelfHostedDestroyRequest: RunSelfHostedDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 422;
        data: ErrorResponse;
    }>("/v1/run/self-hosted/destroy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDestroyRequest
    })));
}
/**
 * Endpoint to run Infra Deploy
 */
export function runDeployInfra1({ runSelfHostedDeployRequest }: {
    runSelfHostedDeployRequest: RunSelfHostedDeployRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/self-hosted/deploy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDeployRequest
    })));
}
/**
 * Endpoint to run App Deploy
 */
export function runDeployApp1({ runSelfHostedDeployRequest }: {
    runSelfHostedDeployRequest: RunSelfHostedDeployRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunSelfHostedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/self-hosted/deploy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runSelfHostedDeployRequest
    })));
}
/**
 * Endpoint to run Infra Rollback
 */
export function runRollbackInfra2({ runRollbackRequest }: {
    runRollbackRequest: RunRollbackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunCreatedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/rollback/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runRollbackRequest
    })));
}
/**
 * Endpoint to run App Rollback
 */
export function runRollbackApp2({ runRollbackRequest }: {
    runRollbackRequest: RunRollbackRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunCreatedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/rollback/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runRollbackRequest
    })));
}
/**
 * Endpoint to run Destroy
 */
export function runDestroyInfra3({ runDestroyRequest }: {
    runDestroyRequest: RunDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 422;
        data: ErrorResponse;
    }>("/v1/run/destroy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runDestroyRequest
    })));
}
/**
 * Endpoint to run Destroy
 */
export function runDestroyApp3({ runDestroyRequest }: {
    runDestroyRequest: RunDestroyRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 422;
        data: ErrorResponse;
    }>("/v1/run/destroy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runDestroyRequest
    })));
}
/**
 * Endpoint to run Infra Deploy
 */
export function runDeployInfra2({ runDeployRequest }: {
    runDeployRequest: RunDeployRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunCreatedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/deploy/infra", oazapfts.json({
        ...opts,
        method: "POST",
        body: runDeployRequest
    })));
}
/**
 * Endpoint to run App Deploy
 */
export function runDeployApp2({ runDeployRequest }: {
    runDeployRequest: RunDeployRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: RunCreatedResponse;
    } | {
        status: 304;
        data: ErrorResponse;
    } | {
        status: 403;
        data: ErrorResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 409;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    } | {
        status: 503;
        data: ErrorResponse;
    }>("/v1/run/deploy/app", oazapfts.json({
        ...opts,
        method: "POST",
        body: runDeployRequest
    })));
}
/**
 * Endpoint to cancel a run that's currently running
 */
export function cancelAppRunByRunId({ runId, force }: {
    runId: string;
    force?: boolean;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 202;
        data: Unit;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    }>(`/v1/run/cancel/${encodeURIComponent(runId)}${QS.query(QS.explode({
        force
    }))}`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Simulate a response from deploy worker
 */
export function simulateIacWorkerResponse({ finishWorkerIacSchema }: {
    finishWorkerIacSchema: FinishWorkerIacSchema;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: boolean;
    }>("/admin/simulate/worker-response/iac", oazapfts.json({
        ...opts,
        method: "POST",
        body: finishWorkerIacSchema
    })));
}
/**
 * Endpoint to cancel a run that's currently running
 */
export function simulateIacWorkerResponseForAllTasks({ runId }: {
    runId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 202;
        data: boolean;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    }>(`/admin/simulate/worker-response/iac/${encodeURIComponent(runId)}`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Simulate a response from deploy worker
 */
export function simulateDestroyWorkerResponse({ finishWorkerDestroySchema }: {
    finishWorkerDestroySchema: FinishWorkerDestroySchema;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: boolean;
    }>("/admin/simulate/worker-response/destroy", oazapfts.json({
        ...opts,
        method: "POST",
        body: finishWorkerDestroySchema
    })));
}
/**
 * Simulate a response from deploy worker
 */
export function simulateDeployWorkerResponse({ finishWorkerDeploySchema }: {
    finishWorkerDeploySchema: FinishWorkerDeploySchema;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: boolean;
    }>("/admin/simulate/worker-response/deploy", oazapfts.json({
        ...opts,
        method: "POST",
        body: finishWorkerDeploySchema
    })));
}
/**
 * Endpoint to force to resend all "ready to run" tasks by runId
 */
export function resendTasks({ runId }: {
    runId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: boolean;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/run/${encodeURIComponent(runId)}/tasks/resend`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Endpoint to force status RUNTIME_ERROR to a run by runId
 */
export function setRunAsFailed({ runId }: {
    runId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: boolean;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/run/${encodeURIComponent(runId)}/set-as-error`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Endpoint to block a StackSpot Workspace to perform Runtime operations
 */
export function blockWorkspace({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/block/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Endpoint to block a StackSpot Account to perform Runtime operations
 */
export function blockAccount({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/block/account/${encodeURIComponent(accountId)}`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Endpoint to get tag data
 */
export function getTagsByInfraIdAndEnvId({ infraId, envId }: {
    infraId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TagResponse[];
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/tag/infra/${encodeURIComponent(infraId)}/env/${encodeURIComponent(envId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to get tag data
 */
export function getTagsByAppIdAndEnvId({ appId, envId }: {
    appId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: TagResponse[];
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 422;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/tag/app/${encodeURIComponent(appId)}/env/${encodeURIComponent(envId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to get environment
 */
export function getAllEnvironmentConfiguration(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: EnvironmentResponse[];
    } | {
        status: 500;
        data: ErrorResponse;
    }>("/v1/runtime-environment", {
        ...opts
    }));
}
/**
 * Endpoint to get run data by runId
 */
export function getRunById({ runId }: {
    runId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: RunResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/${encodeURIComponent(runId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to get runs data by infraId and envId, sorted by createdAt descending
 */
export function getRunsByInfraIdAndEnvId({ size, page, infraId, envId, status }: {
    size?: number;
    page?: number;
    infraId: string;
    envId: string;
    status?: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTING" | "ABORTED";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: RunLightResponse[];
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/infra/${encodeURIComponent(infraId)}/env/${encodeURIComponent(envId)}${QS.query(QS.explode({
        size,
        page,
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Endpoint to get runs data by appId and envId, sorted by createdAt descending
 */
export function getRunsByAppIdAndEnvId({ size, page, appId, envId, status }: {
    size?: number;
    page?: number;
    appId: string;
    envId: string;
    status?: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTING" | "ABORTED";
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: RunLightResponse[];
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/run/app/${encodeURIComponent(appId)}/env/${encodeURIComponent(envId)}${QS.query(QS.explode({
        size,
        page,
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Endpoint to get deployment data by deploymentId
 */
export function getDeploymentById({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/${encodeURIComponent(deploymentId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to get deployment data by infraId and envId, sorted by creation date descending
 */
export function getDeploymentByInfraIdAndEnvId({ size, page, infraId, envId }: {
    size?: number;
    page?: number;
    infraId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentResponse[];
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/infra/${encodeURIComponent(infraId)}/env/${encodeURIComponent(envId)}${QS.query(QS.explode({
        size,
        page
    }))}`, {
        ...opts
    }));
}
/**
 * Endpoint to get deployment head data by appId and envId
 */
export function getDeploymentHeadByInfraIdAndEnvId({ infraId, envId }: {
    infraId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/infra/${encodeURIComponent(infraId)}/env/${encodeURIComponent(envId)}/head`, {
        ...opts
    }));
}
/**
 * Endpoint to get last deployment status
 */
export function getDeploymentStatus({ appId, envId }: {
    appId?: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentStatusModel;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/app/status/${encodeURIComponent(appId)}/env/${encodeURIComponent(envId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to get last deployment status
 */
export function getDeploymentStatus1({ infraId, envId }: {
    infraId?: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentStatusModel;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/infra/status/${encodeURIComponent(infraId)}/env/${encodeURIComponent(envId)}`, {
        ...opts
    }));
}
export function getDiffByInfra({ infraId, envId }: {
    infraId?: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DiffPluginResponse;
    }>(`/v1/deployment/diff/env/${encodeURIComponent(envId)}/infra/${encodeURIComponent(infraId)}`, {
        ...opts
    }));
}
export function getDiffByApp({ appId, envId }: {
    appId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DiffPluginResponse;
    }>(`/v1/deployment/diff/env/${encodeURIComponent(envId)}/app/${encodeURIComponent(appId)}`, {
        ...opts
    }));
}
/**
 * Endpoint to get deployment data by appId and envId, sorted by creation date descending
 */
export function getDeploymentByAppIdAndEnvId({ size, page, appId, envId }: {
    size?: number;
    page?: number;
    appId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentResponse[];
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/app/${encodeURIComponent(appId)}/env/${encodeURIComponent(envId)}${QS.query(QS.explode({
        size,
        page
    }))}`, {
        ...opts
    }));
}
/**
 * Endpoint to get deployment head data by appId and envId
 */
export function getDeploymentHeadByAppIdAndEnvId({ appId, envId }: {
    appId: string;
    envId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: DeploymentResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/v1/deployment/app/${encodeURIComponent(appId)}/env/${encodeURIComponent(envId)}/head`, {
        ...opts
    }));
}
/**
 * Get task with workspaceName, appId or InfraId that have status RUNNING
 */
export function getAdminRunStatusRunningDetails({ workspaceName, pageable }: {
    workspaceName: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageAdminRunResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/run/running/workspace/${encodeURIComponent(workspaceName)}${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get task with workspaceName, appId or InfraId that have status RUNNING
 */
export function getAdminRunStatusRunningDetails1({ infraId, pageable }: {
    infraId?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageAdminRunResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/run/running/infra/${encodeURIComponent(infraId)}${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get task with workspaceName, appId or InfraId that have status RUNNING
 */
export function getAdminRunStatusRunningDetails2({ appId, pageable }: {
    appId?: string;
    pageable: Pageable;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: PageAdminRunResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/run/running/app/${encodeURIComponent(appId)}${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get task details from run task id
 */
export function getAdminRunTaskDetails({ runTaskId }: {
    runTaskId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AdminRunTaskDetailResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/get/task/${encodeURIComponent(runTaskId)}/details`, {
        ...opts
    }));
}
/**
 * Get a run from run or run task id
 */
export function getAdminRun({ runId, runTaskId }: {
    runId?: string;
    runTaskId?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AdminRunResponse;
    } | {
        status: 404;
        data: ErrorResponse;
    } | {
        status: 500;
        data: ErrorResponse;
    }>(`/admin/get/run${QS.query(QS.explode({
        runId,
        runTaskId
    }))}`, {
        ...opts
    }));
}
