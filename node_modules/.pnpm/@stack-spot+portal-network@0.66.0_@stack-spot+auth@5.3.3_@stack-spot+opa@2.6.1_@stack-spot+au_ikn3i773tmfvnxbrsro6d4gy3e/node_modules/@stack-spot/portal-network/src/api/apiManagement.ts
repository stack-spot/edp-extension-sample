/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "http://api-management-catalog-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "http://api-management-catalog-api.dev.stackspot.com"
};
export type ApiQueryParams = {
    catalogVisible?: boolean;
    page: number;
    size: number;
    search?: string;
    direction: "ASC" | "DESC";
    orderBy: string;
    similaritySearch?: boolean;
};
export type ContactResponse = {
    name: string;
    email: string;
};
export type VersionCatalogResponse = {
    id: string;
    version: string;
    stableVersion: boolean;
    actionDate: string;
    state: "PENDING" | "CREATED" | "DEVELOPED" | "PRE_RELEASE" | "RELEASED" | "BLOCKED" | "DEPRECATED" | "RETIRED";
    registryUrl: string;
};
export type ApiListDataResponse = {
    id: string;
    name: string;
    description: string;
    slug: string;
    status: "PENDING" | "ERROR" | "CREATED";
    catalogVisible: boolean;
    createdBy: string;
    createdAt: string;
    executionId?: string;
    contact: ContactResponse;
    stableVersion?: VersionCatalogResponse;
};
export type Link = {
    href?: string;
    hreflang?: string;
    title?: string;
    "type"?: string;
    deprecation?: string;
    profile?: string;
    name?: string;
    templated?: boolean;
};
export type Links = {
    [key: string]: Link;
};
export type PageMetadata = {
    size?: number;
    totalElements?: number;
    totalPages?: number;
    "number"?: number;
};
export type ApiListResponse = {
    _embedded?: {
        content?: ApiListDataResponse[];
    };
    _links?: Links;
    page?: PageMetadata;
};
export type ApiContact = {
    name: string;
    email: string;
};
export type ApiParameterRequest = {
    name: string;
    value: string;
};
export type ApiCreateRequest = {
    name: string;
    slug?: string;
    description: string;
    status?: "PENDING" | "ERROR" | "CREATED";
    catalogVisible: boolean;
    category?: "PUBLIC" | "PRIVATE";
    "type"?: "INTERNAL" | "EXTERNAL";
    contact: ApiContact;
    parameters?: ApiParameterRequest[];
};
export type ApiCreateResponse = {
    accountId: string;
    workspaceId: string;
    id: string;
    name: string;
    slug: string;
    description: string;
    status: "PENDING" | "ERROR" | "CREATED";
    catalogVisible: boolean;
    createdBy: string;
    createdAt: string;
    contact: ApiContact;
};
export type VersionQueryParams = {
    isStableVersion?: boolean;
    status?: "PENDING" | "CREATED" | "DEVELOPED" | "PRE_RELEASE" | "RELEASED" | "BLOCKED" | "DEPRECATED" | "RETIRED";
    version?: string;
    page: number;
    size: number;
};
export type VersionResponse = {
    id: string;
    environmentId: string;
    version: string;
    actionDate: string;
    state: string;
    apiGatewayId: string;
    isStableVersion: boolean;
    registryUrl: string;
    registryProvider: string;
    createdBy: string;
    createdAt: string;
};
export type VersionListResponse = {
    _embedded?: {
        content?: VersionResponse[];
    };
    _links?: Links;
    page?: PageMetadata;
};
export type VersionRequest = {
    version: string;
    environmentId: string;
    state: "PENDING" | "CREATED" | "DEVELOPED" | "PRE_RELEASE" | "RELEASED" | "BLOCKED" | "DEPRECATED" | "RETIRED";
    apiGatewayId: string;
    isStableVersion: boolean;
    registryUrl: string;
    registryProvider: "GITHUB" | "GITLAB" | "BIT_BUCKET" | "AZURE_DEVOPS" | "CODE_COMMIT" | "STACKSPOT";
};
export type ApiDetailResponse = {
    id: string;
    name: string;
    description: string;
    slug: string;
    status: "PENDING" | "ERROR" | "CREATED";
    catalogVisible: boolean;
    createdBy: string;
    createdAt: string;
    executionId?: string;
    contact: ContactResponse;
    stableVersion?: VersionCatalogResponse;
    latestVersion?: VersionCatalogResponse;
};
export type ApiPatchRequest = {
    name: string;
    description: string;
    status: "PENDING" | "ERROR" | "CREATED";
    catalogVisible?: boolean;
    category?: "PUBLIC" | "PRIVATE";
    "type"?: "INTERNAL" | "EXTERNAL";
    contact: ApiContact;
};
export type VersionRegistryRequest = {
    url: string;
    provider: "GITHUB" | "GITLAB" | "BIT_BUCKET" | "AZURE_DEVOPS" | "CODE_COMMIT" | "STACKSPOT";
};
export type VersionPatchRequest = {
    stableVersion: boolean;
    registry: VersionRegistryRequest;
};
export type CatalogListResponse = {
    accountId: string;
    workspaceId: string;
    id: string;
    name: string;
    slug: string;
    description: string;
    status: "PENDING" | "ERROR" | "CREATED";
    catalogVisible: boolean;
    createdBy: string;
    createdAt: string;
    contact: ContactResponse;
    stableVersion?: VersionCatalogResponse;
    latestVersion?: VersionCatalogResponse;
};
export type CatalogResponse = {
    _embedded?: {
        content?: CatalogListResponse[];
    };
    _links?: Links;
    page?: PageMetadata;
};
export type VersionCatalogQueryParams = {
    page: number;
    size: number;
};
/**
 * Request to list all APIs
 */
export function list({ workspaceId, queryParams }: {
    workspaceId: string;
    queryParams: ApiQueryParams;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApiListResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
/**
 * Request to create an Api
 */
export function createApi({ workspaceId, authorization, apiCreateRequest }: {
    workspaceId: string;
    authorization: string;
    apiCreateRequest: ApiCreateRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApiCreateResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis`, oazapfts.json({
        ...opts,
        method: "POST",
        body: apiCreateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
/**
 * Request to get all API version
 */
export function getAllApiVersion({ workspaceId, apiId, queryParams }: {
    workspaceId: string;
    apiId: string;
    queryParams: VersionQueryParams;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: VersionListResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
/**
 * Request to create API version
 */
export function createApiVersion({ workspaceId, apiId, versionRequest }: {
    workspaceId: string;
    apiId: string;
    versionRequest: VersionRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: VersionResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions`, oazapfts.json({
        ...opts,
        method: "POST",
        body: versionRequest
    })));
}
/**
 * Request to detail an API
 */
export function getApi({ workspaceId, apiId }: {
    workspaceId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApiDetailResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}`, {
        ...opts
    }));
}
/**
 * Request to patch an API
 */
export function update({ workspaceId, apiId, apiPatchRequest }: {
    workspaceId: string;
    apiId: string;
    apiPatchRequest: ApiPatchRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: apiPatchRequest
    })));
}
/**
 * Request to get API version
 */
export function getApiVersion({ workspaceId, apiId, versionId }: {
    workspaceId: string;
    apiId: string;
    versionId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: VersionResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions/${encodeURIComponent(versionId)}`, {
        ...opts
    }));
}
/**
 * Request to update API version
 */
export function updateVersion({ workspaceId, apiId, versionId, versionPatchRequest }: {
    workspaceId: string;
    apiId: string;
    versionId: string;
    versionPatchRequest: VersionPatchRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchText(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions/${encodeURIComponent(versionId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: versionPatchRequest
    })));
}
export function list1(opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    }>("/siglas", {
        ...opts
    }));
}
export function list2({ siglas }: {
    siglas?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    }>(`/offers${QS.query(QS.explode({
        siglas
    }))}`, {
        ...opts
    }));
}
export function list3({ siglas }: {
    siglas?: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: object;
    }>(`/businesses${QS.query(QS.explode({
        siglas
    }))}`, {
        ...opts
    }));
}
/**
 * Show APIs from catalog
 */
export function list4({ accountId, queryParams }: {
    accountId: string;
    queryParams: ApiQueryParams;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: CatalogResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/accounts/${encodeURIComponent(accountId)}/v2/apis${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
/**
 * Request to detail an API from Catalog
 */
export function detail({ accountId, apiId }: {
    accountId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: ApiDetailResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/accounts/${encodeURIComponent(accountId)}/v2/apis/${encodeURIComponent(apiId)}`, {
        ...opts
    }));
}
/**
 * Show Versions from catalog
 */
export function listVersions({ accountId, apiId, queryParams }: {
    accountId: string;
    apiId: string;
    queryParams: VersionCatalogQueryParams;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: VersionResponse;
    } | {
        status: 400;
    } | {
        status: 403;
    } | {
        status: 404;
    } | {
        status: 422;
    } | {
        status: 500;
    }>(`/accounts/${encodeURIComponent(accountId)}/v2/apis/${encodeURIComponent(apiId)}/versions${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
