/**
 * ai-agent-mgmt-api API
 * 0.0.1
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders> = {
    headers: {},
    baseUrl: "/",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {};
export type AgentType = "CONVERSATIONAL" | "SINGLE_ANSWER";
export type LlmConfigRequestPart = {
    model_slug: string;
    temperature?: number | null;
};
export type SimilarityFunction = "COSINE" | "EUCLIDEAN" | "DOT_PRODUCT";
export type KnowledgeSourcesConfigRequestPart = {
    similarity_function?: SimilarityFunction;
    max_number_of_kos?: number | null;
    relevancy_threshold?: number | null;
    post_processing?: boolean | null;
    sealed?: boolean | null;
    /** List of knowledge source ids (ULID). */
    knowledge_sources: string[];
};
export type NewAgentRequest = {
    name: string;
    slug: string;
    description?: string;
    avatar?: string;
    suggested_prompts?: string[];
    system_prompt: string;
    "type": AgentType;
    llm_config?: (LlmConfigRequestPart) | null;
    knowledge_sources_config?: (KnowledgeSourcesConfigRequestPart) | null;
};
export type ViolationResponse = {
    field?: string;
    message?: string;
};
export type LlmConfigResponse = {
    model_slug: string;
    temperature: number;
};
export type KnowledgeSourceDetailResponse = {
    id: string;
    slug: string;
    name: string;
    description: string;
    "type": string;
    creator: string;
    "default": boolean;
    visibility_level: string;
    model_name: string;
    username: string;
};
export type KnowledgeSourceResponse = {
    similarity_function: SimilarityFunction;
    max_number_of_kos: number;
    relevancy_threshold: number;
    post_processing: boolean;
    sealed: boolean;
    knowledge_sources: string[];
    knowledge_sources_details?: KnowledgeSourceDetailResponse[];
};
export type ZonedDateTime = string;
export type ModifiedAgentRequest = {
    name?: string | null;
    slug?: string | null;
    description?: string | null;
    avatar?: string | null;
    suggested_prompts?: string[] | null;
    system_prompt?: string | null;
    "type"?: AgentType;
    llm_config?: (LlmConfigRequestPart) | null;
    knowledge_sources_config?: (KnowledgeSourcesConfigRequestPart) | null;
};
export type ForkAgentRequest = {
    slug?: string;
    name?: string | null;
};
export type VisibilityLevel = "PERSONAL" | "SHARED" | "WORKSPACE" | "ACCOUNT";
export type ChangeVisibilityRequest = {
    level: VisibilityLevel;
};
export type AgentResponse = {
    id: string;
    name: string;
    slug: string;
    description?: string;
    avatar?: string;
    system_prompt: string;
    "type": string;
    llm_config?: LlmConfigResponse;
    suggested_prompts?: string[];
    knowledge_sources_config?: KnowledgeSourceResponse;
    visibility_level: string;
    creator_name: string;
    created_by: string;
    created_at: ZonedDateTime;
    updated_by?: string;
    updated_at?: ZonedDateTime;
};
/**
 * Creates a new AI Agent.
 */
export function postV1Agent({ newAgentRequest }: {
    newAgentRequest?: NewAgentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: {
            id?: string;
        };
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>("/v1/agent", oazapfts.json({
        ...opts,
        method: "POST",
        body: newAgentRequest
    })));
}
/**
 * Get agent by ID
 */
export function getV1AgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: {
            id: string;
            name: string;
            slug: string;
            description?: string;
            avatar?: string;
            system_prompt: string;
            "type": string;
            llm_config?: LlmConfigResponse;
            suggested_prompts?: string[];
            knowledge_sources_config?: KnowledgeSourceResponse;
            visibility_level: string;
            creator_name: string;
            created_by: string;
            created_at: ZonedDateTime;
            updated_by?: string;
            updated_at?: ZonedDateTime;
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}`, {
        ...opts
    }));
}
/**
 * Update agent by ID
 */
export function putV1AgentByAgentId({ agentId, modifiedAgentRequest }: {
    agentId: string;
    modifiedAgentRequest?: ModifiedAgentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: modifiedAgentRequest
    })));
}
/**
 * Delete agent by ID
 */
export function deleteV1AgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * AI Agent validade publish.
 */
export function getV1AgentByAgentIdDependencies({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: {
            ks_names?: string[];
            error_ks_names?: string[];
            missing_ks_list?: string[];
        };
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}/dependencies`, {
        ...opts
    }));
}
/**
 * Fork an AI agent.
 */
export function postV1AgentByAgentIdFork({ agentId, forkAgentRequest }: {
    agentId: string;
    forkAgentRequest?: ForkAgentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: {
            id?: string;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: forkAgentRequest
    })));
}
/**
 * AI Agent update visibility.
 */
export function postV1AgentByAgentIdPublish({ agentId, changeVisibilityRequest }: {
    agentId: string;
    changeVisibilityRequest?: ChangeVisibilityRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}/publish`, oazapfts.json({
        ...opts,
        method: "POST",
        body: changeVisibilityRequest
    })));
}
/**
 * Share an AI agent.
 */
export function postV1AgentByAgentIdShare({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
        data: object;
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentId)}/share`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Get agent by Slug
 */
export function getV1AgentByAgentSlugExists({ agentSlug }: {
    agentSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: {
            id: string;
            name: string;
            slug: string;
            description?: string;
            avatar?: string;
            system_prompt: string;
            "type": string;
            llm_config?: LlmConfigResponse;
            suggested_prompts?: string[];
            knowledge_sources_config?: KnowledgeSourceResponse;
            visibility_level: string;
            creator_name: string;
            created_by: string;
            created_at: ZonedDateTime;
            updated_by?: string;
            updated_at?: ZonedDateTime;
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agent/${encodeURIComponent(agentSlug)}/exists`, {
        ...opts
    }));
}
/**
 * List all built-in AI Agents.
 */
export function getV1Agents({ visibility }: {
    visibility?: VisibilityLevel;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AgentResponse[];
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/agents${QS.query(QS.explode({
        visibility
    }))}`, {
        ...opts
    }));
}
/**
 * Creates a new built-in AI Agent.
 */
export function postV1PublicAgent({ newAgentRequest }: {
    newAgentRequest?: NewAgentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 201;
        data: {
            id?: string;
        };
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>("/v1/public/agent", oazapfts.json({
        ...opts,
        method: "POST",
        body: newAgentRequest
    })));
}
/**
 * Get agent by ID
 */
export function getV1PublicAgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: {
            id: string;
            name: string;
            slug: string;
            description?: string;
            avatar?: string;
            system_prompt: string;
            "type": string;
            llm_config?: LlmConfigResponse;
            suggested_prompts?: string[];
            knowledge_sources_config?: KnowledgeSourceResponse;
            visibility_level: string;
            creator_name: string;
            created_by: string;
            created_at: ZonedDateTime;
            updated_by?: string;
            updated_at?: ZonedDateTime;
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agent/${encodeURIComponent(agentId)}`, {
        ...opts
    }));
}
/**
 * Update agent by ID
 */
export function putV1PublicAgentByAgentId({ agentId, modifiedAgentRequest }: {
    agentId: string;
    modifiedAgentRequest?: ModifiedAgentRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agent/${encodeURIComponent(agentId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: modifiedAgentRequest
    })));
}
/**
 * Delete agent by ID
 */
export function deleteV1PublicAgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agent/${encodeURIComponent(agentId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * AI Agent validade publish.
 */
export function getV1PublicAgentByAgentIdDependencies({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: {
            ks_names?: string[];
            error_ks_names?: string[];
            missing_ks_list?: string[];
        };
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agent/${encodeURIComponent(agentId)}/dependencies`, {
        ...opts
    }));
}
/**
 * AI Agent update visibility.
 */
export function postV1PublicAgentByAgentIdPublish({ agentId, changeVisibilityRequest }: {
    agentId: string;
    changeVisibilityRequest?: ChangeVisibilityRequest;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: {
            code?: string;
            details?: string;
            violations?: ViolationResponse[];
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 422;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agent/${encodeURIComponent(agentId)}/publish`, oazapfts.json({
        ...opts,
        method: "POST",
        body: changeVisibilityRequest
    })));
}
/**
 * Get agent by Slug
 */
export function getV1PublicAgentByAgentSlugExists({ agentSlug }: {
    agentSlug: string;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: {
            id: string;
            name: string;
            slug: string;
            description?: string;
            avatar?: string;
            system_prompt: string;
            "type": string;
            llm_config?: LlmConfigResponse;
            suggested_prompts?: string[];
            knowledge_sources_config?: KnowledgeSourceResponse;
            visibility_level: string;
            creator_name: string;
            created_by: string;
            created_at: ZonedDateTime;
            updated_by?: string;
            updated_at?: ZonedDateTime;
        };
    } | {
        status: 404;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agent/${encodeURIComponent(agentSlug)}/exists`, {
        ...opts
    }));
}
/**
 * List all built-in AI Agents.
 */
export function getV1PublicAgents({ visibility }: {
    visibility?: VisibilityLevel;
}, opts?: Oazapfts.RequestOpts) {
    return oazapfts.ok(oazapfts.fetchJson<{
        status: 200;
        data: AgentResponse[];
    } | {
        status: 500;
        data: {
            code?: string;
            details?: string;
            additionalInformation?: {
                [key: string]: any;
            } | null;
        };
    }>(`/v1/public/agents${QS.query(QS.explode({
        visibility
    }))}`, {
        ...opts
    }));
}
