/* eslint-disable react-hooks/rules-of-hooks */

import { UseMutationOptions, useMutation } from '@tanstack/react-query'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { AutoOperation } from './AutoOperation'
import { queryClient } from './react-query-client'
import { AutoQueryObjectParams, MutationObject } from './types'

export class AutoMutation<Variables, Result> extends AutoOperation<Variables> implements MutationObject<Variables, Result> {
  constructor(params: AutoQueryObjectParams<Variables, Result>) {
    super(params)
  }

  mutate(...args: Variables extends void ? [signal?: AbortSignal] : [variables: Variables, signal?: AbortSignal]) {
    const variables = args[0] instanceof AbortSignal ? undefined : args[0]
    const signal = args[0] instanceof AbortSignal ? args[0] : args[1]
    return this.callFn(variables, signal)
  }

  useMutation(options?: Omit<UseMutationOptions<Result, StackspotAPIError, Variables>, 'mutationFn'> & { signal?: AbortSignal }) {
    const result = useMutation<Result, StackspotAPIError, Variables>({
      ...options,
      mutationFn: (variables) => this.callFn(variables, options?.signal),
    }, queryClient)
    return [result.mutateAsync as any, result.isPending, result.error as StackspotAPIError | undefined, result as any] as const
  }
}
