/* eslint-disable react-hooks/rules-of-hooks */

import {
  InfiniteData, QueryFunctionContext, QueryKey,
  UseInfiniteQueryResult,
  useInfiniteQuery,
  useSuspenseInfiniteQuery,
} from '@tanstack/react-query'
import { get, set } from 'lodash'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { AutoQuery } from './AutoQuery'
import { queryClient } from './react-query-client'
import { AutoQueryObjectParams, InfiniteQueryObject, InfiniteQueryOptions, UseInfiniteQueryObjectOptions } from './types'

export class AutoInfiniteQuery<Variables, Result, PageParamName extends keyof Variables, Accumulator extends keyof Result | ''>
  extends AutoQuery<Variables, Result>
  implements InfiniteQueryObject<Variables, Result, Accumulator>
{
  private options: Required<InfiniteQueryOptions<Variables, Result, PageParamName, Accumulator | ''>>

  constructor(
    params: AutoQueryObjectParams<Variables, Result>,
    options: InfiniteQueryOptions<Variables, Result, PageParamName, Accumulator>,
  ) {
    super(params)
    this.options = {
      ...options,
      accumulator: options.accumulator ?? '',
      defaultVariables: options.defaultVariables ?? {},
    }
  }

  private createInfiniteQueryFn(
    variables: Variables | undefined,
  ): (context: QueryFunctionContext<QueryKey, Variables[PageParamName]>) => Promise<Result> {
    return ({ pageParam, signal }) => {
      const paginatedVariables = {
        ...variables,
      } 
      set(paginatedVariables, this.options.pageParamName, pageParam ?? get(variables, this.options.pageParamName))
      return this.callFn(paginatedVariables, signal)
    }
  }

  private getListFromData(data: InfiniteData<Result> | undefined) {
    return data?.pages.map(
      page => this.options.accumulator ? page[this.options.accumulator as keyof Result] : page,
    ).flat() as Accumulator extends keyof Result ? Result[Accumulator] : Result
  }

  private useInfiniteQueryResult(
    suspense: boolean,
    variables = {} as Variables,
    options?: UseInfiniteQueryObjectOptions<Result>,
  ) {
    variables = { ...this.options.defaultVariables, ...variables }
    const use = suspense ? useSuspenseInfiniteQuery : useInfiniteQuery
    return use<any, any, any, any, any>({
      ...options,
      queryKey: this.getInfiniteKey(variables),
      queryFn: this.createInfiniteQueryFn(variables),
      initialPageParam: this.options.initialPageParam,
      getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) =>
        this.options.getNextPageParam({ variables, lastPage, allPages, lastPageParam, allPageParams }),
    }, queryClient) as UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>
  }

  useInfiniteQuery(
    variables?: Variables,
    options?: UseInfiniteQueryObjectOptions<Result>,
  ): [
    Accumulator extends keyof Result ? Result[Accumulator] : Result,
    UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>,
  ] {
    const result = this.useInfiniteQueryResult(true, variables, options)
    return [
      this.getListFromData(result.data),
      result,
    ]
  }

  useStatefulInfiniteQuery(
    variables?: Variables,
    options?: UseInfiniteQueryObjectOptions<Result>,
  ): [
    Accumulator extends keyof Result ? Result[Accumulator] : Result,
    boolean,
    StackspotAPIError | undefined | null,
    UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>,
  ] {
    const result = this.useInfiniteQueryResult(false, variables, options)
    return [
      this.getListFromData(result.data),
      result.isPending,
      result.error,
      result,
    ]
  }

  async invalidate(variables?: Partial<Variables> | undefined): Promise<void> {
    await Promise.all([
      super.invalidate(variables),
      queryClient.invalidateQueries({ queryKey: this.getInfiniteKey(variables) }),
    ])
  }

  private getInfiniteKey(variables?: Partial<Variables> | undefined) {
    return ['infinite', ...this.getKey(variables)]
  }

  async cancel(variables?: Partial<Variables> | undefined) {
    super.cancel(variables)
    queryClient.cancelQueries({ queryKey: this.getInfiniteKey() })
  }
}
