/* eslint-disable react-hooks/rules-of-hooks */

import { UseQueryOptions, UseQueryResult, useQuery } from '@tanstack/react-query'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { queryClient } from './react-query-client'
import { FullOperationConfig, OperationObject } from './types'

export abstract class ManualOperation<Variables extends Record<string, any> | void> implements OperationObject<Variables> {
  protected config: FullOperationConfig<Variables extends void ? [AbortSignal] : [AbortSignal, Variables], any>

  constructor(config: FullOperationConfig<Variables extends void ? [AbortSignal] : [AbortSignal, Variables], any>) {
    this.config = config
  }

  private async makePermissionRequest(variables: Partial<Record<string, any>> | undefined) {
    try {
      // @ts-ignore the following is correct. TS can't correctly infer the conditional type here =(
      return await this.config.permission(variables)
    } catch (error) {
      throw this.config.transformError(error)
    }
  }

  isAllowed(...[variables]: Variables extends void ? [] : [variables?: Partial<Variables>]) {
    return queryClient.fetchQuery({
      queryKey: this.getPermissionKey(variables as Variables),
      queryFn: () => this.makePermissionRequest(variables),
    })
  }

  useAllowed(
    ...args: Variables extends void
      ? [options?: Omit<UseQueryOptions, 'queryFn' | 'queryKey'>]
      : [variables?: Partial<Variables>, options?: Omit<UseQueryOptions, 'queryFn' | 'queryKey'>]
  ) {
    /* `this.config.permission` is a function with arity 0 or 1. If it accepts variables, its arity is 1. If it doesn't accept variables,
    its arity is zero. We can use this information to determine what the type of `args` actually is at runtime. If variables are accepted,
    than the 1st argument is the variables and the 2nd is the query options, otherwise, it has a single argument, which is the query
    options. */
    const [variables, options] = this.config.permission.length === 1 ? args : [undefined, args[0]]
    const result = useQuery({
      ...options,
      queryKey: this.getPermissionKey(variables as Variables),
      queryFn: () => this.makePermissionRequest(variables),
    }, queryClient) as UseQueryResult<boolean, StackspotAPIError>
    return [result.data, result.isPending, result.error, result] as const
  }

  getPermissionKey(variables?: Partial<Variables>) {
    return [this.config.apiName, `${this.config.name}.permission`, variables]
  }
}
