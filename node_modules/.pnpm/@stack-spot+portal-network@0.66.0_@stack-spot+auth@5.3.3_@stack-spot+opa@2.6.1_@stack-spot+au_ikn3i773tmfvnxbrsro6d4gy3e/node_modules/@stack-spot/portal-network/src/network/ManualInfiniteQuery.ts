/* eslint-disable react-hooks/rules-of-hooks */
import { InfiniteData, QueryFunctionContext, QueryKey, UseInfiniteQueryResult, useInfiniteQuery, useSuspenseInfiniteQuery } from '@tanstack/react-query'
import { get, set } from 'lodash'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ManualQuery } from './ManualQuery'
import { queryClient } from './react-query-client'
import { FullOperationConfig, InfiniteQueryConfig, InfiniteQueryObject, UseInfiniteQueryObjectOptions } from './types'

export class ManualInfiniteQuery<
  Variables extends Record<string, any>,
  Result,
  PageParamName extends keyof Variables,
  Accumulator extends keyof Result | ''
> extends ManualQuery<Variables, Result> implements InfiniteQueryObject<Variables, Result, Accumulator> {
  constructor(
    config: InfiniteQueryConfig<Variables, Result, PageParamName, Accumulator>
      & { apiName: string, transformError: (error: any) => StackspotAPIError },
  ) {
    super(config as FullOperationConfig<any, any>)
  }

  private getConfig() {
    return this.config as unknown as InfiniteQueryConfig<Variables, Result, PageParamName, Accumulator>
  }

  private createInfiniteQueryFn(
    variables: Variables,
  ): (context: QueryFunctionContext<QueryKey, Variables[PageParamName]>) => Promise<Result> {
    return ({ pageParam, signal }) => {
      const paginatedVariables = {
        ...variables,
      } 
      set(paginatedVariables, this.getConfig().pageParamName, pageParam ?? get(variables, this.getConfig().pageParamName))
      return this.makeRequest(paginatedVariables, signal)
    }
  }

  private getListFromData(data: InfiniteData<Result> | undefined) {
    return data?.pages.map(
      page => this.getConfig().accumulator ? page[this.getConfig().accumulator as keyof Result] : page,
    ).flat() as Accumulator extends keyof Result ? Result[Accumulator] : Result
  }

  private useInfiniteQueryResult(suspense: boolean, variables = {} as Variables, options?: UseInfiniteQueryObjectOptions<Result>) {
    variables = { ...variables, ...this.getConfig().defaultVariables }
    const use = suspense ? useSuspenseInfiniteQuery : useInfiniteQuery
    return use<any, any, any, any, any>({
      ...options,
      queryKey: ['infinite', ...this.getKey(variables)],
      queryFn: this.createInfiniteQueryFn(variables),
      initialPageParam: this.getConfig().initialPageParam,
      getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => 
        this.getConfig().getNextPageParam({ variables, lastPage, allPages, lastPageParam, allPageParams }),
    }, queryClient) as UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>
  }

  useInfiniteQuery(
    variables?: Variables,
    options?: UseInfiniteQueryObjectOptions<Result>,
  ): [
    Accumulator extends keyof Result ? Result[Accumulator] : Result,
    UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>,
  ] {
    const result = this.useInfiniteQueryResult(true, variables, options)
    return [
      this.getListFromData(result.data),
      result,
    ]
  }

  useStatefulInfiniteQuery(
    variables?: Variables,
    options?: UseInfiniteQueryObjectOptions<Result>,
  ): [
    Accumulator extends keyof Result ? Result[Accumulator] : Result,
    boolean,
    StackspotAPIError | undefined | null,
    UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>,
  ] {
    const result = this.useInfiniteQueryResult(false, variables, options)
    return [
      this.getListFromData(result.data),
      result.isPending,
      result.error,
      result,
    ]
  }

  async invalidate(variables?: Partial<Variables> | undefined): Promise<void> {
    await Promise.all([
      super.invalidate(variables),
      queryClient.invalidateQueries({ queryKey: ['infinite', ...this.getKey(variables)] }),
    ])
  }
}
