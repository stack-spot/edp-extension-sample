/* eslint-disable react-hooks/rules-of-hooks */

import { UseMutationOptions, useMutation } from '@tanstack/react-query'
import { StackspotAPIError } from '../error/StackspotAPIError'
import { ManualOperation } from './ManualOperation'
import { queryClient } from './react-query-client'
import { FullOperationConfig, MutationObject } from './types'

export class ManualMutation<
  Variables extends Record<string, any> | void,
  Result
> extends ManualOperation<Variables> implements MutationObject<Variables, Result> {
  constructor(config: FullOperationConfig<Variables extends void ? [AbortSignal] : [AbortSignal, Variables], Result>) {
    super(config)
  }

  private async makeRequest(variables?: Record<string, any>, signal: AbortSignal = new AbortController().signal) {
    try {
      return await this.config.request(
        ...[signal, variables] as Variables extends void ? [AbortSignal] : [AbortSignal, Variables],
      )
    } catch (error) {
      throw this.config.transformError(error)
    }
  }

  mutate(...args: Variables extends void ? [signal?: AbortSignal] : [variables: Variables, signal?: AbortSignal]) {
    const variables = args[0] instanceof AbortSignal ? undefined : args[0]
    const signal = args[0] instanceof AbortSignal ? args[0] : args[1]
    return this.makeRequest(variables, signal)
  }

  useMutation(options?: Omit<UseMutationOptions<Result, StackspotAPIError, Variables>, 'mutationFn'> & { signal?: AbortSignal }) {
    const result = useMutation<Result, StackspotAPIError, Variables>({
      ...options,
      mutationFn: (variables: any) => this.makeRequest(variables, options?.signal),
    }, queryClient)
    return [result.mutateAsync as any, result.isPending, result.error as StackspotAPIError | undefined, result as any] as const
  }
}
