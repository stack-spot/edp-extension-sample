import { Language, getLanguage } from '@stack-spot/portal-translate'

export type InternationalizedMessage = (language: Language) => string | ErrorDetailsProperties

export interface ErrorDetailsProperties {
  /**
   * The error title
   */
  title?: string,
  /**
   * The error description
   */
  description?: string,
  /**
   * Label for link
   */
  linkLabel?: string,
  /**
   * Text for href of link 
   */
  linkHref?: string,
}

interface ErrorProperties {
  /**
   * The response's status.
   */
  status: number,
  /**
   * The response's headers.
   */
  headers?: Headers,
  /**
   * The error code defined by the API, if any.
   */
  code?: string,
  /**
   * The error message: may be a simple string or a function that returns a string depending on the language passed as parameter.
   * 
   * If not provided, will attempt to use the error code or 'unknown'.
   */
  message?: InternationalizedMessage | string | ErrorDetailsProperties,
  /**
   * The error's stack trace, if any.
   */
  stack?: string,
  
}

function getMessage(error: ErrorProperties['message']) {
  const message = typeof error === 'function' ? error('en') : error
  return typeof message === 'string' ? message : message?.description
}

export class StackspotAPIError extends Error {
  /**
   * The response's status.
   */
  status: number
  /**
   * The response's headers.
   */
  headers: Headers | undefined
  /**
   * The error code defined by the API, if any.
   */
  code: string | undefined
  private intl?: InternationalizedMessage

  constructor({ status, code, headers, message, stack }: ErrorProperties) {
    super(`Stackspot API error (network ${status}): ${getMessage(message)}`)
    this.status = status
    this.code = code
    this.headers = headers
    this.stack = stack
    this.intl = typeof message === 'string' || typeof message === 'object' ?  () => message : message
  }

  /**
   * Translates the error to the given language.
   * @param language 
   * @returns an error message
   */
  translate(language: Language = getLanguage()): string {
    const unknown = language === 'en' ? 'unknown error' : 'erro desconhecido'
    
    const error = this.intl?.(language) 
    const message = typeof error === 'string' ? error : error?.description
    return message ?? this.message ?? this.code ?? (this.status === 0 ? unknown : `${this.status}`)
  }

  translateDetails(language: Language = getLanguage()): ErrorDetailsProperties {
    const unknown = language === 'en' ? 'unknown error' : 'erro desconhecido'
    const errorMessage = this.intl?.(language)
    if (typeof errorMessage === 'string')
      return { description: errorMessage }
    if (typeof errorMessage === 'object')
      return errorMessage
    return { description: this.message ?? this.code ?? (this.status === 0 ? unknown : `${this.status}`) }
  }
}
