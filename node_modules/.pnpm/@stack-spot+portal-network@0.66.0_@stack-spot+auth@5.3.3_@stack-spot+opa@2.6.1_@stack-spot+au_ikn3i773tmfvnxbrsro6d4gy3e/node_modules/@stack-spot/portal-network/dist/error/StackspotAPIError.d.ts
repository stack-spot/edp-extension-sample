import { Language } from '@stack-spot/portal-translate';
export type InternationalizedMessage = (language: Language) => string | ErrorDetailsProperties;
export interface ErrorDetailsProperties {
    /**
     * The error title
     */
    title?: string;
    /**
     * The error description
     */
    description?: string;
    /**
     * Label for link
     */
    linkLabel?: string;
    /**
     * Text for href of link
     */
    linkHref?: string;
}
interface ErrorProperties {
    /**
     * The response's status.
     */
    status: number;
    /**
     * The response's headers.
     */
    headers?: Headers;
    /**
     * The error code defined by the API, if any.
     */
    code?: string;
    /**
     * The error message: may be a simple string or a function that returns a string depending on the language passed as parameter.
     *
     * If not provided, will attempt to use the error code or 'unknown'.
     */
    message?: InternationalizedMessage | string | ErrorDetailsProperties;
    /**
     * The error's stack trace, if any.
     */
    stack?: string;
}
export declare class StackspotAPIError extends Error {
    /**
     * The response's status.
     */
    status: number;
    /**
     * The response's headers.
     */
    headers: Headers | undefined;
    /**
     * The error code defined by the API, if any.
     */
    code: string | undefined;
    private intl?;
    constructor({ status, code, headers, message, stack }: ErrorProperties);
    /**
     * Translates the error to the given language.
     * @param language
     * @returns an error message
     */
    translate(language?: Language): string;
    translateDetails(language?: Language): ErrorDetailsProperties;
}
export {};
//# sourceMappingURL=StackspotAPIError.d.ts.map