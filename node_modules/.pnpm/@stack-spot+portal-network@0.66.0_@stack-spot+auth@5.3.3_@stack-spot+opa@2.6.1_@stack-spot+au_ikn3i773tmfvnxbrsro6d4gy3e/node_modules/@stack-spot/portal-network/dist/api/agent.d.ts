/**
 * ai-agent-mgmt-api API
 * 0.0.1
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {};
export type AgentType = "CONVERSATIONAL" | "SINGLE_ANSWER";
export type LlmConfigRequestPart = {
    model_slug: string;
    temperature?: number | null;
};
export type SimilarityFunction = "COSINE" | "EUCLIDEAN" | "DOT_PRODUCT";
export type KnowledgeSourcesConfigRequestPart = {
    similarity_function?: SimilarityFunction;
    max_number_of_kos?: number | null;
    relevancy_threshold?: number | null;
    post_processing?: boolean | null;
    sealed?: boolean | null;
    /** List of knowledge source ids (ULID). */
    knowledge_sources: string[];
};
export type NewAgentRequest = {
    name: string;
    slug: string;
    description?: string;
    avatar?: string;
    suggested_prompts?: string[];
    system_prompt: string;
    "type": AgentType;
    llm_config?: (LlmConfigRequestPart) | null;
    knowledge_sources_config?: (KnowledgeSourcesConfigRequestPart) | null;
};
export type ViolationResponse = {
    field?: string;
    message?: string;
};
export type LlmConfigResponse = {
    model_slug: string;
    temperature: number;
};
export type KnowledgeSourceDetailResponse = {
    id: string;
    slug: string;
    name: string;
    description: string;
    "type": string;
    creator: string;
    "default": boolean;
    visibility_level: string;
    model_name: string;
    username: string;
};
export type KnowledgeSourceResponse = {
    similarity_function: SimilarityFunction;
    max_number_of_kos: number;
    relevancy_threshold: number;
    post_processing: boolean;
    sealed: boolean;
    knowledge_sources: string[];
    knowledge_sources_details?: KnowledgeSourceDetailResponse[];
};
export type ZonedDateTime = string;
export type ModifiedAgentRequest = {
    name?: string | null;
    slug?: string | null;
    description?: string | null;
    avatar?: string | null;
    suggested_prompts?: string[] | null;
    system_prompt?: string | null;
    "type"?: AgentType;
    llm_config?: (LlmConfigRequestPart) | null;
    knowledge_sources_config?: (KnowledgeSourcesConfigRequestPart) | null;
};
export type ForkAgentRequest = {
    slug?: string;
    name?: string | null;
};
export type VisibilityLevel = "PERSONAL" | "SHARED" | "WORKSPACE" | "ACCOUNT";
export type ChangeVisibilityRequest = {
    level: VisibilityLevel;
};
export type AgentResponse = {
    id: string;
    name: string;
    slug: string;
    description?: string;
    avatar?: string;
    system_prompt: string;
    "type": string;
    llm_config?: LlmConfigResponse;
    suggested_prompts?: string[];
    knowledge_sources_config?: KnowledgeSourceResponse;
    visibility_level: string;
    creator_name: string;
    created_by: string;
    created_at: ZonedDateTime;
    updated_by?: string;
    updated_at?: ZonedDateTime;
};
/**
 * Creates a new AI Agent.
 */
export declare function postV1Agent({ newAgentRequest }: {
    newAgentRequest?: NewAgentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id?: string | undefined;
}>;
/**
 * Get agent by ID
 */
export declare function getV1AgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id: string;
    name: string;
    slug: string;
    description?: string | undefined;
    avatar?: string | undefined;
    system_prompt: string;
    type: string;
    llm_config?: LlmConfigResponse | undefined;
    suggested_prompts?: string[] | undefined;
    knowledge_sources_config?: KnowledgeSourceResponse | undefined;
    visibility_level: string;
    creator_name: string;
    created_by: string;
    created_at: ZonedDateTime;
    updated_by?: string | undefined;
    updated_at?: string | undefined;
}>;
/**
 * Update agent by ID
 */
export declare function putV1AgentByAgentId({ agentId, modifiedAgentRequest }: {
    agentId: string;
    modifiedAgentRequest?: ModifiedAgentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete agent by ID
 */
export declare function deleteV1AgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * AI Agent validade publish.
 */
export declare function getV1AgentByAgentIdDependencies({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<{
    ks_names?: string[] | undefined;
    error_ks_names?: string[] | undefined;
    missing_ks_list?: string[] | undefined;
}>;
/**
 * Fork an AI agent.
 */
export declare function postV1AgentByAgentIdFork({ agentId, forkAgentRequest }: {
    agentId: string;
    forkAgentRequest?: ForkAgentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id?: string | undefined;
}>;
/**
 * AI Agent update visibility.
 */
export declare function postV1AgentByAgentIdPublish({ agentId, changeVisibilityRequest }: {
    agentId: string;
    changeVisibilityRequest?: ChangeVisibilityRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Share an AI agent.
 */
export declare function postV1AgentByAgentIdShare({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
/**
 * Get agent by Slug
 */
export declare function getV1AgentByAgentSlugExists({ agentSlug }: {
    agentSlug: string;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id: string;
    name: string;
    slug: string;
    description?: string | undefined;
    avatar?: string | undefined;
    system_prompt: string;
    type: string;
    llm_config?: LlmConfigResponse | undefined;
    suggested_prompts?: string[] | undefined;
    knowledge_sources_config?: KnowledgeSourceResponse | undefined;
    visibility_level: string;
    creator_name: string;
    created_by: string;
    created_at: ZonedDateTime;
    updated_by?: string | undefined;
    updated_at?: string | undefined;
}>;
/**
 * List all built-in AI Agents.
 */
export declare function getV1Agents({ visibility }: {
    visibility?: VisibilityLevel;
}, opts?: Oazapfts.RequestOpts): Promise<AgentResponse[]>;
/**
 * Creates a new built-in AI Agent.
 */
export declare function postV1PublicAgent({ newAgentRequest }: {
    newAgentRequest?: NewAgentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id?: string | undefined;
}>;
/**
 * Get agent by ID
 */
export declare function getV1PublicAgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id: string;
    name: string;
    slug: string;
    description?: string | undefined;
    avatar?: string | undefined;
    system_prompt: string;
    type: string;
    llm_config?: LlmConfigResponse | undefined;
    suggested_prompts?: string[] | undefined;
    knowledge_sources_config?: KnowledgeSourceResponse | undefined;
    visibility_level: string;
    creator_name: string;
    created_by: string;
    created_at: ZonedDateTime;
    updated_by?: string | undefined;
    updated_at?: string | undefined;
}>;
/**
 * Update agent by ID
 */
export declare function putV1PublicAgentByAgentId({ agentId, modifiedAgentRequest }: {
    agentId: string;
    modifiedAgentRequest?: ModifiedAgentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete agent by ID
 */
export declare function deleteV1PublicAgentByAgentId({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * AI Agent validade publish.
 */
export declare function getV1PublicAgentByAgentIdDependencies({ agentId }: {
    agentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<{
    ks_names?: string[] | undefined;
    error_ks_names?: string[] | undefined;
    missing_ks_list?: string[] | undefined;
}>;
/**
 * AI Agent update visibility.
 */
export declare function postV1PublicAgentByAgentIdPublish({ agentId, changeVisibilityRequest }: {
    agentId: string;
    changeVisibilityRequest?: ChangeVisibilityRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get agent by Slug
 */
export declare function getV1PublicAgentByAgentSlugExists({ agentSlug }: {
    agentSlug: string;
}, opts?: Oazapfts.RequestOpts): Promise<{
    id: string;
    name: string;
    slug: string;
    description?: string | undefined;
    avatar?: string | undefined;
    system_prompt: string;
    type: string;
    llm_config?: LlmConfigResponse | undefined;
    suggested_prompts?: string[] | undefined;
    knowledge_sources_config?: KnowledgeSourceResponse | undefined;
    visibility_level: string;
    creator_name: string;
    created_by: string;
    created_at: ZonedDateTime;
    updated_by?: string | undefined;
    updated_at?: string | undefined;
}>;
/**
 * List all built-in AI Agents.
 */
export declare function getV1PublicAgents({ visibility }: {
    visibility?: VisibilityLevel;
}, opts?: Oazapfts.RequestOpts): Promise<AgentResponse[]>;
//# sourceMappingURL=agent.d.ts.map