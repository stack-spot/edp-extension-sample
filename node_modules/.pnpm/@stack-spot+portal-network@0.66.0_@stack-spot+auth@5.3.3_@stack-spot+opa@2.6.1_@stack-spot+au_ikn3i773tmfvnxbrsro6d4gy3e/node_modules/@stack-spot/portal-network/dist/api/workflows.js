/**
 * Workflow API
 * 0.1.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export const defaults = {
    headers: {},
    baseUrl: "/",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {};
/**
 * Run Action Service
 */
export function runActionServiceWorkflowsRunActionDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, runActionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/workflows/run-action/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: runActionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Create App Service
 */
export function createAppServiceWorkflowsCreateAppDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, createAppRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/workflows/create-app/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: createAppRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Create Api Service
 */
export function createApiServiceWorkflowsCreateApiDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, createApiRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/workflows/create-api/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: createApiRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Create Infra Service
 */
export function createInfraServiceWorkflowsCreateInfraDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, createInfraRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/workflows/create-infra/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: createInfraRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Apply Plugin Service
 */
export function applyPluginServiceWorkflowsApplyPluginDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, applyPluginRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/workflows/apply-plugin/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: applyPluginRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Health Check Service
 */
export function healthCheckServiceWorkflowsHealthCheckDispatchPost({ authorization, stackspotCustomerIp, xExecutionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/workflows/health-check/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp,
            "x-execution-id": xExecutionId
        })
    })));
}
/**
 * Step Report Service
 */
export function stepReportServiceExecutionsExecutionIdWorkflowsStepsReportPost({ executionId, authorization, stepReportRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/executions/${encodeURIComponent(executionId)}/workflows/steps/report`, oazapfts.json({
        ...opts,
        method: "POST",
        body: stepReportRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * Get Execution Dispatch Request Service
 */
export function getExecutionDispatchRequestServiceWorkflowsExecutionIdRequestGet({ executionId, authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workflows/${encodeURIComponent(executionId)}/request`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Get Execution Status Service
 */
export function getExecutionStatusServiceWorkflowsExecutionStatusExecutionIdGet({ executionId, authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workflows/execution-status/${encodeURIComponent(executionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Create Semaphore Service
 */
export function createSemaphoreServiceSemaphoresPost({ authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/semaphores", {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Get Semaphore Service
 */
export function getSemaphoreServiceSemaphoresSemaphoreIdGet({ semaphoreId, authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/semaphores/${encodeURIComponent(semaphoreId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * Update Semaphore Service
 */
export function updateSemaphoreServiceSemaphoresSemaphoreIdPut({ semaphoreId, authorization, updateSemaphoreRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/semaphores/${encodeURIComponent(semaphoreId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateSemaphoreRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * V1 Create Workflow Execution Service
 */
export function v1CreateWorkflowExecutionServiceV1ExecutionsPost({ authorization, stackspotCustomerIp, createWorkflowExecutionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/executions", oazapfts.json({
        ...opts,
        method: "POST",
        body: createWorkflowExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
/**
 * V1 Put Workflow Execution Workflow Service
 */
export function v1PutWorkflowExecutionWorkflowServiceV1ExecutionsExecutionIdWorkflowsPut({ executionId, authorization, createWorkflowExecutionWorkflowRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}/workflows`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: createWorkflowExecutionWorkflowRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * V1 Report Workflow Step Service
 */
export function v1ReportWorkflowStepServiceV1ExecutionsExecutionIdStepsPut({ executionId, authorization, putWorkflowExecutionWorkflowStepRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}/steps`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: putWorkflowExecutionWorkflowStepRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    })));
}
/**
 * V1 Get Workflow Execution Job Graph Service
 */
export function v1GetWorkflowExecutionJobGraphServiceV1ExecutionsExecutionIdGet({ executionId, authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * V1 Get Workflow Execution Job Detail Service
 */
export function v1GetWorkflowExecutionJobDetailServiceV1ExecutionsExecutionIdJobsJobIdGet({ executionId, jobId, authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}/jobs/${encodeURIComponent(jobId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * V1 Accept Workflow Execution Job Suspended Service
 */
export function v1AcceptWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdAcceptPost({ executionId, jobId, authorization, stackspotCustomerIp }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}/jobs/${encodeURIComponent(jobId)}/accept`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    }));
}
/**
 * V1 Refuse Workflow Execution Job Suspended Service
 */
export function v1RefuseWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdRefusePost({ executionId, jobId, authorization, stackspotCustomerIp }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}/jobs/${encodeURIComponent(jobId)}/refuse`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    }));
}
/**
 * V1 Get Workflow Execution Cli State Service
 */
export function v1GetWorkflowExecutionCliStateServiceV1ExecutionsExecutionIdStateGet({ executionId, authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/executions/${encodeURIComponent(executionId)}/state`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization
        })
    }));
}
/**
 * V1 Dispatch Workflow Execution Service
 */
export function v1DispatchWorkflowExecutionServiceV1WorkflowsDispatchPost({ authorization, stackspotCustomerIp, dispatchWorkflowExecutionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/workflows/dispatch", oazapfts.json({
        ...opts,
        method: "POST",
        body: dispatchWorkflowExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
//# sourceMappingURL=workflows.js.map