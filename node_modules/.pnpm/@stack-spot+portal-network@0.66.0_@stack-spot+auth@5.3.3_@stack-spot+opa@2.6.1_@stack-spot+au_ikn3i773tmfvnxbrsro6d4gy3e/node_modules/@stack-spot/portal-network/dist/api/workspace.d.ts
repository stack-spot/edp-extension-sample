/**
 * Workspace API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type WorkspaceVariableResponse = {
    /** Workspace variable name. */
    name: string;
    /** Workspace variable value. */
    value?: string;
    /** Workspace variable description. */
    description: string;
    /** Workspace variable mandate flag. */
    mandate: boolean;
    /** Variable value source. */
    source: string;
    /** Workspace variable creation data */
    createdAt: string;
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type ErrorResponse = {
    code: string;
    status: number;
    details: string;
    validationDetails?: ValidationDetails[];
};
export type UpsertWorkspaceVariableRequest = {
    /** Workspace variable value. */
    value: string;
};
export type ContextAttribute = {
    key: string;
    value: object;
    final: boolean;
};
export type ContextValuesRequest = {
    /** Input attributes context values. */
    valuesContext: ContextAttribute[];
    /** Plugin o Action Version Id. */
    externalVersionId: string;
    /** Environment Name (For specific environments). */
    envName?: string;
};
export type ImportContextValueRequest = {
    /** Context type (PLUGIN, ACTION). */
    "type": "PLUGIN" | "ACTION";
    /** PluginId or ActionId. */
    externalId: string;
    /** PluginVersionId or ActionVersionId. */
    externalVersionId: string;
    /** List of keys to be imported. */
    attributes: string[];
};
export type ImportContextV2Request = {
    /** StackVersionId reference to be imported from. */
    stackVersionReference: string;
    /** Target contexts to be imported. */
    targetContexts: ImportContextValueRequest[];
};
export type ContextAttributeDto = {
    key: string;
    value: object;
    final: boolean;
    source?: "ACCOUNT" | "STACK" | "WORKSPACE";
};
export type ActionContextResponse = {
    actionId: string;
    versionRange: string;
    stepType?: "CREATE_REPO";
    valuesContext: ContextAttributeDto[];
};
export type WorkflowContextResponse = {
    accountId: string;
    actionsBefore: ActionContextResponse[];
    actionsAfter: ActionContextResponse[];
};
export type WorkflowActionContextRequest = {
    actionId: string;
    valuesContext: ContextAttribute[];
};
export type WorkspaceWorkflowCreateRequest = {
    actionsBefore: WorkflowActionContextRequest[];
    actionsAfter: WorkflowActionContextRequest[];
};
export type WorkflowActionResponse = {
    actionVersionId: string;
    orderStep: number;
    createRepo?: boolean;
};
export type WorkflowConditionResponse = {
    condition: "BEFORE" | "AFTER";
    actions: WorkflowActionResponse[];
};
export type WorkflowReadResponse = {
    identifier: string;
    workflowConditions: WorkflowConditionResponse[];
};
export type WorkflowActionsRequest = {
    /** Workflow action version id. */
    actionVersionId: string;
    /** Workspace order step. */
    orderStep: number;
    /** This action will create repository. */
    createRepo: boolean;
};
export type WorkflowConditionRequest = {
    /** Workflow condition. */
    condition: "BEFORE" | "AFTER";
    /** Workflow actions. */
    actions: WorkflowActionsRequest[];
};
export type AddWorkspaceWorkflowStepRequest = {
    /** Workflow identifier. */
    identifier: string;
    workflowConditions: WorkflowConditionRequest[];
};
export type UpdateSharedInfraStatusRequest = {
    /** Shared Infrastructure Status. */
    status: "CREATED" | "CREATE_FAILED" | "DRAFT" | "DELETING" | "DELETE_FAILED";
};
export type IdResponse = {
    /** Id response. */
    id: string;
};
export type SharedInfraVisibleLinksResponse = {
    id: string;
    visible: boolean;
};
export type UpdateSharedInfraLinkVisibilityRequest = {
    id: string;
    visible: boolean;
};
export type Task = {
    runTaskId: string;
    "type": "IAC" | "DEPLOY" | "DESTROY" | "IAC_SELF_HOSTED" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED";
    status: "EXTERNAL_ERROR" | "INTERNAL_ERROR" | "ABORTED" | "FAILED" | "SUCCEEDED" | "RUNNING" | "PENDING" | "READY_TO_RUN";
    message?: string;
};
export type Plugins = {
    pluginAlias: string;
    tasks: Task[];
};
export type ConnectionInterface = {
    selected: string;
    "type": string;
    alias: string;
};
export type Connections = {
    requires?: ConnectionInterface[];
    generates?: ConnectionInterface[];
};
export type GeneratesLinks = {
    name: string;
    url: string;
    "type": string;
    picture: string;
};
export type PluginLink = {
    generates: GeneratesLinks[];
};
export type PluginsStatusInCloud = {
    statusInCloud: "EXTERNAL_ERROR" | "INTERNAL_ERROR" | "ABORTED" | "FAILED" | "SUCCEEDED" | "RUNNING" | "PENDING" | "READY_TO_RUN";
    name: string;
    alias: string;
    "type": string;
    pluginVersionId: string;
    stackVersionId: string;
    inputs: {
        [key: string]: object;
    };
    connections: Connections;
    link?: PluginLink;
};
export type UpdateRunRequest = {
    /** Activity status to update. */
    status: "RUNNING" | "SUCCEEDED" | "USER_ERROR" | "RUNTIME_ERROR" | "EXTERNAL_ERROR" | "ABORTED" | "ABORTING";
    /** Message. */
    message?: string;
    /** List of plugins that contain in deploy, rollback or destroy. */
    plugins: Plugins[];
    /** List of plugins in cloud. */
    pluginsStatusInCloud: PluginsStatusInCloud[];
};
export type RunTaskRequest = {
    /** Plugin Id. */
    runTaskId: string;
    /** Plugin type. */
    "type": "IAC" | "DEPLOY" | "DESTROY" | "IAC_SELF_HOSTED" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED";
    /** Plugin status to update. */
    status: "EXTERNAL_ERROR" | "INTERNAL_ERROR" | "ABORTED" | "FAILED" | "SUCCEEDED" | "RUNNING" | "PENDING" | "READY_TO_RUN";
    /** Plugin Alias. */
    pluginAlias: string;
    /** Add message when plugin deployment gives error. */
    message?: string;
};
export type DeploymentTagRequest = {
    /** Application id. */
    applicationId?: string;
    /** Shared Infra id. */
    sharedInfrastructureId?: string;
    /** Related tag. */
    relatedTag: string;
};
export type ConnectionInterfaceAttribute = {
    /** Attribute key. */
    key: string;
    /** Attribute value. */
    value: object;
    /** Indicates if this attribute value is sensitive or not. */
    sensitive: boolean;
};
export type UpdateConnectionInterfaceAttributesRequest = {
    /** Environment id. */
    environmentId: string;
    /** List of attributes */
    attributes: ConnectionInterfaceAttribute[];
};
export type ConnectionInterfaceAttributesByEnv = {
    /** Environment id. */
    environmentId: string;
    /** List of attributes */
    attributes: ConnectionInterfaceAttribute[];
};
export type UpsertConnectionInterfaceRequest = {
    applicationId?: string;
    sharedInfraId?: string;
    slug: string;
    typeId: string;
    sourcePluginVersionId?: string;
    attributesByEnv: ConnectionInterfaceAttributesByEnv[];
};
export type UpdateApplicationStatusRequest = {
    /** Application Status. */
    status: "CREATED" | "CREATE_FAILED" | "DRAFT" | "DELETING" | "DELETE_FAILED" | "ARCHIVING" | "ARCHIVED" | "ARCHIVE_FAILED";
};
export type ApplicationVisibleLinksResponse = {
    id: string;
    visible: boolean;
};
export type UpdateApplicationLinkVisibilityRequest = {
    id: string;
    visible: boolean;
};
export type WorkflowSettingsResponse = {
    name: string;
    description: string;
    "type": string;
    isDefault: boolean;
    workflowDefaultId?: string;
    stacksId: string[];
};
export type SettingsWorkflowSaveRequest = {
    name: string;
    description: string;
    "type": "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    isDefault: boolean;
    stacksId: string[];
};
export type ContextWorkflowRequest = {
    actionId: string;
    valuesContext: ContextAttribute[];
};
export type ContextsWorkflowSaveRequest = {
    actionsBefore: ContextWorkflowRequest[];
    actionsAfter: ContextWorkflowRequest[];
};
export type ActionWorkflowResponse = {
    actionId: string;
    order: number;
    versionRange: string;
    stepType?: "CREATE_REPO";
};
export type WorkflowActionsResponse = {
    accountId: string;
    actionsBefore: ActionWorkflowResponse[];
    actionsAfter: ActionWorkflowResponse[];
};
export type WorkflowActionRequest = {
    actionId: string;
    order: number;
    versionRange: string;
    stepType?: "CREATE_REPO";
};
export type ActionsWorkflowSaveRequest = {
    actionsBefore: WorkflowActionRequest[];
    actionsAfter: WorkflowActionRequest[];
};
export type AccountVariableResponse = {
    /** Account variable name */
    name: string;
    /** Account variable value stored */
    value?: string;
    /** Account variable description */
    description: string;
    /** Account variable mandatory flag */
    mandate: boolean;
    /** Account variable creation data */
    createdAt: string;
};
export type UpdateAccountVariableRequest = {
    /** New account variable value */
    value?: string;
    /** New account variable description */
    description: string;
    /** New account variable mandatory flag */
    mandate: boolean;
};
export type AddAccountWorkflowStepRequest = {
    /** Workflow identifier. */
    identifier: string;
    workflowConditions: WorkflowConditionRequest[];
};
export type StackWorkflowCreateRequest = {
    actionsBefore: WorkflowActionContextRequest[];
    actionsAfter: WorkflowActionContextRequest[];
};
export type WorkspaceResponse = {
    /** Workspace id. */
    id: string;
    /** Workspace name */
    name: string;
    /** Workspace description */
    description?: string;
    /** Workspace image */
    imageUrl?: string;
};
export type WorkspacePageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: WorkspaceResponse[];
};
export type GetWorkspacePageRequest = {
    name?: string;
    createdBy?: string;
    favorites?: string[];
};
export type GetSharedInfraRequestBody = {
    name?: string;
    stackVersionIds?: string[];
};
export type ExtraRepositoriesReadResponse = {
    /** Extra repository name. */
    name: string;
    /** Extra repository description. */
    description: string;
    /** Extra repository provider. */
    provider: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZUREDEVOPS";
    /** Extra repository url. */
    url: string;
};
export type SharedInfraDetailsResponse = {
    /** Shared infrastructure id. */
    id: string;
    /** Shared infrastructure name. */
    name: string;
    /** Shared infrastructure description. */
    description?: string;
    /** Shared infrastructure repository url. */
    repoUrl?: string;
    /** Shared infrastructure repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this shared infrastructure. */
    stackVersionId: string;
    /** Starter used to generate this shared infrastructure. */
    starterId?: string;
    /** Shared Infrastructure status. */
    status: string;
    /** Application extra repositories. */
    extraRepositories: ExtraRepositoriesReadResponse[];
    /** Shared Infrastructure creator. */
    createdBy: string;
    /** Shared Infrastructure creation date. */
    createdAt: string;
    /** Shared Infrastructure updater. */
    updatedBy: string;
    /** Shared Infrastructure  update date. */
    updatedAt: string;
};
export type WorkspaceSharedInfraPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: SharedInfraDetailsResponse[];
};
export type GetApplicationsRequestBody = {
    name?: string;
    stackVersionIds?: string[];
};
export type ApplicationReadResponse = {
    /** Application id. */
    id: string;
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starterId: string;
    /** Application status. */
    status: string;
    /** Application extra repositories. */
    extraRepositories: ExtraRepositoriesReadResponse[];
    /** Application creator. */
    createdBy: string;
    /** Application creation date. */
    createdAt: string;
    /** Application updater. */
    updatedBy: string;
    /** Application update date. */
    updatedAt: string;
};
export type WorkspaceApplicationPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: ApplicationReadResponse[];
};
export type EnvironmentSimpleResponse = {
    /** Environment id. */
    id: string;
    /** Environment name. */
    name: string;
};
export type TargetByPluginUsageResponse = {
    /** Plugin Version ID. */
    pluginVersionId: string;
    environment: EnvironmentSimpleResponse;
};
export type PluginUsageByTargetResponse = {
    /** Application id. */
    id: string;
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Amount of linked versions. */
    totalLinkedVersions: number;
    workspace: WorkspaceResponse;
};
export type WorkspaceReadResponse = {
    /** Workspace id. */
    id: string;
    /** Workspace name. */
    name: string;
    /** Workspace description. */
    description?: string;
    /** Workspace image URL. */
    imageUrl?: string;
    /** Workspace manage runtime. */
    manageRuntime: boolean;
    /** Workspace accountId. */
    accountId: string;
    /** Workspace teams. - deprecated field */
    teams?: string[];
    /** Workspace creator. */
    createdBy: string;
    /** Workspace creation date. */
    createdAt: string;
    /** Workspace updater. */
    updatedBy: string;
    /** Workspace update date. */
    updatedAt: string;
};
export type NewWorkspaceRequest = {
    /** Workspace name. */
    name: string;
    /** Workspace description. */
    description?: string;
    /** Workspace image base64. */
    image?: string;
    /** Workspace manage runtime. */
    manageRuntime: boolean;
};
export type StackInWorkspaceReadResponse = {
    /** Stack version id. */
    stackVersionId: string;
    /** Workspace id. */
    workspaceId: string;
    /** Account id. */
    accountId: string;
};
export type StackVersionInfoRequest = {
    /** Stack id. */
    stackId: string;
    /** Stack slug. */
    stackSlug: string;
    /** Stack display name. */
    stackDisplayName: string;
    /** Stack semantic version. */
    stackVersionSemVer: string;
    /** Studio id. */
    studioId: string;
    /** Studio slug. */
    studioSlug: string;
};
export type AddStackInWorkspaceRequest = {
    /** Stack version id. */
    stackVersionId: string;
    stackVersionInfo: StackVersionInfoRequest;
};
export type StackVersionResponse = {
    stackVersionId: string;
    pluginIdsWithContext: string[];
};
export type StackWithWorkspaceContextResponse = {
    /** List of stack version with pluginVersionId list that has workspace context. */
    stackVersions: StackVersionResponse[];
    /** Workspace id. */
    workspaceId: string;
    /** Account id. */
    accountId: string;
};
export type ExtraRepositoriesRequest = {
    /** Extra repository name. */
    name: string;
    /** Extra repository description. */
    description: string;
    /** Extra repository provider. */
    provider: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZUREDEVOPS";
    /** Extra repository url. */
    url: string;
};
export type CreateSharedInfraRequest = {
    /** Shared infrastructure name. */
    name: string;
    /** Shared infrastructure description. */
    description?: string;
    /** Shared infrastructure repository url. */
    repoUrl?: string;
    /** Shared infrastructure repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this shared infrastructure. */
    stackVersionId: string;
    /** Starter used to generate this shared infrastructure. */
    starterId?: string;
    /** Extra repository this shared infrastructure. */
    extraRepositories?: ExtraRepositoriesRequest[];
};
export type RecreateSharedInfraRequest = {
    /** Shared infrastructure name. */
    name: string;
    /** Shared infrastructure description. */
    description?: string;
    /** Shared infrastructure repository url. */
    repoUrl?: string;
    /** Shared infrastructure repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this shared infrastructure. */
    stackVersionId: string;
    /** Starter used to generate this shared infrastructure. */
    starterId?: string;
};
export type UpdateSharedInfraRequest = {
    /** Shared infrastructure name. */
    name?: string;
    /** Shared infrastructure description. */
    description?: string;
    /** Shared infrastructure repository URL. */
    repoUrl?: string;
    /** Shared infrastructure repository base branch. */
    repoBaseBranch?: string;
    /** Extra repository for this application. */
    extraRepositories?: ExtraRepositoriesRequest[];
};
export type SharedInfraLinkReadResponse = {
    /** Shared infra link id. */
    id: string;
    /** Shared infra link name. */
    name: string;
    /** Shared infra link url. */
    url: string;
    /** Shared infra link image URL. */
    imageUrl?: string;
};
export type CreateSharedInfraLinkRequest = {
    /** Shared infra link name. */
    name: string;
    /** Shared infra URL. */
    url: string;
    /** Shared infra image base64. */
    image?: string;
};
export type RequiredConnectionInterface = {
    connectionInterfaceId: string;
    "type": string;
    existing: boolean;
};
export type Attribute = {
    key: string;
    value: object;
};
export type PluginElementSnapshot = {
    pluginVersionId: string;
    "type": string;
    requiredConnectionInterfaces: RequiredConnectionInterface[];
    attributes: Attribute[];
};
export type SharedInfraDeploySnapshotRequest = {
    /** Deployment Id. */
    deploymentId: string;
    /** Deployment Id. */
    environmentId: string;
    /** Input attributes for applied app plugin. */
    plugins: PluginElementSnapshot[];
};
export type StartRunRequest = {
    /** Requestor's email. */
    requestedBy: string;
    /** Action to perform. */
    action: "CREATE" | "UPDATE" | "DELETE" | "RUN";
    /** Run ID. */
    runId: string;
    /** Workflow executionId. */
    executionId?: string;
    /** Environment id. */
    environmentId: string;
    /** Application id. */
    applicationId?: string;
    /** Shared Infra id. */
    sharedInfrastructureId?: string;
    /** Deploy type. */
    "type": "DEPLOY" | "ROLLBACK" | "DESTROY" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED";
    /** Pipeline URL for self hosted deployment. */
    pipelineLink?: string;
    /** Application Manifest. */
    appManifesto?: string;
    /** List of plugins that contain in deploy, rollback or destroy. */
    plugins: Plugins[];
};
export type WorkspaceLinkReadResponse = {
    /** Shared infra link id. */
    id: string;
    /** Workspace link name. */
    name: string;
    /** Workspace link url. */
    url: string;
    /** Workspace link image URL. */
    imageUrl?: string;
};
export type CreateWorkspaceLinkRequest = {
    /** Workspace link name. */
    name: string;
    /** Workspace link URL. */
    url: string;
    /** Workspace link image base64. */
    image?: string;
};
export type WorkspaceEmbeddedLinkReadResponse = {
    /** Workspace embedded link id. */
    id: string;
    /** Workspace embedded link name. */
    name: string;
    /** Workspace embedded link url. */
    url: string;
    /** Workspace embedded link image URL. */
    imageUrl?: string;
    /** Workspace embedded link layout. */
    layout?: object;
};
export type CreateWorkspaceEmbeddedLinkRequest = {
    /** Workspace embedded link name. */
    name: string;
    /** Workspace embedded link URL. */
    url: string;
    /** Workspace embedded link image base64. */
    image?: string;
};
export type ConnectionInterfaceSummaryResponse = {
    /** Connection interface id. */
    id: string;
    /** Connection interface id type generate by client. */
    typeId: string;
    /** Shared infra that was used to generated this Connection interface. */
    sharedInfraId?: string;
    /** Application that was used to generated this Connection interface. */
    applicationId?: string;
    /** Connection interface id generated by client. */
    connectionInterfaceId: string;
    /** Indicates if this connection interface was generated by a plugin or manually. */
    automaticallyGenerated: boolean;
    /** The version ID of the plugin that generated this. */
    sourcePluginVersionId?: string;
};
export type CreateConnectionInterfaceRequest = {
    /** Connection interface type id. */
    typeId: string;
    /** Connection interface id generated by client. */
    connectionInterfaceId: string;
    /** Connection interface owner applications. */
    applicationId?: string;
    /** Connection interface owner shared infra. */
    sharedInfraId?: string;
    /** Version id from plugin that generated this connection interface. */
    sourcePluginVersionId?: string;
    /** Indicates if this connection interface was generated by a plugin or manually. */
    automaticallyGenerated: boolean;
    /** Connection interface attributes. */
    attributesByEnv: ConnectionInterfaceAttributesByEnv[];
};
export type UpdateConnectionInterfaceVisibilityRequest = {
    ids: string[];
    "type": "ACCOUNT" | "APPLICATION" | "WORKSPACE";
};
export type CreateApplicationRequest = {
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starterId: string;
    /** Extra repository this shared infrastructure. */
    extraRepositories?: ExtraRepositoriesRequest[];
};
export type RecreateApplicationRequest = {
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starterId: string;
};
export type UpdateApplicationRequest = {
    /** Application name. */
    name?: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch?: string;
    /** Extra repository for this application. */
    extraRepositories?: ExtraRepositoriesRequest[];
};
export type ApplicationLinkReadResponse = {
    /** Shared infra link id. */
    id: string;
    /** Application link name. */
    name: string;
    /** Application link url. */
    url: string;
    /** Application link image URL. */
    imageUrl?: string;
};
export type CreateApplicationLinkRequest = {
    /** Application link name. */
    name: string;
    /** Application link URL. */
    url: string;
    /** Application link image base64. */
    image?: string;
};
export type ApplicationDestroyRequest = {
    /** Destroy status. */
    status: "SUCCESS" | "FAILED";
};
export type MetaDataRequest = {
    name: string;
};
export type ConnectionInterfaceRequest = {
    /** Connection interface name */
    selected: string;
    /** Connection interface type */
    "type": string;
    /** Connection interface alias */
    alias: string;
};
export type ConnectionsRequest = {
    /** Connections interface requires per plugin */
    requires?: ConnectionInterfaceRequest[];
    /** Connections interface generates per plugin */
    generates?: ConnectionInterfaceRequest[];
};
export type GeneratesRequest = {
    /** Generated link name */
    name: string;
    /** Generated link url */
    url: string;
    /** Generated link type */
    "type": string;
    /** Generated link picture */
    picture: string;
};
export type PluginLinkRequest = {
    generates: GeneratesRequest[];
};
export type AppliedPluginsRequest = {
    /** Plugin name */
    name: string;
    /** Plugin alias */
    alias: string;
    /** Plugin type */
    "type": string;
    /** Plugin version id */
    pluginVersionId: string;
    /** Stack version id */
    stackVersionId: string;
    /** Plugin inputs */
    inputs: {
        [key: string]: object;
    };
    connections: ConnectionsRequest;
    links?: PluginLinkRequest;
};
export type SpecRequest = {
    /** Deploy specification id */
    id: string;
    /** Deploy specification repository */
    repository: string;
    /** Plugins applied in deploy  */
    appliedPlugins: AppliedPluginsRequest[];
};
export type AppManifestoRequest = {
    /** Deployment schema version */
    schemaVersion: string;
    /** Deployment kind */
    kind: string;
    metadata: MetaDataRequest;
    spec: SpecRequest;
};
export type ApplicationDeployRequest = {
    /** Deploy status. */
    status: "SUCCESS" | "FAILED";
    /** Deploy version. */
    version: string;
    appManifesto: AppManifestoRequest;
};
export type ApplicationEmbeddedLinkReadResponse = {
    /** Application embedded link id. */
    id: string;
    /** Application embedded link name. */
    name: string;
    /** Application embedded link url. */
    url: string;
    /** Application embedded link image URL. */
    imageUrl?: string;
    /** Application embedded link layout. */
    layout?: object;
};
export type CreateApplicationEmbeddedLinkRequest = {
    /** Application embedded link name. */
    name: string;
    /** Application embedded link URL. */
    url: string;
    /** Application embedded link image base64. */
    image?: string;
};
export type ApplicationDeploySnapshotRequest = {
    /** Deployment Id. */
    deploymentId: string;
    /** Deployment Id. */
    environmentId: string;
    /** Input attributes for applied app plugin. */
    plugins: PluginElementSnapshot[];
};
export type EnvironmentLinkedPluginResponse = {
    id: string;
    name: string;
    totalLinkedApps: number;
    totalLinkedInfra: number;
};
export type EnvironmentStackResponse = {
    stackVersionId: string;
    environments: EnvironmentLinkedPluginResponse[];
};
export type StackUsageByWorkspaceResponse = {
    /** Workspace id. */
    id: string;
    /** Workspace name */
    name: string;
    /** Workspace description */
    description?: string;
    /** Workspace image */
    imageUrl?: string;
    /** Amount of linked versions. */
    totalLinkedVersions: number;
    /** Stack Versions linked. */
    stackVersions: EnvironmentStackResponse[];
};
export type GetAllSharedInfraRequestBody = {
    favorites?: string[];
    name?: string;
    stackVersionIds?: string[];
};
export type SharedInfraWorkspaceReadResponse = {
    /** Application id. */
    id: string;
    /** Shared Infra name. */
    name: string;
    /** Shared Infra description. */
    description?: string;
    /** Shared Infra repository url. */
    repoUrl?: string;
    /** Shared Infra repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this Shared Infra. */
    stackVersionId: string;
    /** Starter used to generate this Shared Infra. */
    starterId?: string;
    /** Shared Infra status. */
    status: string;
    /** Shared Infra creator. */
    createdBy: string;
    /** Shared Infra creation date. */
    createdAt: string;
    /** Shared Infra updater. */
    updatedBy: string;
    /** Shared Infra update date. */
    updatedAt: string;
    workspace: WorkspaceReadResponse;
};
export type SharedInfraPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: SharedInfraWorkspaceReadResponse[];
};
export type PluginUsageAmountResponse = {
    pluginVersionId: string;
    totalUsedInInfras: number;
    totalUsedInApps: number;
};
export type PluginUsageAmountConsolidatedResponse = {
    totalUsedInInfras: number;
    totalUsedInApps: number;
    details: PluginUsageAmountResponse[];
};
export type EnvironmentReadResponse = {
    /** Environment id. */
    id: string;
    /** Environment name. */
    name: string;
    /** Environment description. */
    description: string;
    /** Environment accountId. */
    accountId: string;
};
export type EnvironmentSaveRequest = {
    /** Environment name. */
    name: string;
    /** Environment description. */
    description: string;
};
export type EnvironmentReadBatchResponse = {
    /** Environment id. */
    id: string;
    /** Environment name. */
    name: string;
};
export type GetAllApplicationsRequestBody = {
    favorites?: string[];
    name?: string;
    stackVersionIds?: string[];
};
export type ApplicationWorkspaceReadResponse = {
    /** Application id. */
    id: string;
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starterId: string;
    /** Application status. */
    status: string;
    /** Application creator. */
    createdBy: string;
    /** Application creation date. */
    createdAt: string;
    /** Application updater. */
    updatedBy: string;
    /** Application update date. */
    updatedAt: string;
    workspace: WorkspaceReadResponse;
};
export type ApplicationPageResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    totalPages: number;
    items: ApplicationWorkspaceReadResponse[];
};
export type WorkflowResponse = {
    id: string;
    name: string;
    description: string;
    "type": string;
    isDefault: boolean;
};
export type WorkflowActionWithContextRequest = {
    actionId: string;
    order: number;
    versionRange: string;
    stepType?: "CREATE_REPO";
    valuesContext: ContextAttribute[];
};
export type AccountWorkflowCreateRequest = {
    name: string;
    description: string;
    "type": "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    isDefault: boolean;
    stacksId: string[];
    actionsBefore: WorkflowActionWithContextRequest[];
    actionsAfter: WorkflowActionWithContextRequest[];
};
export type PaginatedAccountVariableResponse = {
    /** Current page requested */
    currentPage: number;
    /** Last page available */
    lastPage: number;
    /** Page size requested */
    pageSize: number;
    /** Total items found */
    totalItems: number;
    /** Account variables for current page */
    items: AccountVariableResponse[];
};
export type CreateAccountVariableRequest = {
    /** Account variable name */
    name: string;
    /** Account variable value */
    value?: string;
    /** Account variable description */
    description: string;
    /** Account variable mandatory flag */
    mandate: boolean;
};
export type AccountStackContextResponse = {
    /** List of stack version ids with pluginVersionId list with account context. */
    stackVersions: StackVersionResponse[];
    /** Account id. */
    accountId: string;
};
export type UpdateWorkspaceRequest = {
    /** Workspace name. */
    name?: string;
    /** Workspace description. */
    description?: string;
    /** Workspace image base64. */
    image?: string;
    /** Workspace manage runtime. */
    manageRuntime?: boolean;
};
export type UpdateSharedInfraLinkRequest = {
    /** Shared infra link URL. */
    url?: string;
    /** Shared infra link image base64. */
    image?: string;
    name?: string;
};
export type UpdateWorkspaceLinkRequest = {
    /** Workspace link URL. */
    url?: string;
    /** Workspace link image base64. */
    image?: string;
    name?: string;
};
export type UpdateWorkspaceEmbeddedLinkRequest = {
    /** Workspace embedded link name. */
    name?: string;
    /** Workspace embedded link URL. */
    url?: string;
    /** Workspace embedded link image base64. */
    image?: string;
};
export type UpsertWorkspaceEmbeddedLinkRequest = {
    /** Workspace embedded link id. */
    id: string;
    /** Workspace embedded link layout. */
    layout: object;
};
export type UpdateApplicationLinkRequest = {
    /** Shared infra link URL. */
    url?: string;
    /** Shared infra link image base64. */
    image?: string;
    name?: string;
};
export type UpdateApplicationEmbeddedLinkRequest = {
    /** Application embedded link name. */
    name?: string;
    /** Application embedded link URL. */
    url?: string;
    /** Application embedded link image base64. */
    image?: string;
};
export type UpsertApplicationEmbeddedLinkRequest = {
    /** Application embedded link id. */
    id: string;
    /** Application embedded link layout. */
    layout: object;
};
export type EnvironmentUpdateRequest = {
    /** Environment name. */
    name?: string;
    /** Environment description. */
    description?: string;
};
export type PaginatedWorkspaceVariableResponse = {
    currentPage: number;
    pageSize: number;
    lastPage: number;
    totalItems: number;
    items: WorkspaceVariableResponse[];
};
export type AppliedConnectionInterface = {
    slug: string;
    "type": string;
    alias: string;
};
export type ConnectionsResponse = {
    requires?: AppliedConnectionInterface[];
    generates?: AppliedConnectionInterface[];
};
export type Link = {
    name: string;
    url: string;
    "type": string;
    picture: string;
};
export type AppliedPluginV2Response = {
    name: string;
    "type"?: string;
    alias: string;
    pluginVersionId: string;
    stackVersionId: string;
    status?: "PENDING" | "READY_TO_RUN" | "RUNNING" | "SUCCEEDED" | "FAILED" | "INTERNAL_ERROR" | "ABORTED" | "EXTERNAL_ERROR" | "DESTROYED";
    runType?: "DEPLOY" | "DEPLOY_SELF_HOSTED" | "DESTROY" | "DESTROY_SELF_HOSTED" | "IAC" | "IAC_SELF_HOSTED";
    inCloud?: boolean;
    inputs?: {
        [key: string]: object;
    };
    connections?: ConnectionsResponse;
    links?: Link[];
};
export type ConnectionInterfaceSummaryV2Response = {
    /** Connection interface api id. */
    apiId: string;
    /** Connection interface id type generate by client. */
    typeId: string;
    /** Connection interface id generated by client. */
    slug: string;
    /** Indicates if this connection interface was generated by a plugin or manually. */
    automaticallyGenerated: boolean;
    /** The version ID of the plugin that generated this. */
    sourcePluginVersionId?: string;
};
export type Visibility = {
    /** Connection visibility type. */
    "type": "ACCOUNT" | "APPLICATION" | "WORKSPACE";
    /** IDs (based on type) for which connection interface is visible. */
    ids: string[];
};
export type ConnectionInterfaceDetailsV2Response = {
    /** Connection interface type. */
    typeId: string;
    /** Connection interface id generated by client. */
    slug: string;
    visibility: Visibility;
    /** Version id from plugin that generated this connection interface. */
    sourcePluginVersionId?: string;
    /** Indicates if this connection interface was generated by a plugin or manually. */
    automaticallyGenerated: boolean;
    /** Connection interface attributes. */
    attributesByEnv: ConnectionInterfaceAttributesByEnv[];
};
export type PluginInUseResponse = {
    name: string;
    alias: string;
    pluginVersionId: string;
    stackVersionId: string;
    inputs?: {
        [key: string]: object;
    };
    connections?: ConnectionsResponse;
};
export type ConnectionInterfaceInUseByTargetIdDetailsResponse = {
    environmentId: string;
    targets: PluginInUseResponse[];
};
export type WorkspaceVariableReadV1Response = {
    /** Workspace variable name. */
    name: string;
    /** Workspace variable value. */
    value: string;
    /** Workspace variable description. */
    description: string;
};
export type ConsolidatedAttr = {
    key: string;
    value: object;
    mandate: boolean;
    source: string;
};
export type ConsolidatedAttrByEnv = {
    environmentId: string;
    envName: string;
    attributes: ConsolidatedAttr[];
};
export type ConsolidatedContextResponse = {
    externalId: string;
    attributesByEnv: ConsolidatedAttrByEnv[];
};
export type AccountWorkflowResponse = {
    workflowId: string;
    name: string;
    description: string;
    isDefault: boolean;
    "type"?: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    actionsBefore: WorkflowActionResponse[];
    actionsAfter: WorkflowActionResponse[];
};
export type AppliedAttribute = {
    key: string;
    value: string;
};
export type AppliedPluginResponse = {
    pluginVersionId: string;
    "type": string;
    attributes: AppliedAttribute[];
    connectionInterfaces: AppliedConnectionInterface[];
};
export type ActivityResponse = {
    title?: string;
    version?: string;
    owner?: string;
    status: "SUCCESS" | "FAILED" | "SKIPPED" | "CANCELLED" | "RUNTIME_ERROR" | "INTERNAL_ERROR" | "EXTERNAL_ERROR" | "ABORTED" | "ABORTING" | "SUCCEEDED" | "USER_ERROR" | "DRIFT" | "TIMEOUT" | "RUNNING" | "READY_TO_RUN" | "PENDING" | "NONE";
    "type": "DEPLOY" | "ACTION" | "WORKFLOW" | "DRIFT" | "DESTROY" | "ROLLBACK" | "IAC" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED" | "IAC_SELF_HOSTED" | "CUSTOMER_WORKFLOW";
    requestedBy?: string;
    action?: "CREATE" | "UPDATE" | "DELETE" | "RUN";
    time: number;
    detail: {
        [key: string]: object;
    };
};
export type PaginatedActivityResponse = {
    items: ActivityResponse[];
    currentPage: number;
    totalItems: number;
    totalPages: number;
    pageSize: number;
    hasNextPage: boolean;
};
export type AppDependencyConnInterfaceResponse = {
    name: string;
    "type": string;
};
export type Dependencies = {
    environmentName: string;
    hasSelfHostedInfra: boolean;
    hasApplication: boolean;
    connectionInterfaces: AppDependencyConnInterfaceResponse[];
};
export type AppAndInfraDependencyResponse = {
    canDelete: boolean;
    hasSelfHostedInfra: boolean;
    hasApplication: boolean;
    dependencies: Dependencies[];
};
export type StacksVersionIdsResponse = {
    stackVersionIds: string[];
};
export type ConnectionInterfaceDetailsResponse = {
    /** Connection interface id. */
    id: string;
    /** Connection interface type id. */
    typeId: string;
    /** Connection interface id generated by client. */
    connectionInterfaceId: string;
    visibility: Visibility;
    /** Version id from plugin that generated this connection interface. */
    sourcePluginVersionId?: string;
    /** Indicates if this connection interface was generated by a plugin or manually. */
    automaticallyGenerated: boolean;
    /** Connection interface attributes. */
    attributesByEnv: ConnectionInterfaceAttributesByEnv[];
};
export type DeploymentTargetsResponse = {
    targetId: string;
    targetType?: "APPLICATION" | "SHARED_INFRA";
    environmentId: string;
};
export type ConnectionInterfaceInUseDetailsResponse = {
    slug: string;
    targets: DeploymentTargetsResponse[];
};
export type ConnectionInterfaceInUseSummaryResponse = {
    targetId: string;
    targetType?: "APPLICATION" | "SHARED_INFRA";
    environmentId: string;
};
export type MetaDataResponse = {
    name: string;
};
export type SpecResponse = {
    id?: string;
    repository?: string;
    appliedPlugins: AppliedPluginV2Response[];
};
export type ManifestoResponse = {
    schemaVersion: string;
    kind: string;
    metadata: MetaDataResponse;
    spec: SpecResponse;
};
export type AppDeployResponse = {
    deploymentId: string;
    targetId: string;
    targetType: "APPLICATION" | "SHARED_INFRA";
    targetVersion?: string;
    workspaceId: string;
    accountId: string;
    environmentId: string;
    status: "ACTIVE" | "INACTIVE";
    deployStatus: "SUCCEEDED" | "FAILED";
    requestedBy: string;
    dateTime: string;
    manifesto: ManifestoResponse;
};
export type InfraDeployResponse = {
    deploymentId: string;
    targetId: string;
    targetType?: "APPLICATION" | "SHARED_INFRA";
    targetVersion?: string;
    workspaceId: string;
    accountId: string;
    environmentId: string;
    "type"?: "DEPLOY" | "ROLLBACK" | "DESTROY" | "IAC" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED" | "IAC_SELF_HOSTED";
    status: "ACTIVE" | "INACTIVE";
    action?: "CREATE" | "UPDATE" | "DELETE" | "RUN";
    requestedBy?: string;
    manifesto: ManifestoResponse;
};
export type ApplicationDeployInfoResponse = {
    appDeploy?: AppDeployResponse;
    infraDeploy?: InfraDeployResponse;
};
export type EnvironmentsRequest = {
    environmentId: string;
    environmentName?: string;
    hasSaasDeploy: boolean;
    hasSelHostedDeploy: boolean;
    hasActiveApplicationDeploy: boolean;
};
export type ApplicationCanBeDeletedResponse = {
    targetId: string;
    targetType: "APPLICATION" | "SHARED_INFRA";
    environments: EnvironmentsRequest[];
};
export type WorkspaceInfo = {
    /** Workspace id. */
    id: string;
    /** Workspace name */
    name: string;
};
export type GetSharedInfraResponse = {
    /** Shared infrastructure id. */
    id: string;
    /** Shared infrastructure name. */
    name: string;
    /** Shared infrastructure description. */
    description?: string;
    /** Shared infrastructure repository url. */
    repoUrl?: string;
    /** Shared infrastructure repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this shared infrastructure. */
    stackVersionId: string;
    workspace: WorkspaceInfo;
};
export type PluginInUseDetailsResponse = {
    workspaceId: string;
    targets: DeploymentTargetsResponse[];
};
export type CheckConnectionSlugAvailabilityResponse = {
    /** Whether connection slug is available or not. */
    available: boolean;
};
export type ApplicationRepoUrlReadResponse = {
    /** Application id. */
    id: string;
    /** Application name. */
    name: string;
    /** Application status. */
    status: "CREATED" | "CREATE_FAILED" | "DRAFT" | "DELETING" | "DELETE_FAILED" | "ARCHIVING" | "ARCHIVED" | "ARCHIVE_FAILED";
    /** Application description. */
    description?: string;
    workspace?: WorkspaceResponse;
};
export type GetApplicationResponse = {
    /** Application id. */
    id: string;
    /** Application name. */
    name: string;
    /** Application description. */
    description?: string;
    /** Application repository url. */
    repoUrl?: string;
    /** Application repository base branch. */
    repoBaseBranch: string;
    /** Stack used to generate this application. */
    stackVersionId: string;
    /** Starter used to generate this application. */
    starterId: string;
    workspace: WorkspaceInfo;
};
export type WorkflowActionUsageResponse = {
    versionRanges: string[];
};
export type AccountVariableUsageResponse = {
    /** How many plugins are using this account variable */
    pluginsInUse: number;
    /** How many actions are using this account variable */
    actionsInUse: number;
    /** How many contexts are using this account variable */
    contextsInUse: number;
};
export type AccountAttr = {
    key: string;
    value: object;
    mandate: boolean;
};
export type AccountAttrByEnv = {
    environmentId: string;
    envName: string;
    attributes: AccountAttr[];
};
export type AccountContextResponse = {
    externalId: string;
    attributesByEnv: AccountAttrByEnv[];
};
export type WorkflowSimpleResponse = {
    id: string;
    name: string;
    "type": string;
};
export type StackWorkflowResponse = {
    id: string;
    workflows: WorkflowSimpleResponse[];
};
export type StacksByAccountResponse = {
    accountId: string;
    stacks: StackWorkflowResponse[];
};
/**
 * Get a workspace variable by name
 */
export declare function workspaceVariableV2ControllerfindByName({ accountId, workspaceId, name }: {
    accountId?: string;
    workspaceId: string;
    name: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceVariableResponse>;
/**
 * Upsert workspace variable based on existing account variable
 */
export declare function workspaceVariableV2Controllerupsert({ workspaceId, name, upsertWorkspaceVariableRequest }: {
    workspaceId: string;
    name: string;
    upsertWorkspaceVariableRequest: UpsertWorkspaceVariableRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Add context to a typed element in a workspace's stack.
 */
export declare function contextV2ControlleraddTypedContextInWorkspace({ workspaceId, stackVersionId, externalId, $type, contextValuesRequest }: {
    workspaceId: string;
    stackVersionId: string;
    externalId: string;
    $type: "plugin" | "action";
    contextValuesRequest: ContextValuesRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Import context in a workspace's stack.
 */
export declare function contextV2ControllerimportContextInWorkspace({ workspaceId, stackVersionId, importContextV2Request }: {
    workspaceId: string;
    stackVersionId: string;
    importContextV2Request: ImportContextV2Request;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Add context to a typed element in an account's stack.
 */
export declare function contextV2ControlleraddTypedContextInAccount({ stackVersionId, externalId, $type, contextValuesRequest }: {
    stackVersionId: string;
    externalId: string;
    $type: "plugin" | "action";
    contextValuesRequest: ContextValuesRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Import context in an account's stack.
 */
export declare function contextV2ControllerimportContextInAccount({ stackVersionId, importContextV2Request }: {
    stackVersionId: string;
    importContextV2Request: ImportContextV2Request;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List all configured context of an workflow by workspace and stack.
 */
export declare function workflowWorkspaceControllerlistContextByWorkspaceStack({ workspaceId, workflowId, stackId }: {
    workspaceId: string;
    workflowId: string;
    stackId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowContextResponse>;
/**
 * Save workspace workflow context
 */
export declare function workflowWorkspaceControllersaveWorkspaceWorkflowContext({ workspaceId, workflowId, stackId, workspaceWorkflowCreateRequest }: {
    workspaceId: string;
    workflowId: string;
    stackId: string;
    workspaceWorkflowCreateRequest: WorkspaceWorkflowCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Workflow of a stack in a workspace.
 */
export declare function workflowControllergetWorkspaceWorkflow({ workspaceId, stackVersionId, identifier }: {
    workspaceId: string;
    stackVersionId: string;
    identifier?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowReadResponse[]>;
/**
 * Add step to a workflow belonging to a workspace.
 */
export declare function workflowControlleraddWorkflowStepInWorkspace({ workspaceId, stackVersionId, addWorkspaceWorkflowStepRequest }: {
    workspaceId: string;
    stackVersionId: string;
    addWorkspaceWorkflowStepRequest: AddWorkspaceWorkflowStepRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update shared infrastructure status.
 */
export declare function workspaceSharedInfrastructureControllerupdateStatus({ workspaceId, sharedInfraId, updateSharedInfraStatusRequest }: {
    workspaceId: string;
    sharedInfraId: string;
    updateSharedInfraStatusRequest: UpdateSharedInfraStatusRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get shared infra links visibility
 */
export declare function sharedInfraLinkControllergetVisibleLinks({ workspaceId, sharedInfraId }: {
    workspaceId: string;
    sharedInfraId: string;
}, opts?: Oazapfts.RequestOpts): Promise<SharedInfraVisibleLinksResponse[]>;
/**
 * Update application links visibility
 */
export declare function sharedInfraLinkControllerupdateLinksVisibility({ workspaceId, sharedInfraId, body }: {
    workspaceId: string;
    sharedInfraId: string;
    body: UpdateSharedInfraLinkVisibilityRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update activity status by workspace.
 */
export declare function managerRunControllerupdateRun({ accountId, workspaceId, runId, updateRunRequest }: {
    accountId: string;
    workspaceId: string;
    runId: string;
    updateRunRequest: UpdateRunRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update plugin status by workspace.
 */
export declare function managerRunControllerrunTask({ accountId, workspaceId, runId, runTaskRequest }: {
    accountId: string;
    workspaceId: string;
    runId: string;
    runTaskRequest: RunTaskRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Deployment tag register.
 */
export declare function managerRunControllerdeploymentTag({ accountId, workspaceId, runId, deploymentTagRequest }: {
    accountId: string;
    workspaceId: string;
    runId: string;
    deploymentTagRequest: DeploymentTagRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Request to upsert connection interfaces attributes.
 */
export declare function connectionInterfaceControllerupdateConnectionInterfaceAttributes({ workspaceId, connectionInterfaceId, updateConnectionInterfaceAttributesRequest }: {
    workspaceId: string;
    connectionInterfaceId: string;
    updateConnectionInterfaceAttributesRequest: UpdateConnectionInterfaceAttributesRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Request to upsert connection interfaces.
 */
export declare function connectionInterfaceControllerupsertBatch({ workspaceId, body }: {
    workspaceId: string;
    body: UpsertConnectionInterfaceRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update application status.
 */
export declare function workspaceApplicationControllerupdateStatus({ workspaceId, applicationId, accountId, updateApplicationStatusRequest }: {
    workspaceId: string;
    applicationId: string;
    accountId?: string;
    updateApplicationStatusRequest: UpdateApplicationStatusRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get application links visibility
 */
export declare function applicationLinkControllergetVisibleLinks({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationVisibleLinksResponse[]>;
/**
 * Update application links visibility
 */
export declare function applicationLinkControllerupdateLinksVisibility({ workspaceId, applicationId, body }: {
    workspaceId: string;
    applicationId: string;
    body: UpdateApplicationLinkVisibilityRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get workflow settings with associated stacks.
 */
export declare function workflowAccountControllerlistSettingsByAccountWorkflow({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowSettingsResponse>;
/**
 * Update settings information of a workflow account.
 */
export declare function workflowAccountControllerupdateSettingsByAccountWorkflow({ workflowId, settingsWorkflowSaveRequest }: {
    workflowId: string;
    settingsWorkflowSaveRequest: SettingsWorkflowSaveRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List all configured context of an workflow account.
 */
export declare function workflowAccountControllerlistContextByAccountWorkflow({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowContextResponse>;
/**
 * Update all context configurations of a workflow account.
 */
export declare function workflowAccountControllerupdateContextsByAccountWorkflow({ workflowId, contextsWorkflowSaveRequest }: {
    workflowId: string;
    contextsWorkflowSaveRequest: ContextsWorkflowSaveRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List all actions of an workflow account.
 */
export declare function workflowAccountControllerlistActionsByAccountWorkflow({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowActionsResponse>;
/**
 * Update all actions associations with a workflow account.
 */
export declare function workflowAccountControllerupdateActionsByAccountWorkflow({ workflowId, actionsWorkflowSaveRequest }: {
    workflowId: string;
    actionsWorkflowSaveRequest: ActionsWorkflowSaveRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get an account variable by name
 */
export declare function accountVariableControllerfindByName({ accountId, name }: {
    accountId?: string;
    name: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountVariableResponse>;
/**
 * Update account variable
 */
export declare function accountVariableControllerupdate({ name, updateAccountVariableRequest }: {
    name: string;
    updateAccountVariableRequest: UpdateAccountVariableRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete account variable
 */
export declare function accountVariableControllerdelete({ name }: {
    name: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Workflow of a stack in an account.
 */
export declare function workflowControllergetAccountWorkflow({ stackVersionId, identifier }: {
    stackVersionId: string;
    identifier?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowReadResponse[]>;
/**
 * Add step to a workflow belonging to an account.
 */
export declare function workflowControlleraddWorkflowStepInAccount({ stackVersionId, addAccountWorkflowStepRequest }: {
    stackVersionId: string;
    addAccountWorkflowStepRequest: AddAccountWorkflowStepRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Save stack workflow context
 */
export declare function workflowStackControllersaveStackWorkflowContext({ stackId, workflowId, stackWorkflowCreateRequest }: {
    stackId: string;
    workflowId: string;
    stackWorkflowCreateRequest: StackWorkflowCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all workspaces without stack version and favorites filter
 */
export declare function workspaceV2ControllergetWorkspacesWithoutStackFilter({ name, aclOnly, accountId, page, size, sortBy, sortDir }: {
    name?: string;
    aclOnly?: boolean;
    accountId?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "DESCRIPTION";
    sortDir?: "ASC" | "DESC";
}, opts?: Oazapfts.RequestOpts): Promise<WorkspacePageResponse>;
/**
 * Get all workspaces
 */
export declare function workspaceV2ControllergetWorkspaces({ aclOnly, accountId, page, size, sortBy, sortDir, getWorkspacePageRequest }: {
    aclOnly?: boolean;
    accountId?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "DESCRIPTION";
    sortDir?: "ASC" | "DESC";
    getWorkspacePageRequest?: GetWorkspacePageRequest;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspacePageResponse>;
/**
 * Get shared infra page.
 */
export declare function workspaceSharedInfrastructureV2ControllergetSharedInfra({ workspaceId, page, size, sortBy, sortDir, getSharedInfraRequestBody }: {
    workspaceId: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
    getSharedInfraRequestBody?: GetSharedInfraRequestBody;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceSharedInfraPageResponse>;
/**
 * Get applications from a workspace with pagination.
 */
export declare function workspaceApplicationV2ControllergetApplications({ workspaceId, page, size, sortBy, sortDir, getApplicationsRequestBody }: {
    workspaceId: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
    getApplicationsRequestBody?: GetApplicationsRequestBody;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceApplicationPageResponse>;
/**
 * List specific shared infra or application usage by plugin list.
 */
export declare function usageInsightsControllerlistPluginUsageByTargetId({ accountId, targetType, targetId, body }: {
    accountId: string;
    targetType: "applications" | "shared_infra";
    targetId: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<TargetByPluginUsageResponse[]>;
/**
 * List all shared infras or applications usage by plugin list.
 */
export declare function usageInsightsControllerlistAllPluginUsage({ accountId, targetType, body }: {
    accountId: string;
    targetType: "applications" | "shared_infra";
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<PluginUsageByTargetResponse[]>;
/**
 * Get all workspaces
 */
export declare function workspaceControllergetWorkspaces({ name, aclOnly, accountId }: {
    name?: string;
    aclOnly?: boolean;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceReadResponse[]>;
/**
 * Create workspace
 */
export declare function workspaceControllersave({ newWorkspaceRequest }: {
    newWorkspaceRequest: NewWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get all stacks in a workspace.
 */
export declare function workspaceStackControllergetStacks({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<StackInWorkspaceReadResponse[]>;
/**
 * Add a stack in a workspace.
 */
export declare function workspaceStackControlleraddStack({ workspaceId, addStackInWorkspaceRequest }: {
    workspaceId: string;
    addStackInWorkspaceRequest: AddStackInWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all stacks with context in a workspace.
 */
export declare function workspaceStackControllergetStacksWithContext({ workspaceId, body }: {
    workspaceId: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<StackWithWorkspaceContextResponse>;
/**
 * Add a stack version in a workspace.
 */
export declare function workspaceStackControlleraddUpdateStack({ workspaceId, addStackInWorkspaceRequest }: {
    workspaceId: string;
    addStackInWorkspaceRequest: AddStackInWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all shared infrastructure of a workspace.
 */
export declare function workspaceSharedInfrastructureControllergetAllSharedInfrastructure({ workspaceId, name, stackVersionId }: {
    workspaceId: string;
    name?: string;
    stackVersionId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<SharedInfraDetailsResponse[]>;
/**
 * Create shared infrastructure in a workspace.
 */
export declare function workspaceSharedInfrastructureControllersave({ workspaceId, fromPortal, createSharedInfraRequest }: {
    workspaceId: string;
    fromPortal?: boolean;
    createSharedInfraRequest: CreateSharedInfraRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get shared infrastructure of a workspace.
 */
export declare function workspaceSharedInfrastructureControllergetSharedInfrastructure({ workspaceId, sharedInfraId }: {
    workspaceId: string;
    sharedInfraId: string;
}, opts?: Oazapfts.RequestOpts): Promise<SharedInfraDetailsResponse>;
/**
 * Recreate a shared infrastructure in a workspace.
 */
export declare function workspaceSharedInfrastructureControllerrecreate({ workspaceId, sharedInfraId, recreateSharedInfraRequest }: {
    workspaceId: string;
    sharedInfraId: string;
    recreateSharedInfraRequest: RecreateSharedInfraRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Delete infrastructure in a workspace.
 */
export declare function workspaceSharedInfrastructureControllerdeleteSharedInfra({ workspaceId, sharedInfraId }: {
    workspaceId: string;
    sharedInfraId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update shared infrastructure in a workspace.
 */
export declare function workspaceSharedInfrastructureControllerupdate({ workspaceId, sharedInfraId, updateSharedInfraRequest }: {
    workspaceId: string;
    sharedInfraId: string;
    updateSharedInfraRequest: UpdateSharedInfraRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get all shared infra links
 */
export declare function sharedInfraLinkControllergetSharedInfraLinks({ workspaceId, sharedInfraId, name }: {
    workspaceId: string;
    sharedInfraId: string;
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<SharedInfraLinkReadResponse[]>;
/**
 * Create shared infra link
 */
export declare function sharedInfraLinkControllersave({ workspaceId, sharedInfraId, createSharedInfraLinkRequest }: {
    workspaceId: string;
    sharedInfraId: string;
    createSharedInfraLinkRequest: CreateSharedInfraLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Has active deploy with type self hosted?
 */
export declare function workspaceSharedInfrastructureControllerhasActiveDeployWithTypeSelfHosted({ workspaceId, sharedInfraId }: {
    workspaceId: string;
    sharedInfraId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Can the shared infra be destroyed?
 */
export declare function workspaceSharedInfrastructureControllercanBeDestroyed({ workspaceId, sharedInfraId, environmentId, accountId }: {
    workspaceId: string;
    sharedInfraId: string;
    environmentId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Register the snapshot of a shared infrastructure's deploy.
 */
export declare function workspaceSharedInfrastructureControllerprocessDeploySnapshot({ workspaceId, sharedInfraId, sharedInfraDeploySnapshotRequest }: {
    workspaceId: string;
    sharedInfraId: string;
    sharedInfraDeploySnapshotRequest: SharedInfraDeploySnapshotRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Runs an orchestration in a workspace.
 */
export declare function managerRunControllerstartRun({ accountId, workspaceId, startRunRequest }: {
    accountId: string;
    workspaceId: string;
    startRunRequest: StartRunRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all workspace links
 */
export declare function workspaceLinkControllergetWorkspaceLinks({ workspaceId, name }: {
    workspaceId: string;
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceLinkReadResponse[]>;
/**
 * Create workspace
 */
export declare function workspaceLinkControllersave({ workspaceId, createWorkspaceLinkRequest }: {
    workspaceId: string;
    createWorkspaceLinkRequest: CreateWorkspaceLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get all workspace embedded links
 */
export declare function workspaceEmbeddedLinkControllergetEmbeddedLinks({ workspaceId, name }: {
    workspaceId: string;
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceEmbeddedLinkReadResponse[]>;
/**
 * Create workspace embedded link
 */
export declare function workspaceEmbeddedLinkControllersave({ workspaceId, createWorkspaceEmbeddedLinkRequest }: {
    workspaceId: string;
    createWorkspaceEmbeddedLinkRequest: CreateWorkspaceEmbeddedLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * List all connection interfaces of a workspace.
 */
export declare function connectionInterfaceControllergetConnectionInterfaces({ workspaceId, typeId }: {
    workspaceId: string;
    typeId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceSummaryResponse[]>;
/**
 * Create a connection interface in a workspace.
 */
export declare function connectionInterfaceControlleradd({ workspaceId, createConnectionInterfaceRequest }: {
    workspaceId: string;
    createConnectionInterfaceRequest: CreateConnectionInterfaceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Update the visibility of a connection interface.
 */
export declare function connectionInterfaceControllerupdateConnectionInterfaceVisibility({ workspaceId, connectionInterfaceId, updateConnectionInterfaceVisibilityRequest }: {
    workspaceId: string;
    connectionInterfaceId: string;
    updateConnectionInterfaceVisibilityRequest: UpdateConnectionInterfaceVisibilityRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all application of a workspace.
 */
export declare function workspaceApplicationControllergetApplications({ workspaceId, name, stackVersionId }: {
    workspaceId: string;
    name?: string;
    stackVersionId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationReadResponse[]>;
/**
 * Create application on workspace.
 */
export declare function workspaceApplicationControllersave({ workspaceId, fromPortal, createApplicationRequest }: {
    workspaceId: string;
    fromPortal?: boolean;
    createApplicationRequest: CreateApplicationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get application of a workspace.
 */
export declare function workspaceApplicationControllergetApplication({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationReadResponse>;
/**
 * Recreate an application in a workspace.
 */
export declare function workspaceApplicationControllerrecreate({ workspaceId, applicationId, recreateApplicationRequest }: {
    workspaceId: string;
    applicationId: string;
    recreateApplicationRequest: RecreateApplicationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Delete application of a workspace.
 */
export declare function workspaceApplicationControllerdeleteApplication({ workspaceId, applicationId, accountId }: {
    workspaceId: string;
    applicationId: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update an application of a workspace.
 */
export declare function workspaceApplicationControllerupdate({ workspaceId, applicationId, updateApplicationRequest }: {
    workspaceId: string;
    applicationId: string;
    updateApplicationRequest: UpdateApplicationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get all application links
 */
export declare function applicationLinkControllergetApplicationLinks({ workspaceId, applicationId, name }: {
    workspaceId: string;
    applicationId: string;
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationLinkReadResponse[]>;
/**
 * Create application link
 */
export declare function applicationLinkControllersave({ workspaceId, applicationId, createApplicationLinkRequest }: {
    workspaceId: string;
    applicationId: string;
    createApplicationLinkRequest: CreateApplicationLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Has active deploy with type self hosted?
 */
export declare function workspaceApplicationControllerhasActiveDeployWithTypeSelfHosted({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Can the application be destroyed?
 */
export declare function workspaceApplicationControllercanBeDestroyed({ workspaceId, applicationId, environmentId, accountId }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
export declare function workspaceApplicationControllerregistryAppDestroy({ workspaceId, applicationId, environmentId, applicationDestroyRequest }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    applicationDestroyRequest: ApplicationDestroyRequest;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
export declare function workspaceApplicationControllerregistryAppDeploy({ workspaceId, applicationId, environmentId, applicationDeployRequest }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    applicationDeployRequest: ApplicationDeployRequest;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
/**
 * Get all application embedded links
 */
export declare function applicationEmbeddedLinkControllergetEmbeddedLinks({ workspaceId, applicationId, name }: {
    workspaceId: string;
    applicationId: string;
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationEmbeddedLinkReadResponse[]>;
/**
 * Create application embedded link
 */
export declare function applicationEmbeddedLinkControllersave({ workspaceId, applicationId, createApplicationEmbeddedLinkRequest }: {
    workspaceId: string;
    applicationId: string;
    createApplicationEmbeddedLinkRequest: CreateApplicationEmbeddedLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Register the snapshot of an application's deploy.
 */
export declare function workspaceApplicationControllerprocessDeploySnapshot({ workspaceId, applicationId, applicationDeploySnapshotRequest }: {
    workspaceId: string;
    applicationId: string;
    applicationDeploySnapshotRequest: ApplicationDeploySnapshotRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List all workspaces usage by stack version list.
 */
export declare function usageInsightsControllerlistAllStackUsage({ accountId, body }: {
    accountId: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<StackUsageByWorkspaceResponse[]>;
/**
 * Get plugins applied to a workspace's application.
 */
export declare function accountSharedInfrastructureControllergetSharedInfraPage({ page, size, sortBy, sortDir, getAllSharedInfraRequestBody }: {
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
    getAllSharedInfraRequestBody?: GetAllSharedInfraRequestBody;
}, opts?: Oazapfts.RequestOpts): Promise<SharedInfraPageResponse>;
/**
 * Retrieve the amount of apps and shared infras that use the given plugin version id list
 */
export declare function usageInsightsControllerfindPluginUsageAmount({ accountId, body }: {
    accountId: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<PluginUsageAmountConsolidatedResponse>;
/**
 * Get environments
 */
export declare function environmentControllergetEnvironments({ accountId }: {
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<EnvironmentReadResponse[]>;
/**
 * Save environment
 */
export declare function environmentControllersave({ environmentSaveRequest }: {
    environmentSaveRequest: EnvironmentSaveRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Batch save environment
 */
export declare function environmentControllersaveBatch({ accountId, body }: {
    accountId?: string;
    body: EnvironmentSaveRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<EnvironmentReadBatchResponse[]>;
/**
 * Get plugins applied to a workspace's application.
 */
export declare function accountApplicationControllergetApplicationPage({ page, size, sortBy, sortDir, getAllApplicationsRequestBody }: {
    page?: number;
    size?: number;
    sortBy?: "NAME" | "CREATED_AT" | "STACK_VERSION" | "STACK";
    sortDir?: "ASC" | "DESC";
    getAllApplicationsRequestBody?: GetAllApplicationsRequestBody;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationPageResponse>;
/**
 * List all workflows of an account.
 */
export declare function workflowAccountControllerlistAccountWorkflows({ $type, name }: {
    $type?: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowResponse[]>;
/**
 * Create an account workflow
 */
export declare function workflowAccountControllersaveAccountWorkflow({ accountWorkflowCreateRequest }: {
    accountWorkflowCreateRequest: AccountWorkflowCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Find all account variables
 */
export declare function accountVariableControllerfindAll({ accountId, name, page, size, sortBy, sortDir }: {
    accountId?: string;
    name?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "VALUE" | "CREATED_AT";
    sortDir?: "ASC" | "DESC";
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedAccountVariableResponse>;
/**
 * Create account variable
 */
export declare function accountVariableControllercreate({ createAccountVariableRequest }: {
    createAccountVariableRequest: CreateAccountVariableRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List all stacks with context for given account and given stackVersionId list.
 */
export declare function contextControllerlistStackVersionsWithAccountContext({ body }: {
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<AccountStackContextResponse>;
/**
 * Get workspace by id
 */
export declare function workspaceControllergetWorkspaceForId({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceReadResponse>;
/**
 * Delete workspace.
 */
export declare function workspaceControllerdelete({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update workspace
 */
export declare function workspaceControllerupdate({ workspaceId, updateWorkspaceRequest }: {
    workspaceId: string;
    updateWorkspaceRequest: UpdateWorkspaceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get shared infra links by id
 */
export declare function sharedInfraLinkControllergetSharedInfraLink({ workspaceId, sharedInfraId, linkId }: {
    workspaceId: string;
    sharedInfraId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<SharedInfraLinkReadResponse>;
/**
 * Delete shared infra links
 */
export declare function sharedInfraLinkControllerdelete({ workspaceId, sharedInfraId, linkId }: {
    workspaceId: string;
    sharedInfraId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update shared infra links
 */
export declare function sharedInfraLinkControllerupdate({ workspaceId, sharedInfraId, linkId, updateSharedInfraLinkRequest }: {
    workspaceId: string;
    sharedInfraId: string;
    linkId: string;
    updateSharedInfraLinkRequest: UpdateSharedInfraLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get workspace link by id
 */
export declare function workspaceLinkControllergetWorkspaceLink({ workspaceId, linkId }: {
    workspaceId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceLinkReadResponse>;
/**
 * Delete workspace links
 */
export declare function workspaceLinkControllerdelete({ workspaceId, linkId }: {
    workspaceId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update workspace links
 */
export declare function workspaceLinkControllerupdate({ workspaceId, linkId, updateWorkspaceLinkRequest }: {
    workspaceId: string;
    linkId: string;
    updateWorkspaceLinkRequest: UpdateWorkspaceLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get workspace embedded link by id
 */
export declare function workspaceEmbeddedLinkControllergetEmbeddedLink({ workspaceId, embeddedLinkId }: {
    workspaceId: string;
    embeddedLinkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceEmbeddedLinkReadResponse>;
/**
 * Delete workspace embedded link
 */
export declare function workspaceEmbeddedLinkControllerdelete({ workspaceId, embeddedLinkId }: {
    workspaceId: string;
    embeddedLinkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update workspace embedded link
 */
export declare function workspaceEmbeddedLinkControllerupdate({ workspaceId, embeddedLinkId, updateWorkspaceEmbeddedLinkRequest }: {
    workspaceId: string;
    embeddedLinkId: string;
    updateWorkspaceEmbeddedLinkRequest: UpdateWorkspaceEmbeddedLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Upsert workspace embedded link
 */
export declare function workspaceEmbeddedLinkControllerupsertBatch({ workspaceId, body }: {
    workspaceId: string;
    body: UpsertWorkspaceEmbeddedLinkRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get application link by id
 */
export declare function applicationLinkControllergetApplicationLink({ workspaceId, applicationId, linkId }: {
    workspaceId: string;
    applicationId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationLinkReadResponse>;
/**
 * Delete workspace links
 */
export declare function applicationLinkControllerdelete({ workspaceId, applicationId, linkId }: {
    workspaceId: string;
    applicationId: string;
    linkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update application links
 */
export declare function applicationLinkControllerupdate({ workspaceId, applicationId, linkId, updateApplicationLinkRequest }: {
    workspaceId: string;
    applicationId: string;
    linkId: string;
    updateApplicationLinkRequest: UpdateApplicationLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get application embedded link by id
 */
export declare function applicationEmbeddedLinkControllergetEmbeddedLink({ workspaceId, applicationId, embeddedLinkId }: {
    workspaceId: string;
    applicationId: string;
    embeddedLinkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationEmbeddedLinkReadResponse>;
/**
 * Delete application embedded link
 */
export declare function applicationEmbeddedLinkControllerdelete({ workspaceId, applicationId, embeddedLinkId }: {
    workspaceId: string;
    applicationId: string;
    embeddedLinkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update application embedded link
 */
export declare function applicationEmbeddedLinkControllerupdate({ workspaceId, applicationId, embeddedLinkId, updateApplicationEmbeddedLinkRequest }: {
    workspaceId: string;
    applicationId: string;
    embeddedLinkId: string;
    updateApplicationEmbeddedLinkRequest: UpdateApplicationEmbeddedLinkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Upsert application embedded link
 */
export declare function applicationEmbeddedLinkControllerupsertBatch({ workspaceId, applicationId, body }: {
    workspaceId: string;
    applicationId: string;
    body: UpsertApplicationEmbeddedLinkRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Archive application from a workspace.
 */
export declare function workspaceApplicationControllerarchiveApplication({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get environment by id
 */
export declare function environmentControllergetEnvironment({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<EnvironmentReadResponse>;
/**
 * Update environment
 */
export declare function environmentControllerupdate({ id, environmentUpdateRequest }: {
    id: string;
    environmentUpdateRequest: EnvironmentUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Find all workspace variables
 */
export declare function workspaceVariableV2ControllerfindAll({ workspaceId, accountId, page, size, sortBy, sortDir, mandate, name, showEmptyValues }: {
    workspaceId: string;
    accountId?: string;
    page?: number;
    size?: number;
    sortBy?: "NAME" | "VALUE" | "CREATED_AT";
    sortDir?: "ASC" | "DESC";
    mandate?: boolean;
    name?: string;
    showEmptyValues?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedWorkspaceVariableResponse>;
/**
 * Get plugins applied to a workspace's shared infrastructure.
 */
export declare function workspaceSharedInfrastructureV2ControllergetAppliedPlugins({ workspaceId, sharedInfraId, environmentId }: {
    workspaceId: string;
    sharedInfraId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AppliedPluginV2Response[]>;
/**
 * List all available connection interfaces for a workspace.
 */
export declare function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfacesForAWorkspace({ workspaceId, typeId, automaticallyGenerated }: {
    workspaceId: string;
    typeId?: string;
    automaticallyGenerated?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceSummaryV2Response[]>;
/**
 * Get available connection interface for a workspace by its slug.
 */
export declare function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAWorkspace({ workspaceId, slug, environmentId, accountId }: {
    workspaceId: string;
    slug: string;
    environmentId?: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceDetailsV2Response>;
/**
 * Get plugins applied to a workspace's application.
 */
export declare function workspaceApplicationV2ControllergetAppliedPlugins({ workspaceId, applicationId, environmentId }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AppliedPluginV2Response[]>;
/**
 * List all available connection interfaces for an application.
 */
export declare function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfacesForAnApplication({ applicationId, typeId, automaticallyGenerated }: {
    applicationId: string;
    typeId?: string;
    automaticallyGenerated?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceSummaryV2Response[]>;
/**
 * Get available connection interface for an application by its slug.
 */
export declare function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAnApplication({ applicationId, slug, environmentId }: {
    applicationId: string;
    slug: string;
    environmentId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceDetailsV2Response>;
/**
 * Get connection interface in use by applicationId or sharedInfraId.
 */
export declare function connectionInterfaceInUseControllergetConnectionInterfaceInUseTargetId({ workspaceId, targetId, targetType, slug, accountId, environmentId }: {
    workspaceId: string;
    targetId: string;
    targetType: "applications" | "shared_infra";
    slug: string;
    accountId: string;
    environmentId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceInUseByTargetIdDetailsResponse[]>;
/**
 * Get all workspace's variables v1
 */
export declare function workspaceVariableV1ControllerfindAll({ workspaceId, filter }: {
    workspaceId: string;
    filter?: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceVariableReadV1Response[]>;
/**
 * Get stack in a workspace by stack version id.
 */
export declare function workspaceStackControllergetStackById({ workspaceId, stackVersionId }: {
    workspaceId: string;
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts): Promise<StackInWorkspaceReadResponse>;
/**
 * Delete a stack from a workspace.
 */
export declare function workspaceStackControllerdeleteStack({ workspaceId, stackVersionId }: {
    workspaceId: string;
    stackVersionId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List the consolidated input context of all stack elements for given type in a workspace.
 */
export declare function contextControllerlistConsolidatedContext({ workspaceId, stackVersionId, $type, envName, externalId }: {
    workspaceId: string;
    stackVersionId: string;
    $type: "plugin" | "action";
    envName?: string;
    externalId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConsolidatedContextResponse[]>;
/**
 * Get workflow settings with context by stack and workflowType
 */
export declare function workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType({ workspaceId, stackId, workflowType }: {
    workspaceId: string;
    stackId: string;
    workflowType: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
}, opts?: Oazapfts.RequestOpts): Promise<AccountWorkflowResponse>;
/**
 * Get plugins applied to a workspace's shared infrastructure.
 */
export declare function workspaceSharedInfrastructureControllergetAppliedPlugins({ workspaceId, sharedInfraId, environmentId, $type }: {
    workspaceId: string;
    sharedInfraId: string;
    environmentId: string;
    $type?: string;
}, opts?: Oazapfts.RequestOpts): Promise<AppliedPluginResponse[]>;
/**
 * List shared infrastructure's activities.
 */
export declare function workspaceSharedInfrastructureControllerlistActivities({ workspaceId, sharedInfraId, environmentId, $type, page, size }: {
    workspaceId: string;
    sharedInfraId: string;
    environmentId: string;
    $type?: ("DEPLOY" | "ACTION" | "WORKFLOW" | "DRIFT" | "DESTROY" | "ROLLBACK" | "IAC" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED" | "IAC_SELF_HOSTED" | "CUSTOMER_WORKFLOW")[];
    page: number;
    size: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedActivityResponse>;
/**
 * Get all in use connection interface dependencies from the shared infra.
 */
export declare function workspaceSharedInfrastructureControllergetDependencyTree({ workspaceId, sharedInfraId }: {
    workspaceId: string;
    sharedInfraId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AppAndInfraDependencyResponse>;
/**
 * Get stack version in use by shared infra in a workspace
 */
export declare function workspaceSharedInfrastructureControllergetStackVersionsInUse({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<StacksVersionIdsResponse>;
/**
 * Get a connection interface by connection interface id.
 */
export declare function connectionInterfaceControllergetConnectionInterface({ workspaceId, connectionInterfaceId, environmentId }: {
    workspaceId: string;
    connectionInterfaceId: string;
    environmentId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceDetailsResponse>;
/**
 * Get all connection interface in use.
 */
export declare function connectionInterfaceInUseControllergetAllConnectionInterfaceInUse({ workspaceId, accountId }: {
    workspaceId: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceInUseDetailsResponse[]>;
/**
 * Get connection interface in use by slug.
 */
export declare function connectionInterfaceInUseControllergetConnectionInterfaceInUseBySlug({ workspaceId, slug, accountId }: {
    workspaceId: string;
    slug: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceInUseSummaryResponse[]>;
/**
 * List all available connection interfaces for a workspace.
 */
export declare function availableConnectionInterfaceControllergetAvailableConnectionInterfacesForAWorkspace({ workspaceId, typeId }: {
    workspaceId: string;
    typeId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceSummaryResponse[]>;
/**
 * Get available connection interface for a workspace by its id.
 */
export declare function availableConnectionInterfaceControllergetAvailableConnectionInterfaceForAWorkspace({ workspaceId, connectionInterfaceId, environmentId }: {
    workspaceId: string;
    connectionInterfaceId: string;
    environmentId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceDetailsResponse>;
/**
 * Get plugins applied to a workspace's application.
 */
export declare function workspaceApplicationControllergetAppliedPlugins({ workspaceId, applicationId, environmentId, $type }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    $type?: string;
}, opts?: Oazapfts.RequestOpts): Promise<AppliedPluginResponse[]>;
export declare function workspaceApplicationControllergetAppDeployInfo({ workspaceId, applicationId, environmentId, accountId, tenant }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    accountId: string;
    tenant: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationDeployInfoResponse>;
/**
 * List application's activities.
 */
export declare function workspaceApplicationControllerlistActivities({ workspaceId, applicationId, environmentId, $type, page, size }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    $type?: ("DEPLOY" | "ACTION" | "WORKFLOW" | "DRIFT" | "DESTROY" | "ROLLBACK" | "IAC" | "DEPLOY_SELF_HOSTED" | "DESTROY_SELF_HOSTED" | "ROLLBACK_SELF_HOSTED" | "IAC_SELF_HOSTED" | "CUSTOMER_WORKFLOW")[];
    page: number;
    size: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedActivityResponse>;
/**
 * Get all in use connection interface dependencies from the application.
 */
export declare function workspaceApplicationControllergetDependencyTree({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AppAndInfraDependencyResponse>;
/**
 * Can the application be destroyed?
 */
export declare function workspaceApplicationControllercanBeDeleted({ workspaceId, applicationId, accountId, tenant }: {
    workspaceId: string;
    applicationId: string;
    accountId: string;
    tenant: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationCanBeDeletedResponse>;
/**
 * Get stack version in use by applications in a workspace
 */
export declare function workspaceApplicationControllergetStackVersionsInUse({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<StacksVersionIdsResponse>;
/**
 * Get all workspaces within user permission
 */
export declare function workspaceControllergetWorkspacesFromUserPermission({ resource, action }: {
    resource: string;
    action: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkspaceReadResponse[]>;
/**
 * Get shared infrastructure information by id.
 */
export declare function accountSharedInfrastructureControllergetSharedInfra({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetSharedInfraResponse>;
/**
 * Check if there is/are any deployment active for the provided plugin
 */
export declare function pluginInUseControllercheckPluginInUse({ pluginVersionId }: {
    pluginVersionId: string;
}, opts?: Oazapfts.RequestOpts): Promise<PluginInUseDetailsResponse[]>;
/**
 * Check availability of connection slug in account.
 */
export declare function checkConnectionSlugAvailabilityControllercheckConnectionSlugAvailability({ slug, applicationId, sharedInfraId }: {
    slug: string;
    applicationId?: string;
    sharedInfraId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<CheckConnectionSlugAvailabilityResponse>;
/**
 * Get an application list by repo url.
 */
export declare function accountApplicationControllergetApplicationsByUrl({ accountId, repoUrl }: {
    accountId: string;
    repoUrl: string;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationRepoUrlReadResponse[]>;
/**
 * Get application information by id.
 */
export declare function accountApplicationControllergetApplication({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetApplicationResponse>;
/**
 * List all available connection interfaces for an application.
 */
export declare function availableConnectionInterfaceControllergetAvailableConnectionInterfacesForAnApplication({ applicationId, typeId }: {
    applicationId: string;
    typeId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceSummaryResponse[]>;
/**
 * Get available connection interface for an application by its id.
 */
export declare function availableConnectionInterfaceControllergetAvailableConnectionInterfaceForAnApplication({ applicationId, connectionInterfaceId, environmentId }: {
    applicationId: string;
    connectionInterfaceId: string;
    environmentId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ConnectionInterfaceDetailsResponse>;
/**
 * Get action version ranges used in workflows given an actionId.
 */
export declare function workflowAccountControllerlistActionVersionRangesUsage({ accountId, actionId }: {
    accountId?: string;
    actionId: string;
}, opts?: Oazapfts.RequestOpts): Promise<WorkflowActionUsageResponse>;
/**
 * Get account variable usage
 */
export declare function accountVariableControllerusage({ accountId, name }: {
    accountId?: string;
    name: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountVariableUsageResponse>;
/**
 * List the input context of all stack elements for given type in account.
 */
export declare function contextControllerlistAccountContext({ stackVersionId, $type, envName, externalId }: {
    stackVersionId: string;
    $type: "plugin" | "action";
    envName?: string;
    externalId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountContextResponse[]>;
/**
 * Get workflow of a stackId by workflow type.
 */
export declare function workflowStackControllerlistWorkflowByStackIdAndType({ stackId, workflowType }: {
    stackId: string;
    workflowType: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
}, opts?: Oazapfts.RequestOpts): Promise<AccountWorkflowResponse>;
/**
 * Get workflows by a stackId.
 */
export declare function workflowStackControllerlistWorkflowsByStackId({ stackId }: {
    stackId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountWorkflowResponse[]>;
/**
 * List all stacks with workflow by account.
 */
export declare function accountStackControllerlistStacksWithWorkflow(opts?: Oazapfts.RequestOpts): Promise<StacksByAccountResponse>;
/**
 * List all stacks that are most commonly used by applications and shared infrastructure.
 */
export declare function accountStackControllerlistMostUsedStacks({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<string[]>;
/**
 * List all default workflows of an account.
 */
export declare function workflowAccountControllerlistDefaultAccountWorkflows(opts?: Oazapfts.RequestOpts): Promise<WorkflowResponse[]>;
/**
 * Delete completely connection interfaces from all environments.
 */
export declare function connectionInterfaceControllerdeleteConnectionInterfaceFromAllEnvironments({ workspaceId, slug }: {
    workspaceId: string;
    slug: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete connection interfaces.
 */
export declare function connectionInterfaceControllerdeleteConnectionInterface({ workspaceId, slug, environmentId, accountId }: {
    workspaceId: string;
    slug: string;
    environmentId: string;
    accountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete connection interface attributes by environment.
 */
export declare function connectionInterfaceControllerdeleteConnectionInterfaceAttributesFromEnvironment({ workspaceId, slug, environmentId }: {
    workspaceId: string;
    slug: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete an account workflow.
 */
export declare function workflowAccountControllerdeleteAccountWorkflow({ workflowId }: {
    workflowId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
//# sourceMappingURL=workspace.d.ts.map