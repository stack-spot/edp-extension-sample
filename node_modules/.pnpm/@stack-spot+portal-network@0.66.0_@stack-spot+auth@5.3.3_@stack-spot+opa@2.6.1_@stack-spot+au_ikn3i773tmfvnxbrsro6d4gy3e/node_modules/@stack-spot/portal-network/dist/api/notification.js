/**
 * Notification Engine
 * 1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://account-notification-engine.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://account-notification-engine.dev.stackspot.com"
};
/**
 * Get notifications for tenant
 */
export function findAll1({ size, page, createdSince, context, criticality, content, committed, tenantId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tenants/${encodeURIComponent(tenantId)}/notifications${QS.query(QS.explode({
        size,
        page,
        createdSince,
        context,
        criticality,
        content,
        committed
    }))}`, {
        ...opts
    }));
}
/**
 * Generate a new notification intent to the specified tenant
 */
export function create({ tenantId, createTenantNotificationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tenants/${encodeURIComponent(tenantId)}/notifications`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createTenantNotificationRequest
    })));
}
/**
 * Allows to mark a notification as committed
 */
export function commit({ notificationId, tenantId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tenants/${encodeURIComponent(tenantId)}/notifications/${encodeURIComponent(notificationId)}/commit`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Generate a new notification intent to the specified tenant
 */
export function create1({ createPlatformNotificationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/notifications", oazapfts.json({
        ...opts,
        method: "POST",
        body: createPlatformNotificationRequest
    })));
}
/**
 * Get notifications for tenant
 */
export function findAll({ size, page, createdSince, context, criticality, content, committed, tenantId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/tenants/${encodeURIComponent(tenantId)}/notifications${QS.query(QS.explode({
        size,
        page,
        createdSince,
        context,
        criticality,
        content,
        committed
    }))}`, {
        ...opts
    }));
}
/**
 * Allows to check if there are any uncommitted notifications for the user
 */
export function committedNotifications({ tenantId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tenants/${encodeURIComponent(tenantId)}/notifications/committed`, {
        ...opts
    }));
}
/**
 * Actuator web endpoint 'health'
 */
export function health(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/healthz", {
        ...opts
    }));
}
/**
 * Actuator web endpoint 'health-path'
 */
export function getHealthz(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/healthz/**", {
        ...opts
    }));
}
/**
 * Delete notification by id
 */
export function deleteV1TenantsByTenantIdNotificationsAndNotificationId({ notificationId, tenantId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tenants/${encodeURIComponent(tenantId)}/notifications/${encodeURIComponent(notificationId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Allows to unmark a notification as committed
 */
export function uncommit({ notificationId, tenantId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tenants/${encodeURIComponent(tenantId)}/notifications/${encodeURIComponent(notificationId)}/uncommit`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Batches deletes the notification in all tenants
 */
export function delete1({ notificationId }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/notifications/${encodeURIComponent(notificationId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=notification.js.map