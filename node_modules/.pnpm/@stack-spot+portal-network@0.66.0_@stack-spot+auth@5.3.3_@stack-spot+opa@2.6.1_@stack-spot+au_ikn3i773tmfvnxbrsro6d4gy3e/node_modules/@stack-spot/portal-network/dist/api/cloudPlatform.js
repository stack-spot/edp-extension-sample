/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://cloud-cloud-platform-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://cloud-cloud-platform-api.dev.stackspot.com"
};
export function listFoundations({ authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/foundations", {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createFoundation({ authorization, createFoundationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/foundations", oazapfts.json({
        ...opts,
        method: "POST",
        body: createFoundationRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listTransitGateway({ authorization, foundationId, projectId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/transit-gateways${QS.query(QS.explode({
        projectId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createTransitGateway({ authorization, foundationId, createTransitGatewayRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/transit-gateways`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createTransitGatewayRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listTransitGatewayVpcAttachment({ authorization, foundationId, projectId, vpcId, transitGatewayId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/transit-gateway-vpc-attachments${QS.query(QS.explode({
        projectId,
        vpcId,
        transitGatewayId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createTransitGatewayVpcAttachment({ authorization, foundationId, createTransitGatewayVpcAttachmentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/transit-gateway-vpc-attachments`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createTransitGatewayVpcAttachmentRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listSubnet({ authorization, foundationId, projectId, vpcId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/subnets${QS.query(QS.explode({
        projectId,
        vpcId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createSubnet({ authorization, foundationId, createSubnetRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/subnets`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createSubnetRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listProject({ authorization, foundationId, parentFolderId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/projects${QS.query(QS.explode({
        parentFolderId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createProject({ authorization, foundationId, createProjectRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/projects`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createProjectRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listNetwork({ authorization, foundationId, projectId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/networks${QS.query(QS.explode({
        projectId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createNetwork({ authorization, foundationId, createNetworkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/networks`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createNetworkRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function getFolder({ authorization, foundationId, folderId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/folders${QS.query(QS.explode({
        folderId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createFolder({ authorization, foundationId, createFolderRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/folders`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createFolderRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listDnsZone({ authorization, foundationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/dns-zones`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createDnsZone({ authorization, foundationId, createDnsZoneRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/dns-zones`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createDnsZoneRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listDnsRecord({ authorization, foundationId, projectId, dnsZoneId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/dns-records${QS.query(QS.explode({
        projectId,
        dnsZoneId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createDnsRecord({ authorization, foundationId, createDnsRecordRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/dns-records`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createDnsRecordRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listCidr({ authorization, foundationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/cidrs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createCidr({ authorization, foundationId, createCidrRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/cidrs`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createCidrRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function listCertificates({ authorization, foundationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/certificates`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createCertificate({ authorization, foundationId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/certificates`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function getFoundation({ authorization, foundationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getTransitGateway({ authorization, foundationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/transit-gateways/${encodeURIComponent(transitGatewayId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getTransitGatewayVpcAttachment({ authorization, foundationId, transitGatewayVpcAttachmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/transit-gateway-vpc-attachments/${encodeURIComponent(transitGatewayVpcAttachmentId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getSubnet({ authorization, foundationId, subnetId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/subnets/${encodeURIComponent(subnetId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getProject({ authorization, foundationId, projectId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/projects/${encodeURIComponent(projectId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getNetwork({ authorization, foundationId, networkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/networks/${encodeURIComponent(networkId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getDnsZone({ authorization, foundationId, dnsZoneId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/dns-zones/${encodeURIComponent(dnsZoneId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getDnsZone1({ authorization, foundationId, dnsRecordId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/dns-records/${encodeURIComponent(dnsRecordId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getCidr({ authorization, foundationId, cidrId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/cidrs/${encodeURIComponent(cidrId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function getCertificate({ authorization, foundationId, certificateId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/foundations/${encodeURIComponent(foundationId)}/certificates/${encodeURIComponent(certificateId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function providers(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/foundations/providers", {
        ...opts
    }));
}
//# sourceMappingURL=cloudPlatform.js.map