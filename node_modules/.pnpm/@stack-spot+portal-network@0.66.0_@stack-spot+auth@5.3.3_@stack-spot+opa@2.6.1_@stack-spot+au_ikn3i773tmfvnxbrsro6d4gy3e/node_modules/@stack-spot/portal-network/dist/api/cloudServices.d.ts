/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type GuardrailUpdate = {
    /** The ID of GuardRail that will be updated */
    id: string;
    /** The GuardRail title */
    title?: string;
    /** A description explaining what GuardRail do */
    description?: string;
    /** Indicates if GuardRail is active to users use it */
    active?: boolean;
    /** Indicates if GuardRail is configurable for user */
    configurable?: boolean;
    /** Type of implementation */
    implementation?: "RECOMENDATION" | "MANDATORY";
    /** Type of action taken by GuardRail */
    action?: "REMEDIATION" | "NOTIFICATION" | "NOT_IMPLEMENTED";
    /** The type of GuardRail. [SCP, GUARDRAIL] */
    "type"?: "SCP" | "GUARDRAIL";
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type GuardrailRequest = {
    /** The baseline id that GuardRail belongs */
    baselineId: string;
    /** The GuardRail title */
    title: string;
    /** A description explaining what GuardRail do */
    description: string;
    /** Indicates if GuardRail is active to users use it */
    active: boolean;
    /** Indicates if GuardRail is configurable for user */
    configurable: boolean;
    /** Type of implementation */
    implementation: "RECOMENDATION" | "MANDATORY";
    /** Type of action taken by GuardRail */
    action: "REMEDIATION" | "NOTIFICATION" | "NOT_IMPLEMENTED";
    /** The type of GuardRail. [SCP, GUARDRAIL] */
    "type": "SCP" | "GUARDRAIL";
};
export type GuardrailDetails = {
    /** The guardrail ID */
    id: string;
};
export type BaselineUpdate = {
    /** The baseline title */
    title: string;
    /** The date when that Baseline was published */
    publishedAt?: string;
    /** Status of the baseline, if it's published or a draft */
    status?: string;
};
export type BillingAccountSummaryResponse = {
    /** ULID identifier for each billing account. */
    id: string;
    /** Slug identifier for each billing account. */
    name: string;
    /** StackSpot's ULID identifier for each client. */
    stackSpotAccountId: string;
};
export type BillingAccountRequest = {
    /** Slug identifier for each billing account. */
    name: string;
    /** StackSpot's ULID identifier for each client. */
    stackSpotAccountId: string;
    /** The AWS S3 bucket name used for CUR (Cost and Usage Report). */
    awsCurBucketName: string;
    /** The AWS region where the CUR bucket is located. */
    awsCurBucketRegion: string;
    /** The name of the AWS CUR report. */
    awsCurReportName: string;
    /** The prefix used in the AWS CUR bucket for reports. */
    awsCurPrefix: string;
    /** The AWS IAM Role ARN with permissions to access CUR data. */
    awsRoleArn: string;
    /** The AWS Secret Manager secret ARN containing the External ID. */
    awsSecretIdArn: string;
};
export type BillingAccountDetailsResponse = {
    /** ULID identifier for each billing account. */
    id: string;
    /** Slug identifier for each billing account. */
    name: string;
    /** StackSpot's ULID identifier for each client. */
    stackSpotAccountId: string;
    /** The AWS S3 bucket name used for CUR (Cost and Usage Report). */
    awsCurBucketName: string;
    /** The AWS region where the CUR bucket is located. */
    awsCurBucketRegion: string;
    /** The name of the AWS CUR report. */
    awsCurReportName: string;
    /** The prefix used in the AWS CUR bucket for reports. */
    awsCurPrefix: string;
    /** The AWS IAM Role ARN with permissions to access CUR data. */
    awsRoleArn: string;
    /** The AWS Secret Manager secret ARN containing the External ID. */
    awsSecretIdArn?: string;
    /** Timestamp of when the billing account was marked as deleted. */
    deletedAt?: string;
    /** Timestamp of when the billing account was created. */
    createdAt: string;
    /** Timestamp of the last update to the billing account. */
    updatedAt: string;
};
export type Ulid = {
    value: string;
};
export type Filter = {
    /** A categorical attribute for context or categorization in billing data. */
    "type": "REGION" | "SERVICE_NAME" | "SUB_ACCOUNT_ID" | "TAG_KEY" | "TAG_VALUE";
    /** Defines the exact value the filter will look for within the specified type. */
    value: string;
};
export type ChargePeriod = {
    /** Represents the end date of the charge period. */
    end: string;
    /** Represents the end date of the charge period. */
    start: string;
};
export type AllocationCostRequest = {
    /** StackSpot's ULID identifier for each client. */
    stackSpotAccountId: string;
    /** StackSpot-assigned ULID identifiers for a billing account. */
    billingAccountId: Ulid[];
    /** StackSpot-assigned ULID identifiers for a billing account. */
    filter: Filter[];
    /** Defines the row's time-based granularity. */
    granularity: "PERIOD" | "MONTH";
    /** A categorical attribute that provides context or categorization to billing data. */
    dimension: "SERVICE_NAME" | "TAG" | "USAGE_UNIT";
    chargePeriod: ChargePeriod;
};
export type ServiceNameResponse = GetCostAndUsageData & {
    chargePeriod?: ChargePeriod;
    /** Represents an offering that can be purchased from a cloud provider. */
    serviceName?: string;
    /** Effective cost post discounts and amortizations. */
    effectiveCost?: number;
};
export type TagResponse = GetCostAndUsageData & {
    chargePeriod?: ChargePeriod;
    /** Tag key: Identifies a grouping attribute or category for resources or constructs. */
    tagKey?: string;
    /** Tag value: Specifies the group or category detail that the resource or construct belongs to. */
    tagValue?: string;
    /** Effective cost post discounts and amortizations. */
    effectiveCost?: number;
};
export type UsageUnitResponse = GetCostAndUsageData & {
    chargePeriod?: ChargePeriod;
    /** Represents an offering that can be purchased from a cloud provider. */
    serviceName?: string;
    /** Represents the volume of a given resource or service used or purchased based on the Usage Unit. */
    usageQuantity?: number;
    /** Defines the unit of measurement for the resource or service. */
    usageUnit?: string;
    /** Effective cost post discounts and amortizations. */
    effectiveCost?: number;
};
export type GetCostAndUsageData = ({
    "type": "ServiceNameResponse";
} & ServiceNameResponse) | ({
    "type": "TagResponse";
} & TagResponse) | ({
    "type": "UsageUnitResponse";
} & UsageUnitResponse);
export type AllocationCostResponse = {
    /** Unique identifier for the task, used for tracking and retrieval. */
    id: string;
    /** Current status of the task, indicating its lifecycle phase. */
    status: "PROCESSING" | "SUCCESS" | "ERROR";
    /** Contains processed data, available when status is SUCCESS. */
    data: GetCostAndUsageData[];
    /** Optional details on processing status, providing task insights or error explanations. */
    message: string;
};
export type ProblemDetail = {
    "type"?: string;
    title?: string;
    status?: number;
    detail?: string;
    instance?: string;
    properties?: {
        [key: string]: object;
    };
};
export type RegisterOfferRequest = {
    /** The Stackspot account ID to associate the offer with */
    stackspotAccountId: string;
    /** The Cloud Offer type to be registered */
    cloudOffer: "Reseller" | "Managed" | "FullyManaged";
};
export type CreateContractRequest = {
    stackSpotAccountId: Ulid;
    factor: number;
    startDate: string;
};
export type Contract = {
    id: string;
    stackSpotAccountId: string;
    factor: number;
    startDate: string;
};
export type LinkResourceTypeToStackspotAccountRequest = {
    stackspotAccountId: Ulid;
    serviceIds: Ulid[];
};
export type BaselineResponse = {
    /** The ID of baseline that will be updated */
    id: string;
    /** The baseline title */
    title: string;
    /** The date when that Baseline was published */
    publishedAt?: string;
    /** Status of the baseline, if it's published or a draft */
    status?: string;
};
export type BaselineRequest = {
    /** The baseline title */
    title: string;
    /** The date when that Baseline was published */
    publishedAt?: string;
    /** Status of the baseline, if it's published or a draft */
    status?: string;
};
export type BaselineDetails = {
    /** The baseline ID */
    id: string;
};
export type GuardrailStatusResponse = {
    /** The baseline id that GuardRail belongs */
    baselineId: string;
    /** The guardrail id */
    guardrailId: string;
    /** The GuardRail title */
    title: string;
    /** A description explaining what GuardRail do */
    description: string;
    /** Indicates if GuardRail is configurable for user */
    configurable: boolean;
    /** Implementation type of Guardrail */
    implementation: "RECOMENDATION" | "MANDATORY";
    /** Action taken by the Guardrail */
    action: "REMEDIATION" | "NOTIFICATION" | "NOT_IMPLEMENTED";
    /** Indicates if GuardRail is enabled */
    enabled: boolean;
};
export type GroupedGuardrailResponse = {
    /** The baseline id that GuardRail belongs */
    baselineId: string;
    /** The baseline title that GuardRail belongs */
    baselineTitle: string;
    /** All GuardRails attached to a Baseline */
    guardrails: GuardrailStatusResponse[];
};
export type DailyCostSummary = {
    date: string;
    cost: number;
};
export type CostByWorkspace = {
    /** Title of the workspace. */
    workspaceName: string;
    /** Cost associated with the workspace. */
    cost: number;
};
export type CostOverview = {
    /** Costs from the current month. */
    currentMonth: number;
    /** Costs from the last month. */
    lastMonth: number;
    /** Costs from the past three months. */
    lastThreeMonths: number;
    currentMonthAverage: number;
    currentMonthDaily: DailyCostSummary[];
    costByWorkspace: CostByWorkspace[];
};
export type AttachmentBase64 = {
    filename: string;
    base64: string;
    contentType: string;
};
export type AllocationCost = {
    name: string;
    costValue: number;
};
export type PaginatedResponseAllocationCost = {
    data: AllocationCost[];
    nextPage?: string;
    prevPage?: string;
    count: number;
};
export type AllocationCostDetails = {
    serviceName: string;
    stackSpotUsageType: string;
    quantity: number;
    costValue: number;
};
export type PaginatedResponseAllocationCostDetails = {
    data: AllocationCostDetails[];
    nextPage?: string;
    prevPage?: string;
    count: number;
};
export type ManagedResource = {
    /** Unique identifier. */
    id: string;
    /** The resource name. */
    name: string;
    cloudAccountId: string;
    cloudProviderRegion: string;
    /** The environment type. */
    environmentName: string;
    /** Created at. */
    createdAt?: string;
    /** The resource status. */
    status?: "Up" | "Down" | "Starting" | "Unknown";
};
export type ManagedResourceList = {
    data: ManagedResource[];
    pageToken?: string;
};
export type ServiceResource = {
    id: Ulid;
    /** The service resource name */
    name: string;
};
export type ManagedService = {
    /** Unique identifier. */
    id: string;
    /** The service name. */
    name: string;
    /** List of resources. */
    resources: ServiceResource[];
};
export type AccountCloudOfferResponse = {
    stackspotAccountId: string;
    offer: "Reseller" | "Managed" | "FullyManaged";
};
export type Alert = {
    /** Auto id of the alert. */
    id: string;
    /** Describe the pillar of the alert. It can be security, reliability or cost optimization. */
    pillar: "SECURITY" | "COST_OPTIMIZATION" | "RELIABILITY";
    /** Describe the environment of the alert. It can be production, staging or development. */
    environment: string;
    /** Workspace of the alert. */
    workspace: string;
    /** Describe the severity of the alert. It can be mandatory, high, medium or low. */
    severity: "LOW" | "MEDIUM" | "HIGH" | "MANDATORY";
    /** Describe the title of the alert. */
    title: string;
    /** Description of the alert. */
    description: string;
    /** Short description about what can be done in order to resolve the issue. */
    remediationText: string;
    /** Url that contains a detailed documentation to resolve the issue. */
    remediationUrl: string;
    /** Policy of the issue that created the alert. */
    awsPolicy: string;
    /** Id of the alert in AWS. */
    sourceAlertId: string;
    /** Id of the resource. */
    resourceId?: string;
    /** Status of the alert. It can be pending, completed or not applicable. */
    status: "PENDING" | "NOT_APPLICABLE" | "COMPLETED";
};
export type PaginatedResponseAlert = {
    data: Alert[];
    nextPage?: string;
    prevPage?: string;
    count: number;
};
export type ServiceSummary = {
    id: string;
    name: string;
};
/**
 * Update a GuardRail
 */
export declare function updateGuardrail({ guardrailUpdate }: {
    guardrailUpdate: GuardrailUpdate;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Create a GuardRail
 */
export declare function createGuardrail({ guardrailRequest }: {
    guardrailRequest: GuardrailRequest;
}, opts?: Oazapfts.RequestOpts): Promise<GuardrailDetails>;
/**
 * Update a baseline
 */
export declare function updateBaseline({ baselineId, baselineUpdate }: {
    baselineId: string;
    baselineUpdate: BaselineUpdate;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Retrieves billing account summaries
 */
export declare function listBillingAccounts({ stackSpotAccountId, showDeleted }: {
    stackSpotAccountId: string;
    showDeleted?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<BillingAccountSummaryResponse>;
/**
 * Create new billing account
 */
export declare function createBillingAccount({ billingAccountRequest }: {
    billingAccountRequest: BillingAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<BillingAccountDetailsResponse>;
/**
 * Retrieves cost and usage metrics for your account.
 */
export declare function processAllocationCostRequest({ allocationCostRequest }: {
    allocationCostRequest: AllocationCostRequest;
}, opts?: Oazapfts.RequestOpts): Promise<AllocationCostResponse>;
/**
 * Enable a GuardRail in any level
 */
export declare function enableGuardrail({ account, workspace, env, enable, guardrailId }: {
    account: string;
    workspace?: string;
    env?: string;
    enable: boolean;
    guardrailId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Register a cloud offer for a Stackspot Account.
 */
export declare function registerOffer({ registerOfferRequest }: {
    registerOfferRequest: RegisterOfferRequest;
}, opts?: Oazapfts.RequestOpts): Promise<"100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED">;
export declare function createNewContract({ createContractRequest }: {
    createContractRequest: CreateContractRequest;
}, opts?: Oazapfts.RequestOpts): Promise<Contract>;
/**
 * Links services to a Stackspot account, allowing users from that account to see resources in CRE
 */
export declare function linkResourceTypesToStackspotAccount({ linkResourceTypeToStackspotAccountRequest }: {
    linkResourceTypeToStackspotAccountRequest: LinkResourceTypeToStackspotAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<"100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED">;
/**
 * Return all baseline registered
 */
export declare function getBaselines(opts?: Oazapfts.RequestOpts): Promise<BaselineResponse[]>;
/**
 * Create a baseline
 */
export declare function createBaseline({ baselineRequest }: {
    baselineRequest: BaselineRequest;
}, opts?: Oazapfts.RequestOpts): Promise<BaselineDetails>;
/**
 * Retrieves details from a billing account
 */
export declare function getBillingAccountById({ stackSpotAccountId, billingAccountId }: {
    stackSpotAccountId: string;
    billingAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<BillingAccountDetailsResponse>;
/**
 * Delete a billing account
 */
export declare function deleteBillingAccountById({ stackSpotAccountId, billingAccountId }: {
    stackSpotAccountId: string;
    billingAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<BillingAccountDetailsResponse>;
/**
 * Get all GuardRails
 */
export declare function getGuardrails({ account, workspace, env }: {
    account: string;
    workspace?: string;
    env?: string;
}, opts?: Oazapfts.RequestOpts): Promise<GroupedGuardrailResponse[]>;
/**
 * Get overview of costs, with current month, last month and three last month
 */
export declare function getCostOverview({ sortBy, sortOrder }: {
    sortBy?: string;
    sortOrder?: string;
}, opts?: Oazapfts.RequestOpts): Promise<CostOverview>;
export declare function downloadCsvFiles({ year, month }: {
    year: number;
    month: number;
}, opts?: Oazapfts.RequestOpts): Promise<AttachmentBase64>;
/**
 * List all tags.
 */
export declare function getAllTags({ stackspotAccountId }: {
    stackspotAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<string[]>;
/**
 * lists all subTags of a given tag with their respective costs.
 */
export declare function getAllocationCostTagValues({ masterAccount, tag, startDate, endDate, sort, page, pageSize }: {
    masterAccount: string;
    tag: string;
    startDate: string;
    endDate: string;
    sort?: ("NAME_ASC" | "NAME_DESC" | "COST_VALUE_ASC" | "COST_VALUE_DESC")[];
    page?: number;
    pageSize?: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseAllocationCost>;
/**
 * List all services of a subtag. Each service contains name and cost value.
 */
export declare function getAllocationCostServices({ masterAccount, tag, tagValueName, startDate, endDate, sort, page, pageSize }: {
    masterAccount: string;
    tag: string;
    tagValueName: string;
    startDate: string;
    endDate: string;
    sort?: ("NAME_ASC" | "NAME_DESC" | "COST_VALUE_ASC" | "COST_VALUE_DESC")[];
    page?: number;
    pageSize?: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseAllocationCost>;
/**
 * list service details
 */
export declare function getAllocationCostServiceDetails({ masterAccount, tag, tagValueName, serviceName, startDate, endDate, $type, filter, page, pageSize, sort }: {
    masterAccount: string;
    tag: string;
    tagValueName: string;
    serviceName: string;
    startDate: string;
    endDate: string;
    $type: string;
    filter?: string[];
    page?: number;
    pageSize?: number;
    sort?: ("NAME_ASC" | "NAME_DESC" | "COST_VALUE_ASC" | "COST_VALUE_DESC")[];
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseAllocationCostDetails>;
/**
 * list all master accounts
 */
export declare function getAllMasterAccount({ stackspotAccountId }: {
    stackspotAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<string[]>;
/**
 * list filters related to the type
 */
export declare function getAllocationCostFilters({ $type }: {
    $type: "SUB_ACCOUNT_ID" | "REGION";
}, opts?: Oazapfts.RequestOpts): Promise<string[]>;
/**
 * returns the detailed csv with the masterAccount CUR information
 */
export declare function getAllocationCostCsv({ stackspotAccountId, masterAccount, startDate, endDate }: {
    stackspotAccountId: string;
    masterAccount: string;
    startDate: string;
    endDate: string;
}, opts?: Oazapfts.RequestOpts): Promise<AttachmentBase64>;
/**
 * List Instances of a particular Service Resource running in a Workspace
 */
export declare function listInstances({ workspaceId, resourceId, pageToken, search }: {
    workspaceId: string;
    resourceId: string;
    pageToken?: string;
    search?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ManagedResourceList>;
/**
 * List Managed Services
 */
export declare function listServices(opts?: Oazapfts.RequestOpts): Promise<ManagedService[]>;
/**
 * A detailed description of a particular Instance
 */
export declare function getInstanceDetails({ cloudAccountId, resourceId, instanceId }: {
    cloudAccountId: string;
    resourceId: string;
    instanceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
/**
 * Get the cloud offer of a Stackspot Account.
 */
export declare function getOfferOfAccount({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountCloudOfferResponse>;
/**
 * Get pages alerts from workspace and environment. That alerts can be filtered
 */
export declare function getAlerts({ workspace, env, pillar, severity, status, search, sort, page, pageSize }: {
    workspace: string;
    env: string;
    pillar?: "SECURITY" | "COST_OPTIMIZATION" | "RELIABILITY";
    severity?: "LOW" | "MEDIUM" | "HIGH" | "MANDATORY";
    status?: "PENDING" | "NOT_APPLICABLE" | "COMPLETED";
    search?: string;
    sort?: ("STATUS_ASC" | "STATUS_DESC" | "POLICIES_ASC" | "POLICIES_DESC" | "PILLAR_ASC" | "PILLAR_DESC" | "SEVERITY_ASC" | "SEVERITY_DESC")[];
    page?: number;
    pageSize?: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseAlert>;
export declare function downloadDataByAccountId({ stackspotAccountId, year, month }: {
    stackspotAccountId: string;
    year: number;
    month: number;
}, opts?: Oazapfts.RequestOpts): Promise<AttachmentBase64>;
/**
 * List available services
 */
export declare function listServices1(opts?: Oazapfts.RequestOpts): Promise<ServiceSummary[]>;
//# sourceMappingURL=cloudServices.d.ts.map