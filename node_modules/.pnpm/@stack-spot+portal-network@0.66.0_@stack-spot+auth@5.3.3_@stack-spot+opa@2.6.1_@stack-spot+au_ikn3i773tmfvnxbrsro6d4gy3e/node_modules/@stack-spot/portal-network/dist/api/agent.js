/**
 * ai-agent-mgmt-api API
 * 0.0.1
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "/",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {};
/**
 * Creates a new AI Agent.
 */
export function postV1Agent({ newAgentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/agent", oazapfts.json({
        ...opts,
        method: "POST",
        body: newAgentRequest
    })));
}
/**
 * Get agent by ID
 */
export function getV1AgentByAgentId({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}`, {
        ...opts
    }));
}
/**
 * Update agent by ID
 */
export function putV1AgentByAgentId({ agentId, modifiedAgentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: modifiedAgentRequest
    })));
}
/**
 * Delete agent by ID
 */
export function deleteV1AgentByAgentId({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * AI Agent validade publish.
 */
export function getV1AgentByAgentIdDependencies({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}/dependencies`, {
        ...opts
    }));
}
/**
 * Fork an AI agent.
 */
export function postV1AgentByAgentIdFork({ agentId, forkAgentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: forkAgentRequest
    })));
}
/**
 * AI Agent update visibility.
 */
export function postV1AgentByAgentIdPublish({ agentId, changeVisibilityRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}/publish`, oazapfts.json({
        ...opts,
        method: "POST",
        body: changeVisibilityRequest
    })));
}
/**
 * Share an AI agent.
 */
export function postV1AgentByAgentIdShare({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentId)}/share`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Get agent by Slug
 */
export function getV1AgentByAgentSlugExists({ agentSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agent/${encodeURIComponent(agentSlug)}/exists`, {
        ...opts
    }));
}
/**
 * List all built-in AI Agents.
 */
export function getV1Agents({ visibility }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/agents${QS.query(QS.explode({
        visibility
    }))}`, {
        ...opts
    }));
}
/**
 * Creates a new built-in AI Agent.
 */
export function postV1PublicAgent({ newAgentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/public/agent", oazapfts.json({
        ...opts,
        method: "POST",
        body: newAgentRequest
    })));
}
/**
 * Get agent by ID
 */
export function getV1PublicAgentByAgentId({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agent/${encodeURIComponent(agentId)}`, {
        ...opts
    }));
}
/**
 * Update agent by ID
 */
export function putV1PublicAgentByAgentId({ agentId, modifiedAgentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agent/${encodeURIComponent(agentId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: modifiedAgentRequest
    })));
}
/**
 * Delete agent by ID
 */
export function deleteV1PublicAgentByAgentId({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agent/${encodeURIComponent(agentId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * AI Agent validade publish.
 */
export function getV1PublicAgentByAgentIdDependencies({ agentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agent/${encodeURIComponent(agentId)}/dependencies`, {
        ...opts
    }));
}
/**
 * AI Agent update visibility.
 */
export function postV1PublicAgentByAgentIdPublish({ agentId, changeVisibilityRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agent/${encodeURIComponent(agentId)}/publish`, oazapfts.json({
        ...opts,
        method: "POST",
        body: changeVisibilityRequest
    })));
}
/**
 * Get agent by Slug
 */
export function getV1PublicAgentByAgentSlugExists({ agentSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agent/${encodeURIComponent(agentSlug)}/exists`, {
        ...opts
    }));
}
/**
 * List all built-in AI Agents.
 */
export function getV1PublicAgents({ visibility }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/public/agents${QS.query(QS.explode({
        visibility
    }))}`, {
        ...opts
    }));
}
//# sourceMappingURL=agent.js.map