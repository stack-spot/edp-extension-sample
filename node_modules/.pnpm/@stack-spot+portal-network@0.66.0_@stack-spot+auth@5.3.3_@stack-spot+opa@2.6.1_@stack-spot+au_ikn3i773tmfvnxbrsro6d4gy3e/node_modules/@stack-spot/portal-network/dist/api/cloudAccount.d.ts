/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type JwtToken = {
    rawToken: string;
    email: string;
    name: string;
    stackSpotAccountId: string;
    stackSpotAccountSlug: string;
    isServiceToken: boolean;
};
export type JwtTokenWrite = {
    authenticationHeader?: string;
    rawToken: string;
    email: string;
    name: string;
    stackSpotAccountId: string;
    stackSpotAccountSlug: string;
    isServiceToken: boolean;
};
export type CloudAccountCredential = object;
export type ConnectAccountRequestV2 = {
    /** Environment ID */
    environmentId: string;
    /** Workspace ID */
    workspaceId: string;
    /** Cloud Provider */
    provider: "AWS" | "Azure";
    credential?: CloudAccountCredential;
};
export type CloudAccountDetails = {
    /** Cloud Account ID */
    id?: string;
    /** Workspace ID */
    workspaceId: string;
    /** Workspace name */
    workspaceName: string;
    /** Environment ID */
    environmentId: string;
    /** Environment name */
    environmentName: string;
    /** Environment description */
    environmentDescription: string;
    /** Cloud Provider */
    provider?: "AWS" | "Azure";
    /** Cloud Provider Account ID */
    providerAccountId?: string;
    /** Cloud Account connection status */
    status?: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /** Cloud Account type */
    "type"?: "CustomCloud" | "CloudServices";
    /** When not-null, it's the ID for a support case requesting the disconnection of this account */
    activeDisconnectSupportCaseId?: string;
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type RegisterOfferRequest = {
    stackspotAccountId: string;
    cloudOffer: "Reseller" | "Managed" | "FullyManaged";
};
export type CloudAccountResponse = {
    /** Cloud Account ID */
    id: string;
    /** Workspace name */
    workspaceName: string;
    /** Environment name */
    environmentName: string;
    /** Cloud Provider */
    provider: "AWS" | "Azure";
    /** Cloud Account connection status */
    status: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /** Cloud Account type */
    "type": "CustomCloud" | "CloudServices";
    /** Number Of Ips */
    numberOfIps?: number;
    /** Network Type */
    networkType?: number;
};
export type PaginatedResourceCloudAccountResponse = {
    data: CloudAccountResponse[];
    nextPage?: number;
    prevPage?: number;
    totalPages: number;
};
export type ConnectAccountRequest = {
    /** Environment ID */
    environmentId: string;
    /** Workspace ID */
    workspaceId: string;
    /** Cloud Provider */
    provider: "AWS" | "Azure";
    credential?: CloudAccountCredential;
    /** IAM Role. Will be deprecated in future releases. */
    iamRole?: string;
};
export type Ulid = {
    value: string;
};
export type ManagedAccountProvisionRequest = {
    workspaceId: Ulid;
    /**
            Network template ID to be setup in the provisioned accounts. See /cloud-account/managed-account/template for more info.
         */
    networkTypeId: number;
    /**
            Number of IPs to be allocated in the provisioned accounts. See /cloud-account/managed-account/template for more info.
         */
    numberOfIps: number;
};
export type DisconnectSupportCaseManagedAccountRequest = {
    supportCaseId: number;
};
export type DisconnectSupportCaseManagedAccountResponse = {
    cloudAccountId: Ulid;
    stackspotAccountId: Ulid;
    supportCaseId: number;
};
export type StackspotAccountTower = {
    id: string;
    stackspotAccountId: string;
    towerId: string;
};
export type StackspotAccountTowerRequest = {
    stackspotAccountId: string;
    towerId: string;
};
export type CommonCreatedResponse = {
    /** The created object ID */
    id: string;
};
export type UpdateManagedInfoRequest = {
    cloudAccountId: Ulid;
    stackspotAccountId: Ulid;
    /**
            Sets the AWS region for the account.
         */
    region?: string;
    /**
            Sets the foundation name for the account.
         */
    foundationName?: string;
    /**
            Sets the environment name for the account.
         */
    environmentName?: string;
};
export type UpdatedCloudAccountResponse = {
    cloudAccountId: Ulid;
    stackspotAccountId: Ulid;
    workspaceId: Ulid;
    environmentId: Ulid;
    cloudType: "CustomCloud" | "CloudServices";
    cloudStatus: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /**
            The region associated with the Cloud Account. This fields only exists for AWS accounts of CloudServices type.
         */
    providerRegion?: string;
    /**
             The account's name inside the Foundation's organization. This fields only exists for AWS accounts of CloudServices type.
         */
    foundationName: string;
};
export type DisconnectCloudAccountRequest = {
    cloudAccountId: Ulid;
    stackspotAccountId: Ulid;
};
export type CloudAccountDetailsWithCredentialV2 = {
    /** Cloud Account ID */
    id: string;
    /** Workspace ID */
    workspaceId: string;
    /** Environment ID */
    environmentId: string;
    /** Cloud Provider */
    provider: "AWS" | "Azure";
    /** Cloud Account type */
    "type": "CustomCloud" | "CloudServices";
    /** Cloud Account connection status */
    status: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /** Cloud Account credential identifier for Secret Manager */
    credentialSecretIdentifier?: string;
};
export type AdminCloudAccountDetailsV2 = {
    /** Cloud Account ID */
    id: string;
    /** Stackspot Account ID */
    stackspotAccountId: string;
    /** Workspace ID */
    workspaceId: string;
    /** Environment ID */
    environmentId: string;
    /** Environment Name (only available in CloudServices accounts ) */
    environmentName?: string;
    /** Cloud Provider that Cloud Account represents */
    provider: "AWS" | "Azure";
    /** Type of the Cloud Account (Custom Cloud or Cloud Services) */
    "type": "CustomCloud" | "CloudServices";
    /** Status of this Cloud Account. Connected indicates it's ready to use, others status are self explained */
    status: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /** The ID this account have in Cloud Provider */
    cloudProviderAccountId?: string;
    /** The name given in Cloud Provider for this account (only available in CloudServices accounts) */
    cloudProviderAccountName?: string;
    /** Linked Account ID */
    linkedAccountId?: string;
    /** This Cloud Account credentials secret manager */
    credentialSecretIdentifier?: string;
    /** ID of the Control Tower that Cloud Account is connected */
    controlTowerId?: string;
    /** Region of the Cloud Account provider */
    region?: string;
};
export type PaginatedResponseAdminCloudAccountDetailsV2 = {
    data: AdminCloudAccountDetailsV2[];
    nextPage?: string;
    prevPage?: string;
    count: number;
};
export type HealthComponent = {
    description?: string;
    status?: string;
};
export type CloudOfferResponse = {
    stackspotAccountId: string;
    offer: "Reseller" | "Managed" | "FullyManaged";
};
export type CloudServicesAccountStatus = {
    /** Cloud Account ID */
    id: string;
    /** Environment name */
    environmentName: string;
    /** Environment ID */
    environmentId: string;
    /** Status of the account in the workflow */
    status: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    provider: "AWS" | "Azure";
    /** Error code if the workflow for creating the account failed */
    errorCode?: string;
};
export type Workflow = {
    status: "UNDER_CHANGE" | "AVAILABLE" | "ERROR";
    accounts: CloudServicesAccountStatus[];
    supportCaseId?: string;
};
export type CloudAccountDetailsWithCredential = {
    /** Cloud Account ID */
    id: string;
    /** Workspace ID */
    workspaceId: string;
    /** Environment ID */
    environmentId: string;
    /** Cloud Provider */
    provider: "AWS" | "Azure";
    /** Cloud Account type */
    "type": "CustomCloud" | "CloudServices";
    /** Role */
    role: string;
    /** Cloud Account connection status */
    status: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /** Cloud Account credential identifier for Secret Manager */
    credentialSecretIdentifier?: string;
};
export type ManagedAccountTemplateResponse = {
    id: number;
    name: string;
    minCountIps: number;
    maxCountIps: number;
    availableIpRange?: number[];
};
export type ManagedAccountRegionResponse = {
    id: number;
    name: string;
};
export type AdminCloudAccountDetails = {
    /** Cloud Account ID */
    id: string;
    /** Stackspot Account ID */
    stackspotAccountId: string;
    /** Workspace ID */
    workspaceId: string;
    /** Environment ID */
    environmentId: string;
    /** Environment Name (only available in CloudServices accounts ) */
    environmentName?: string;
    /** Cloud Provider that Cloud Account represents */
    provider: "AWS" | "Azure";
    /** Type of the Cloud Account (Custom Cloud or Cloud Services) */
    "type": "CustomCloud" | "CloudServices";
    /** AWS Role that can be used for connecting in account */
    role?: string;
    /** Status of this Cloud Account. Connected indicates it's ready to use, others status are self explained */
    status: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
    /** The ID this account have in Cloud Provider */
    cloudProviderAccountId?: string;
    /** The name given in Cloud Provider for this account (only available in CloudServices accounts) */
    cloudProviderAccountName?: string;
    /** Linked Account ID */
    linkedAccountId?: string;
    /** This Cloud Account credentials secret manager */
    credentialSecretIdentifier?: string;
    /** ID of the Control Tower that Cloud Account is connected */
    controlTowerId?: string;
    /** Region of the Cloud Account provider */
    region?: string;
};
export type PaginatedResponseAdminCloudAccountDetails = {
    data: AdminCloudAccountDetails[];
    nextPage?: string;
    prevPage?: string;
    count: number;
};
export type DeleteCloudAccountResponse = {
    cloudAccountId: Ulid;
    /** The type of the cloud account */
    cloudType: "CustomCloud" | "CloudServices";
    /** If the type is 'CloudServices', the delete operation opens a support case in order to delete the account */
    supportCaseId?: string;
};
/**
 * Connect a cloud account
 */
export declare function createCloudAccount({ jwtToken, stackspotCustomerIp, connectAccountRequestV2 }: {
    jwtToken: JwtToken;
    stackspotCustomerIp?: string;
    connectAccountRequestV2: ConnectAccountRequestV2;
}, opts?: Oazapfts.RequestOpts): Promise<CloudAccountDetails>;
/**
 * Register a cloud offer for a Stackspot Account.
 */
export declare function registerOffer({ registerOfferRequest }: {
    registerOfferRequest: RegisterOfferRequest;
}, opts?: Oazapfts.RequestOpts): Promise<"100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED">;
/**
 * List all cloud accounts created for all workspaces
 */
export declare function listCloudAccounts({ jwtToken, sortBy, sortOrder, filter, page, pageSize, $type, environment, status }: {
    jwtToken: JwtToken;
    sortBy?: string;
    sortOrder?: string;
    filter?: string;
    page?: number;
    pageSize?: number;
    $type?: "CustomCloud" | "CloudServices";
    environment?: string;
    status?: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResourceCloudAccountResponse>;
/**
 * Connect a cloud account
 */
export declare function createCloudAccount1({ jwtToken, stackspotCustomerIp, connectAccountRequest }: {
    jwtToken: JwtToken;
    stackspotCustomerIp?: string;
    connectAccountRequest: ConnectAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CloudAccountDetails>;
/**
 * Provision managed accounts in a workspace
 */
export declare function provisionManagedAccountsForWorkspace({ jwtToken, stackspotCustomerIp, managedAccountProvisionRequest }: {
    jwtToken: JwtToken;
    stackspotCustomerIp?: string;
    managedAccountProvisionRequest: ManagedAccountProvisionRequest;
}, opts?: Oazapfts.RequestOpts): Promise<"100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED">;
/**
 * Disconnect a Managed Account that was requested to disconnect via support case
 */
export declare function disconnectCloudAccountRequestedForDisconnect({ disconnectSupportCaseManagedAccountRequest }: {
    disconnectSupportCaseManagedAccountRequest: DisconnectSupportCaseManagedAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<DisconnectSupportCaseManagedAccountResponse[]>;
/**
 * Get all relation between stackspot accounts and control towers
 */
export declare function getAllAccountTower({ stackspotAccountId }: {
    stackspotAccountId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<StackspotAccountTower[]>;
/**
 * Add a Control Tower ID to a Stackspot Account that will be used in creation of a Managed Cloud Account
 */
export declare function createAccountTower({ stackspotAccountTowerRequest }: {
    stackspotAccountTowerRequest: StackspotAccountTowerRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CommonCreatedResponse>;
/**
 *
 *         Updates Managed Account related information. If the account is of CustomCloud type, it changes to CloudServices
 *         (managed account type).
 *
 */
export declare function updateManagedInfo({ updateManagedInfoRequest }: {
    updateManagedInfoRequest: UpdateManagedInfoRequest;
}, opts?: Oazapfts.RequestOpts): Promise<UpdatedCloudAccountResponse>;
/**
 * Disconnect a Cloud Account
 */
export declare function disconnectCloudAccountById({ disconnectCloudAccountRequest }: {
    disconnectCloudAccountRequest: DisconnectCloudAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<UpdatedCloudAccountResponse>;
/**
 * Get a cloud account connected to a workspace environment
 */
export declare function getCloudAccountByEnvironment({ accountId, workspaceId, environmentId }: {
    accountId: string;
    workspaceId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CloudAccountDetailsWithCredentialV2>;
/**
 * Get a list of cloud accounts connected to a workspace
 */
export declare function getCloudAccountByWorkspace({ jwtToken, accountId, id }: {
    jwtToken: JwtToken;
    accountId?: string;
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<CloudAccountDetails[]>;
/**
 * Get Cloud Account data with details
 */
export declare function getCloudAccount({ stackspotAccountId, workspaceId, environmentId, provider, $type, status }: {
    stackspotAccountId?: string;
    workspaceId?: string;
    environmentId?: string;
    provider?: "AWS" | "Azure";
    $type?: "CustomCloud" | "CloudServices";
    status?: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseAdminCloudAccountDetailsV2>;
/**
 * Get Cloud Account by ID
 */
export declare function getCloudAccountById({ cloudAccountId }: {
    cloudAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AdminCloudAccountDetailsV2>;
export declare function healthz(opts?: Oazapfts.RequestOpts): Promise<HealthComponent>;
/**
 * Get the cloud offer of a Stackspot Account.
 */
export declare function getOfferOfAccount({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<CloudOfferResponse>;
/**
 * Get the external-id for the given Cloud Account ID.
 */
export declare function getCloudAccountExternalId({ cloudAccountId }: {
    cloudAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<string>;
/**
 * Get the cloud account workflow of a workspace environment
 */
export declare function getProvisionWorkflowInWorkspace({ jwtToken, workspaceId }: {
    jwtToken: JwtToken;
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<Workflow>;
/**
 * Get a cloud account connected to a workspace environment
 */
export declare function getCloudAccountByEnvironment1({ accountId, workspaceId, environmentId }: {
    accountId: string;
    workspaceId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CloudAccountDetailsWithCredential>;
/**
 * Get a list of cloud accounts connected to a workspace
 */
export declare function getCloudAccountByWorkspace1({ jwtToken, accountId, id }: {
    jwtToken: JwtToken;
    accountId?: string;
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<CloudAccountDetails[]>;
/**
 * Get all available templates for Managed Cloud
 */
export declare function getManagedCloudTemplate(opts?: Oazapfts.RequestOpts): Promise<ManagedAccountTemplateResponse[]>;
/**
 * Get all available regions for Managed Cloud
 */
export declare function getManagedCloudRegion(opts?: Oazapfts.RequestOpts): Promise<ManagedAccountRegionResponse[]>;
/**
 * Get Cloud Account data with details
 */
export declare function getCloudAccount1({ stackspotAccountId, workspaceId, environmentId, provider, $type, status }: {
    stackspotAccountId?: string;
    workspaceId?: string;
    environmentId?: string;
    provider?: "AWS" | "Azure";
    $type?: "CustomCloud" | "CloudServices";
    status?: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown";
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseAdminCloudAccountDetails>;
/**
 * Get Cloud Account by ID
 */
export declare function getCloudAccountById1({ cloudAccountId }: {
    cloudAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AdminCloudAccountDetails>;
/**
 * Delete a cloud account.
 */
export declare function deleteCloudAccountFromEnvironment({ jwtToken, stackspotCustomerIp, id }: {
    jwtToken: JwtToken;
    stackspotCustomerIp?: string;
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<DeleteCloudAccountResponse>;
/**
 *
 *         Delete all accounts in a workspace.
 *
 */
export declare function deleteManagedAccountsFromWorkspace({ jwtToken, stackspotCustomerIp, workspaceId }: {
    jwtToken: JwtToken;
    stackspotCustomerIp?: string;
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<DeleteCloudAccountResponse>;
/**
 * Delete a relation between control tower and stackspot account
 */
export declare function deleteAccountTower({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<"100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED">;
//# sourceMappingURL=cloudAccount.d.ts.map