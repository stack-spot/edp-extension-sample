/**
 * Content API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://content-content-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://content-content-api.dev.stackspot.com"
};
/**
 * Update Workflow Documentation
 */
export function updateWorkflowDocumentation({ studioSlug, workflowSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/docs`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update Stack and starter docs
 */
export function updateStackDoc({ studioSlug, stackSlug, $type, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/docs${QS.query(QS.explode({
        "type": $type
    }))}`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update Plugin Documentation
 */
export function updateDocumentation({ studioSlug, pluginSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/docs`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update Action Documentation
 */
export function updateActionDocumentation({ studioSlug, actionSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/docs`, oazapfts.multipart({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Create new stack version
 */
export function createStackVersion({ stackId, createStackVersionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/${encodeURIComponent(stackId)}/versions`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createStackVersionRequest
    })));
}
/**
 * Create Starter on StackVersion
 */
export function createStarterV2({ stackVersionId, createStarterV2Request }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/starters`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createStarterV2Request
    })));
}
/**
 * Publish a new stack version
 */
export function publish({ stackVersionId, userAgent, publishStackVersionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/publish`, oazapfts.json({
        ...opts,
        method: "POST",
        body: publishStackVersionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * Add plugin to a stack
 */
export function addPlugin({ stackVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Associate actions to a plugin
 */
export function associateActionToPlugin({ stackVersionId, pluginVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/actions`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Add action version to a stack version
 */
export function addAction({ stackVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/actions`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List Connection Interface Types
 */
export function listConnectionInterfaceTypes(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/connection-interface-types", {
        ...opts
    }));
}
/**
 * Create New Connection Interface Type
 */
export function createConnectionInterfaceType({ createConnectionInterfaceTypeRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/connection-interface-types", oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceTypeRequest
    })));
}
/**
 * List workflows by version ids
 */
export function listWorkflowsByVersionIds({ xWorkspaceId, listWorkflowsByVersionIdsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/workflows/versions", oazapfts.json({
        ...opts,
        method: "POST",
        body: listWorkflowsByVersionIdsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate and return info from a workflow
 */
export function validateWorkflow({ studioSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workflows/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Find studios
 */
export function getStudios1({ xWorkspaceId, aclOnly, filter, isAccountHolder }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios${QS.query(QS.explode({
        aclOnly,
        filter,
        isAccountHolder
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create a new studio
 */
export function createStudio({ createStudioRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/studios", oazapfts.json({
        ...opts,
        method: "POST",
        body: createStudioRequest
    })));
}
/**
 * List all workspaces for selected studio visibility
 */
export function listWorkspaces({ studioSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workspaces`, {
        ...opts
    }));
}
/**
 * Add workspace to given studio
 */
export function addWorkspace({ studioSlug, studioWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workspaces`, oazapfts.json({
        ...opts,
        method: "POST",
        body: studioWorkspaceRequest
    })));
}
/**
 * Publish Workflow
 */
export function publishWorkflow({ studioSlug, workflowSlug, userAgent, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * Get Stack by slugs
 */
export function getStackBySlug({ studioSlug, stackSlug, semanticVersion, onlyPublished, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}${QS.query(QS.explode({
        semanticVersion,
        onlyPublished
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Publish Stack
 */
export function publishStack({ studioSlug, stackSlug, userAgent, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * List stacks from studio by filters
 */
export function listStacksByFilters({ xWorkspaceId, studioSlug, pageable, filterStackRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Publish plugin
 */
export function publishPluginController({ studioSlug, pluginSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Get available plugin versions by plugin slug
 */
export function getAvailablePluginVersionsByPluginSlug1({ studioSlug, pluginSlug, xWorkspaceId, range, appAllowed }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        appAllowed
    }))}`, {
        ...opts
    }));
}
/**
 * Get available plugin versions by plugin slug
 */
export function oldGetAvailablePluginVersionsByPluginSlug({ studioSlug, pluginSlug, xWorkspaceId, getAvailablePluginVersionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/range`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getAvailablePluginVersionsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate a plugin publish
 */
export function validatePluginPublish({ studioSlug, publishValidatorRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/publish/validate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: publishValidatorRequest
    })));
}
/**
 * Process a plugin publish
 */
export function processPluginPublish({ studioSlug, publishProcessRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/publish/process`, oazapfts.json({
        ...opts,
        method: "POST",
        body: publishProcessRequest
    })));
}
/**
 * Get a filtered list of available plugins
 */
export function filteredList({ xWorkspaceId, studioSlug, accountOnly, pageable, filterPluginVersionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/filters${QS.query(QS.explode({
        accountOnly,
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterPluginVersionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Get Action by slug
 */
export function getActionBySlug({ studioSlug, actionSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}${QS.query(QS.explode({
        version
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Publish Action
 */
export function createAction({ studioSlug, actionSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Get available action versions by action slug
 */
export function getAvailableActionVersionsByActionSlug1({ studioSlug, actionSlug, xWorkspaceId, range, requiresConnection }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        requiresConnection
    }))}`, {
        ...opts
    }));
}
/**
 * Get available action versions by action slug
 */
export function oldGetAvailableActionVersionsByActionSlug({ studioSlug, actionSlug, xWorkspaceId, getAvailableActionVersionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/range`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getAvailableActionVersionsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * List actions from studio by filters
 */
export function listActionsByFilters({ xWorkspaceId, studioSlug, pageable, filterActionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterActionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * List studios by filters
 */
export function listStudios({ xWorkspaceId, filterStudioRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/studios/filters", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStudioRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate and return info from a starter
 */
export function validateStack({ starterPath, studioSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/starters/validate${QS.query(QS.explode({
        starterPath,
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List stacks from account
 */
export function listStacks2({ xWorkspaceId, isAccountHolder }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks${QS.query(QS.explode({
        isAccountHolder
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create New Stack
 */
export function createStack({ userAgent, createStackRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/stacks", oazapfts.json({
        ...opts,
        method: "POST",
        body: createStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    })));
}
/**
 * List stack versions
 */
export function listStackVersions({ stackId, xWorkspaceId, startersOnly, infraOnly, workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/${encodeURIComponent(stackId)}/versions${QS.query(QS.explode({
        startersOnly,
        infraOnly,
        workspaceId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create new stack version
 */
export function createStackVersion1({ stackId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/${encodeURIComponent(stackId)}/versions`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Create association between a Stack Version and a Workspace
 */
export function addStackWorkspace({ stackVersionId, workspaceId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Remove association between a Stack Version and a Workspace
 */
export function removeStackWorkspace({ stackVersionId, workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * List all workflows versions from a stack version
 */
export function listWorkflows({ stackVersionId, xWorkspaceId, displayName, $type, target, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workflows${QS.query(QS.explode({
        displayName,
        "type": $type,
        target,
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Add workflow version to a stack version
 */
export function addWorkflow({ stackVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workflows`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Deprecate a starter
 */
export function deprecateStarterBy({ stackVersionId, starterId, deprecateContentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/${encodeURIComponent(starterId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Get a starter list paginated from a StackVersion with filters
 */
export function listStartersWithFilter({ stackVersionId, xWorkspaceId, pageable, filterStarterRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStarterRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Publish a stack
 */
export function publish1({ stackVersionId, userAgent }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "User-Agent": userAgent
        })
    }));
}
/**
 * Deprecate  plugin used by stack
 */
export function deprecatePluginInStack({ stackVersionId, pluginVersionId, deprecateContentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/versions/${encodeURIComponent(pluginVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Filter Plugins by stack version id
 */
export function filterStackVersionPlugins({ xWorkspaceId, stackVersionId, pageable, filterStackVersionPluginRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackVersionPluginRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * List links by stack version
 */
export function listLinksByStackVersion({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links`, {
        ...opts
    }));
}
/**
 * Add a link to stack versions
 */
export function addLink({ stackVersionId, addLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addLinkRequest
    })));
}
/**
 * Deprecate a stack
 */
export function deprecateStackVersionBy({ stackVersionId, deprecateContentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Get suggestion of connections interfaces
 */
export function getConnectionInterfaceSuggestion({ stackVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/connections`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Create suggestion of connections interfaces
 */
export function createConnectionInterfaceSuggestion({ stackVersionId, createConnectionInterfaceSuggestionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/connections`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceSuggestionRequest
    })));
}
/**
 * Deprecate an action used by stack
 */
export function deprecateActionInStack({ stackVersionId, actionVersionId, deprecateContentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions/versions/${encodeURIComponent(actionVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * List actions from stack by filters
 */
export function listActionsByFilters1({ xWorkspaceId, stackVersionId, pageable, filterStackActionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions/filters${QS.query(QS.explode({
        pageable
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackActionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Find a list of stack versions from filters
 */
export function getStackVersionListByIds({ xWorkspaceId, filterStackVersionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/stacks/versions/filters", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackVersionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Validate and return info from a stack
 */
export function validateStack1({ studioSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List of stacks by its ids
 */
export function listStackByIdsController({ filterStackByIdsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/stacks/summary", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterStackByIdsRequest
    })));
}
/**
 * List plugins version by its ids
 */
export function listPluginVersionByIdsController({ xWorkspaceId, filterPluginVersionByIdsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/plugins/versions", oazapfts.json({
        ...opts,
        method: "POST",
        body: filterPluginVersionByIdsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    })));
}
/**
 * Deprecate a plugin version
 */
export function deprecatePluginVersion({ pluginVersionId, deprecateContentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Validate and return info from a plugin
 */
export function validatePlugin({ studioSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Create new documentation
 */
export function createDoc({ createDocRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/docs", oazapfts.json({
        ...opts,
        method: "POST",
        body: createDocRequest
    })));
}
/**
 * Add revision to content evaluation
 */
export function contentEvaluationRevision({ contentEvaluationId, addContentEvaluationRevisionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contents-evaluation/${encodeURIComponent(contentEvaluationId)}/revision`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addContentEvaluationRevisionRequest
    })));
}
/**
 * List Connection Interface Types
 */
export function listConnectionInterfaceTypes1(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/connection-interface-types", {
        ...opts
    }));
}
/**
 * Create New Connection Interface Type
 */
export function createConnectionInterfaceType1({ createConnectionInterfaceTypeRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/connection-interface-types", oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceTypeRequest
    })));
}
/**
 * Validate Connection Interface Type Object Output Schema
 */
export function validateConnectionInterfaceTypeObjectOutputSchema({ connectionInterfaceTypeIdOrSlug, outputId, validateConnectionInterfaceTypeSchemaRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeIdOrSlug)}/outputs/${encodeURIComponent(outputId)}/validate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: validateConnectionInterfaceTypeSchemaRequest
    })));
}
/**
 * List actions versions by id and action version or range
 */
export function getActionsVersions({ body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/actions/versions", oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Deprecate an action version
 */
export function deprecateActionVersion({ actionVersionId, deprecateContentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}/deprecate`, oazapfts.json({
        ...opts,
        method: "POST",
        body: deprecateContentRequest
    })));
}
/**
 * Validate and return info from a action
 */
export function validateAction({ studioSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/validate${QS.query(QS.explode({
        studioSlug
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Update a starter from a StackVersion
 */
export function patchStarterV2({ stackVersionId, starterId, patchStarterV2Request }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/${encodeURIComponent(starterId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: patchStarterV2Request
    })));
}
/**
 * Edit a Connection Interface Type
 */
export function updateConnectionInterfaceType({ connectionInterfaceTypeId, updateConnectionInterfaceTypeRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateConnectionInterfaceTypeRequest
    })));
}
/**
 * Change the visibility of given studio
 */
export function changeVisibility({ studioSlug, changeVisibilityRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/visibility`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: changeVisibilityRequest
    })));
}
/**
 * Get studio tabs
 */
export function getStudioTabs({ studioSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/tabs`, {
        ...opts
    }));
}
/**
 * Updates studio tabs
 */
export function updateStudioTabs({ studioSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/tabs`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body
    })));
}
/**
 * Get stack tabs
 */
export function getStackTabs({ studioSlug, stackSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/tabs`, {
        ...opts
    }));
}
/**
 * Updates stack tabs
 */
export function updateStackTabs({ studioSlug, stackSlug, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/tabs`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body
    })));
}
/**
 * Checks for content pending review
 */
export function verifyHasContentPendingReview({ studioSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/governance`, {
        ...opts
    }));
}
/**
 * Enable or disable studio governance
 */
export function manageStudioGovernance({ studioSlug, manageStudioGovernanceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/governance`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: manageStudioGovernanceRequest
    })));
}
/**
 * Delete a studio
 */
export function deleteStudio({ studioId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Updates studio
 */
export function updateStudio({ studioId, updateStudioRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateStudioRequest
    })));
}
/**
 * get stack
 */
export function getStackById({ stackId, semanticVersion, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/${encodeURIComponent(stackId)}${QS.query(QS.explode({
        semanticVersion
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * update stack
 */
export function updateStackById({ stackId, updateStackRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/${encodeURIComponent(stackId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateStackRequest
    })));
}
/**
 * Delete a link from a stack versions
 */
export function deleteLink({ stackVersionId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Edit a link in a stack versions
 */
export function editLink({ stackVersionId, linkId, editLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/links/${encodeURIComponent(linkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: editLinkRequest
    })));
}
/**
 * Get a documentation
 */
export function getDoc({ documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Delete a documentation
 */
export function deleteDoc({ documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update a documentation
 */
export function updateDoc({ documentationId, language, updateDocRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateDocRequest
    })));
}
/**
 * Edit a Connection Interface Type
 */
export function updateConnectionInterfaceType1({ connectionInterfaceTypeId, updateConnectionInterfaceTypeRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateConnectionInterfaceTypeRequest
    })));
}
/**
 * List stacks from the account
 */
export function listStacks({ isAccountHolder, view, filter, page, size, sort, direction }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v3/stacks${QS.query(QS.explode({
        isAccountHolder,
        view,
        filter,
        page,
        size,
        sort,
        direction
    }))}`, {
        ...opts
    }));
}
/**
 * Find studios
 */
export function getStudios({ xWorkspaceId, authorization, aclOnly, filter, view, isAccountHolder, startersOnly, infraOnly, workspaceId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/studios${QS.query(QS.explode({
        aclOnly,
        filter,
        view,
        isAccountHolder,
        startersOnly,
        infraOnly,
        workspaceId,
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId,
            Authorization: authorization
        })
    }));
}
/**
 * Get available plugin versions by plugin slug
 */
export function getAvailablePluginVersionsByPluginSlug({ studioSlug, pluginSlug, xWorkspaceId, range, appAllowed, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        appAllowed,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Download an action by version
 */
export function downloadAction({ studioSlug, actionSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get available action versions by action slug
 */
export function getAvailableActionVersionsByActionSlug({ studioSlug, actionSlug, xWorkspaceId, range, requiresConnection, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        requiresConnection,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List stacks from account
 */
export function listStacks1({ xWorkspaceId, isAccountHolder }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/stacks${QS.query(QS.explode({
        isAccountHolder
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get inputs from a plugin version
 */
export function getInputs({ pluginVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/plugins/versions/${encodeURIComponent(pluginVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get Connection Interface Type by Id
 */
export function getConnectionInterfaceType({ connectionInterfaceTypeIdOrSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeIdOrSlug)}`, {
        ...opts
    }));
}
/**
 * List of actions
 */
export function listActions({ studioSlug, actionSlug, requiresConnection, filter, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/actions${QS.query(QS.explode({
        studioSlug,
        actionSlug,
        requiresConnection,
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List inputs of an action version
 */
export function listInputs({ actionVersionId, xWorkspaceId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/actions/versions/${encodeURIComponent(actionVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId,
            "account-id": accountId
        })
    }));
}
/**
 * List account workflow latest versions
 */
export function listAccountWorkflow({ filter, accountOnly, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workflows${QS.query(QS.explode({
        filter,
        accountOnly,
        page,
        size
    }))}`, {
        ...opts
    }));
}
/**
 * Validate an workflow version to delete
 */
export function validateUnpublishWorkflowVersion({ workflowVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workflows/versions/${encodeURIComponent(workflowVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * Get inputs from a workflow version
 */
export function getInputs1({ workflowVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workflows/versions/${encodeURIComponent(workflowVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get workflows from studio
 */
export function getWorkflowByStudioSlug({ studioSlug, xWorkspaceId, displayName, $type, slug, description, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        displayName,
        "type": $type,
        slug,
        description,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List all workflow versions
 */
export function listWorkflowVersion({ studioSlug, workflowSlug, status, xWorkspaceId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/versions${QS.query(QS.explode({
        status,
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a workflow by version
 */
export function downloadWorkflow({ studioSlug, workflowSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a workflow by version (base64 response version)
 */
export function downloadWorkflowBase64({ studioSlug, workflowSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/versions/${encodeURIComponent(version)}/download/base64`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get workflow version
 */
export function getWorkflow({ studioSlug, workflowSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/version${QS.query(QS.explode({
        version
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get available workflow versions by workflow slug
 */
export function getAvailableWorkflowVersionsByWorkflowSlug({ studioSlug, workflowSlug, xWorkspaceId, range, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/${encodeURIComponent(workflowSlug)}/range${QS.query(QS.explode({
        "x-workspace-id": xWorkspaceId,
        range,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get an workflow documentation
 */
export function getWorkflowDoc({ studioSlug, documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workflows/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Get a starter documentation
 */
export function getStarterDoc({ studioSlug, documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/starters/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * List Stacks inside a studio
 */
export function listStacksInStudio({ studioSlug, onlyPublished, xWorkspaceId, startersOnly, infraOnly, workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks${QS.query(QS.explode({
        onlyPublished,
        startersOnly,
        infraOnly,
        workspaceId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List stacks workspaces view
 */
export function getStackWorkspaces({ studioSlug, stackSlug, filter, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/workspaces${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List stacks workspaces details view
 */
export function getStackWorkspaceDetailView({ studioSlug, stackSlug, workspaceId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/workspace/${encodeURIComponent(workspaceId)}/stack-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * list starters in a stack
 */
export function listStartersInStack({ studioSlug, stackSlug, semanticVersion, $type, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/starters${QS.query(QS.explode({
        semanticVersion,
        "type": $type
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get unused stack versions
 */
export function getUnusedStackVersions({ studioSlug, stackSlug, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/not-in-use${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Stack Modal View Summary
 */
export function stackModalViewSummary({ studioSlug, stackSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/${encodeURIComponent(stackSlug)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * Get a stack documentation
 */
export function getStackDoc({ studioSlug, documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/stacks/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * List versions of a plugin
 */
export function listVersionsOfPlugin({ studioSlug, pluginSlug, appAllowed, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions${QS.query(QS.explode({
        appAllowed
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get plugins requirements
 */
export function getRequirements({ studioSlug, pluginSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions/${encodeURIComponent(version)}/requirements`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a plugin by version
 */
export function downloadPlugin({ studioSlug, pluginSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download a plugin by version (base64 response version)
 */
export function downloadPluginBase64({ studioSlug, pluginSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/versions/${encodeURIComponent(version)}/download/base64`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get plugin version
 */
export function getPlugin({ studioSlug, pluginSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/version${QS.query(QS.explode({
        version
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List all starters that use a given plugin
 */
export function getStarterUsesPlugin({ studioSlug, pluginSlug, filter, $type, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/starters${QS.query(QS.explode({
        filter,
        "type": $type,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get starters that use a plugin
 */
export function getStarterStackVersionsAndPluginsVersions({ studioSlug, pluginSlug, starterSlug, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/starter/${encodeURIComponent(starterSlug)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List all Stacks tha uses a given plugin
 */
export function getStackUsesPlugin({ studioSlug, pluginSlug, filter, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/stacks${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugin versions by stack
 */
export function getPluginVersions({ studioSlug, pluginSlug, stackId, xWorkspaceId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/stack/${encodeURIComponent(stackId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Plugin Infrastructure View
 */
export function getPluginInfrastructureView({ studioSlug, pluginSlug, filter, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/shared-infra${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get a list of environments associated to a given infrastructure that uses a plugin
 */
export function getInfrastructureEnvironmentsUsesPlugin({ studioSlug, pluginSlug, infraId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/shared-infra/${encodeURIComponent(infraId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List all plugin view of usage insights
 */
export function getGetPluginView({ studioSlug, pluginSlug, studio, filter, $type, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/plugins${QS.query(QS.explode({
        studio,
        filter,
        "type": $type,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugins versions that depend on a plugin
 */
export function getDependentPluginsVersions({ studioSlug, pluginSlug, pluginId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/plugin/${encodeURIComponent(pluginId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugin versions that are not in use
 */
export function getPluginVersionsNotInUse({ studioSlug, pluginSlug, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/not-in-use${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Usage monitor get a summary of usage by given plugin
 */
export function getPluginModalView({ studioSlug, pluginSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * List all Applications that uses a given plugin
 */
export function getApplicationsUsesPlugin({ studioSlug, pluginSlug, filter, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/applications${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * Usage monitor get a application view details by plugin
 */
export function getApplicationDetailsView({ studioSlug, pluginSlug, applicationId, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/${encodeURIComponent(pluginSlug)}/application/${encodeURIComponent(applicationId)}/plugin-versions${QS.query(QS.explode({
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List plugin technologies
 */
export function listPluginTechnologies({ studioSlug, xWorkspaceId, filterForStack }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/technologies${QS.query(QS.explode({
        filterForStack
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get a plugin documentation
 */
export function getPluginDoc({ studioSlug, documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/plugins/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * List all action versions
 */
export function getAllActionVersions({ studioSlug, actionSlug, status, xWorkspaceId, requiresConnection }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions${QS.query(QS.explode({
        status,
        requiresConnection
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download an action by version
 */
export function downloadAction1({ studioSlug, actionSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download an action by version
 */
export function downloadActionBase64({ studioSlug, actionSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download/base64`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get an action documentation
 */
export function getActionDoc({ studioSlug, documentationId, language, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/actions/docs/${encodeURIComponent(documentationId)}/language/${encodeURIComponent(language)}${QS.query(QS.explode({
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Get a studio by id or slug
 */
export function getStudioByIdOrSlug({ studioIdOrSlug, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioIdOrSlug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get studios from token
 */
export function getStudiosToCreateButton(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/studios/create", {
        ...opts
    }));
}
/**
 * Get a stack version list from its ids
 */
export function getStackVersionListByIds1({ stackVersionIds, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions${QS.query(QS.explode({
        stackVersionIds
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get a stack version from its id
 */
export function getStackVersionById({ stackVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Delete a stack version of type draft or unpublish
 */
export function deleteV1StacksVersionsByStackVersionId({ stackVersionId, deletionType }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}${QS.query(QS.explode({
        deletionType
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Get all workspaces associated with a stack version id
 */
export function getWorkspaces({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspaces`, {
        ...opts
    }));
}
/**
 * Get a stack version displayName and imageUrl
 */
export function getStackVersionWorkspaces({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workspaces/summary`, {
        ...opts
    }));
}
/**
 * Validates the visibility of the given stack version with its studio
 */
export function validateVisibility({ xWorkspaceId, stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/validate-visibility`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Validate a stack version to delete
 */
export function validate({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * Get a starter list from a StackVersion
 */
export function listStarters({ stackVersionId, $type, appAllowed, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters${QS.query(QS.explode({
        "type": $type,
        appAllowed
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get suggestions of version for a publish of stack version
 */
export function getPublishSuggestions({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/publish/suggestions`, {
        ...opts
    }));
}
/**
 * List Plugins by stack version id
 */
export function listPlugins({ stackVersionId, starterType, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins${QS.query(QS.explode({
        starterType
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Stack Version Usage Summary
 */
export function stackVersionUsageSummary({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * List all action versions from a stack version
 */
export function listActions1({ stackVersionId, forPluginVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions${QS.query(QS.explode({
        forPluginVersionId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List stack tags
 */
export function listStackTags({ xWorkspaceId, studioSlug, filter, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/tags${QS.query(QS.explode({
        studioSlug,
        filter,
        size
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List most used stack versions
 */
export function listMostUsedStackVersions({ filter, pageable }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/most-used${QS.query(QS.explode({
        filter,
        pageable
    }))}`, {
        ...opts
    }));
}
/**
 * List plugins version
 */
export function listPlugins1({ studioSlug, pluginVersionId, name, $type, technologies, status, filter, starterType, accountOnly, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins${QS.query(QS.explode({
        studioSlug,
        pluginVersionId,
        name,
        "type": $type,
        technologies,
        status,
        filter,
        starterType,
        accountOnly
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Validate a plugin version to delete
 */
export function validatePluginVersion({ pluginVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * Get a plugin version yaml content
 */
export function getPluginYamlContent({ pluginVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/manifest`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get inputs from a plugin version
 */
export function getInputs2({ pluginVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Plugin Version Usage Summary
 */
export function getPluginVersionUsageSummary({ pluginVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}/in-use/summary`, {
        ...opts
    }));
}
/**
 * Get Plugins Versions by require variable
 */
export function getPluginVersionsByVariable({ variableName, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/variables/${encodeURIComponent(variableName)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * List plugins version by connection
 */
export function listPluginsByConnectionInterface({ xWorkspaceId, connTypeSlug, studioSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/generates/connections/${encodeURIComponent(connTypeSlug)}${QS.query(QS.explode({
        studioSlug
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List reasons to deprecate content
 */
export function listReasons(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/deprecated-reasons", {
        ...opts
    }));
}
/**
 * Get Studio and Content data from Content Type and Content ID
 */
export function getContent({ contentType, contentIdentifier, studioSlug, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contents${QS.query(QS.explode({
        contentType,
        contentIdentifier,
        studioSlug,
        accountId
    }))}`, {
        ...opts
    }));
}
/**
 * List contents evaluation
 */
export function listContentsEvaluation({ filter, page, size, statusRevision }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contents-evaluation${QS.query(QS.explode({
        filter,
        page,
        size,
        statusRevision
    }))}`, {
        ...opts
    }));
}
/**
 * Content evaluation summary details
 */
export function contentEvaluationDetails({ contentEvaluationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contents-evaluation/${encodeURIComponent(contentEvaluationId)}`, {
        ...opts
    }));
}
/**
 * List discussion messages
 */
export function getDiscussionMessages({ contentEvaluationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contents-evaluation/${encodeURIComponent(contentEvaluationId)}/discussion`, {
        ...opts
    }));
}
/**
 * Get Connection Interface Type by Id
 */
export function getConnectionInterfaceType1({ connectionInterfaceTypeIdOrSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/connection-interface-types/${encodeURIComponent(connectionInterfaceTypeIdOrSlug)}`, {
        ...opts
    }));
}
/**
 * List of actions
 */
export function listActions2({ studioSlug, name, $type, technologies, status, filter, accountOnly, xWorkspaceId, requiresConnection }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions${QS.query(QS.explode({
        studioSlug,
        name,
        "type": $type,
        technologies,
        status,
        filter,
        accountOnly,
        requiresConnection
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Get Action by actionVersionId
 */
export function getActionVersionById({ actionVersionId, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Remove an action version
 */
export function deleteActionVersion({ actionVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Validate an action version to delete
 */
export function validateActionVersion({ actionVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}/unpublish/validate`, {
        ...opts
    }));
}
/**
 * List inputs of an action version
 */
export function getListOfInputs({ actionVersionId, xWorkspaceId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/versions/${encodeURIComponent(actionVersionId)}/inputs`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId,
            "account-id": accountId
        })
    }));
}
/**
 * Get Actions Versions by require variable
 */
export function getActionVersionsByVariable({ variableName, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/actions/variables/${encodeURIComponent(variableName)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get accountInfo
 */
export function getAccountInfo(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts", {
        ...opts
    }));
}
/**
 * List all action versions
 */
export function getAllActionVersions1({ accountSlug, studioSlug, actionSlug, status, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(accountSlug)}/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions${QS.query(QS.explode({
        status
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * Download an action by version
 */
export function downloadAction2({ accountSlug, studioSlug, actionSlug, version, xWorkspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(accountSlug)}/studios/${encodeURIComponent(studioSlug)}/actions/${encodeURIComponent(actionSlug)}/versions/${encodeURIComponent(version)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "x-workspace-id": xWorkspaceId
        })
    }));
}
/**
 * List account documentations
 */
export function listDocs({ accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(accountId)}/docs`, {
        ...opts
    }));
}
/**
 * Remove a workflow version
 */
export function unpublishWorkflowVersion({ workflowVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workflows/versions/${encodeURIComponent(workflowVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove workspace of given studio
 */
export function delWorkspace({ studioSlug, workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/studios/${encodeURIComponent(studioSlug)}/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove a workflow from a Stack Version
 */
export function removeStackWorkflow({ stackVersionId, workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Deletes a Starter from a StackVersion
 */
export function deleteStarter({ stackVersionId, starterId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/starters/${encodeURIComponent(starterId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete plugin by id
 */
export function deletePlugin({ stackVersionId, pluginVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove an associated action from a plugin
 */
export function removeActionFromPlugin({ stackVersionId, pluginVersionId, actionVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/actions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove an action from a stack version
 */
export function deleteAction({ stackVersionId, actionVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stacks/versions/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove a plugin version
 */
export function deletePluginVersion({ pluginVersionId, $override }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugins/versions/${encodeURIComponent(pluginVersionId)}${QS.query(QS.explode({
        "override": $override
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=content.js.map