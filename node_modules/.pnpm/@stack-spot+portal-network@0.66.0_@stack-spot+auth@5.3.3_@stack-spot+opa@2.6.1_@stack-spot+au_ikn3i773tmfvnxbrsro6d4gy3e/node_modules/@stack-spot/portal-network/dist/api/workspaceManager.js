/**
 * Workspace Manager API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://workspace-workspace-manager.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://workspace-workspace-manager.dev.stackspot.com"
};
export function workflowWorkspaceControllerfindWorkflowStackContext({ workspaceId, stackId, workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
export function workflowWorkspaceControllersaveWorkflowWorkspaceContext({ workspaceId, stackId, workflowId, workflowContextSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowContextSaveRequest
    })));
}
export function workspaceStackControllerrefreshStacksInWorkspace({ workspaceId, addStackInWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/-/update`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: addStackInWorkspaceRequest
    })));
}
export function connectionInterfaceControllerupdateConnectionInterfaceAttributes({ workspaceId, connectionInterfaceId, connectionInterfaceAttributesByEnv }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}/attributes`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: connectionInterfaceAttributesByEnv
    })));
}
export function contextControllergetConsolidatedPluginInputs({ workspaceId, stackVersionId, pluginVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllerupsertPluginWorkspaceContext({ workspaceId, stackVersionId, pluginVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function contextControllerupsertWorkspaceActionsInputContext({ workspaceId, stackVersionId, actionVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function contextControllergetAccountPluginInputs({ stackVersionId, pluginVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllerupsertPluginAccountContext({ stackVersionId, pluginVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function contextControllerupsertAccountActionsInputContext({ stackVersionId, actionVersionId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionVersionId)}/inputs`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
export function workflowAccountControllerfindWorkflowSettings({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/settings`, {
        ...opts
    }));
}
export function workflowAccountControllersaveWorkflowSettings({ workflowId, workflowSettingsSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/workflows/${encodeURIComponent(workflowId)}/settings`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowSettingsSaveRequest
    })));
}
export function workflowAccountControllerfindWorkflowContext({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
export function workflowAccountControllersaveWorkflowContext({ workflowId, workflowContextSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowContextSaveRequest
    })));
}
export function workflowAccountControllergetWorkflowActions({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/actions`, {
        ...opts
    }));
}
export function workflowAccountControllerupdateWorkflowActions({ workflowId, workflowActionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/workflows/${encodeURIComponent(workflowId)}/actions`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowActionsRequest
    })));
}
export function workflowStackControllerfindWorkflowStackContext({ stackId, workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
export function workflowStackControllersaveWorkflowStackContext({ stackId, workflowId, workflowContextSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workflowContextSaveRequest
    })));
}
export function sharedInfraControllerV2CreateSharedInfra({ workspaceId, createSharedRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createSharedRequest
    })));
}
export function applicationControllerV2CreateApp({ workspaceId, createAppRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createAppRequest
    })));
}
export function contentWorkflowControllercreateSharedInfraThroughWorkflow({ workspaceId, workflowVersionId, contentWorkflowSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowVersionId)}/shared-infra`, oazapfts.json({
        ...opts,
        method: "POST",
        body: contentWorkflowSaveRequest
    })));
}
export function contentWorkflowControllercreateApplicationThroughWorkflow({ workspaceId, workflowVersionId, contentWorkflowSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowVersionId)}/applications`, oazapfts.json({
        ...opts,
        method: "POST",
        body: contentWorkflowSaveRequest
    })));
}
export function workspaceStackControllerlistStacks({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks`, {
        ...opts
    }));
}
export function workspaceStackControlleraddStacksInWorkspace({ workspaceId, addStackInWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addStackInWorkspaceRequest
    })));
}
export function connectionInterfaceControllercreateConnectionInterface({ workspaceId, createConnectionInterfaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceRequest
    })));
}
export function contextControllerimportContextInWorkspace({ workspaceId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/import-context`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
export function contextControllerimportContextInAccount({ body }, opts) {
    return oazapfts.ok(oazapfts.fetchText("/v1/contexts/account/stacks/import-context", oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
export function workflowAccountControllercreateAccountWorkflow({ accountWorkflowCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/workflows", oazapfts.json({
        ...opts,
        method: "POST",
        body: accountWorkflowCreateRequest
    })));
}
export function managerRunControllerarchiveApplication({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/archive`, {
        ...opts,
        method: "PATCH"
    }));
}
export function sharedInfraControllerV2GetSharedInfraAppliedPlugins({ workspaceId, sharedInfraId, envName, pluginType, containsLinks }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/plugins${QS.query(QS.explode({
        pluginType,
        containsLinks
    }))}`, {
        ...opts
    }));
}
export function sharedInfraControllerV2GetSharedInfraActivities({ workspaceId, sharedInfraId, envName, $type, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type,
        page,
        size
    }))}`, {
        ...opts
    }));
}
export function applicationControllerV2GetApplicationAppliedPlugins({ workspaceId, applicationId, envName, pluginType, containsLinks }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/plugins${QS.query(QS.explode({
        pluginType,
        containsLinks
    }))}`, {
        ...opts
    }));
}
export function applicationControllerV2GetApplicationActivities({ workspaceId, applicationId, envName, $type, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type,
        page,
        size
    }))}`, {
        ...opts
    }));
}
export function contextStackControllergetWorkspaceContext({ workspaceId, stackVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextgetConsolidatedPluginInputsWithConnectionInterfaces({ workspaceId, stackVersionId, pluginVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}`, {
        ...opts
    }));
}
export function contextgetConsolidatedPluginInputs({ workspaceId, stackVersionId, pluginVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextActionControllergetStackActionInputsInWorkspaceContext({ workspaceId, stackVersionId, actionsVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextgetAccountPluginInputs({ stackVersionId, pluginVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/plugins/${encodeURIComponent(pluginVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextActionControllergetStackActionInputsInAccountContext({ stackVersionId, actionsVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function workspaceControllergetWorkspaces({ name, aclOnly, accountId, page, size, sortBy, sortDir, tabFilter }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces${QS.query(QS.explode({
        name,
        aclOnly,
        page,
        size,
        sortBy,
        sortDir,
        tabFilter
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
export function workflowWorkspaceControllerlistStacks({ workspaceId, workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowId)}/stacks`, {
        ...opts
    }));
}
export function workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType({ workspaceId, stackId, workflowType }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowType)}`, {
        ...opts
    }));
}
export function workspaceStackControllerlistStacksContext({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/with-context`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfra({ workspaceId, stackId, stackVersionId, name, page, size, sortBy, sortDir }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra${QS.query(QS.explode({
        stackId,
        stackVersionId,
        name,
        page,
        size,
        sortBy,
        sortDir
    }))}`, {
        ...opts
    }));
}
export function sharedInfraControllergetApplicationLinks({ workspaceId, sharedInfraId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/links`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfraAppliedPlugins({ workspaceId, sharedInfraId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/details`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfraActivities({ workspaceId, sharedInfraId, envName, $type }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
export function sharedInfraControllergetSharedInfraFilters({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/filters`, {
        ...opts
    }));
}
export function workspacePluginControllerlistPluginsFromWorkspace({ workspaceId, typePlugin }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/plugins${QS.query(QS.explode({
        typePlugin
    }))}`, {
        ...opts
    }));
}
export function connectionInterfaceControllergetConnectionInterfaceDetails({ workspaceId, connectionInterfaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}`, {
        ...opts
    }));
}
export function availableConnectionInterfaceControllergetAvailableConnectionInterfaces({ workspaceId, typeName, automaticallyGenerated }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/available-connection-interfaces${QS.query(QS.explode({
        typeName,
        automaticallyGenerated
    }))}`, {
        ...opts
    }));
}
export function applicationControllergetApplications({ workspaceId, stackVersionId, stackId, name, page, size, sortBy, sortDir }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications${QS.query(QS.explode({
        stackVersionId,
        stackId,
        name,
        page,
        size,
        sortBy,
        sortDir
    }))}`, {
        ...opts
    }));
}
export function applicationControllergetApplicationLinks({ workspaceId, applicationId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/links`, {
        ...opts
    }));
}
export function applicationControllergetApplicationDetails({ workspaceId, applicationId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/details`, {
        ...opts
    }));
}
export function applicationControllergetApplicationActivities({ workspaceId, applicationId, envName, $type }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(envName)}/activities${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
export function applicationControllergetApplicationFilters({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/filters`, {
        ...opts
    }));
}
export function accountSharedInfraControllergetAccountSharedInfraPage({ page, size, sortBy, sortDir, name, tab, stackVersionId, stackId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/shared-infra${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir,
        name,
        tab,
        stackVersionId,
        stackId
    }))}`, {
        ...opts
    }));
}
export function accountSharedInfraControllergetAccountSharedInfraFilters(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/shared-infra/filters", {
        ...opts
    }));
}
export function contextWorkflowControllergetConsolidatedWorkflowInputs({ workspaceId, stackVersionId, workflowVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowVersionId)}`, {
        ...opts
    }));
}
export function contextWorkflowControllergetWorkspaceWorkflowInputs({ workspaceId, stackVersionId, workflowVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllergetStackActionInputsInWorkspaceContext({ workspaceId, stackVersionId, actionsVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextWorkflowControllergetAccountWorkflowInputs({ stackVersionId, workflowVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/workflows/${encodeURIComponent(workflowVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function contextControllergetStackActionInputsInAccountContext({ stackVersionId, actionsVersionId, envName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/contexts/account/stacks/${encodeURIComponent(stackVersionId)}/actions/${encodeURIComponent(actionsVersionId)}/inputs${QS.query(QS.explode({
        envName
    }))}`, {
        ...opts
    }));
}
export function accountApplicationControllergetAccountApplicationPage({ page, size, sortBy, sortDir, tab, name, stackVersionId, stackId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir,
        tab,
        name,
        stackVersionId,
        stackId
    }))}`, {
        ...opts
    }));
}
export function accountApplicationControllergetAccountApplicationsFilters(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/applications/filters", {
        ...opts
    }));
}
export function accountStackControllerlistStacksByAccountWithWorkflow({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks${QS.query(QS.explode({
        workspaceId
    }))}`, {
        ...opts
    }));
}
export function accountStackControllerlistWorkflowsByStack({ stackId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows`, {
        ...opts
    }));
}
export function accountStackControllerlistMostUsedStacksInAppsAndSharedInfras({ accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/stacks/most-used", {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
export function accountStackControllerlistVersionsWithContext({ stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stackVersionId/${encodeURIComponent(stackVersionId)}`, {
        ...opts
    }));
}
export function workspaceControllerdelete({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
export function workspaceStackControllerdeleteStacksInWorkspace({ workspaceId, stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
export function managerRunControllerdeleteSharedInfra({ workspaceId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
export function managerRunControllerdeleteApplication({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=workspaceManager.js.map