/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://cloud-services-cloud-services-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://cloud-services-cloud-services-api.dev.stackspot.com"
};
/**
 * Update a GuardRail
 */
export function updateGuardrail({ guardrailUpdate }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/guardrail", oazapfts.json({
        ...opts,
        method: "PUT",
        body: guardrailUpdate
    })));
}
/**
 * Create a GuardRail
 */
export function createGuardrail({ guardrailRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/guardrail", oazapfts.json({
        ...opts,
        method: "POST",
        body: guardrailRequest
    })));
}
/**
 * Update a baseline
 */
export function updateBaseline({ baselineId, baselineUpdate }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/admin/baseline/${encodeURIComponent(baselineId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: baselineUpdate
    })));
}
/**
 * Retrieves billing account summaries
 */
export function listBillingAccounts({ stackSpotAccountId, showDeleted }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/finops/billing-accounts${QS.query(QS.explode({
        stackSpotAccountId,
        showDeleted
    }))}`, {
        ...opts
    }));
}
/**
 * Create new billing account
 */
export function createBillingAccount({ billingAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/finops/billing-accounts", oazapfts.json({
        ...opts,
        method: "POST",
        body: billingAccountRequest
    })));
}
/**
 * Retrieves cost and usage metrics for your account.
 */
export function processAllocationCostRequest({ allocationCostRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/finops/allocation-cost", oazapfts.json({
        ...opts,
        method: "POST",
        body: allocationCostRequest
    })));
}
/**
 * Enable a GuardRail in any level
 */
export function enableGuardrail({ account, workspace, env, enable, guardrailId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/guardrail/${encodeURIComponent(guardrailId)}${QS.query(QS.explode({
        account,
        workspace,
        env,
        enable
    }))}`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Register a cloud offer for a Stackspot Account.
 */
export function registerOffer({ registerOfferRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/cloud-offer", oazapfts.json({
        ...opts,
        method: "POST",
        body: registerOfferRequest
    })));
}
export function createNewContract({ createContractRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/finops/contract", oazapfts.json({
        ...opts,
        method: "POST",
        body: createContractRequest
    })));
}
/**
 * Links services to a Stackspot account, allowing users from that account to see resources in CRE
 */
export function linkResourceTypesToStackspotAccount({ linkResourceTypeToStackspotAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/cloud-resource/link-service-to-stackspot-account", oazapfts.json({
        ...opts,
        method: "POST",
        body: linkResourceTypeToStackspotAccountRequest
    })));
}
/**
 * Return all baseline registered
 */
export function getBaselines(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/baseline", {
        ...opts
    }));
}
/**
 * Create a baseline
 */
export function createBaseline({ baselineRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/baseline", oazapfts.json({
        ...opts,
        method: "POST",
        body: baselineRequest
    })));
}
/**
 * Retrieves details from a billing account
 */
export function getBillingAccountById({ stackSpotAccountId, billingAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/finops/billing-accounts/${encodeURIComponent(billingAccountId)}${QS.query(QS.explode({
        stackSpotAccountId
    }))}`, {
        ...opts
    }));
}
/**
 * Delete a billing account
 */
export function deleteBillingAccountById({ stackSpotAccountId, billingAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/finops/billing-accounts/${encodeURIComponent(billingAccountId)}${QS.query(QS.explode({
        stackSpotAccountId
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Get all GuardRails
 */
export function getGuardrails({ account, workspace, env }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/guardrail${QS.query(QS.explode({
        account,
        workspace,
        env
    }))}`, {
        ...opts
    }));
}
/**
 * Get overview of costs, with current month, last month and three last month
 */
export function getCostOverview({ sortBy, sortOrder }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/reports${QS.query(QS.explode({
        sortBy,
        sortOrder
    }))}`, {
        ...opts
    }));
}
export function downloadCsvFiles({ year, month }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/reports/download${QS.query(QS.explode({
        year,
        month
    }))}`, {
        ...opts
    }));
}
/**
 * List all tags.
 */
export function getAllTags({ stackspotAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-list-tags${QS.query(QS.explode({
        stackspotAccountId
    }))}`, {
        ...opts
    }));
}
/**
 * lists all subTags of a given tag with their respective costs.
 */
export function getAllocationCostTagValues({ masterAccount, tag, startDate, endDate, sort, page, pageSize }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-list-tag-values${QS.query(QS.explode({
        masterAccount,
        tag,
        startDate,
        endDate,
        sort,
        page,
        pageSize
    }))}`, {
        ...opts
    }));
}
/**
 * List all services of a subtag. Each service contains name and cost value.
 */
export function getAllocationCostServices({ masterAccount, tag, tagValueName, startDate, endDate, sort, page, pageSize }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-list-services${QS.query(QS.explode({
        masterAccount,
        tag,
        tagValueName,
        startDate,
        endDate,
        sort,
        page,
        pageSize
    }))}`, {
        ...opts
    }));
}
/**
 * list service details
 */
export function getAllocationCostServiceDetails({ masterAccount, tag, tagValueName, serviceName, startDate, endDate, $type, filter, page, pageSize, sort }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-list-service-details${QS.query(QS.explode({
        masterAccount,
        tag,
        tagValueName,
        serviceName,
        startDate,
        endDate,
        "type": $type,
        filter,
        page,
        pageSize,
        sort
    }))}`, {
        ...opts
    }));
}
/**
 * list all master accounts
 */
export function getAllMasterAccount({ stackspotAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-list-master-accounts${QS.query(QS.explode({
        stackspotAccountId
    }))}`, {
        ...opts
    }));
}
/**
 * list filters related to the type
 */
export function getAllocationCostFilters({ $type }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-filters${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
/**
 * returns the detailed csv with the masterAccount CUR information
 */
export function getAllocationCostCsv({ stackspotAccountId, masterAccount, startDate, endDate }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/finops/allocation-cost-csv${QS.query(QS.explode({
        stackspotAccountId,
        masterAccount,
        startDate,
        endDate
    }))}`, {
        ...opts
    }));
}
/**
 * List Instances of a particular Service Resource running in a Workspace
 */
export function listInstances({ workspaceId, resourceId, pageToken, search }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-resource/workspace/${encodeURIComponent(workspaceId)}/resource/${encodeURIComponent(resourceId)}/instance${QS.query(QS.explode({
        pageToken,
        search
    }))}`, {
        ...opts
    }));
}
/**
 * List Managed Services
 */
export function listServices(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/cloud-resource/service", {
        ...opts
    }));
}
/**
 * A detailed description of a particular Instance
 */
export function getInstanceDetails({ cloudAccountId, resourceId, instanceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-resource/cloud-account/${encodeURIComponent(cloudAccountId)}/resource/${encodeURIComponent(resourceId)}/instance/${encodeURIComponent(instanceId)}`, {
        ...opts
    }));
}
/**
 * Get the cloud offer of a Stackspot Account.
 */
export function getOfferOfAccount({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-offer/account/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Get pages alerts from workspace and environment. That alerts can be filtered
 */
export function getAlerts({ workspace, env, pillar, severity, status, search, sort, page, pageSize }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/alerts${QS.query(QS.explode({
        workspace,
        env,
        pillar,
        severity,
        status,
        search,
        sort,
        page,
        pageSize
    }))}`, {
        ...opts
    }));
}
export function downloadDataByAccountId({ stackspotAccountId, year, month }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/admin/finops/reports/download${QS.query(QS.explode({
        stackspot_account_id: stackspotAccountId,
        year,
        month
    }))}`, {
        ...opts
    }));
}
/**
 * List available services
 */
export function listServices1(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/cloud-resource/service", {
        ...opts
    }));
}
//# sourceMappingURL=cloudServices.js.map