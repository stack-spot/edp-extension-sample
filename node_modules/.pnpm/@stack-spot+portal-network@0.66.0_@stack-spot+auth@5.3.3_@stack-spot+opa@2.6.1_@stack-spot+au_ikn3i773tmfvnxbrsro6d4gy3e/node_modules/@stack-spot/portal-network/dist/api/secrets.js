/**
 * Workspace Secrets API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://workspace-workspace-secrets-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://workspace-workspace-secrets-api.dev.stackspot.com"
};
/**
 * Get a Secret Key value.
 */
export function getSecretValue({ key, executionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/values/${encodeURIComponent(key)}${QS.query(QS.explode({
        executionId
    }))}`, {
        ...opts
    }));
}
/**
 * Edit a Secret Key value.
 */
export function updateSecretValue({ key, updateSecretValueRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/values/${encodeURIComponent(key)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateSecretValueRequest
    })));
}
/**
 * Delete a Secret Key value.
 */
export function deleteSecretValue({ key }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/values/${encodeURIComponent(key)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Edit a Secret Key.
 */
export function editKey({ key, editKeyRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/keys/${encodeURIComponent(key)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: editKeyRequest
    })));
}
/**
 * Delete a Secret Key.
 */
export function deleteKey({ key }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/keys/${encodeURIComponent(key)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * List all Secret Keys.
 */
export function getAll1(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/secrets/keys", {
        ...opts
    }));
}
/**
 * Create a new Secret Key.
 */
export function createKey({ createKeyRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/secrets/keys", oazapfts.json({
        ...opts,
        method: "POST",
        body: createKeyRequest
    })));
}
/**
 * Encrypt a value.
 */
export function encrypt({ encryptRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/secrets/encryption/encrypt", oazapfts.json({
        ...opts,
        method: "POST",
        body: encryptRequest
    })));
}
/**
 * Decrypt a value.
 */
export function decrypt({ executionId, decryptRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/encryption/decrypt${QS.query(QS.explode({
        executionId
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: decryptRequest
    })));
}
/**
 * List all configured Secret Keys values.
 */
export function getAll({ executionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/secrets/values${QS.query(QS.explode({
        executionId
    }))}`, {
        ...opts
    }));
}
/**
 * List all defined and not defined secret keys by the user.
 */
export function getAvailability(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/secrets/availability", {
        ...opts
    }));
}
//# sourceMappingURL=secrets.js.map