/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type ProductResponse = {
    id: string;
    accountId?: string;
    name: string;
    description: string;
    updatedAt: string;
    createdAt: string;
    workspaceId: string;
    status: string;
    imageUrl?: string;
};
export type StatusType = number;
export type ProductRequest = {
    name?: string;
    description?: string;
    imageBase64?: string;
};
export type ClientApplicationResponse = {
    id?: string;
    name?: string;
    displayName?: string;
    description?: string;
};
export type ClientApplicationRequest = {
    name: string;
    displayName: string;
    description: string;
};
export type ProductWithApiAndEnvironmentRequest = {
    name: string;
    description: string;
    environments?: string[];
    apis?: string[];
    imageBase64?: string;
};
export type CatalogApiByEnvResponse = {
    updatedAt: string;
    createdAt: string;
    environmentId: string;
    status: string;
    version: string;
    gatewayUrl?: string;
    hasOpenApiContent: boolean;
};
export type CatalogApiResponse = {
    id: string;
    name: string;
    description: string;
    workspaceId: string;
    connectionInterfaceSlug?: string;
    byEnvironment: CatalogApiByEnvResponse[];
};
export type CatalogApiDefinitionRequest = {
    environmentId: string;
    gatewayUrl: string;
    openApiContent: string;
};
export type CatalogApiRequest = {
    name: string;
    description: string;
    connectionInterfaceSlug?: string;
    definitions?: CatalogApiDefinitionRequest[];
};
export type CatalogApiDefinitionResponse = {
    apiId: string;
    updatedAt: string;
    createdAt: string;
    environmentId: string;
    status: string;
    version: string;
    basicInfo?: CatalogApiResponse;
};
export type AccessRequestRequest = {
    status: "GRANTED" | "DENIED";
    oauthClientId?: string;
};
export type AccessRequestRequestWrite = {
    status: "GRANTED" | "DENIED";
    oAuthClientId?: string;
    oauthClientId?: string;
};
export type AccessRequestBatchRequest = {
    status: "GRANTED" | "DENIED";
    accessRequests: string[];
    oauthClientId?: string;
};
export type AccessRequestBatchRequestWrite = {
    status: "GRANTED" | "DENIED";
    oAuthClientId?: string;
    accessRequests: string[];
    oauthClientId?: string;
};
export type CatalogApiDetailsDto = {
    id: string;
    updatedAt: string;
    createdAt: string;
    environmentId: string;
    status: string;
    version: string;
    name: string;
    description: string;
    workspaceId: string;
    connectionInterfaceSlug?: string;
};
export type EndpointParameterResponse = {
    name: string;
    "type"?: string;
    description?: string;
    required?: boolean;
    "in"?: string;
    format?: string;
};
export type BodySchema = {
    name?: string;
    "type"?: string;
    description?: string;
    format?: string;
};
export type EndpointResponseResponse = {
    code?: string;
    description?: string;
    responseExample?: {
        [key: string]: object;
    };
    schema?: BodySchema[];
};
export type CatalogApiMethodResponse = {
    "type": string;
    endpointName: string;
    endpointUrl: string;
    name: string;
    description: string;
    endpointParameters: EndpointParameterResponse[];
    curlExample: string;
    bodyExample?: object;
    responses: EndpointResponseResponse[];
    produces?: string[];
    consumes?: string[];
};
export type CatalogApiMethodsResponse = CatalogApiMethodResponse[];
export type SimpleProductResponse = {
    id: string;
    accountId?: string;
    name: string;
    description: string;
    workspaceId: string;
    status: string;
    imageUrl?: string;
    environments: string[];
};
export type CatalogApiDetailsResponse = {
    id: string;
    updatedAt: string;
    createdAt: string;
    environmentId: string;
    status: string;
    version: string;
    name: string;
    description: string;
    workspaceId: string;
};
export type SimpleApiResponse = {
    id: string;
    name: string;
    description: string;
    workspaceId: string;
    accountId?: string;
    environments: string[];
};
export type CatalogApiAccessRequestResponse = {
    id: string;
    environmentId: string;
    authType: string;
    status: string;
    updatedAt: string;
    createdAt: string;
    grantedAt?: string;
    grantedBy?: string;
    updatedBy?: string;
    clientApplication: {
        [key: string]: object;
    };
    api: {
        [key: string]: object;
    };
    oauthClientId: string;
};
export type CatalogApiAccessRequestResponseWrite = {
    id: string;
    environmentId: string;
    oAuthClientId?: string;
    authType: string;
    status: string;
    updatedAt: string;
    createdAt: string;
    grantedAt?: string;
    grantedBy?: string;
    updatedBy?: string;
    clientApplication: {
        [key: string]: object;
    };
    api: {
        [key: string]: object;
    };
    oauthClientId: string;
};
export type PartnerProductResponse = {
    id: string;
    accountId?: string;
    name: string;
    description: string;
    workspaceId: string;
    status?: string;
    imageUrl?: string;
    environments: string[];
};
export type PartnerApiResponse = {
    id: string;
    accountId?: string;
    name: string;
    description: string;
    workspaceId: string;
    environments: string[];
};
export type ClientApplicationWithStatusResponse = {
    id?: string;
    name?: string;
    displayName?: string;
    description?: string;
    lastAccessRequestStatus?: "DENIED" | "GRANTED" | "REQUESTED";
};
export type ClientApplicationWithGrantedAccessResponse = {
    id?: string;
    name?: string;
    displayName?: string;
    description?: string;
    clientId: string;
};
export type EnvironmentResponse = {
    id: string;
    name: string;
};
export type HealthzResponse = {
    status: "UP" | "DOWN";
    groups: ("liveness" | "readiness")[];
};
/**
 * Get one product by product_id
 */
export declare function getOne({ workspaceId, productId }: {
    workspaceId: string;
    productId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse>;
/**
 * Update product's name and/or description
 */
export declare function updateProduct({ workspaceId, productId, productRequest }: {
    workspaceId: string;
    productId: string;
    productRequest: ProductRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse>;
/**
 * Get one product by product_id
 */
export declare function deleteProduct({ workspaceId, productId }: {
    workspaceId: string;
    productId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Change product status
 */
export declare function changeProductStatus({ workspaceId, productId, action }: {
    workspaceId: string;
    productId: string;
    action: "publish" | "unpublish";
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * Get Client Application by ID
 */
export declare function getOneClientApplication({ clientApplicationId }: {
    clientApplicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ClientApplicationResponse>;
/**
 * Update a Client Application
 */
export declare function updateClientApplication({ clientApplicationId, clientApplicationRequest }: {
    clientApplicationId: string;
    clientApplicationRequest: ClientApplicationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<string>;
/**
 * Delete a Client Application by ID
 */
export declare function deleteClientApplication({ clientApplicationId }: {
    clientApplicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all products by workspace Id
 */
export declare function getAll({ workspaceId }: {
    workspaceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse[]>;
/**
 * save product in a workspace Id
 */
export declare function saveProduct({ workspaceId, productWithApiAndEnvironmentRequest }: {
    workspaceId: string;
    productWithApiAndEnvironmentRequest: ProductWithApiAndEnvironmentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse>;
export declare function linkProductApi({ workspaceId, productId, apiId }: {
    workspaceId: string;
    productId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
export declare function unlinkProductApi({ workspaceId, productId, apiId }: {
    workspaceId: string;
    productId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * Get one API by application id
 */
export declare function getOne1({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse>;
/**
 * save API in a workspace Id
 */
export declare function saveApi({ workspaceId, applicationId, catalogApiRequest }: {
    workspaceId: string;
    applicationId: string;
    catalogApiRequest: CatalogApiRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse>;
/**
 * delete one API by application id
 */
export declare function deleteApi({ workspaceId, applicationId }: {
    workspaceId: string;
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * get API definition
 */
export declare function getApiDefinition({ workspaceId, applicationId, environmentId }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiDefinitionResponse>;
/**
 * save API definition in a workspace Id
 */
export declare function saveApiDefinition({ workspaceId, applicationId, environmentId, gatewayUrl, body }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    gatewayUrl?: string;
    body: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * update API definition in a workspace Id
 */
export declare function updateApiDefinition({ workspaceId, applicationId, environmentId, gatewayUrl, connectionInterfaceSlug, body }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    gatewayUrl?: string;
    connectionInterfaceSlug?: string;
    body?: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * Get all apis by workspace Id
 */
export declare function getAll1({ workspaceId, offset, limit, status }: {
    workspaceId: string;
    offset?: number;
    limit?: number;
    status?: "DRAFT" | "PUBLISHED" | "UNPUBLISHED" | "DELETED";
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse[]>;
/**
 * save API in a workspace Id
 */
export declare function saveApi1({ workspaceId, catalogApiRequest }: {
    workspaceId: string;
    catalogApiRequest: CatalogApiRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse>;
/**
 * get API definition
 */
export declare function getApiDefinition1({ workspaceId, apiId, environmentId }: {
    workspaceId: string;
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiDefinitionResponse>;
/**
 * save API definition in a workspace Id
 */
export declare function saveNewApiDefinition({ workspaceId, apiId, environmentId, gatewayUrl, body }: {
    workspaceId: string;
    apiId: string;
    environmentId: string;
    gatewayUrl?: string;
    body: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * update API definition in a workspace Id
 */
export declare function updateApiDefinition1({ workspaceId, apiId, environmentId, gatewayUrl, connectionInterfaceSlug, body }: {
    workspaceId: string;
    apiId: string;
    environmentId: string;
    gatewayUrl?: string;
    connectionInterfaceSlug?: string;
    body?: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * Grant partner access permission to access the product
 */
export declare function givePermission({ partnerAccountId, environmentId, productId }: {
    partnerAccountId: string;
    environmentId: string;
    productId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Remove partner access permission from the product
 */
export declare function removePermission({ partnerAccountId, environmentId, productId }: {
    partnerAccountId: string;
    environmentId: string;
    productId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Grant partner access permission to access the API
 */
export declare function givePermission1({ partnerAccountId, environmentId, apiId }: {
    partnerAccountId: string;
    environmentId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Remove partner access permission from the API
 */
export declare function removePermission1({ partnerAccountId, environmentId, apiId }: {
    partnerAccountId: string;
    environmentId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Request access to many client application by Product
 */
export declare function createAccessRequestByProduct({ environmentId, productId, body }: {
    environmentId: string;
    productId: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Request access to many client application by Api
 */
export declare function createAccessRequestByApi({ environmentId, apiId, body }: {
    environmentId: string;
    apiId: string;
    body: string[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update access request by status and clientID
 */
export declare function updateAccessRequest({ environmentId, accessRequestId, accessRequestRequest }: {
    environmentId: string;
    accessRequestId: string;
    accessRequestRequest: AccessRequestRequestWrite;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all Client Applications from Account
 */
export declare function getClientApplication(opts?: Oazapfts.RequestOpts): Promise<ClientApplicationResponse[]>;
/**
 * Save a new Client Application for Account
 */
export declare function createClientApplication({ clientApplicationRequest }: {
    clientApplicationRequest: ClientApplicationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<string>;
/**
 * Update batch access request by status and clientID
 */
export declare function updateAccessRequestBatch({ accessRequestBatchRequest }: {
    accessRequestBatchRequest: AccessRequestBatchRequestWrite;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update API status by application id
 */
export declare function updateApiStatusByWorkspaceAndApplicationId({ workspaceId, applicationId, environmentId, action }: {
    workspaceId: string;
    applicationId: string;
    environmentId: string;
    action: "PUBLISHED" | "UNPUBLISHED" | "DRAFT";
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update API status
 */
export declare function updateApiStatusByWorkspaceAndApiId({ workspaceId, apiId, envId, action }: {
    workspaceId: string;
    apiId: string;
    envId: string;
    action: "PUBLISHED" | "UNPUBLISHED" | "DRAFT";
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
export declare function getApisByProductId({ workspaceId, productId }: {
    workspaceId: string;
    productId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse[]>;
/**
 * Get one API by api_id
 */
export declare function getOne2({ workspaceId, apiId }: {
    workspaceId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse>;
/**
 * Get all products of an API
 */
export declare function getProductsByApiId({ workspaceId, apiId }: {
    workspaceId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse[]>;
/**
 * get API Details
 */
export declare function apiDetails({ workspaceId, apiId, environmentId }: {
    workspaceId: string;
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiDetailsDto>;
/**
 * get API Definition
 */
export declare function getApiWorkspaceMethods({ workspaceId, apiId, environmentId }: {
    workspaceId: string;
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiMethodsResponse>;
/**
 * List all the Account's Products
 */
export declare function getProducts(opts?: Oazapfts.RequestOpts): Promise<SimpleProductResponse[]>;
export declare function getApisByProductId1({ productId, environmentId }: {
    productId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse[]>;
export declare function getApisByProductId2({ productId, environmentId, accountId }: {
    productId: string;
    environmentId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse[]>;
/**
 * Get one product by product_id
 */
export declare function getOneProduct({ accountId, productId, environmentId }: {
    accountId: string;
    productId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse>;
/**
 * Get one product by product_id
 */
export declare function getOneProduct1({ productId, environmentId }: {
    productId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse>;
/**
 * Get all products
 */
export declare function getAllProducts({ accountId, environmentId, limit }: {
    accountId: string;
    environmentId: string;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse[]>;
/**
 * Get all products
 */
export declare function getAllProducts1({ environmentId, limit }: {
    environmentId: string;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse[]>;
/**
 * Get all products of an API
 */
export declare function getProductsByApiId1({ apiId, environmentId, accountId }: {
    apiId: string;
    environmentId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse[]>;
/**
 * Get all products of an API
 */
export declare function getProductsByApiId2({ apiId, environmentId }: {
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProductResponse[]>;
/**
 * get API definition
 */
export declare function getApiMethods({ accountId, apiId, environmentId }: {
    accountId: string;
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiMethodsResponse>;
/**
 * get API definition
 */
export declare function getApiMethods1({ apiId, environmentId }: {
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiMethodsResponse>;
/**
 * get API definition
 */
export declare function getApiDefinition2({ apiId, environmentId, accountId }: {
    apiId: string;
    environmentId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiDetailsResponse>;
/**
 * get API definition
 */
export declare function getApiDefinition3({ apiId, environmentId }: {
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiDetailsResponse>;
/**
 * Get one API by api_id
 */
export declare function getOneApi({ apiId, environmentId }: {
    apiId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse>;
/**
 * Get one API by api_id
 */
export declare function getOneApi1({ apiId, environmentId, accountId }: {
    apiId: string;
    environmentId: string;
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse>;
/**
 * Get all apis
 */
export declare function getAllApis({ environmentId, limit }: {
    environmentId: string;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse[]>;
/**
 * Get all apis
 */
export declare function getAllApis1({ accountId, environmentId, limit }: {
    accountId: string;
    environmentId: string;
    limit?: number;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiResponse[]>;
/**
 * List all the Account's Apis
 */
export declare function getApis(opts?: Oazapfts.RequestOpts): Promise<SimpleApiResponse[]>;
/**
 * Get all partner APIs whose status is requested or granted
 */
export declare function getRequestedOrGrantedAccessApis({ partnerAccountId }: {
    partnerAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiAccessRequestResponse[]>;
/**
 * Get all Partner's products
 */
export declare function getProducts1({ partnerAccountId }: {
    partnerAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<PartnerProductResponse[]>;
/**
 * Get all Partner's products by environment
 */
export declare function getProductsByEnv({ partnerAccountId, environmentId }: {
    partnerAccountId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<PartnerProductResponse[]>;
/**
 * Get all Partner's apis by environment
 */
export declare function getApisByEnv({ partnerAccountId, environmentId }: {
    partnerAccountId: string;
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<PartnerApiResponse[]>;
/**
 * Get all Partner's apis
 */
export declare function getApis1({ partnerAccountId }: {
    partnerAccountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<PartnerApiResponse[]>;
/**
 * Get all Client Applications that are eligible to request access to API
 */
export declare function getEligibleClientApplications({ environmentId, apiId }: {
    environmentId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ClientApplicationWithStatusResponse[]>;
export declare function getAllApplications({ environmentId, apiId }: {
    environmentId: string;
    apiId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ClientApplicationWithGrantedAccessResponse[]>;
/**
 * access request list requested
 */
export declare function findAccessRequestRequestedStatus({ environmentId }: {
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiAccessRequestResponse[]>;
/**
 * Access request list history
 */
export declare function findAccessRequestRequestedHistory({ environmentId }: {
    environmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CatalogApiAccessRequestResponse[]>;
/**
 * Get allowed environments
 */
export declare function getEnvironmentsByAccountId({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<EnvironmentResponse[]>;
/**
 * Get health status
 */
export declare function healthz(opts?: Oazapfts.RequestOpts): Promise<HealthzResponse>;
//# sourceMappingURL=serviceCatalog.d.ts.map