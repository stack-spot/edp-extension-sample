/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "http://api-management-catalog-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "http://api-management-catalog-api.dev.stackspot.com"
};
/**
 * Request to list all APIs
 */
export function list({ workspaceId, queryParams }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
/**
 * Request to create an Api
 */
export function createApi({ workspaceId, authorization, apiCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis`, oazapfts.json({
        ...opts,
        method: "POST",
        body: apiCreateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
/**
 * Request to get all API version
 */
export function getAllApiVersion({ workspaceId, apiId, queryParams }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
/**
 * Request to create API version
 */
export function createApiVersion({ workspaceId, apiId, versionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions`, oazapfts.json({
        ...opts,
        method: "POST",
        body: versionRequest
    })));
}
/**
 * Request to detail an API
 */
export function getApi({ workspaceId, apiId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}`, {
        ...opts
    }));
}
/**
 * Request to patch an API
 */
export function update({ workspaceId, apiId, apiPatchRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: apiPatchRequest
    })));
}
/**
 * Request to get API version
 */
export function getApiVersion({ workspaceId, apiId, versionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions/${encodeURIComponent(versionId)}`, {
        ...opts
    }));
}
/**
 * Request to update API version
 */
export function updateVersion({ workspaceId, apiId, versionId, versionPatchRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/workspaces/${encodeURIComponent(workspaceId)}/v2/apis/${encodeURIComponent(apiId)}/versions/${encodeURIComponent(versionId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: versionPatchRequest
    })));
}
export function list1(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/siglas", {
        ...opts
    }));
}
export function list2({ siglas }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/offers${QS.query(QS.explode({
        siglas
    }))}`, {
        ...opts
    }));
}
export function list3({ siglas }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/businesses${QS.query(QS.explode({
        siglas
    }))}`, {
        ...opts
    }));
}
/**
 * Show APIs from catalog
 */
export function list4({ accountId, queryParams }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/accounts/${encodeURIComponent(accountId)}/v2/apis${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
/**
 * Request to detail an API from Catalog
 */
export function detail({ accountId, apiId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/accounts/${encodeURIComponent(accountId)}/v2/apis/${encodeURIComponent(apiId)}`, {
        ...opts
    }));
}
/**
 * Show Versions from catalog
 */
export function listVersions({ accountId, apiId, queryParams }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/accounts/${encodeURIComponent(accountId)}/v2/apis/${encodeURIComponent(apiId)}/versions${QS.query(QS.explode({
        queryParams
    }))}`, {
        ...opts
    }));
}
//# sourceMappingURL=apiManagement.js.map