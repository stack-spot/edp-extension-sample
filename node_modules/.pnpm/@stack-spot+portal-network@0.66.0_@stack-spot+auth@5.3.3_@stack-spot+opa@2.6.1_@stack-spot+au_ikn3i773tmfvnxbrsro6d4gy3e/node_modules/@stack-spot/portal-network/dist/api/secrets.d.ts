/**
 * Workspace Secrets API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type SecretValueResponse = {
    key: string;
    description: string;
    value: string;
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type ErrorResponse = {
    code: string;
    status: number;
    details: string;
    validationDetails?: ValidationDetails[];
};
export type UpdateSecretValueRequest = {
    value: string;
};
export type EditKeyRequest = {
    description: string;
};
export type SecretKeyResponse = {
    key: string;
    description: string;
};
export type CreateKeyRequest = {
    key: string;
    description: string;
};
export type EncryptRequest = {
    value: string;
};
export type EncryptResponse = {
    value: string;
};
export type DecryptRequest = {
    value: string;
};
export type DecryptResponse = {
    value: string;
};
export type SecretAvailabilityResponse = {
    definedKeys: string[];
    undefinedKeys: string[];
};
/**
 * Get a Secret Key value.
 */
export declare function getSecretValue({ key, executionId }: {
    key: string;
    executionId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<SecretValueResponse>;
/**
 * Edit a Secret Key value.
 */
export declare function updateSecretValue({ key, updateSecretValueRequest }: {
    key: string;
    updateSecretValueRequest: UpdateSecretValueRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete a Secret Key value.
 */
export declare function deleteSecretValue({ key }: {
    key: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Edit a Secret Key.
 */
export declare function editKey({ key, editKeyRequest }: {
    key: string;
    editKeyRequest: EditKeyRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete a Secret Key.
 */
export declare function deleteKey({ key }: {
    key: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List all Secret Keys.
 */
export declare function getAll1(opts?: Oazapfts.RequestOpts): Promise<SecretKeyResponse[]>;
/**
 * Create a new Secret Key.
 */
export declare function createKey({ createKeyRequest }: {
    createKeyRequest: CreateKeyRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Encrypt a value.
 */
export declare function encrypt({ encryptRequest }: {
    encryptRequest: EncryptRequest;
}, opts?: Oazapfts.RequestOpts): Promise<EncryptResponse>;
/**
 * Decrypt a value.
 */
export declare function decrypt({ executionId, decryptRequest }: {
    executionId?: string;
    decryptRequest: DecryptRequest;
}, opts?: Oazapfts.RequestOpts): Promise<DecryptResponse>;
/**
 * List all configured Secret Keys values.
 */
export declare function getAll({ executionId }: {
    executionId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<SecretValueResponse[]>;
/**
 * List all defined and not defined secret keys by the user.
 */
export declare function getAvailability(opts?: Oazapfts.RequestOpts): Promise<SecretAvailabilityResponse>;
//# sourceMappingURL=secrets.d.ts.map