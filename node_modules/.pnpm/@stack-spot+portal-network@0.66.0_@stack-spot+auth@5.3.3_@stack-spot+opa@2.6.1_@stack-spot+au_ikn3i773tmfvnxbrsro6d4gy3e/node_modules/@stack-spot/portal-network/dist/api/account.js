/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://account-account-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://account-account-api.dev.stackspot.com"
};
/**
 * List User repository credential's.
 */
export function listScmCredentials(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/users/scm-credentials", {
        ...opts
    }));
}
/**
 * Update User repository credential's.
 */
export function scmCredentialUpdate({ userScmInfoRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/users/scm-credentials", oazapfts.json({
        ...opts,
        method: "PUT",
        body: userScmInfoRequest
    })));
}
/**
 * Save User repository credential's.
 */
export function scmCredentialSave({ userScmInfoRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/users/scm-credentials", oazapfts.json({
        ...opts,
        method: "POST",
        body: userScmInfoRequest
    })));
}
/**
 * Delete an user SCM credentials.
 */
export function scmDelete(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/users/scm-credentials", {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Get scope by ID
 */
export function getById({ scopeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/scopes/${encodeURIComponent(scopeId)}`, {
        ...opts
    }));
}
/**
 * Update scope information
 */
export function updateScope({ scopeId, iamUpdateScopeRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/scopes/${encodeURIComponent(scopeId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: iamUpdateScopeRequest
    })));
}
/**
 * Delete scope by ID
 */
export function deleteScope({ scopeId }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/scopes/${encodeURIComponent(scopeId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * List repository credential's.
 */
export function listScmCredentials1(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/scm-credentials", {
        ...opts
    }));
}
/**
 * Update repository credential's.
 */
export function scmCredentialUpdate1({ accountScmInfoUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/scm-credentials", oazapfts.json({
        ...opts,
        method: "PUT",
        body: accountScmInfoUpdateRequest
    })));
}
/**
 * Save repository credential's.
 */
export function scmCredentialSave1({ accountScmInfoSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/scm-credentials", oazapfts.json({
        ...opts,
        method: "POST",
        body: accountScmInfoSaveRequest
    })));
}
/**
 * Update a new role for Account
 */
export function updateAccountRole({ roleId, updateAccountRoleRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateAccountRoleRequest
    })));
}
/**
 * Delete a role for Account
 */
export function deleteAccountRole({ roleId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Get all Global Reources and Actions compared to role
 */
export function getResourcesAndActionsWithStatus({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/resources${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Update role with new resource and actions
 */
export function updateRoleWithNewActions({ roleId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/resources`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Updates actions from a resource
 */
export function updateResourceActions({ roleId, resourceId, updateResourceActionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/resources/${encodeURIComponent(resourceId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateResourceActionsRequest
    })));
}
/**
 * Get user by id
 */
export function getMemberById({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}`, {
        ...opts
    }));
}
/**
 * Update user on current tenant
 */
export function updateUser({ memberId, updateUserRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateUserRequest
    })));
}
/**
 * Update user password on current tenant
 */
export function updateUserPassword({ memberId, updatePasswordRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/password`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updatePasswordRequest
    })));
}
/**
 * Accept user invitation
 */
export function accept({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/invitations/${encodeURIComponent(id)}/accept`, {
        ...opts,
        method: "PUT"
    }));
}
/**
 * Update a Feature Flag
 */
export function update({ id, updateFeatureFlagRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/feature-flags/${encodeURIComponent(id)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateFeatureFlagRequest
    })));
}
/**
 * Sets a new sales representative list to an existing account
 */
export function updateSalesRepresentatives({ accountId, updateSalesRepresentativesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/admin/accounts/${encodeURIComponent(accountId)}/sales-representatives`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateSalesRepresentativesRequest
    })));
}
/**
 * Update status account
 */
export function updateAccountStatus({ accountId, accountStatusRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(accountId)}/status`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: accountStatusRequest
    })));
}
/**
 * Get a configured SSO from account
 */
export function getAccountSso({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Update a configured SSO from account
 */
export function updateSso({ id, accountSsoUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: accountSsoUpdateRequest
    })));
}
/**
 * Delete a configured Account SSO from account
 */
export function deleteSso({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update partially a configured SSO from account
 */
export function partialUpdateSso({ id, accountSsoPartialUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountSsoPartialUpdateRequest
    })));
}
/**
 * Get SSO Group Mapping By Id
 */
export function getGroupMapById({ id, attributeImporterId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/group-mapping/${encodeURIComponent(attributeImporterId)}`, {
        ...opts
    }));
}
/**
 * Update SSO Group Mapping
 */
export function updateGroupMapping({ id, attributeImporterId, accountGroupMappingUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/group-mapping/${encodeURIComponent(attributeImporterId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: accountGroupMappingUpdateRequest
    })));
}
/**
 * Delete SSO Group Mapping
 */
export function deleteGroupMapping({ id, attributeImporterId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/group-mapping/${encodeURIComponent(attributeImporterId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Create Service Credential v2
 */
export function createServiceCredential({ serviceCredentialCreateRequestV2 }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/service-credentials", oazapfts.json({
        ...opts,
        method: "POST",
        body: serviceCredentialCreateRequestV2
    })));
}
/**
 * Get Service Credentials
 */
export function getServiceCredentials({ name, status, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials${QS.query(QS.explode({
        name,
        status,
        page,
        size
    }))}`, {
        ...opts
    }));
}
/**
 * Create Service Credential
 */
export function createServiceCredential1({ serviceCredentialCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/service-credentials", oazapfts.json({
        ...opts,
        method: "POST",
        body: serviceCredentialCreateRequest
    })));
}
/**
 * Notify about Service Credential expiration
 */
export function notifyServiceCredentialExpiration({ serviceCredentialExpirationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/service-credentials/expiration", oazapfts.json({
        ...opts,
        method: "POST",
        body: serviceCredentialExpirationRequest
    })));
}
/**
 * Find all the existing scopes
 */
export function findScopes({ page }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/scopes${QS.query(QS.explode({
        page
    }))}`, {
        ...opts
    }));
}
/**
 * Create a new scope
 */
export function createScope({ iamCreateScopeRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText("/v1/scopes", oazapfts.json({
        ...opts,
        method: "POST",
        body: iamCreateScopeRequest
    })));
}
/**
 * Get Roles
 */
export function getRoles({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Create a new role for Account
 */
export function createAccountRole({ createAccountRoleRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/roles", oazapfts.json({
        ...opts,
        method: "POST",
        body: createAccountRoleRequest
    })));
}
/**
 * Get role members
 */
export function getRoleMembers({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/members${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Add Role to Member
 */
export function addRoleToMember({ roleId, addRoleToMemberRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/members`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addRoleToMemberRequest
    })));
}
/**
 * Get Groups from role
 */
export function getRoleGroups({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/groups${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Bind roles groups
 */
export function bindRoleGroups({ roleId, roleGroupIdsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/groups`, oazapfts.json({
        ...opts,
        method: "POST",
        body: roleGroupIdsRequest
    })));
}
/**
 * Get Resources
 */
export function getResources({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/resources${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Create a new resource for Account
 */
export function createResource({ createResourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/resources", oazapfts.json({
        ...opts,
        method: "POST",
        body: createResourceRequest
    })));
}
/**
 * Get Account Members
 */
export function getAccountMembers1({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Create user on current tenant
 */
export function createUser({ createUserRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/members", oazapfts.json({
        ...opts,
        method: "POST",
        body: createUserRequest
    })));
}
/**
 * Get member roles
 */
export function getRoles1({ memberId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/roles${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Bind users to roles
 */
export function bindToRoles({ memberId, memberIdsCommonRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/roles`, oazapfts.json({
        ...opts,
        method: "POST",
        body: memberIdsCommonRequest
    })));
}
/**
 * Reset member OTP
 */
export function resetOtp({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/reset-otp`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Get member Groups
 */
export function getMemberGroups({ memberId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/groups${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Bind users to groups
 */
export function bindToGroups({ memberId, memberIdsCommonRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/groups`, oazapfts.json({
        ...opts,
        method: "POST",
        body: memberIdsCommonRequest
    })));
}
/**
 * Get account member favorite resources
 */
export function listAccountMemberFavorites({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/favorites`, {
        ...opts
    }));
}
/**
 * Add account member favorite resource
 */
export function addAccountMemberFavorite({ memberId, createFavoriteResourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/favorites`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createFavoriteResourceRequest
    })));
}
/**
 * Send Email to reset password
 */
export function resetPassword({ memberEmailRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/members/reset-password", oazapfts.json({
        ...opts,
        method: "POST",
        body: memberEmailRequest
    })));
}
/**
 * Invite new members to account
 */
export function inviteMembers({ body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/members/invitation", oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * List user invitations for account
 */
export function listUserInvitations({ filterBy, filterValue, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/invitations${QS.query(QS.explode({
        filterBy,
        filterValue,
        page,
        size
    }))}`, {
        ...opts
    }));
}
/**
 * Create user invitations for account
 */
export function createUserInvitation({ createUserInvitationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/invitations", oazapfts.json({
        ...opts,
        method: "POST",
        body: createUserInvitationRequest
    })));
}
/**
 * Get Groups
 */
export function getGroups({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn, includeDefaultGroup }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn,
        includeDefaultGroup
    }))}`, {
        ...opts
    }));
}
/**
 * Create Group
 */
export function save({ newGroupRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/groups", oazapfts.json({
        ...opts,
        method: "POST",
        body: newGroupRequest
    })));
}
/**
 * Get Group members
 */
export function getRoles2({ groupId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/roles${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Bind Group roles
 */
export function bindRoles({ groupId, groupRoleIdsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/roles`, oazapfts.json({
        ...opts,
        method: "POST",
        body: groupRoleIdsRequest
    })));
}
/**
 * Get Group Resources
 */
export function getGroupResources({ groupId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/resources${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Add Multiple Resources to Group
 */
export function addResourcesToGroup({ groupId, addResourcesToGroupRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/resources`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addResourcesToGroupRequest
    })));
}
/**
 * Get Group members
 */
export function getMembers({ groupId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/members${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Bind Group member
 */
export function bindGroupMembers({ groupId, groupMemberIdsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/members`, oazapfts.json({
        ...opts,
        method: "POST",
        body: groupMemberIdsRequest
    })));
}
/**
 * List Feature Flags in an Account
 */
export function getFeatures(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/feature-flags", {
        ...opts
    }));
}
/**
 * Create a Feature Flag
 */
export function create({ createFeatureFlagRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/feature-flags", oazapfts.json({
        ...opts,
        method: "POST",
        body: createFeatureFlagRequest
    })));
}
/**
 * Send Welcome Email
 */
export function sendWelcomeEmail({ welcomeEmailRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/emails/welcome", oazapfts.json({
        ...opts,
        method: "POST",
        body: welcomeEmailRequest
    })));
}
/**
 * Send Download Email
 */
export function sendDownloadEmail(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/emails/download", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Send contact email
 */
export function sendContactEmail({ contactEmailRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/emails/contact", oazapfts.json({
        ...opts,
        method: "POST",
        body: contactEmailRequest
    })));
}
/**
 * Switch user to account passed in the body
 */
export function switchAccount({ switchAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/switch-account", oazapfts.json({
        ...opts,
        method: "POST",
        body: switchAccountRequest
    })));
}
/**
 * Get credentials from personal service client (create if not exists one to the logged user).
 */
export function getPersonalClientCredentials(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/personal-client-credentials", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Get an Access Token generated With Audience on logged user behalf, since previously authorized.
 */
export function getPersonalAccessToken1({ apiAuthorization, generateTokenFromPersonalAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/personal-access-token", oazapfts.json({
        ...opts,
        method: "POST",
        body: generateTokenFromPersonalAccountRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "Api-Authorization": apiAuthorization
        })
    })));
}
/**
 * Disable client that generates Personal Access Tokens.
 */
export function disablePersonalAccessTokenGeneration(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/personal-access-token/unauthorize", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Verify if exists a client created (authorized) to generate Access Token on logged user behalf.
 */
export function personalAccessTokenAuthorization(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/personal-access-token/authorize", {
        ...opts
    }));
}
/**
 * Authorize creating a client to generate Personal Access Tokens on your behalf.
 */
export function createPersonalAccessToken(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/personal-access-token/authorize", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Get an Access Token generated on logged user's service account behalf, since previously authorized.
 */
export function getPersonalAccessTokenFromServiceAccountOnly(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/authentication/personal-access-token-sa", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Generate device code.
 */
export function deviceCode({ email, freemiumAccess, codeChallenge, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/authentication/device-code${QS.query(QS.explode({
        email,
        freemium_access: freemiumAccess,
        code_challenge: codeChallenge
    }))}`, oazapfts.form({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Find accounts
 */
export function getAccounts1({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/admin/accounts${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Create an Enterprise Account Order
 */
export function create1({ createAccountOrderRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/admin/accounts", oazapfts.json({
        ...opts,
        method: "POST",
        body: createAccountOrderRequest
    })));
}
/**
 * Get All SSO Group Mapping
 */
export function getAllGroupMapping({ id, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/group-mapping${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Create SSO Group Mapping
 */
export function createGroupMapping({ id, accountGroupMappingCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/group-mapping`, oazapfts.json({
        ...opts,
        method: "POST",
        body: accountGroupMappingCreateRequest
    })));
}
/**
 * Configure new SSO in account
 */
export function ssoConfigure({ protocol, accountSsoCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/protocol/${encodeURIComponent(protocol)}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: accountSsoCreateRequest
    })));
}
/**
 * Parse SSO configuration file
 */
export function ssoParseConfigurationFile({ protocol, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/protocol/${encodeURIComponent(protocol)}/parser`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Create Account Freemium
 */
export function createAccountFreemium({ accountFreemiumCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts/freemium", oazapfts.json({
        ...opts,
        method: "POST",
        body: accountFreemiumCreateRequest
    })));
}
/**
 * Adding Collaborator Account
 */
export function addCollaborator({ accountCollaboratorRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts/freemium/collaborators", oazapfts.json({
        ...opts,
        method: "POST",
        body: accountCollaboratorRequest
    })));
}
/**
 * Create an Account Order for Partner
 */
export function createPartner({ createAccountPartnerOrderRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account-orders/partners", oazapfts.json({
        ...opts,
        method: "POST",
        body: createAccountPartnerOrderRequest
    })));
}
/**
 * Validate new Partner account data
 */
export function validateNewPartnerData({ validateAccountPartnerDataRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account-orders/partners/validations/creation-data", oazapfts.json({
        ...opts,
        method: "POST",
        body: validateAccountPartnerDataRequest
    })));
}
/**
 * Rotate Service Credential Secret v2
 */
export function rotateServiceCredentialSecret({ id, rotateServiceCredentialSecretRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/service-credentials/${encodeURIComponent(id)}/secret`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: rotateServiceCredentialSecretRequest
    })));
}
/**
 * Revoke Service Credential v2
 */
export function revokeServiceCredential({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/service-credentials/${encodeURIComponent(id)}/revoke`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Associate Group to Service Credential
 */
export function associateGroupToServiceCredential({ id, serviceCredentialAssociateGroupRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials/${encodeURIComponent(id)}/teams`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: serviceCredentialAssociateGroupRequest
    })));
}
/**
 * Revoke Service Credential
 */
export function revokeServiceCredential1({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials/${encodeURIComponent(id)}/revocation`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Update member preferences
 */
export function getMemberPreferences({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/preferences`, {
        ...opts
    }));
}
/**
 * Update member preferences
 */
export function updateMemberPreferences({ memberId, updateMemberPreferencesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/preferences`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateMemberPreferencesRequest
    })));
}
/**
 * Delete a member permissions
 */
export function deleteMemberPermissions({ memberId, deleteMemberPermissionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/permissions`, oazapfts.json({
        ...opts,
        method: "DELETE",
        body: deleteMemberPermissionsRequest
    })));
}
/**
 * Update member permissions
 */
export function updateMemberPermissions({ memberId, updateMemberPermissionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/permissions`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateMemberPermissionsRequest
    })));
}
/**
 * Get All Fido credentials for given user
 */
export function getAllMemberFidoCredentials({ memberId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/fido-credentials${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Disables Fido credentials for given user
 */
export function deactivateFidoCredentials({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/fido-credentials`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Enable Fido credentials for given user
 */
export function enableFidoCredentials({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/fido-credentials`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Revoke user invitation
 */
export function cancelUserInvitation({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/invitations/${encodeURIComponent(id)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Resend user invitation
 */
export function resendUserInvitation({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/invitations/${encodeURIComponent(id)}`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Get Group by ID
 */
export function getGroupById({ groupId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}`, {
        ...opts
    }));
}
/**
 * Delete Group
 */
export function deleteV1GroupsByGroupId({ groupId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update Group
 */
export function update1({ groupId, updateGroupRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateGroupRequest
    })));
}
/**
 * Delete Group permissions
 */
export function deleteGroupPermissions({ groupId, deleteGroupPermissionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/permissions`, oazapfts.json({
        ...opts,
        method: "DELETE",
        body: deleteGroupPermissionsRequest
    })));
}
/**
 * Update Group permissions
 */
export function updateGroupPermissions({ groupId, updateGroupPermissionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/permissions`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateGroupPermissionsRequest
    })));
}
/**
 * Enable a Feature Flag in an Account
 */
export function enable({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/feature-flags/${encodeURIComponent(id)}/enable`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Disable a Feature Flag in an Account
 */
export function disable({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/feature-flags/${encodeURIComponent(id)}/disable`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Adds a new email domain to an existing account
 */
export function addNewEmailDomain({ accountId, addNewEmailDomainRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/admin/accounts/${encodeURIComponent(accountId)}/domains`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: addNewEmailDomainRequest
    })));
}
/**
 * Get configured account SSO attributes
 */
export function ssoGetAttributesConfig({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/attributes-configuration`, {
        ...opts
    }));
}
/**
 * Configure account SSO attributes
 */
export function ssoAddAttributes({ id, accountSsoAddAttributesConfigRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso/${encodeURIComponent(id)}/attributes-configuration`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountSsoAddAttributesConfigRequest
    })));
}
/**
 * Get Partner by account Id
 */
export function getPartnerAccount({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account-partners/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Delete Partner
 */
export function deletePartner({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account-partners/${encodeURIComponent(id)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update Partner Account data.
 */
export function updatePartnerAccountData({ id, accountPartnerAccountDataUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account-partners/${encodeURIComponent(id)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountPartnerAccountDataUpdateRequest
    })));
}
/**
 * Update Partner Account Admin data.
 */
export function updatePartnerAccountAdminData({ id, accountPartnerAdminDataUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account-partners/${encodeURIComponent(id)}/admin`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountPartnerAdminDataUpdateRequest
    })));
}
/**
 * Verify User repository credential configuration status.
 */
export function isCreatedScmCredentials(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/users/scm-credentials/configuration-status", {
        ...opts
    }));
}
/**
 * List Accounts of User can use and collaborate.
 */
export function getUserAccountWithRole(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/users/accounts", {
        ...opts
    }));
}
/**
 * Get Accounts
 */
export function getAccounts({ accountType, slug, id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stackspot/accounts${QS.query(QS.explode({
        accountType,
        slug,
        id
    }))}`, {
        ...opts
    }));
}
/**
 * Get Account by id
 */
export function getAccount({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stackspot/accounts/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Get Account Members
 */
export function getAccountMembers({ id, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/stackspot/accounts/${encodeURIComponent(id)}/members${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Get Service Credential by ID (Client ID)
 */
export function getServiceCredential({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * List service credential permissions
 */
export function getServiceCredentialPermissions({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials/${encodeURIComponent(id)}/permissions`, {
        ...opts
    }));
}
/**
 * List service credential groups
 */
export function getServiceCredentialGroups({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials/${encodeURIComponent(id)}/groups`, {
        ...opts
    }));
}
/**
 * Get SCM provider.
 */
export function getScmProvider(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/scm-credentials/provider", {
        ...opts
    }));
}
/**
 * Verify repository credential configuration status.
 */
export function isCreatedScmCredentials1(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/scm-credentials/configuration-status", {
        ...opts
    }));
}
/**
 * Get Permissions from role
 */
export function getPermissionsWithStatus({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/permissions${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Get Members from Resource
 */
export function getResourceMembers({ resourceId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/resources/${encodeURIComponent(resourceId)}/members${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Get Groups from Resource
 */
export function getResourceGroups({ resourceId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/resources/${encodeURIComponent(resourceId)}/groups${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Get Resource Types
 */
export function getResourceTypes({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/resource-types${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Validate permission access
 */
export function getAccess({ resourceType, resource, action, attribute }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/permissions/access${QS.query(QS.explode({
        resourceType,
        resource,
        action,
        attribute
    }))}`, {
        ...opts
    }));
}
/**
 * Get Resources Members
 */
export function getResources1({ memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/resources`, {
        ...opts
    }));
}
/**
 * Get member favorite resources by type
 */
export function listMemberFavoritesByResource({ memberId, resourceType }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/favorites/resources/${encodeURIComponent(resourceType)}`, {
        ...opts
    }));
}
/**
 * Get Account Collaborators Members
 */
export function getAccountMembersToCollaborators({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/collaborators${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Get Authentication Configuration for account
 */
export function getAuthenticationConfig({ tenantSlug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/authentication/config${QS.query(QS.explode({
        tenant_slug: tenantSlug
    }))}`, {
        ...opts
    }));
}
/**
 * Get an account by ID
 */
export function getAccount1({ accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/admin/accounts/${encodeURIComponent(accountId)}`, {
        ...opts
    }));
}
/**
 * Get account data (tenant, IDP alias, account freemium available to user) by email
 */
export function getAccountDataByEmail({ email }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts${QS.query(QS.explode({
        email
    }))}`, {
        ...opts
    }));
}
/**
 * Get account Slug - this API is temporary
 */
export function getAccountSlug({ accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/${encodeURIComponent(accountId)}`, {
        ...opts
    }));
}
/**
 * Get all SSO configured in account
 */
export function getAllAccountSso({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/sso${QS.query(QS.explode({
        size,
        page,
        sort,
        direction,
        search,
        filterMode,
        filterBy,
        filterValue,
        multiFilterMode,
        filterIn
    }))}`, {
        ...opts
    }));
}
/**
 * Returns information if account data (name and slug) are available to be registered
 */
export function accountDataIsAvailable({ name, slug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/accounts/freemium/available${QS.query(QS.explode({
        name,
        slug
    }))}`, {
        ...opts
    }));
}
/**
 * Get Partners who are sharing content.
 */
export function getSharingPartners({ name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account-partners/sharing${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Get Partners with whom it is allowed to share content.
 */
export function getPartnersSharingAllowed({ name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account-partners/sharing-allowed${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Validate Partner association limit
 */
export function validatePartnerAssociationLimit(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account-orders/partners/validations/association-limit", {
        ...opts
    }));
}
/**
 * Disassociate Group to Service Credential
 */
export function disassociateGroupToServiceCredential({ id, groupId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/service-credentials/${encodeURIComponent(id)}/teams/${encodeURIComponent(groupId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove Role from Member
 */
export function removeRoleFromMember({ roleId, memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/roles/${encodeURIComponent(roleId)}/members/${encodeURIComponent(memberId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete a resource from Account
 */
export function deleteResource({ resourceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/resources/${encodeURIComponent(resourceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Remove resource from member favorites
 */
export function deleteMemberFavorite({ memberId, resourceType, resourceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/members/${encodeURIComponent(memberId)}/favorites/${encodeURIComponent(resourceType)}/${encodeURIComponent(resourceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete Group role
 */
export function deleteRole({ groupId, roleId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/roles/${encodeURIComponent(roleId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete Resource from Group
 */
export function deleteResourceFromGroup({ groupId, resourceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/resources/${encodeURIComponent(resourceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete Group member
 */
export function deleteMember({ groupId, memberId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/groups/${encodeURIComponent(groupId)}/members/${encodeURIComponent(memberId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=account.js.map