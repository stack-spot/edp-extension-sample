/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type FoundationDetails = {
    name: string;
    description: string;
    cloudProvider: string;
    region: string;
};
export type FoundationResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    details: FoundationDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListFoundationResponse = {
    stackSpotAccountId: string;
    pendingResources: boolean;
    content: FoundationResponse[];
};
export type CreateFoundationRequest = {
    name: string;
    description: string;
    cloudProvider: string;
    region: string;
};
export type TransitGatewayDetails = {
    name: string;
};
export type TransitGatewayResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId: string;
    transitGatewayId: string;
    details: TransitGatewayDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListTransitGatewayResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId?: string;
    pendingResources: boolean;
    content: TransitGatewayResponse[];
};
export type CreateTransitGatewayRequest = {
    projectId: string;
};
export type TransitGatewayVpcAttachmentDetails = {
    subnetIds: string[];
};
export type TransitGatewayVpcAttachmentResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId: string;
    transitGatewayId: string;
    vpcId: string;
    transitGatewayVpcAttachmentId: string;
    details: TransitGatewayVpcAttachmentDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListTransitGatewayVpcAttachmentResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId?: string;
    transitGatewayId?: string;
    vpcId?: string;
    pendingResources: boolean;
    content: TransitGatewayVpcAttachmentResponse[];
};
export type CreateTransitGatewayVpcAttachmentRequest = {
    projectId: string;
    transitGatewayId: string;
    vpcId: string;
    subnetIds: string[];
};
export type SubnetDetails = {
    availabilityZone: string;
    cidrBlock: string;
    description: string;
    "type": "PUBLIC" | "PRIVATE";
    name?: string;
};
export type SubnetResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId: string;
    networkId: string;
    subnetId: string;
    details: SubnetDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListSubnetResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId?: string;
    networkId?: string;
    pendingResources: boolean;
    content: SubnetResponse[];
};
export type CreateSubnetRequest = {
    projectId: string;
    networkId: string;
    availabilityZone: string;
    cidrBlock: string;
    "type": "PUBLIC" | "PRIVATE";
    name: string;
};
export type ProjectDetails = {
    name: string;
    email: string;
};
export type ProjectResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    parentFolderId: string;
    projectId: string;
    details: ProjectDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListProjectResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    parentFolderId?: string;
    pendingResources: boolean;
    content: ProjectResponse[];
};
export type CreateProjectRequest = {
    parentFolderId: string;
    name: string;
    description: string;
};
export type NetworkDetails = {
    cidrBlock?: string;
    range?: number;
    name?: string;
};
export type NetworkResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId: string;
    networkId: string;
    details: NetworkDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListNetworkResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId?: string;
    pendingResources: boolean;
    content: NetworkResponse[];
};
export type CreateNetworkRequest = {
    projectId: string;
    containerLoad: boolean;
    netmaskLength: number;
    networkName: string;
};
export type FolderContent = {
    "type": "FOLDER" | "PROJECT";
    id: string;
    name: string;
    status: "READY" | "PENDING" | "ERROR";
};
export type FolderDetails = {
    name: string;
    pendingResources: boolean;
    content: FolderContent[];
};
export type FolderResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    parentFolderId: string;
    folderId: string;
    details: FolderDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type CreateFolderRequest = {
    parentFolderId: string;
    name: string;
};
export type DnsZoneDetails = {
    domain: string;
    dnsZoneType: string;
};
export type DnsZoneResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    dnsZoneId: string;
    details: DnsZoneDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListDnsZoneResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    pendingResources: boolean;
    content: DnsZoneResponse[];
};
export type CreateDnsZoneRequest = {
    domain: string;
    "type": "PUBLIC";
};
export type DnsRecordDetails = {
    recordName: string;
    records: string[];
    ttl: number;
    "type": "A" | "AAAA" | "CAA" | "CNAME" | "MX" | "PTR" | "SOA" | "SRV" | "TXT";
    dnsZoneName: string;
};
export type DnsRecordResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    dnsZoneId: string;
    dnsRecordId: string;
    details: DnsRecordDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListDnsRecordResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    projectId?: string;
    dnsZoneId?: string;
    pendingResources: boolean;
    content: DnsRecordResponse[];
};
export type CreateDnsRecordRequest = {
    dnsZoneId: string;
    projectId?: string;
    recordName: string;
    records: string[];
    ttl: number;
    "type": "A" | "AAAA" | "CAA" | "CNAME" | "MX" | "PTR" | "SOA" | "SRV" | "TXT";
};
export type CidrDetails = {
    cidrNotation: string;
    networkAddress: string;
    netmask: string;
    broadcastAddress: string;
    lowAddress: string;
    highAddress: string;
    addressCount: number;
};
export type CidrResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    cidrId: string;
    details: CidrDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListCidrResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    pendingResources: boolean;
    content: CidrResponse[];
};
export type CreateCidrRequest = {
    address: string;
    prefix: number;
};
export type CertificateDetails = {
    name: string;
    certificateStatus?: string;
    domainName?: string;
    notAfter?: string;
    notBefore?: string;
    "type"?: string;
};
export type CertificateResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    certificateId: string;
    details: CertificateDetails;
    status: "READY" | "PENDING" | "ERROR";
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
export type ListCertificateResponse = {
    stackSpotAccountId: string;
    foundationId: string;
    pendingResources: boolean;
    content: CertificateResponse[];
};
export type CreateCertificateRequestBase = {
    certificateName: string;
    "type": string;
};
export type CreatePrivateCertificateRequest = {
    "type": "CreatePrivateCertificateRequest";
} & CreateCertificateRequestBase & {
    domainName?: string;
};
export type CreatePublicCertificateRequest = {
    "type": "CreatePublicCertificateRequest";
} & CreateCertificateRequestBase & {
    domainName?: string;
};
export type ImportCertificateRequest = {
    "type": "ImportCertificateRequest";
} & CreateCertificateRequestBase & {
    certificateBody?: string;
    certificatePrivateKey?: string;
    certificateChain?: string;
};
export declare function listFoundations({ authorization }: {
    authorization: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListFoundationResponse>;
export declare function createFoundation({ authorization, createFoundationRequest }: {
    authorization: string;
    createFoundationRequest: CreateFoundationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<FoundationResponse>;
export declare function listTransitGateway({ authorization, foundationId, projectId }: {
    authorization: string;
    foundationId: string;
    projectId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListTransitGatewayResponse>;
export declare function createTransitGateway({ authorization, foundationId, createTransitGatewayRequest }: {
    authorization: string;
    foundationId: string;
    createTransitGatewayRequest: CreateTransitGatewayRequest;
}, opts?: Oazapfts.RequestOpts): Promise<TransitGatewayResponse>;
export declare function listTransitGatewayVpcAttachment({ authorization, foundationId, projectId, vpcId, transitGatewayId }: {
    authorization: string;
    foundationId: string;
    projectId?: string;
    vpcId?: string;
    transitGatewayId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListTransitGatewayVpcAttachmentResponse>;
export declare function createTransitGatewayVpcAttachment({ authorization, foundationId, createTransitGatewayVpcAttachmentRequest }: {
    authorization: string;
    foundationId: string;
    createTransitGatewayVpcAttachmentRequest: CreateTransitGatewayVpcAttachmentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<TransitGatewayVpcAttachmentResponse>;
export declare function listSubnet({ authorization, foundationId, projectId, vpcId }: {
    authorization: string;
    foundationId: string;
    projectId?: string;
    vpcId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListSubnetResponse>;
export declare function createSubnet({ authorization, foundationId, createSubnetRequest }: {
    authorization: string;
    foundationId: string;
    createSubnetRequest: CreateSubnetRequest;
}, opts?: Oazapfts.RequestOpts): Promise<SubnetResponse>;
export declare function listProject({ authorization, foundationId, parentFolderId }: {
    authorization: string;
    foundationId: string;
    parentFolderId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListProjectResponse>;
export declare function createProject({ authorization, foundationId, createProjectRequest }: {
    authorization: string;
    foundationId: string;
    createProjectRequest: CreateProjectRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ProjectResponse>;
export declare function listNetwork({ authorization, foundationId, projectId }: {
    authorization: string;
    foundationId: string;
    projectId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListNetworkResponse>;
export declare function createNetwork({ authorization, foundationId, createNetworkRequest }: {
    authorization: string;
    foundationId: string;
    createNetworkRequest: CreateNetworkRequest;
}, opts?: Oazapfts.RequestOpts): Promise<NetworkResponse>;
export declare function getFolder({ authorization, foundationId, folderId }: {
    authorization: string;
    foundationId: string;
    folderId: string;
}, opts?: Oazapfts.RequestOpts): Promise<FolderResponse>;
export declare function createFolder({ authorization, foundationId, createFolderRequest }: {
    authorization: string;
    foundationId: string;
    createFolderRequest: CreateFolderRequest;
}, opts?: Oazapfts.RequestOpts): Promise<FolderResponse>;
export declare function listDnsZone({ authorization, foundationId }: {
    authorization: string;
    foundationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListDnsZoneResponse>;
export declare function createDnsZone({ authorization, foundationId, createDnsZoneRequest }: {
    authorization: string;
    foundationId: string;
    createDnsZoneRequest: CreateDnsZoneRequest;
}, opts?: Oazapfts.RequestOpts): Promise<DnsZoneResponse>;
export declare function listDnsRecord({ authorization, foundationId, projectId, dnsZoneId }: {
    authorization: string;
    foundationId: string;
    projectId?: string;
    dnsZoneId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListDnsRecordResponse>;
export declare function createDnsRecord({ authorization, foundationId, createDnsRecordRequest }: {
    authorization: string;
    foundationId: string;
    createDnsRecordRequest: CreateDnsRecordRequest;
}, opts?: Oazapfts.RequestOpts): Promise<DnsRecordResponse>;
export declare function listCidr({ authorization, foundationId }: {
    authorization: string;
    foundationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListCidrResponse>;
export declare function createCidr({ authorization, foundationId, createCidrRequest }: {
    authorization: string;
    foundationId: string;
    createCidrRequest: CreateCidrRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CidrResponse>;
export declare function listCertificates({ authorization, foundationId }: {
    authorization: string;
    foundationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListCertificateResponse>;
export declare function createCertificate({ authorization, foundationId, body }: {
    authorization: string;
    foundationId: string;
    body: CreatePrivateCertificateRequest | CreatePublicCertificateRequest | ImportCertificateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CertificateResponse>;
export declare function getFoundation({ authorization, foundationId }: {
    authorization: string;
    foundationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<FoundationResponse>;
export declare function getTransitGateway({ authorization, foundationId }: {
    authorization: string;
    foundationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<TransitGatewayResponse>;
export declare function getTransitGatewayVpcAttachment({ authorization, foundationId, transitGatewayVpcAttachmentId }: {
    authorization: string;
    foundationId: string;
    transitGatewayVpcAttachmentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<TransitGatewayVpcAttachmentResponse>;
export declare function getSubnet({ authorization, foundationId, subnetId }: {
    authorization: string;
    foundationId: string;
    subnetId: string;
}, opts?: Oazapfts.RequestOpts): Promise<SubnetResponse>;
export declare function getProject({ authorization, foundationId, projectId }: {
    authorization: string;
    foundationId: string;
    projectId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ProjectResponse>;
export declare function getNetwork({ authorization, foundationId, networkId }: {
    authorization: string;
    foundationId: string;
    networkId: string;
}, opts?: Oazapfts.RequestOpts): Promise<NetworkResponse>;
export declare function getDnsZone({ authorization, foundationId, dnsZoneId }: {
    authorization: string;
    foundationId: string;
    dnsZoneId: string;
}, opts?: Oazapfts.RequestOpts): Promise<DnsZoneResponse>;
export declare function getDnsZone1({ authorization, foundationId, dnsRecordId }: {
    authorization: string;
    foundationId: string;
    dnsRecordId: string;
}, opts?: Oazapfts.RequestOpts): Promise<DnsRecordResponse>;
export declare function getCidr({ authorization, foundationId, cidrId }: {
    authorization: string;
    foundationId: string;
    cidrId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CidrResponse>;
export declare function getCertificate({ authorization, foundationId, certificateId }: {
    authorization: string;
    foundationId: string;
    certificateId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CertificateResponse>;
export declare function providers(opts?: Oazapfts.RequestOpts): Promise<{
    [key: string]: object;
}[]>;
//# sourceMappingURL=cloudPlatform.d.ts.map