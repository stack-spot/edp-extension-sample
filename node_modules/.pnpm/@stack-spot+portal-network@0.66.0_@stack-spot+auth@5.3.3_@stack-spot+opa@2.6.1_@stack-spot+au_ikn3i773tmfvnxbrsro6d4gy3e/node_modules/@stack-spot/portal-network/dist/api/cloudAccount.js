/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://account-account-external-connections-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://account-account-external-connections-api.dev.stackspot.com"
};
/**
 * Connect a cloud account
 */
export function createCloudAccount({ jwtToken, stackspotCustomerIp, connectAccountRequestV2 }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/cloud-account${QS.query(QS.explode({
        jwtToken
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: connectAccountRequestV2,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
/**
 * Register a cloud offer for a Stackspot Account.
 */
export function registerOffer({ registerOfferRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/cloud-offer", oazapfts.json({
        ...opts,
        method: "POST",
        body: registerOfferRequest
    })));
}
/**
 * List all cloud accounts created for all workspaces
 */
export function listCloudAccounts({ jwtToken, sortBy, sortOrder, filter, page, pageSize, $type, environment, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account${QS.query(QS.explode({
        jwtToken,
        sortBy,
        sortOrder,
        filter,
        page,
        pageSize,
        "type": $type,
        environment,
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Connect a cloud account
 */
export function createCloudAccount1({ jwtToken, stackspotCustomerIp, connectAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account${QS.query(QS.explode({
        jwtToken
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: connectAccountRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
/**
 * Provision managed accounts in a workspace
 */
export function provisionManagedAccountsForWorkspace({ jwtToken, stackspotCustomerIp, managedAccountProvisionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/managed-account${QS.query(QS.explode({
        jwtToken
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: managedAccountProvisionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "stackspot-customer-ip": stackspotCustomerIp
        })
    })));
}
/**
 * Disconnect a Managed Account that was requested to disconnect via support case
 */
export function disconnectCloudAccountRequestedForDisconnect({ disconnectSupportCaseManagedAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/managed-cloud/support-case/disconnect", oazapfts.json({
        ...opts,
        method: "POST",
        body: disconnectSupportCaseManagedAccountRequest
    })));
}
/**
 * Get all relation between stackspot accounts and control towers
 */
export function getAllAccountTower({ stackspotAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/admin/managed-cloud/control-tower${QS.query(QS.explode({
        stackspotAccountId
    }))}`, {
        ...opts
    }));
}
/**
 * Add a Control Tower ID to a Stackspot Account that will be used in creation of a Managed Cloud Account
 */
export function createAccountTower({ stackspotAccountTowerRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/managed-cloud/control-tower", oazapfts.json({
        ...opts,
        method: "POST",
        body: stackspotAccountTowerRequest
    })));
}
/**
 *
 *         Updates Managed Account related information. If the account is of CustomCloud type, it changes to CloudServices
 *         (managed account type).
 *
 */
export function updateManagedInfo({ updateManagedInfoRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/cloud-account/update-managed-account", oazapfts.json({
        ...opts,
        method: "POST",
        body: updateManagedInfoRequest
    })));
}
/**
 * Disconnect a Cloud Account
 */
export function disconnectCloudAccountById({ disconnectCloudAccountRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/admin/cloud-account/disconnect", oazapfts.json({
        ...opts,
        method: "POST",
        body: disconnectCloudAccountRequest
    })));
}
/**
 * Get a cloud account connected to a workspace environment
 */
export function getCloudAccountByEnvironment({ accountId, workspaceId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/cloud-account/workspace/${encodeURIComponent(workspaceId)}/environment/${encodeURIComponent(environmentId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get a list of cloud accounts connected to a workspace
 */
export function getCloudAccountByWorkspace({ jwtToken, accountId, id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/cloud-account/workspace/${encodeURIComponent(id)}${QS.query(QS.explode({
        jwtToken
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get Cloud Account data with details
 */
export function getCloudAccount({ stackspotAccountId, workspaceId, environmentId, provider, $type, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/admin/cloud-account${QS.query(QS.explode({
        stackspotAccountId,
        workspaceId,
        environmentId,
        provider,
        "type": $type,
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Get Cloud Account by ID
 */
export function getCloudAccountById({ cloudAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/admin/cloud-account/${encodeURIComponent(cloudAccountId)}`, {
        ...opts
    }));
}
export function healthz(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/healthz", {
        ...opts
    }));
}
/**
 * Get the cloud offer of a Stackspot Account.
 */
export function getOfferOfAccount({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-offer/account/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Get the external-id for the given Cloud Account ID.
 */
export function getCloudAccountExternalId({ cloudAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/${encodeURIComponent(cloudAccountId)}/external-id`, {
        ...opts
    }));
}
/**
 * Get the cloud account workflow of a workspace environment
 */
export function getProvisionWorkflowInWorkspace({ jwtToken, workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/workspace/${encodeURIComponent(workspaceId)}/workflow${QS.query(QS.explode({
        jwtToken
    }))}`, {
        ...opts
    }));
}
/**
 * Get a cloud account connected to a workspace environment
 */
export function getCloudAccountByEnvironment1({ accountId, workspaceId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/workspace/${encodeURIComponent(workspaceId)}/environment/${encodeURIComponent(environmentId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get a list of cloud accounts connected to a workspace
 */
export function getCloudAccountByWorkspace1({ jwtToken, accountId, id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/workspace/${encodeURIComponent(id)}${QS.query(QS.explode({
        jwtToken
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get all available templates for Managed Cloud
 */
export function getManagedCloudTemplate(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/cloud-account/managed-account/template", {
        ...opts
    }));
}
/**
 * Get all available regions for Managed Cloud
 */
export function getManagedCloudRegion(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/cloud-account/managed-account/region", {
        ...opts
    }));
}
/**
 * Get Cloud Account data with details
 */
export function getCloudAccount1({ stackspotAccountId, workspaceId, environmentId, provider, $type, status }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/admin/cloud-account${QS.query(QS.explode({
        stackspotAccountId,
        workspaceId,
        environmentId,
        provider,
        "type": $type,
        status
    }))}`, {
        ...opts
    }));
}
/**
 * Get Cloud Account by ID
 */
export function getCloudAccountById1({ cloudAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/admin/cloud-account/${encodeURIComponent(cloudAccountId)}`, {
        ...opts
    }));
}
/**
 * Delete a cloud account.
 */
export function deleteCloudAccountFromEnvironment({ jwtToken, stackspotCustomerIp, id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/${encodeURIComponent(id)}${QS.query(QS.explode({
        jwtToken
    }))}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "stackspot-customer-ip": stackspotCustomerIp
        })
    }));
}
/**
 *
 *         Delete all accounts in a workspace.
 *
 */
export function deleteManagedAccountsFromWorkspace({ jwtToken, stackspotCustomerIp, workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/cloud-account/workspace/${encodeURIComponent(workspaceId)}${QS.query(QS.explode({
        jwtToken
    }))}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            "stackspot-customer-ip": stackspotCustomerIp
        })
    }));
}
/**
 * Delete a relation between control tower and stackspot account
 */
export function deleteAccountTower({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/admin/managed-cloud/control-tower/${encodeURIComponent(id)}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=cloudAccount.js.map