/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://cloud-cloud-runtime-api.dev.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://cloud-cloud-runtime-api.dev.stackspot.com"
};
export function createSchedule({ scheduleRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/schedule", oazapfts.json({
        ...opts,
        method: "POST",
        body: scheduleRequest
    })));
}
export function createDeployment({ authorization, createDeploymentRequestV2 }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/deployments", oazapfts.json({
        ...opts,
        method: "POST",
        body: createDeploymentRequestV2,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function setAutoscaling({ authorization, setAutoscalingRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/deployments/autoscaling", oazapfts.json({
        ...opts,
        method: "POST",
        body: setAutoscalingRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function cleanDeployments({ authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/clean/deployments", {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function cleanApplications({ authorization }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/clean/applications", {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createApplication({ authorization, applicationDtov2 }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/applications", oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDtov2,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    })));
}
export function stopApplication({ authorization, applicationId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/stop${QS.query(QS.explode({
        applicationId,
        runtimeId
    }))}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function startApplication({ authorization, applicationId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/start${QS.query(QS.explode({
        applicationId,
        runtimeId
    }))}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function restartApplication({ authorization, applicationId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/restart${QS.query(QS.explode({
        applicationId,
        runtimeId
    }))}`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            Authorization: authorization
        })
    }));
}
export function createRuntimeTag({ tagId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tags/${encodeURIComponent(tagId)}/${encodeURIComponent(runtimeId)}`, {
        ...opts,
        method: "POST"
    }));
}
export function createDeployment1({ createDeploymentRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/deployments", oazapfts.json({
        ...opts,
        method: "POST",
        body: createDeploymentRequest
    })));
}
export function getNamespace(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/deployments/namespace", {
        ...opts
    }));
}
export function createNamespace(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/deployments/namespace", {
        ...opts,
        method: "POST"
    }));
}
export function createApplication1({ applicationDto }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/applications", oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDto
    })));
}
export function getScheduling({ applicationId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/schedule/${encodeURIComponent(applicationId)}/runtime/${encodeURIComponent(runtimeId)}`, {
        ...opts
    }));
}
export function getRuntimeByUlid({ runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/runtimes/${encodeURIComponent(runtimeId)}`, {
        ...opts
    }));
}
export function listRepositories({ limit, offset }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/registries/repositories${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getRepositoryImages({ repositoryId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/registries/repositories/${encodeURIComponent(repositoryId)}/images`, {
        ...opts
    }));
}
export function listRuntimes({ projectId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/projects/${encodeURIComponent(projectId)}/runtimes`, {
        ...opts
    }));
}
export function listApplications({ projectId, limit, offset }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/projects/${encodeURIComponent(projectId)}/applications${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getDeployment({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/deployments/${encodeURIComponent(deploymentId)}`, {
        ...opts
    }));
}
export function getDeploymentStatus({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/deployments/${encodeURIComponent(deploymentId)}/status`, {
        ...opts
    }));
}
export function getDeploymentLogs({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/deployments/${encodeURIComponent(deploymentId)}/logs`, {
        ...opts
    }));
}
export function getDeploymentHealth({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/deployments/${encodeURIComponent(deploymentId)}/health`, {
        ...opts
    }));
}
export function getApplication({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function getSecrets({ applicationId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/${encodeURIComponent(runtimeId)}/secrets`, {
        ...opts
    }));
}
export function getInstances({ applicationId, runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/${encodeURIComponent(runtimeId)}/instances`, {
        ...opts
    }));
}
export function getApplicationHistory({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/history`, {
        ...opts
    }));
}
export function listDeployments({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/deployments`, {
        ...opts
    }));
}
export function getLastDeploymentByRuntime({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/deployments/last/runtime`, {
        ...opts
    }));
}
export function listApplications1({ projectId, limit, offset }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/project/${encodeURIComponent(projectId)}${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getRuntimeByUlid1({ runtimeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/runtimes/${encodeURIComponent(runtimeId)}`, {
        ...opts
    }));
}
export function getRevisions({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/revision/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function list({ limit, offset }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/registries${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function listRepositoriesByRegistryId({ limit, offset, id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/registries/${encodeURIComponent(id)}/repositories${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function listRepositoriesByDefaultRegistryId({ limit, offset }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/registries/repositories${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getImages({ repositoryName }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/registries/repositories/${encodeURIComponent(repositoryName)}/images`, {
        ...opts
    }));
}
export function getRepositoryById({ id, registryId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/registries/repositories/${encodeURIComponent(id)}${QS.query(QS.explode({
        registryId
    }))}`, {
        ...opts
    }));
}
export function listRuntimes1({ projectId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/projects/${encodeURIComponent(projectId)}/runtimes`, {
        ...opts
    }));
}
export function listApplications2({ projectId, limit, offset }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/projects/${encodeURIComponent(projectId)}/applications${QS.query(QS.explode({
        limit,
        offset
    }))}`, {
        ...opts
    }));
}
export function getDeployment1({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/deployments/${encodeURIComponent(deploymentId)}`, {
        ...opts
    }));
}
export function getDeploymentStatus1({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/deployments/${encodeURIComponent(deploymentId)}/status`, {
        ...opts
    }));
}
export function getDeploymentLogs1({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/deployments/${encodeURIComponent(deploymentId)}/logs`, {
        ...opts
    }));
}
export function getDeploymentHealth1({ deploymentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/deployments/${encodeURIComponent(deploymentId)}/health`, {
        ...opts
    }));
}
export function getDeploymentsId({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/deployments/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function getApplication1({ applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
export function deleteDeployment({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/deployments/${encodeURIComponent(id)}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=cloudRuntimes.js.map