/**
 * Workspace API
 * v1.0.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "https://workspace-workspace-api.stg.stackspot.com",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    generatedServerUrl: "https://workspace-workspace-api.stg.stackspot.com"
};
/**
 * Get a workspace variable by name
 */
export function workspaceVariableV2ControllerfindByName({ accountId, workspaceId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/variables/${encodeURIComponent(name)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Upsert workspace variable based on existing account variable
 */
export function workspaceVariableV2Controllerupsert({ workspaceId, name, upsertWorkspaceVariableRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/variables/${encodeURIComponent(name)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: upsertWorkspaceVariableRequest
    })));
}
/**
 * Add context to a typed element in a workspace's stack.
 */
export function contextV2ControlleraddTypedContextInWorkspace({ workspaceId, stackVersionId, externalId, $type, contextValuesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/${encodeURIComponent($type)}s/${encodeURIComponent(externalId)}/input-context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: contextValuesRequest
    })));
}
/**
 * Import context in a workspace's stack.
 */
export function contextV2ControllerimportContextInWorkspace({ workspaceId, stackVersionId, importContextV2Request }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/input-context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: importContextV2Request
    })));
}
/**
 * Add context to a typed element in an account's stack.
 */
export function contextV2ControlleraddTypedContextInAccount({ stackVersionId, externalId, $type, contextValuesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/account/stacks/${encodeURIComponent(stackVersionId)}/${encodeURIComponent($type)}s/${encodeURIComponent(externalId)}/input-context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: contextValuesRequest
    })));
}
/**
 * Import context in an account's stack.
 */
export function contextV2ControllerimportContextInAccount({ stackVersionId, importContextV2Request }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/account/stacks/${encodeURIComponent(stackVersionId)}/input-context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: importContextV2Request
    })));
}
/**
 * List all configured context of an workflow by workspace and stack.
 */
export function workflowWorkspaceControllerlistContextByWorkspaceStack({ workspaceId, workflowId, stackId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowId)}/stacks/${encodeURIComponent(stackId)}/context`, {
        ...opts
    }));
}
/**
 * Save workspace workflow context
 */
export function workflowWorkspaceControllersaveWorkspaceWorkflowContext({ workspaceId, workflowId, stackId, workspaceWorkflowCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/workflows/${encodeURIComponent(workflowId)}/stacks/${encodeURIComponent(stackId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: workspaceWorkflowCreateRequest
    })));
}
/**
 * Get Workflow of a stack in a workspace.
 */
export function workflowControllergetWorkspaceWorkflow({ workspaceId, stackVersionId, identifier }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/workflows${QS.query(QS.explode({
        identifier
    }))}`, {
        ...opts
    }));
}
/**
 * Add step to a workflow belonging to a workspace.
 */
export function workflowControlleraddWorkflowStepInWorkspace({ workspaceId, stackVersionId, addWorkspaceWorkflowStepRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/workflows`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: addWorkspaceWorkflowStepRequest
    })));
}
/**
 * Update shared infrastructure status.
 */
export function workspaceSharedInfrastructureControllerupdateStatus({ workspaceId, sharedInfraId, updateSharedInfraStatusRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/status`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateSharedInfraStatusRequest
    })));
}
/**
 * Get shared infra links visibility
 */
export function sharedInfraLinkControllergetVisibleLinks({ workspaceId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links/visibility-management`, {
        ...opts
    }));
}
/**
 * Update application links visibility
 */
export function sharedInfraLinkControllerupdateLinksVisibility({ workspaceId, sharedInfraId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links/visibility-management`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update activity status by workspace.
 */
export function managerRunControllerupdateRun({ accountId, workspaceId, runId, updateRunRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/run/${encodeURIComponent(runId)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateRunRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Update plugin status by workspace.
 */
export function managerRunControllerrunTask({ accountId, workspaceId, runId, runTaskRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/run/${encodeURIComponent(runId)}/plugin`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: runTaskRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Deployment tag register.
 */
export function managerRunControllerdeploymentTag({ accountId, workspaceId, runId, deploymentTagRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/run/${encodeURIComponent(runId)}/deploy-tag`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: deploymentTagRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Request to upsert connection interfaces attributes.
 */
export function connectionInterfaceControllerupdateConnectionInterfaceAttributes({ workspaceId, connectionInterfaceId, updateConnectionInterfaceAttributesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}/attributes`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateConnectionInterfaceAttributesRequest
    })));
}
/**
 * Request to upsert connection interfaces.
 */
export function connectionInterfaceControllerupsertBatch({ workspaceId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/batch`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Update application status.
 */
export function workspaceApplicationControllerupdateStatus({ workspaceId, applicationId, accountId, updateApplicationStatusRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/status`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateApplicationStatusRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get application links visibility
 */
export function applicationLinkControllergetVisibleLinks({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links/visibility-management`, {
        ...opts
    }));
}
/**
 * Update application links visibility
 */
export function applicationLinkControllerupdateLinksVisibility({ workspaceId, applicationId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links/visibility-management`, oazapfts.json({
        ...opts,
        method: "PUT",
        body
    })));
}
/**
 * Get workflow settings with associated stacks.
 */
export function workflowAccountControllerlistSettingsByAccountWorkflow({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/settings`, {
        ...opts
    }));
}
/**
 * Update settings information of a workflow account.
 */
export function workflowAccountControllerupdateSettingsByAccountWorkflow({ workflowId, settingsWorkflowSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/settings`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: settingsWorkflowSaveRequest
    })));
}
/**
 * List all configured context of an workflow account.
 */
export function workflowAccountControllerlistContextByAccountWorkflow({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/context`, {
        ...opts
    }));
}
/**
 * Update all context configurations of a workflow account.
 */
export function workflowAccountControllerupdateContextsByAccountWorkflow({ workflowId, contextsWorkflowSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: contextsWorkflowSaveRequest
    })));
}
/**
 * List all actions of an workflow account.
 */
export function workflowAccountControllerlistActionsByAccountWorkflow({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/actions`, {
        ...opts
    }));
}
/**
 * Update all actions associations with a workflow account.
 */
export function workflowAccountControllerupdateActionsByAccountWorkflow({ workflowId, actionsWorkflowSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}/actions`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: actionsWorkflowSaveRequest
    })));
}
/**
 * Get an account variable by name
 */
export function accountVariableControllerfindByName({ accountId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/variables/${encodeURIComponent(name)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Update account variable
 */
export function accountVariableControllerupdate({ name, updateAccountVariableRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/variables/${encodeURIComponent(name)}`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: updateAccountVariableRequest
    })));
}
/**
 * Delete account variable
 */
export function accountVariableControllerdelete({ name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/variables/${encodeURIComponent(name)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Get Workflow of a stack in an account.
 */
export function workflowControllergetAccountWorkflow({ stackVersionId, identifier }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackVersionId)}/workflows${QS.query(QS.explode({
        identifier
    }))}`, {
        ...opts
    }));
}
/**
 * Add step to a workflow belonging to an account.
 */
export function workflowControlleraddWorkflowStepInAccount({ stackVersionId, addAccountWorkflowStepRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackVersionId)}/workflows`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: addAccountWorkflowStepRequest
    })));
}
/**
 * Save stack workflow context
 */
export function workflowStackControllersaveStackWorkflowContext({ stackId, workflowId, stackWorkflowCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowId)}/context`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: stackWorkflowCreateRequest
    })));
}
/**
 * Get all workspaces without stack version and favorites filter
 */
export function workspaceV2ControllergetWorkspacesWithoutStackFilter({ name, aclOnly, accountId, page, size, sortBy, sortDir }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces${QS.query(QS.explode({
        name,
        aclOnly,
        page,
        size,
        sortBy,
        sortDir
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get all workspaces
 */
export function workspaceV2ControllergetWorkspaces({ aclOnly, accountId, page, size, sortBy, sortDir, getWorkspacePageRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces${QS.query(QS.explode({
        aclOnly,
        page,
        size,
        sortBy,
        sortDir
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getWorkspacePageRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get shared infra page.
 */
export function workspaceSharedInfrastructureV2ControllergetSharedInfra({ workspaceId, page, size, sortBy, sortDir, getSharedInfraRequestBody }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getSharedInfraRequestBody
    })));
}
/**
 * Get applications from a workspace with pagination.
 */
export function workspaceApplicationV2ControllergetApplications({ workspaceId, page, size, sortBy, sortDir, getApplicationsRequestBody }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getApplicationsRequestBody
    })));
}
/**
 * List specific shared infra or application usage by plugin list.
 */
export function usageInsightsControllerlistPluginUsageByTargetId({ accountId, targetType, targetId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/${encodeURIComponent(targetType)}/${encodeURIComponent(targetId)}/plugins/usage`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * List all shared infras or applications usage by plugin list.
 */
export function usageInsightsControllerlistAllPluginUsage({ accountId, targetType, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/${encodeURIComponent(targetType)}/plugins/usage`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get all workspaces
 */
export function workspaceControllergetWorkspaces({ name, aclOnly, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces${QS.query(QS.explode({
        name,
        aclOnly
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Create workspace
 */
export function workspaceControllersave({ newWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/workspaces", oazapfts.json({
        ...opts,
        method: "POST",
        body: newWorkspaceRequest
    })));
}
/**
 * Get all stacks in a workspace.
 */
export function workspaceStackControllergetStacks({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks`, {
        ...opts
    }));
}
/**
 * Add a stack in a workspace.
 */
export function workspaceStackControlleraddStack({ workspaceId, addStackInWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addStackInWorkspaceRequest
    })));
}
/**
 * Get all stacks with context in a workspace.
 */
export function workspaceStackControllergetStacksWithContext({ workspaceId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/with-context`, oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Add a stack version in a workspace.
 */
export function workspaceStackControlleraddUpdateStack({ workspaceId, addStackInWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/-/update`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addStackInWorkspaceRequest
    })));
}
/**
 * Get all shared infrastructure of a workspace.
 */
export function workspaceSharedInfrastructureControllergetAllSharedInfrastructure({ workspaceId, name, stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra${QS.query(QS.explode({
        name,
        stackVersionId
    }))}`, {
        ...opts
    }));
}
/**
 * Create shared infrastructure in a workspace.
 */
export function workspaceSharedInfrastructureControllersave({ workspaceId, fromPortal, createSharedInfraRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra${QS.query(QS.explode({
        fromPortal
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createSharedInfraRequest
    })));
}
/**
 * Get shared infrastructure of a workspace.
 */
export function workspaceSharedInfrastructureControllergetSharedInfrastructure({ workspaceId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}`, {
        ...opts
    }));
}
/**
 * Recreate a shared infrastructure in a workspace.
 */
export function workspaceSharedInfrastructureControllerrecreate({ workspaceId, sharedInfraId, recreateSharedInfraRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: recreateSharedInfraRequest
    })));
}
/**
 * Delete infrastructure in a workspace.
 */
export function workspaceSharedInfrastructureControllerdeleteSharedInfra({ workspaceId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update shared infrastructure in a workspace.
 */
export function workspaceSharedInfrastructureControllerupdate({ workspaceId, sharedInfraId, updateSharedInfraRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateSharedInfraRequest
    })));
}
/**
 * Get all shared infra links
 */
export function sharedInfraLinkControllergetSharedInfraLinks({ workspaceId, sharedInfraId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Create shared infra link
 */
export function sharedInfraLinkControllersave({ workspaceId, sharedInfraId, createSharedInfraLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createSharedInfraLinkRequest
    })));
}
/**
 * Has active deploy with type self hosted?
 */
export function workspaceSharedInfrastructureControllerhasActiveDeployWithTypeSelfHosted({ workspaceId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/has-self-hosted-deploy`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Can the shared infra be destroyed?
 */
export function workspaceSharedInfrastructureControllercanBeDestroyed({ workspaceId, sharedInfraId, environmentId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(environmentId)}/can-be-destroyed`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Register the snapshot of a shared infrastructure's deploy.
 */
export function workspaceSharedInfrastructureControllerprocessDeploySnapshot({ workspaceId, sharedInfraId, sharedInfraDeploySnapshotRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/deploy`, oazapfts.json({
        ...opts,
        method: "POST",
        body: sharedInfraDeploySnapshotRequest
    })));
}
/**
 * Runs an orchestration in a workspace.
 */
export function managerRunControllerstartRun({ accountId, workspaceId, startRunRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/run`, oazapfts.json({
        ...opts,
        method: "POST",
        body: startRunRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get all workspace links
 */
export function workspaceLinkControllergetWorkspaceLinks({ workspaceId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/links${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Create workspace
 */
export function workspaceLinkControllersave({ workspaceId, createWorkspaceLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createWorkspaceLinkRequest
    })));
}
/**
 * Get all workspace embedded links
 */
export function workspaceEmbeddedLinkControllergetEmbeddedLinks({ workspaceId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/embedded-links${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Create workspace embedded link
 */
export function workspaceEmbeddedLinkControllersave({ workspaceId, createWorkspaceEmbeddedLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/embedded-links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createWorkspaceEmbeddedLinkRequest
    })));
}
/**
 * List all connection interfaces of a workspace.
 */
export function connectionInterfaceControllergetConnectionInterfaces({ workspaceId, typeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces${QS.query(QS.explode({
        typeId
    }))}`, {
        ...opts
    }));
}
/**
 * Create a connection interface in a workspace.
 */
export function connectionInterfaceControlleradd({ workspaceId, createConnectionInterfaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createConnectionInterfaceRequest
    })));
}
/**
 * Update the visibility of a connection interface.
 */
export function connectionInterfaceControllerupdateConnectionInterfaceVisibility({ workspaceId, connectionInterfaceId, updateConnectionInterfaceVisibilityRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}/visibility/batch`, oazapfts.json({
        ...opts,
        method: "POST",
        body: updateConnectionInterfaceVisibilityRequest
    })));
}
/**
 * Get all application of a workspace.
 */
export function workspaceApplicationControllergetApplications({ workspaceId, name, stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications${QS.query(QS.explode({
        name,
        stackVersionId
    }))}`, {
        ...opts
    }));
}
/**
 * Create application on workspace.
 */
export function workspaceApplicationControllersave({ workspaceId, fromPortal, createApplicationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications${QS.query(QS.explode({
        fromPortal
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createApplicationRequest
    })));
}
/**
 * Get application of a workspace.
 */
export function workspaceApplicationControllergetApplication({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}`, {
        ...opts
    }));
}
/**
 * Recreate an application in a workspace.
 */
export function workspaceApplicationControllerrecreate({ workspaceId, applicationId, recreateApplicationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: recreateApplicationRequest
    })));
}
/**
 * Delete application of a workspace.
 */
export function workspaceApplicationControllerdeleteApplication({ workspaceId, applicationId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Update an application of a workspace.
 */
export function workspaceApplicationControllerupdate({ workspaceId, applicationId, updateApplicationRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateApplicationRequest
    })));
}
/**
 * Get all application links
 */
export function applicationLinkControllergetApplicationLinks({ workspaceId, applicationId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Create application link
 */
export function applicationLinkControllersave({ workspaceId, applicationId, createApplicationLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createApplicationLinkRequest
    })));
}
/**
 * Has active deploy with type self hosted?
 */
export function workspaceApplicationControllerhasActiveDeployWithTypeSelfHosted({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/has-self-hosted-deploy`, {
        ...opts,
        method: "POST"
    }));
}
/**
 * Can the application be destroyed?
 */
export function workspaceApplicationControllercanBeDestroyed({ workspaceId, applicationId, environmentId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/can-be-destroyed`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
export function workspaceApplicationControllerregistryAppDestroy({ workspaceId, applicationId, environmentId, applicationDestroyRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/app-destroy`, oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDestroyRequest
    })));
}
export function workspaceApplicationControllerregistryAppDeploy({ workspaceId, applicationId, environmentId, applicationDeployRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchText(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/app-deploy`, oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDeployRequest
    })));
}
/**
 * Get all application embedded links
 */
export function applicationEmbeddedLinkControllergetEmbeddedLinks({ workspaceId, applicationId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/embedded-links${QS.query(QS.explode({
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Create application embedded link
 */
export function applicationEmbeddedLinkControllersave({ workspaceId, applicationId, createApplicationEmbeddedLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/embedded-links`, oazapfts.json({
        ...opts,
        method: "POST",
        body: createApplicationEmbeddedLinkRequest
    })));
}
/**
 * Register the snapshot of an application's deploy.
 */
export function workspaceApplicationControllerprocessDeploySnapshot({ workspaceId, applicationId, applicationDeploySnapshotRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/deploy`, oazapfts.json({
        ...opts,
        method: "POST",
        body: applicationDeploySnapshotRequest
    })));
}
/**
 * List all workspaces usage by stack version list.
 */
export function usageInsightsControllerlistAllStackUsage({ accountId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/workspaces/stacks/usage", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get plugins applied to a workspace's application.
 */
export function accountSharedInfrastructureControllergetSharedInfraPage({ page, size, sortBy, sortDir, getAllSharedInfraRequestBody }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/shared-infra/-/search${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getAllSharedInfraRequestBody
    })));
}
/**
 * Retrieve the amount of apps and shared infras that use the given plugin version id list
 */
export function usageInsightsControllerfindPluginUsageAmount({ accountId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/plugin-usage", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get environments
 */
export function environmentControllergetEnvironments({ accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/environments", {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Save environment
 */
export function environmentControllersave({ environmentSaveRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/environments", oazapfts.json({
        ...opts,
        method: "POST",
        body: environmentSaveRequest
    })));
}
/**
 * Batch save environment
 */
export function environmentControllersaveBatch({ accountId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/environments/batch", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    })));
}
/**
 * Get plugins applied to a workspace's application.
 */
export function accountApplicationControllergetApplicationPage({ page, size, sortBy, sortDir, getAllApplicationsRequestBody }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications/-/search${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: getAllApplicationsRequestBody
    })));
}
/**
 * List all workflows of an account.
 */
export function workflowAccountControllerlistAccountWorkflows({ $type, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows${QS.query(QS.explode({
        "type": $type,
        name
    }))}`, {
        ...opts
    }));
}
/**
 * Create an account workflow
 */
export function workflowAccountControllersaveAccountWorkflow({ accountWorkflowCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/workflows", oazapfts.json({
        ...opts,
        method: "POST",
        body: accountWorkflowCreateRequest
    })));
}
/**
 * Find all account variables
 */
export function accountVariableControllerfindAll({ accountId, name, page, size, sortBy, sortDir }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/variables${QS.query(QS.explode({
        name,
        page,
        size,
        sortBy,
        sortDir
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Create account variable
 */
export function accountVariableControllercreate({ createAccountVariableRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/variables", oazapfts.json({
        ...opts,
        method: "POST",
        body: createAccountVariableRequest
    })));
}
/**
 * List all stacks with context for given account and given stackVersionId list.
 */
export function contextControllerlistStackVersionsWithAccountContext({ body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/stacks-with-context", oazapfts.json({
        ...opts,
        method: "POST",
        body
    })));
}
/**
 * Get workspace by id
 */
export function workspaceControllergetWorkspaceForId({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts
    }));
}
/**
 * Delete workspace.
 */
export function workspaceControllerdelete({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update workspace
 */
export function workspaceControllerupdate({ workspaceId, updateWorkspaceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateWorkspaceRequest
    })));
}
/**
 * Get shared infra links by id
 */
export function sharedInfraLinkControllergetSharedInfraLink({ workspaceId, sharedInfraId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts
    }));
}
/**
 * Delete shared infra links
 */
export function sharedInfraLinkControllerdelete({ workspaceId, sharedInfraId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update shared infra links
 */
export function sharedInfraLinkControllerupdate({ workspaceId, sharedInfraId, linkId, updateSharedInfraLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/links/${encodeURIComponent(linkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateSharedInfraLinkRequest
    })));
}
/**
 * Get workspace link by id
 */
export function workspaceLinkControllergetWorkspaceLink({ workspaceId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts
    }));
}
/**
 * Delete workspace links
 */
export function workspaceLinkControllerdelete({ workspaceId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update workspace links
 */
export function workspaceLinkControllerupdate({ workspaceId, linkId, updateWorkspaceLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/links/${encodeURIComponent(linkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateWorkspaceLinkRequest
    })));
}
/**
 * Get workspace embedded link by id
 */
export function workspaceEmbeddedLinkControllergetEmbeddedLink({ workspaceId, embeddedLinkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/embedded-links/${encodeURIComponent(embeddedLinkId)}`, {
        ...opts
    }));
}
/**
 * Delete workspace embedded link
 */
export function workspaceEmbeddedLinkControllerdelete({ workspaceId, embeddedLinkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/embedded-links/${encodeURIComponent(embeddedLinkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update workspace embedded link
 */
export function workspaceEmbeddedLinkControllerupdate({ workspaceId, embeddedLinkId, updateWorkspaceEmbeddedLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/embedded-links/${encodeURIComponent(embeddedLinkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateWorkspaceEmbeddedLinkRequest
    })));
}
/**
 * Upsert workspace embedded link
 */
export function workspaceEmbeddedLinkControllerupsertBatch({ workspaceId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/embedded-links/batch`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body
    })));
}
/**
 * Get application link by id
 */
export function applicationLinkControllergetApplicationLink({ workspaceId, applicationId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts
    }));
}
/**
 * Delete workspace links
 */
export function applicationLinkControllerdelete({ workspaceId, applicationId, linkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links/${encodeURIComponent(linkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update application links
 */
export function applicationLinkControllerupdate({ workspaceId, applicationId, linkId, updateApplicationLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/links/${encodeURIComponent(linkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateApplicationLinkRequest
    })));
}
/**
 * Get application embedded link by id
 */
export function applicationEmbeddedLinkControllergetEmbeddedLink({ workspaceId, applicationId, embeddedLinkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/embedded-links/${encodeURIComponent(embeddedLinkId)}`, {
        ...opts
    }));
}
/**
 * Delete application embedded link
 */
export function applicationEmbeddedLinkControllerdelete({ workspaceId, applicationId, embeddedLinkId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/embedded-links/${encodeURIComponent(embeddedLinkId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Update application embedded link
 */
export function applicationEmbeddedLinkControllerupdate({ workspaceId, applicationId, embeddedLinkId, updateApplicationEmbeddedLinkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/embedded-links/${encodeURIComponent(embeddedLinkId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateApplicationEmbeddedLinkRequest
    })));
}
/**
 * Upsert application embedded link
 */
export function applicationEmbeddedLinkControllerupsertBatch({ workspaceId, applicationId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/embedded-links/batch`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body
    })));
}
/**
 * Archive application from a workspace.
 */
export function workspaceApplicationControllerarchiveApplication({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/archive`, {
        ...opts,
        method: "PATCH"
    }));
}
/**
 * Get environment by id
 */
export function environmentControllergetEnvironment({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/environments/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Update environment
 */
export function environmentControllerupdate({ id, environmentUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/environments/${encodeURIComponent(id)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: environmentUpdateRequest
    })));
}
/**
 * Find all workspace variables
 */
export function workspaceVariableV2ControllerfindAll({ workspaceId, accountId, page, size, sortBy, sortDir, mandate, name, showEmptyValues }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/variables${QS.query(QS.explode({
        page,
        size,
        sortBy,
        sortDir,
        mandate,
        name,
        showEmptyValues
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get plugins applied to a workspace's shared infrastructure.
 */
export function workspaceSharedInfrastructureV2ControllergetAppliedPlugins({ workspaceId, sharedInfraId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(environmentId)}/plugins`, {
        ...opts
    }));
}
/**
 * List all available connection interfaces for a workspace.
 */
export function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfacesForAWorkspace({ workspaceId, typeId, automaticallyGenerated }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/available-connection-interfaces${QS.query(QS.explode({
        typeId,
        automaticallyGenerated
    }))}`, {
        ...opts
    }));
}
/**
 * Get available connection interface for a workspace by its slug.
 */
export function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAWorkspace({ workspaceId, slug, environmentId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/available-connection-interfaces/${encodeURIComponent(slug)}${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get plugins applied to a workspace's application.
 */
export function workspaceApplicationV2ControllergetAppliedPlugins({ workspaceId, applicationId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/plugins`, {
        ...opts
    }));
}
/**
 * List all available connection interfaces for an application.
 */
export function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfacesForAnApplication({ applicationId, typeId, automaticallyGenerated }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/available-connection-interfaces${QS.query(QS.explode({
        typeId,
        automaticallyGenerated
    }))}`, {
        ...opts
    }));
}
/**
 * Get available connection interface for an application by its slug.
 */
export function availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAnApplication({ applicationId, slug, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/applications/${encodeURIComponent(applicationId)}/available-connection-interfaces/${encodeURIComponent(slug)}${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts
    }));
}
/**
 * Get connection interface in use by applicationId or sharedInfraId.
 */
export function connectionInterfaceInUseControllergetConnectionInterfaceInUseTargetId({ workspaceId, targetId, targetType, slug, accountId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/${encodeURIComponent(targetType)}/${encodeURIComponent(targetId)}/connection-interfaces-in-use/${encodeURIComponent(slug)}/plugins${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get all workspace's variables v1
 */
export function workspaceVariableV1ControllerfindAll({ workspaceId, filter }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/variables${QS.query(QS.explode({
        filter
    }))}`, {
        ...opts
    }));
}
/**
 * Get stack in a workspace by stack version id.
 */
export function workspaceStackControllergetStackById({ workspaceId, stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}`, {
        ...opts
    }));
}
/**
 * Delete a stack from a workspace.
 */
export function workspaceStackControllerdeleteStack({ workspaceId, stackVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * List the consolidated input context of all stack elements for given type in a workspace.
 */
export function contextControllerlistConsolidatedContext({ workspaceId, stackVersionId, $type, envName, externalId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackVersionId)}/${encodeURIComponent($type)}-context${QS.query(QS.explode({
        envName,
        externalId
    }))}`, {
        ...opts
    }));
}
/**
 * Get workflow settings with context by stack and workflowType
 */
export function workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType({ workspaceId, stackId, workflowType }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowType)}`, {
        ...opts
    }));
}
/**
 * Get plugins applied to a workspace's shared infrastructure.
 */
export function workspaceSharedInfrastructureControllergetAppliedPlugins({ workspaceId, sharedInfraId, environmentId, $type }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(environmentId)}/plugins${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
/**
 * List shared infrastructure's activities.
 */
export function workspaceSharedInfrastructureControllerlistActivities({ workspaceId, sharedInfraId, environmentId, $type, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/environments/${encodeURIComponent(environmentId)}/activities${QS.query(QS.explode({
        "type": $type,
        page,
        size
    }))}`, {
        ...opts
    }));
}
/**
 * Get all in use connection interface dependencies from the shared infra.
 */
export function workspaceSharedInfrastructureControllergetDependencyTree({ workspaceId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/${encodeURIComponent(sharedInfraId)}/dependencies`, {
        ...opts
    }));
}
/**
 * Get stack version in use by shared infra in a workspace
 */
export function workspaceSharedInfrastructureControllergetStackVersionsInUse({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/shared-infra/stacks/versions`, {
        ...opts
    }));
}
/**
 * Get a connection interface by connection interface id.
 */
export function connectionInterfaceControllergetConnectionInterface({ workspaceId, connectionInterfaceId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(connectionInterfaceId)}${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts
    }));
}
/**
 * Get all connection interface in use.
 */
export function connectionInterfaceInUseControllergetAllConnectionInterfaceInUse({ workspaceId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces-in-use`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get connection interface in use by slug.
 */
export function connectionInterfaceInUseControllergetConnectionInterfaceInUseBySlug({ workspaceId, slug, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces-in-use/${encodeURIComponent(slug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * List all available connection interfaces for a workspace.
 */
export function availableConnectionInterfaceControllergetAvailableConnectionInterfacesForAWorkspace({ workspaceId, typeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/available-connection-interfaces${QS.query(QS.explode({
        typeId
    }))}`, {
        ...opts
    }));
}
/**
 * Get available connection interface for a workspace by its id.
 */
export function availableConnectionInterfaceControllergetAvailableConnectionInterfaceForAWorkspace({ workspaceId, connectionInterfaceId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/available-connection-interfaces/${encodeURIComponent(connectionInterfaceId)}${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts
    }));
}
/**
 * Get plugins applied to a workspace's application.
 */
export function workspaceApplicationControllergetAppliedPlugins({ workspaceId, applicationId, environmentId, $type }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/plugins${QS.query(QS.explode({
        "type": $type
    }))}`, {
        ...opts
    }));
}
export function workspaceApplicationControllergetAppDeployInfo({ workspaceId, applicationId, environmentId, accountId, tenant }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/deploy-info`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId,
            tenant
        })
    }));
}
/**
 * List application's activities.
 */
export function workspaceApplicationControllerlistActivities({ workspaceId, applicationId, environmentId, $type, page, size }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/environments/${encodeURIComponent(environmentId)}/activities${QS.query(QS.explode({
        "type": $type,
        page,
        size
    }))}`, {
        ...opts
    }));
}
/**
 * Get all in use connection interface dependencies from the application.
 */
export function workspaceApplicationControllergetDependencyTree({ workspaceId, applicationId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/dependencies`, {
        ...opts
    }));
}
/**
 * Can the application be destroyed?
 */
export function workspaceApplicationControllercanBeDeleted({ workspaceId, applicationId, accountId, tenant }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/${encodeURIComponent(applicationId)}/can-be-deleted`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId,
            tenant
        })
    }));
}
/**
 * Get stack version in use by applications in a workspace
 */
export function workspaceApplicationControllergetStackVersionsInUse({ workspaceId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/applications/stacks/versions`, {
        ...opts
    }));
}
/**
 * Get all workspaces within user permission
 */
export function workspaceControllergetWorkspacesFromUserPermission({ resource, action }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/from-user-permission/${encodeURIComponent(resource)}/${encodeURIComponent(action)}`, {
        ...opts
    }));
}
/**
 * Get shared infrastructure information by id.
 */
export function accountSharedInfrastructureControllergetSharedInfra({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/shared-infra/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * Check if there is/are any deployment active for the provided plugin
 */
export function pluginInUseControllercheckPluginInUse({ pluginVersionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/plugin-in-use/${encodeURIComponent(pluginVersionId)}`, {
        ...opts
    }));
}
/**
 * Check availability of connection slug in account.
 */
export function checkConnectionSlugAvailabilityControllercheckConnectionSlugAvailability({ slug, applicationId, sharedInfraId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/connection-interfaces/${encodeURIComponent(slug)}/availability${QS.query(QS.explode({
        applicationId,
        sharedInfraId
    }))}`, {
        ...opts
    }));
}
/**
 * Get an application list by repo url.
 */
export function accountApplicationControllergetApplicationsByUrl({ accountId, repoUrl }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications${QS.query(QS.explode({
        repoUrl
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get application information by id.
 */
export function accountApplicationControllergetApplication({ id }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications/${encodeURIComponent(id)}`, {
        ...opts
    }));
}
/**
 * List all available connection interfaces for an application.
 */
export function availableConnectionInterfaceControllergetAvailableConnectionInterfacesForAnApplication({ applicationId, typeId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications/${encodeURIComponent(applicationId)}/available-connection-interfaces${QS.query(QS.explode({
        typeId
    }))}`, {
        ...opts
    }));
}
/**
 * Get available connection interface for an application by its id.
 */
export function availableConnectionInterfaceControllergetAvailableConnectionInterfaceForAnApplication({ applicationId, connectionInterfaceId, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/applications/${encodeURIComponent(applicationId)}/available-connection-interfaces/${encodeURIComponent(connectionInterfaceId)}${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts
    }));
}
/**
 * Get action version ranges used in workflows given an actionId.
 */
export function workflowAccountControllerlistActionVersionRangesUsage({ accountId, actionId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/actions/${encodeURIComponent(actionId)}/versions`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Get account variable usage
 */
export function accountVariableControllerusage({ accountId, name }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/variables/${encodeURIComponent(name)}/usage`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * List the input context of all stack elements for given type in account.
 */
export function contextControllerlistAccountContext({ stackVersionId, $type, envName, externalId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackVersionId)}/${encodeURIComponent($type)}-context${QS.query(QS.explode({
        envName,
        externalId
    }))}`, {
        ...opts
    }));
}
/**
 * Get workflow of a stackId by workflow type.
 */
export function workflowStackControllerlistWorkflowByStackIdAndType({ stackId, workflowType }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackId)}/workflows/${encodeURIComponent(workflowType)}`, {
        ...opts
    }));
}
/**
 * Get workflows by a stackId.
 */
export function workflowStackControllerlistWorkflowsByStackId({ stackId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/stacks/${encodeURIComponent(stackId)}/all-workflows`, {
        ...opts
    }));
}
/**
 * List all stacks with workflow by account.
 */
export function accountStackControllerlistStacksWithWorkflow(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/stacks/with-workflow", {
        ...opts
    }));
}
/**
 * List all stacks that are most commonly used by applications and shared infrastructure.
 */
export function accountStackControllerlistMostUsedStacks({ accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/stacks/most-used", {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * List all default workflows of an account.
 */
export function workflowAccountControllerlistDefaultAccountWorkflows(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/account/default-workflows", {
        ...opts
    }));
}
/**
 * Delete completely connection interfaces from all environments.
 */
export function connectionInterfaceControllerdeleteConnectionInterfaceFromAllEnvironments({ workspaceId, slug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete connection interfaces.
 */
export function connectionInterfaceControllerdeleteConnectionInterface({ workspaceId, slug, environmentId, accountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(slug)}/environment/${encodeURIComponent(environmentId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accountId
        })
    }));
}
/**
 * Delete connection interface attributes by environment.
 */
export function connectionInterfaceControllerdeleteConnectionInterfaceAttributesFromEnvironment({ workspaceId, slug, environmentId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspaces/${encodeURIComponent(workspaceId)}/connection-interfaces/${encodeURIComponent(slug)}/attributes${QS.query(QS.explode({
        environmentId
    }))}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Delete an account workflow.
 */
export function workflowAccountControllerdeleteAccountWorkflow({ workflowId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/account/workflows/${encodeURIComponent(workflowId)}`, {
        ...opts,
        method: "DELETE"
    }));
}
//# sourceMappingURL=workspace.js.map