/**
 * FastAPI
 * 0.1.0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
import * as QS from "@oazapfts/runtime/query";
export const defaults = {
    headers: {},
    baseUrl: "/",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {};
/**
 * Metrics
 */
export function metricsMetricsGet(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/metrics", {
        ...opts
    }));
}
/**
 * List Ai Stacks
 */
export function listAiStacksV1AiStacksGet({ visibility, order, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks${QS.query(QS.explode({
        visibility,
        order
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Ai Stack
 */
export function createAiStackV1AiStacksPost({ authorization, xAccountId, newAiStackRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/ai-stacks", oazapfts.json({
        ...opts,
        method: "POST",
        body: newAiStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Update Ai Stack
 */
export function updateAiStackV1AiStacksStackIdPatch({ stackId, authorization, xAccountId, updateAiStackRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateAiStackRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Ai Stack
 */
export function getAiStackV1AiStacksStackIdGet({ stackId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Remove Ai Stack
 */
export function removeAiStackV1AiStacksStackIdDelete({ stackId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Get Ai Stack
 */
export function getAiStackV1AiStacksStackNameExistsGet({ stackName, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackName)}/exists`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Fork
 */
export function forkV1AiStacksStackIdForkPost({ stackId, authorization, xAccountId, aiStackForkRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackId)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: aiStackForkRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Share
 */
export function shareV1AiStacksStackIdSharePost({ stackId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackId)}/share`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish
 */
export function publishV1AiStacksStackIdPublishPost({ stackId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/ai-stacks/${encodeURIComponent(stackId)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Project Files
 */
export function projectFilesV1ProjectFilesPost({ authorization, xAccountId, newProjectFilesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/project-files", oazapfts.json({
        ...opts,
        method: "POST",
        body: newProjectFilesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Quick Actions
 */
export function quickActionsV1QuickActionsPost({ authorization, xAccountId, quickActionsRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/quick-actions", oazapfts.json({
        ...opts,
        method: "POST",
        body: quickActionsRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Dev Assistant
 */
export function devAssistantV1ChatPost({ authorization, xAccountId, codeBuddyApiV1SchemasChatRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/chat", oazapfts.json({
        ...opts,
        method: "POST",
        body: codeBuddyApiV1SchemasChatRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Post Event
 */
export function postEventV1EventsPost({ authorization, xAccountId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/events", oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Upload Url
 */
export function getUploadUrlV1FileUploadUrlPost({ authorization, xAccountId, newFileUploadUrlRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/file-upload/url", oazapfts.json({
        ...opts,
        method: "POST",
        body: newFileUploadUrlRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Upload Form
 */
export function getUploadFormV1FileUploadFormPost({ authorization, xAccountId, newFileUploadUrlRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/file-upload/form", oazapfts.json({
        ...opts,
        method: "POST",
        body: newFileUploadUrlRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get File Upload Status
 */
export function getFileUploadStatusV1FileUploadFileUploadIdGet({ fileUploadId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/file-upload/${encodeURIComponent(fileUploadId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Report Health
 */
export function reportHealthHealthzGet(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/healthz", {
        ...opts
    }));
}
/**
 * Create Knowledge Source
 */
export function createKnowledgeSourceV1KnowledgeSourcesPost({ authorization, xAccountId, newKnowledgeSourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/knowledge-sources", oazapfts.json({
        ...opts,
        method: "POST",
        body: newKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Knowledge Sources
 */
export function listKnowledgeSourcesV1KnowledgeSourcesGet({ visibility, order, $default, types, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources${QS.query(QS.explode({
        visibility,
        order,
        "default": $default,
        types
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Find Knowledge Source
 */
export function findKnowledgeSourceV1KnowledgeSourcesSlugGet({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Update Knowledge Source
 */
export function updateKnowledgeSourceV1KnowledgeSourcesSlugPatch({ slug, authorization, xAccountId, knowledgeSourcePatchesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: knowledgeSourcePatchesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Delete Knowledge Source
 */
export function deleteKnowledgeSourceV1KnowledgeSourcesSlugDelete({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Find Knowledge Source Dependencies
 */
export function findKnowledgeSourceDependenciesV1KnowledgeSourcesSlugDependenciesGet({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/dependencies`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Search
 */
export function searchV1KnowledgeSourcesSlugSimilaritySearchGet({ slug, q, size, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/similarity-search${QS.query(QS.explode({
        q,
        size
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Share Knowledge Source
 */
export function shareKnowledgeSourceV1KnowledgeSourcesSlugSharePost({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/share`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish Knowledge Source
 */
export function publishKnowledgeSourceV1KnowledgeSourcesSlugPublishPost({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish Knowledge Source In Batch
 */
export function publishKnowledgeSourceInBatchV1KnowledgeSourcesPublishBatchPost({ authorization, xAccountId, knowSourcePublishBatchRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/knowledge-sources/publish/batch", oazapfts.json({
        ...opts,
        method: "POST",
        body: knowSourcePublishBatchRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Configure Knowledge Source Default Flag
 */
export function configureKnowledgeSourceDefaultFlagV1KnowledgeSourcesSlugDefaultPut({ slug, value, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/default${QS.query(QS.explode({
        value
    }))}`, {
        ...opts,
        method: "PUT",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Fork Knowledge Source
 */
export function forkKnowledgeSourceV1KnowledgeSourcesSlugForkPost({ slug, authorization, xAccountId, forkKnowledgeSourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: forkKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Vectorize Objects From File
 */
export function vectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost({ slug, authorization, xAccountId, bodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyVectorizeObjectsFromFileV1KnowledgeSourcesSlugObjectsPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Knowledge Objects
 */
export function listKnowledgeObjectsV1KnowledgeSourcesSlugObjectsGet({ slug, standalone, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects${QS.query(QS.explode({
        standalone
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Reset Knowledge Objects
 */
export function resetKnowledgeObjectsV1KnowledgeSourcesSlugObjectsDelete({ slug, standalone, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects${QS.query(QS.explode({
        standalone
    }))}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Upload Knowledge Objects Zip
 */
export function uploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost({ slug, autoDelete, authorization, xAccountId, bodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects/batch${QS.query(QS.explode({
        "auto-delete": autoDelete
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyUploadKnowledgeObjectsZipV1KnowledgeSourcesSlugObjectsBatchPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Knowledge Object By Custom Id
 */
export function findKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdGet({ slug, customId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects/${encodeURIComponent(customId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Delete Knowledge Object By Custom Id
 */
export function deleteKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdDelete({ customId, slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/objects/${encodeURIComponent(customId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Find Snippet Doc By Custom Id
 */
export function findSnippetDocByCustomIdV1KnowledgeSourcesSlugSnippetsIdGet({ slug, id, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/snippets/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Snippet Knowledge Source
 */
export function vectorizeSnippetKnowledgeSourceV1KnowledgeSourcesSlugSnippetsPost({ slug, authorization, xAccountId, snippetKnowledgeSourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/snippets`, oazapfts.json({
        ...opts,
        method: "POST",
        body: snippetKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Api Doc By Custom Id
 */
export function findApiDocByCustomIdV1KnowledgeSourcesSlugApisIdGet({ slug, id, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/apis/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Api Knowledge Source
 */
export function vectorizeApiKnowledgeSourceV1KnowledgeSourcesSlugApisPost({ slug, authorization, xAccountId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/apis`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Event Doc By Custom Id
 */
export function findEventDocByCustomIdV1KnowledgeSourcesSlugEventsIdGet({ slug, id, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/events/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Event Knowledge Source
 */
export function vectorizeEventKnowledgeSourceV1KnowledgeSourcesSlugEventsPost({ slug, authorization, xAccountId, body }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/events`, oazapfts.json({
        ...opts,
        method: "POST",
        body,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Find Custom Doc By Custom Id
 */
export function findCustomDocByCustomIdV1KnowledgeSourcesSlugCustomIdGet({ slug, id, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/custom/${encodeURIComponent(id)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Custom Knowledge Source
 */
export function vectorizeCustomKnowledgeSourceV1KnowledgeSourcesSlugCustomPost({ slug, authorization, xAccountId, customKnowledgeSourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/knowledge-sources/${encodeURIComponent(slug)}/custom`, oazapfts.json({
        ...opts,
        method: "POST",
        body: customKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Sync Embedding Model
 */
export function syncEmbeddingModelV1KnowledgeSourcesSyncPost(opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/knowledge-sources/sync", {
        ...opts,
        method: "POST"
    }));
}
/**
 * Search Knowledge Sources
 */
export function searchKnowledgeSourcesV1KnowledgeSourcesSearchPost({ authorization, xAccountId, searchKnowledgeSourcesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/knowledge-sources/search", oazapfts.json({
        ...opts,
        method: "POST",
        body: searchKnowledgeSourcesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Ks Dependencies
 */
export function ksDependenciesV1KnowledgeSourcesDependenciesPost({ authorization, xAccountId, knowledgeSourcesDependenciesRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/knowledge-sources/dependencies", oazapfts.json({
        ...opts,
        method: "POST",
        body: knowledgeSourcesDependenciesRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Change Llm
 */
export function changeLlmV1AccountsLlmPatch({ authorization, xAccountId, accountSettingsChangeLlmRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts/llm", oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountSettingsChangeLlmRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Change Limit
 */
export function changeLimitV1AccountsTokenLimitsPut({ authorization, xAccountId, accountSettingsChangeLimitRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts/token-limits", oazapfts.json({
        ...opts,
        method: "PUT",
        body: accountSettingsChangeLimitRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Reset Limit
 */
export function resetLimitV1AccountsTokenLimitsDelete({ authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts/token-limits", {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Change External Rqc
 */
export function changeExternalRqcV1AccountsExternalRqcPatch({ authorization, xAccountId, accountSettingsChangeErqcRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/accounts/external-rqc", oazapfts.json({
        ...opts,
        method: "PATCH",
        body: accountSettingsChangeErqcRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Current
 */
export function currentV1TokensUsageCurrentGet({ year, month, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens-usage/current${QS.query(QS.explode({
        year,
        month
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Monthly
 */
export function monthlyV1TokensUsageMonthlyGet({ year, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens-usage/monthly${QS.query(QS.explode({
        year
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Top Users
 */
export function topUsersV1TokensUsageTopUsersGet({ year, month, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/tokens-usage/top-users${QS.query(QS.explode({
        year,
        month
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Add Association
 */
export function addAssociationV1WorkspaceWorkspaceIdPost({ workspaceId, authorization, xAccountId, addWorkspaceKnowledgeSourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspace/${encodeURIComponent(workspaceId)}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: addWorkspaceKnowledgeSourceRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Association
 */
export function listAssociationV1WorkspaceWorkspaceIdGet({ workspaceId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspace/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Delete Association
 */
export function deleteAssociationV1WorkspaceWorkspaceIdKnowledgeSourceKnowledgeSourceSlugDelete({ workspaceId, knowledgeSourceSlug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/workspace/${encodeURIComponent(workspaceId)}/knowledge_source/${encodeURIComponent(knowledgeSourceSlug)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Quick Command
 */
export function createQuickCommandV1QuickCommandsPost({ authorization, xAccountId, quickCommandsCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/quick-commands", oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsCreateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List All Deprecated
 */
export function listAllDeprecatedV1QuickCommandsAllPost({ origin, authorization, xAccountId, baseContextualRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/quick-commands/all", oazapfts.json({
        ...opts,
        method: "POST",
        body: baseContextualRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            origin,
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List All
 */
export function listAllV1QuickCommandsAllGet({ visibility, order, types, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/all${QS.query(QS.explode({
        visibility,
        order,
        types
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Update Quick Command
 */
export function updateQuickCommandV1QuickCommandsSlugPatch({ slug, authorization, xAccountId, quickCommandsUpdateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: quickCommandsUpdateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Quick Command
 */
export function getQuickCommandV1QuickCommandsSlugGet({ slug, findAgents, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}${QS.query(QS.explode({
        find_agents: findAgents
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Delete Quick Command
 */
export function deleteQuickCommandV1QuickCommandsSlugDelete({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Share
 */
export function shareV1QuickCommandsSlugSharePost({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/share`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Publish
 */
export function publishV1QuickCommandsSlugPublishPost({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/publish`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Fork
 */
export function forkV1QuickCommandsSlugForkPost({ slug, authorization, xAccountId, quickCommandsMakeACopyRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/fork`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsMakeACopyRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Quick Command By Ks Slug
 */
export function getQuickCommandByKsSlugV1QuickCommandsKnowledgeSourcesSlugGet({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Get Quick Commands By Agent Id
 */
export function getQuickCommandsByAgentIdV1QuickCommandsAgentsAgentIdGet({ agentId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/agents/${encodeURIComponent(agentId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * List By Workspace Id
 */
export function listByWorkspaceIdV1QuickCommandsWorkspacesWorkspaceIdGet({ workspaceId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/workspaces/${encodeURIComponent(workspaceId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Dependencies
 */
export function dependenciesV1QuickCommandsSlugDependenciesGet({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/dependencies`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Quick Commands Run
 */
export function quickCommandsRunV1QuickCommandsSlugStepsStepSlugRunPost({ slug, stepSlug, authorization, xAccountId, quickCommandsExecutionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/steps/${encodeURIComponent(stepSlug)}/run`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Format Fetch Step
 */
export function formatFetchStepV1QuickCommandsSlugStepsStepSlugFetchFormatPost({ slug, stepSlug, authorization, xAccountId, quickCommandsExecutionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/steps/${encodeURIComponent(stepSlug)}/fetch_format`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Format Result
 */
export function formatResultV1QuickCommandsSlugResultFormatPost({ slug, authorization, xAccountId, quickCommandsExecutionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/result_format`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Add Workspace
 */
export function addWorkspaceV1QuickCommandsSlugWorkspacesWorkspaceIdAddPost({ slug, workspaceId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/workspaces/${encodeURIComponent(workspaceId)}/add`, {
        ...opts,
        method: "POST",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Remove Workspace
 */
export function removeWorkspaceV1QuickCommandsSlugWorkspacesWorkspaceIdRemoveDelete({ slug, workspaceId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/${encodeURIComponent(slug)}/workspaces/${encodeURIComponent(workspaceId)}/remove`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Execution
 */
export function createExecutionV1QuickCommandsCreateExecutionSlugPost({ slug, conversationId, authorization, xAccountId, quickCommandCreateRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/create-execution/${encodeURIComponent(slug)}${QS.query(QS.explode({
        conversation_id: conversationId
    }))}`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandCreateRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Callback
 */
export function callbackV1QuickCommandsCallbackExecutionIdGet({ executionId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/quick-commands/callback/${encodeURIComponent(executionId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Import Content
 */
export function importContentV1ImportPost({ authorization, xAccountId, importPublicContent }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/import", oazapfts.json({
        ...opts,
        method: "POST",
        body: importPublicContent,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * List Conversations
 */
export function listConversationsV1ConversationsGet({ size, page, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/conversations${QS.query(QS.explode({
        size,
        page
    }))}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Conversation History
 */
export function conversationHistoryV1ConversationsConversationIdGet({ conversationId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/conversations/${encodeURIComponent(conversationId)}`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Update Title
 */
export function updateTitleV1ConversationsConversationIdPatch({ conversationId, authorization, xAccountId, conversationUpdateTitleRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/conversations/${encodeURIComponent(conversationId)}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: conversationUpdateTitleRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Delete Conversation
 */
export function deleteConversationV1ConversationsConversationIdDelete({ conversationId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/conversations/${encodeURIComponent(conversationId)}`, {
        ...opts,
        method: "DELETE",
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Download Conversation
 */
export function downloadConversationV1ConversationsConversationIdDownloadGet({ conversationId, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/conversations/${encodeURIComponent(conversationId)}/download`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Create Knowledge Source
 */
export function createKnowledgeSourceV1DefaultKnowledgeSourcesPost({ newKnowledgeSourceRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v1/default-knowledge-sources", oazapfts.json({
        ...opts,
        method: "POST",
        body: newKnowledgeSourceRequest
    })));
}
/**
 * Delete Knowledge Source
 */
export function deleteKnowledgeSourceV1DefaultKnowledgeSourcesSlugDelete({ slug }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/default-knowledge-sources/${encodeURIComponent(slug)}`, {
        ...opts,
        method: "DELETE"
    }));
}
/**
 * Upload Knowledge Objects Zip
 */
export function uploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost({ slug, autoDelete, bodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v1/default-knowledge-sources/${encodeURIComponent(slug)}/objects/batch${QS.query(QS.explode({
        "auto-delete": autoDelete
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyUploadKnowledgeObjectsZipV1DefaultKnowledgeSourcesSlugObjectsBatchPost
    })));
}
/**
 * Dev Assistant V2
 */
export function devAssistantV2V2ChatPost({ accept, authorization, xAccountId, codeBuddyApiV2SchemasChatRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v2/chat", oazapfts.json({
        ...opts,
        method: "POST",
        body: codeBuddyApiV2SchemasChatRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accept,
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Quick Commands Run V2
 */
export function quickCommandsRunV2V2QuickCommandsSlugStepsStepSlugRunPost({ slug, stepSlug, accept, authorization, xAccountId, quickCommandsExecutionRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/quick-commands/${encodeURIComponent(slug)}/steps/${encodeURIComponent(stepSlug)}/run`, oazapfts.json({
        ...opts,
        method: "POST",
        body: quickCommandsExecutionRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            accept,
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Get Dependencies
 */
export function getDependenciesV2QuickCommandsSlugDependenciesGet({ slug, authorization, xAccountId }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/quick-commands/${encodeURIComponent(slug)}/dependencies`, {
        ...opts,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    }));
}
/**
 * Vectorize Objects From File
 */
export function vectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost({ slug, authorization, xAccountId, bodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/knowledge-sources/${encodeURIComponent(slug)}/objects`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyVectorizeObjectsFromFileV2KnowledgeSourcesSlugObjectsPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Upload Knowledge Objects Zip
 */
export function uploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost({ slug, autoDelete, authorization, xAccountId, bodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost }, opts) {
    return oazapfts.ok(oazapfts.fetchJson(`/v2/knowledge-sources/${encodeURIComponent(slug)}/objects/batch${QS.query(QS.explode({
        "auto-delete": autoDelete
    }))}`, oazapfts.multipart({
        ...opts,
        method: "POST",
        body: bodyUploadKnowledgeObjectsZipV2KnowledgeSourcesSlugObjectsBatchPost,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
/**
 * Dev Assistant V3
 */
export function devAssistantV3V3ChatPost({ authorization, xAccountId, codeBuddyApiV2SchemasChatRequest }, opts) {
    return oazapfts.ok(oazapfts.fetchJson("/v3/chat", oazapfts.json({
        ...opts,
        method: "POST",
        body: codeBuddyApiV2SchemasChatRequest,
        headers: oazapfts.mergeHeaders(opts?.headers, {
            authorization,
            "x-account-id": xAccountId
        })
    })));
}
//# sourceMappingURL=ai.js.map