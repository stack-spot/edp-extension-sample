/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type UserScmInfoResponse = {
    /** Secrets name */
    secretName: string;
    /** Provider type */
    provider: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZURE" | "GITLAB_ONPRM";
};
export type ValidationDetails = {
    code: string;
    field?: string;
    details?: string;
    values?: string[];
};
export type ErrorResponse = {
    code: string;
    status: number;
    details: string;
    validationDetails?: ValidationDetails[];
};
export type UserScmInfoRequest = {
    /** Repository Username */
    user: string;
    /** Repository personal token */
    token: string;
};
export type ScopeResponse = {
    /** Scope id */
    id: string;
    /** Scope name */
    name: string;
    /** Scope description */
    description?: string;
    /** Scope claim mapper */
    claimMapper?: {
        [key: string]: string;
    };
    /** When scope was created */
    createdAt: string;
    /** Last scope update */
    updatedAt?: string;
};
export type IamUpdateScopeRequest = {
    name: string;
    description?: string;
    claim_mapper: {
        [key: string]: string;
    };
};
export type AccountScmInfoResponse = {
    /** Secrets name */
    secretName?: string;
    /** SCM Workflow repository URL */
    workflowUrl?: string;
    /** SCM Type */
    "type"?: "PAT" | "GITHUBAPP";
    /** SCM repository provider */
    provider: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZURE" | "GITLAB_ONPRM";
    /** Flag used to indicate if the SCM repository account credential configuration is mandated */
    mandate: boolean;
    /** Flag used to indicate if the user credentials to access the account SCM repository already has configured by User */
    hasUserConfiguration?: boolean;
    /** Connection URL for on-premises provider */
    urlProvider?: string;
};
export type Value = object;
export type AccountScmInfoUpdateRequest = {
    /** SCM Type */
    "type"?: "PAT" | "GITHUBAPP";
    /** SCM repository provider */
    provider?: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZURE" | "GITLAB_ONPRM";
    value?: Value;
    /** SCM Workflow repository URL */
    workflowUrl?: string;
    /** Flag used when SCM repository account credential configuration is mandated */
    mandate?: boolean;
    urlProvider?: string;
};
export type AccountScmInfoSaveRequest = {
    /** SCM Type */
    "type": "PAT" | "GITHUBAPP";
    /** SCM repository provider */
    provider: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZURE" | "GITLAB_ONPRM";
    value: Value;
    /** Connection URL for on-premises provider */
    urlProvider?: string;
    /** SCM Workflow repository URL */
    workflowUrl: string;
    /** Flag used when SCM repository account credential configuration is mandated */
    mandate: boolean;
};
export type UpdateAccountRoleRequest = {
    /** Account Role new name. */
    name?: string;
    /** Account Role new description. */
    description?: string;
    /** List of new permissions to add to the role. */
    permissionIds?: string[];
};
export type IamActionResponse = {
    id: string;
    client_id?: string;
    name: string;
    description: string;
    created_at: string;
    active?: boolean;
};
export type IamResourceType = {
    id: string;
    name: string;
    description: string;
    created_at: string;
    global_resource_id: string;
    resource_type_id: string;
    actions?: IamActionResponse[];
};
export type IamCreateStatementRequest = {
    actions: string[];
    resource: string;
};
export type UpdateResourceActionsRequest = {
    actions: string[];
};
export type AccountMemberStackspotIamDto = {
    id: string;
    username: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    ddd?: string;
    ddi?: string;
    phone?: string;
    company?: string;
    isActive: boolean;
    isEmailVerified: boolean;
    properties?: {
        [key: string]: object;
    };
};
export type UpdateUserRequest = {
    /** User username */
    username?: string;
    /** User email */
    email?: string;
    /** User first name */
    firstName?: string;
    /** User last name */
    lastName?: string;
    /** User ddi */
    ddi?: string;
    /** User ddd */
    ddd?: string;
    /** User phone */
    phone?: string;
    /** Is user active? */
    isActive?: boolean;
    /** User Company */
    company?: string;
    /** User new password */
    password?: string;
};
export type UpdateUserResponse = {
    username?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    ddi?: string;
    ddd?: string;
    phone?: string;
    isActive?: boolean;
    company?: string;
    password?: string;
};
export type UpdatePasswordRequest = {
    /** New password */
    password: string;
};
export type InvitationUserResponse = {
    email: string;
};
export type UserInvitationResponse = {
    id: string;
    accountId: string;
    sender: InvitationUserResponse;
    invitedUser: InvitationUserResponse;
    createdAt: string;
    resentAt: string;
    expirationDate: string;
    roleName: string;
    assignAccount: boolean;
    magicLink: string;
    status: "ACCEPTED" | "PENDING" | "CANCELLED";
};
export type UpdateFeatureFlagRequest = {
    /** The feature flag  name */
    name: string;
    /** The feature flag slug */
    slug: string;
    /** The feature flag description */
    description: string;
};
export type UpdateSalesRepresentativesRequest = {
    /** List of emails from sales representatives responsible for the account. */
    salesRepresentatives: string[];
};
export type AccountStatusRequest = {
    /** Account enabled */
    enabled: boolean;
};
export type AttributeImporter = {
    /** External user attribute */
    externalUserAttribute?: string;
    /** Force attribute import */
    force?: string;
    /** Unique identifier for the attribute importer */
    id?: string;
    /** Mode of the attribute importer */
    importerMode?: string;
    /** Type of the attribute importer */
    importerType?: string;
    /** Mapping for the attribute importer */
    mapTo?: string;
    /** Name of the attribute importer */
    name?: string;
    /** Creation timestamp of the attribute importer */
    createdAt?: string;
};
export type IdMapper = {
    /** External IDP ID */
    externalIdpId?: string;
    /** Internal user ID */
    internalUserId?: string;
};
export type Config = {
    /** OpenId Authorization Endpoint */
    authorizationEndpoint?: string;
    /** OpenId End Session Endpoint */
    endSessionEndpoint?: string;
    /** OpenId Issuer */
    issuer?: string;
    /** OpenId JWKS Uri */
    jwksUri?: string;
    /** OpenId Revocation Endpoint */
    revocationEndpoint?: string;
    /** OpenId Token Endpoint */
    tokenEndpoint?: string;
    /** SSO Userinfo Endpoint */
    userinfoEndpoint?: string;
    /** OpenId Client ID */
    clientId?: string;
    /** OpenId Client Secret */
    clientSecret?: string;
};
export type Endpoint = {
    binding?: string;
    location?: string;
};
export type AccountSsoDetailedResponse = {
    /** Unique identifier for the SSO configuration */
    id?: string;
    /** Alias for the SSO configuration */
    alias?: string;
    /** SSO configuration name */
    name?: string;
    /** SSO callback url */
    callbackUrl?: string;
    /** List of attribute importers */
    attributeImporters: AttributeImporter[];
    /** Creation timestamp of the SSO configuration */
    createdAt?: string;
    /** Update timestamp of the SSO configuration */
    updatedAt?: string;
    /** Discovery endpoint for the SSO configuration */
    discoveryEndpoint?: string;
    /** Indicates if the SSO configuration is enabled */
    isEnabled?: boolean;
    idMapper?: IdMapper;
    /** Type of the SSO configuration */
    "type": "SAML" | "OPENID";
    config?: Config;
    /** SSO Endpoints */
    ssoEndpoints?: Endpoint[];
    /** SLO Endpoints */
    sloEndpoints?: Endpoint[];
    /** Indicates if the SSO is fully configured */
    isConfigured: boolean;
};
export type AccountSsoUpdateRequest = {
    /** SSO Alias */
    alias: string;
    /** SSO Name */
    name: string;
    /** SSO Callback URL */
    callbackUrl?: string;
    config?: Config;
};
export type AccountSsoPartialUpdateRequest = {
    /** SSO Status */
    isEnabled: boolean;
};
export type AccountSsoGroupMappingResponse = {
    /** SSO Created At */
    createdAt: string;
    /** SSO Group Mapping externalUserAttribute */
    attributeName?: string;
    /** SSO Group Mapping externalUserValue */
    attributeValue?: string;
    /** SSO Group Mapping force */
    force?: boolean;
    /** SSO Group Mapping id */
    id: string;
    /** SSO Group Mapping importerMode */
    importerMode?: string;
    /** SSO Group Mapping importerType */
    importerType?: "DEFAULT_ROLE" | "DEFAULT_GROUP" | "ATTR_TO_GROUP" | "ATTR_TO_ROLE" | "DYNAMIC_GROUP";
    /** SSO Group Mapping mapTo */
    mapTo?: string;
    /** SSO Group Mapping name */
    name: string;
};
export type AccountGroupMappingUpdateRequest = {
    /** Group Mapping externalUserAttribute */
    attributeName?: string;
    /** Group Mapping externalUserValue */
    attributeValue?: string;
    /** Group Mapping force */
    force?: boolean;
    /** Group Mapping importerMode */
    importerMode?: string;
    /** Group Mapping importerType */
    importerType: "DEFAULT_ROLE" | "DEFAULT_GROUP" | "ATTR_TO_GROUP" | "ATTR_TO_ROLE" | "DYNAMIC_GROUP";
    /** Group Mapping mapTo */
    mapTo: string;
    /** Group Mapping name */
    name: string;
};
export type ServiceCredentialCreateRequestV2 = {
    /** Service credential name */
    name: string;
    /** Service credential expiration days */
    description?: string;
    /** Service credential expiration days */
    expirationDays?: number;
    /** Service credential statements */
    scopes?: string[];
};
export type ServiceCredentialCreateResponseV2 = {
    /** Client ID service credential */
    clientId: string;
    /** Client Secret service credential */
    clientSecret?: string;
    /** Service credential scopes */
    scopes: string[];
    /** Service credential expiration date */
    expirationDate?: string;
    /** Account tenant */
    tenant: string;
};
export type ServiceCredentialResponse = {
    /** Service credential id */
    id: string;
    /** Service credential name */
    name: string;
    /** Service credential creator id */
    createdBy: string;
    /** Service credential creator username */
    creatorUsername: string;
    /** Service credential creator email */
    creatorEmail: string;
    /** Service credential created date */
    createdAt: string;
    /** Service credential expire date */
    expirationDate?: string;
    /** Service credential user email revoked */
    revokedBy?: string;
    /** Service credential revoked date */
    revokedAt?: string;
    /** Service credential status */
    status: "ACTIVE" | "DISABLED" | "REVOKED" | "EXPIRED";
};
export type StatementRequest = {
    /** Resource id */
    resource: string;
    /** Action id list */
    actions: string[];
};
export type ServiceCredentialCreateRequest = {
    /** Service credential name */
    name: string;
    /** Service credential expiration days */
    expirationDays?: number;
    /** Service credential permission ids */
    permissions?: string[];
    /** Service credential groups ids */
    teams?: string[];
    /** Service credential statements */
    statements?: StatementRequest[];
};
export type ServiceCredentialCreateResponse = {
    /** Client ID service credential */
    clientId: string;
    /** Client Secret service credential */
    clientSecret: string;
    /** Account tenant */
    tenant: string;
};
export type ServiceCredentialInfoRequest = {
    /** ID of the Service Credential */
    id: string;
    /** Name of the Service Credential */
    name: string;
};
export type ServiceCredentialExpirationNotifyRequest = {
    /** ID of the Service Credential creator */
    ownerId: string;
    /** Days until Service Credential expiration */
    daysToExpire: number;
    /** Tenant that represents the account related to the Service Credential */
    accountTenant: string;
    /** Information related to the Service Credential */
    credentials: ServiceCredentialInfoRequest[];
};
export type PagingRequest = {
    size?: number;
    page: number;
    sort?: string;
    direction: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: string;
};
export type IamCreateScopeRequest = {
    name: string;
    description?: string;
    claim_mapper?: {
        [key: string]: string;
    };
};
export type PermissionActionResponse = {
    /** The action id from StackSpot IAM */
    id: string;
    /** The client ID from StackSpot IAM */
    clientId?: string;
    /** Action's name */
    name: string;
    /** Action's description */
    description?: string;
    /** Action's creation timestamp */
    createdAt: string;
};
export type PermissionTypeResponse = {
    /** Resource type ID from StackSpot IAM */
    id: string;
    /** Resource type client ID from StackSpot IAM */
    clientId?: string;
    /** Resource type name */
    name: string;
    /** Resource type description */
    description?: string;
    /** Resource type creation timestamp */
    createdAt: string;
};
export type PermissionResourceResponse = {
    /** Resource ID from StackSpot IAM */
    id: string;
    /** Resource's client ID from StackSpot IAM */
    clientId?: string;
    /** Resource's name */
    name: string;
    /** Resource's description */
    description?: string;
    /** Resource's creation timestamp */
    createdAt: string;
    "type"?: PermissionTypeResponse;
};
export type PermissionStatementResponse = {
    actions: PermissionActionResponse;
    resource: PermissionResourceResponse;
};
export type PermissionResponse = {
    /** Permission ID from StackSpot IAM */
    id: string;
    /** Permission's name */
    name: string;
    /** Permission's description */
    description?: string;
    /** Permission's creation timestamp */
    createdAt: string;
    /** The statements defined in the permission */
    statements: PermissionStatementResponse[];
};
export type RoleResponse = {
    /** Role id from Keycloak */
    id: string;
    /** Role name */
    name: string;
    /** Role description */
    description: string;
    /** Role description */
    permissions: PermissionResponse[];
    /** Total members in role */
    totalMembers?: number;
};
export type CreateAccountRoleRequest = {
    /** Account Role name */
    name: string;
    /** Account Role description */
    description?: string;
};
export type IdResponse = {
    /** Id response. */
    id: string;
};
export type RoleMemberResponse = {
    /** Member ID */
    id: string;
    /** Member username */
    username: string;
    /** Member company email */
    email: string;
    /** Member first name */
    firstName?: string;
    /** Member last name */
    lastName?: string;
    /** Member creation timestamp */
    createdAt: string;
};
export type AddRoleToMemberRequest = {
    /** Account member IDs list to add role */
    ids: string[];
};
export type AddUsersToRoleResponse = {
    /** Status Message */
    msg: string;
    /** Permission resource */
    errors: string[];
};
export type RoleGroupResponse = {
    id: string;
    name: string;
    description?: string;
    imageURL?: string;
    createdAt: string;
};
export type RoleGroupIdsRequest = {
    ids: string[];
};
export type ResourceTypeDto = {
    /** Id of resource type. */
    id: string;
    /** Name of resource type. */
    name: string;
    /** Slug of resource type. */
    slug: string;
    /** Description of resource type. */
    description: string;
    /** Creation date of resource type. */
    createdAt: string;
};
export type ResourceResponse = {
    /** Id of resource. */
    id: string;
    /** Name of resource. */
    name: string;
    /** Description of resource. */
    description?: string;
    "type"?: ResourceTypeDto;
    /** Name of resource. */
    slug: string;
};
export type CreateResourceRequest = {
    /** Account resource name */
    name: string;
    /** Account resource slug */
    slug: string;
    /** Account resource type id */
    typeId: string;
    /** Account resource description */
    description?: string;
};
export type AccountMemberResponse = {
    /** Account member id */
    id: string;
    /** Account member username */
    username: string;
    /** Account member email */
    email?: string;
    /** Account member first name */
    firstName: string;
    /** Account member last name */
    lastName: string;
    /** Account member status */
    isActive: boolean;
    /** Account member avatar URL */
    avatarUrl?: string;
    /** Account member  full name */
    name: string;
};
export type CreateUserRequest = {
    /** User username */
    username: string;
    /** User email */
    email: string;
    /** User first name */
    firstName: string;
    /** User last name */
    lastName: string;
    /** User ddi */
    ddi?: string;
    /** User ddd */
    ddd?: string;
    /** User phone */
    phone?: string;
    /** Is user active? */
    isActive: boolean;
    /** User first password */
    password?: string;
    /** User Company */
    company?: string;
};
export type CreateUserResponse = {
    username: string;
    email: string;
    company?: string;
    firstName: string;
    lastName: string;
    ddi: string;
    ddd: string;
    phone: string;
    isActive: boolean;
    isEmailVerified?: boolean;
};
export type ReadMemberRoleResponse = {
    /** Role id from IAM */
    id: string;
    /** Role name */
    name: string;
    /** Role description */
    description: string;
    /** Total members in role */
    totalMembers: number;
    /** Role description */
    permissions: PermissionResponse[];
};
export type MemberIdsCommonRequest = {
    ids: string[];
};
export type GroupReadResponse = {
    /** Group id */
    id: string;
    /** Group name */
    name: string;
    /** Group description */
    description?: string;
    /** Group users */
    totalUsers?: number;
    /** Group image URL */
    imageUrl?: string;
    /** Creation time of group */
    createdAt?: string;
};
export type FavoriteResourcesResponse = {
    /** The type of the resource flag name */
    resourceType: string;
    /** List of resource ids */
    resources: string[];
};
export type CreateFavoriteResourceRequest = {
    /** The type of the resource flag name */
    resourceType: string;
    /** The resource identifier */
    resourceId: string;
};
export type MemberEmailRequest = {
    /** Member email */
    email: string;
};
export type InviteNewMemberRequest = {
    /** Member email */
    email: string;
    /** Member name */
    name: string;
    /** Member surname */
    surname: string;
    /** Member group ID */
    groupId?: string;
};
export type InviteMembersResponse = {
    /** Status Message */
    msg: string;
    /** Members with error */
    errors: string[];
};
export type CreateUserInvitationRequest = {
    /** User email */
    email: string;
    /** User role in account */
    role: string;
    /** Indicates whether account will be shared with user or not */
    assignAccount: boolean;
    /** Language to use in invitation e-mail */
    lang: string;
};
export type NewGroupRequest = {
    /** Group name */
    name: string;
    /** Group description */
    description: string;
    /** External Group name */
    externalName?: string;
    /** Group image base64 */
    image?: string;
};
export type IamIdResponse = {
    /** Id response. */
    id: string;
};
export type GroupRoleIdsRequest = {
    ids: string[];
};
export type AddResourcesToGroupRequest = {
    /** List of resource ids */
    ids: string[];
};
export type ReadGroupMembersResponse = {
    /** Account member id */
    id: string;
    /** Account member username */
    username: string;
    /** Account member first name */
    firstName?: string;
    /** Account member last name */
    lastName?: string;
    /** Account member email */
    companyEmail: string;
    /** Account member creation time */
    createdAt: string;
    /** Account member appended time */
    appendedAt: string;
};
export type GroupMemberIdsRequest = {
    ids: string[];
};
export type FeatureFlagsResponse = {
    /** The feature flag id */
    id: number;
    /** The feature flag name */
    name: string;
    /** The feature flag slug */
    slug: string;
    /** If the feature flag is enabled or not in the current account */
    enabled: boolean;
};
export type CreateFeatureFlagRequest = {
    /** The feature flag  name */
    name: string;
    /** The feature flag slug */
    slug: string;
    /** The feature flag description */
    description: string;
};
export type WelcomeEmailRequest = {
    /** Firstname of the contact requester */
    firstName: string;
    /** Firstname of the contact requester */
    lastName: string;
    /** Email of the contact requester */
    email: string;
};
export type ContactEmailRequest = {
    /** Name of the contact requester */
    name: string;
    /** Email of the contact requester */
    email: string;
    /** Subject of the contact */
    subject: string;
    /** Message of the contact */
    message: string;
    /** Telephone of the contact requester */
    telephone?: string;
};
export type SwitchAccountRequest = {
    /** Account slug to switch to */
    accountId: string;
};
export type ExchangeAccountResponse = {
    /** Personal Access Token generated by User Personal Client on user behalf */
    access_token: string;
    /** Refresh Token */
    refresh_token: string;
    /** The token type */
    token_type: string;
    /** The number of seconds before the access_token expires */
    expires_in: number;
};
export type PersonalClientCredentialsResponse = {
    /** The Client ID used for authentication */
    clientId: string;
    /** The Client Secret used for authentication */
    clientSecret: string;
    /** The account tenant */
    tenant: string;
};
export type GenerateTokenFromPersonalAccountRequest = {
    /** Audience */
    audience?: string;
};
export type PersonalAccessTokenResponse = {
    /** Personal Access Token generated by User Personal Client on user behalf */
    accessToken: string;
};
export type DeviceCodeResponse = {
    /** A long string used to verify the session between the client and the authorization server. The client uses this parameter to request the access token from the authorization server */
    deviceCode: string;
    /** A short string shown to the user that's used to identify the session on a secondary device */
    userCode: string;
    /** The URI the user should go to with the user_code in order to sign in */
    loginUrl: string;
    /** The account tenant */
    realm: string;
    /** The number of seconds before the device_code and user_code expire */
    expiration: number;
    /** The number of seconds the client should wait between polling requests */
    interval: number;
    /** OpenID Well Known url for current account */
    openIdWellKnownUrl: string;
};
export type AccountResponse = {
    /** Account id */
    accountApiId: string;
    /** Account slug */
    slug: string;
    /** Account name */
    name: string;
    /** Account logo image */
    image?: string;
    /** Account creation time */
    createdAt: string;
    /** Account creator */
    createdBy?: string;
    /** Account admin email */
    adminEmail: string;
    /** Account admin name */
    adminName: string;
    /** Account Email domains list */
    domains: string[];
    /** Account current status */
    isActive: boolean;
    /** Account sales representatives email list */
    salesRepresentatives: string[];
};
export type PageResponseAccountResponse = {
    /** Current page content */
    items?: AccountResponse[];
    /** Total elements found */
    totalElements: number;
    /** Current page number */
    page: number;
    /** Length of current page items */
    size: number;
};
export type CreateAccountOrderRequest = {
    /** The account's name. Example: Zup IT Innovation */
    name: string;
    /** The slug to use in URL as unique identifying part representing the account (https://developer.mozilla.org/en-US/docs/Glossary/Slug). Example: zup */
    slug: string;
    /** The account tenant should be formatted similarly to the slug and should identify the account uniquely. Only to use internal use. Example: zup-it */
    tenant: string;
    /** The existing accountID if created beforehand */
    accountId?: string;
    /** Account holder's first name */
    adminFirstName: string;
    /** Account holder's last name */
    adminLastName: string;
    /** Account holder's email */
    adminEmail: string;
    /** Email domains list that account users will use to login into StackSpot. Example: zup.com.br */
    domains: string[];
    /** Email list of the sales representatives responsible for this request. */
    salesRepresentatives: string[];
};
export type PageResponseAccountSsoGroupMappingResponse = {
    /** Current page content */
    items?: AccountSsoGroupMappingResponse[];
    /** Total elements found */
    totalElements: number;
    /** Current page number */
    page: number;
    /** Length of current page items */
    size: number;
};
export type AccountGroupMappingCreateRequest = {
    /** Group Mapping externalUserAttribute */
    attributeName?: string;
    /** Group Mapping externalUserValue */
    attributeValue?: string;
    /** Group Mapping force */
    force?: boolean;
    /** Group Mapping importerMode */
    importerMode?: string;
    /** Group Mapping importerType */
    importerType: "DEFAULT_ROLE" | "DEFAULT_GROUP" | "ATTR_TO_GROUP" | "ATTR_TO_ROLE" | "DYNAMIC_GROUP";
    /** Group Mapping mapTo */
    mapTo?: string;
    /** Group Mapping name */
    name: string;
};
export type Certificate = {
    data?: string;
};
export type SignKey = {
    name?: string;
    certificates?: Certificate[];
};
export type SsoConfigRequest = {
    /** SAML Entity Id */
    entityId?: string;
    signKey?: SignKey;
    /** OpenId Authorization Endpoint */
    authorizationEndpoint?: string;
    /** OpenId End Session Endpoint */
    endSessionEndpoint?: string;
    /** OpenId Issuer */
    issuer?: string;
    /** OpenId JWKS Uri */
    jwksUri?: string;
    /** OpenId Registration Endpoint */
    registrationEndpoint?: string;
    /** OpenId Revocation Endpoint */
    revocationEndpoint?: string;
    /** OpenId Token Endpoint */
    tokenEndpoint?: string;
    /** OpenId Userinfo Endpoint */
    userinfoEndpoint?: string;
    /** OpenId Client ID */
    clientId?: string;
    /** OpenId Client Secret */
    clientSecret?: string;
};
export type AccountSsoCreateRequest = {
    /** Alias from SSO configuration */
    alias: string;
    /** Name from SSO configuration */
    name: string;
    /** Callback URL from SSO configuration */
    callbackUrl: string;
    config: SsoConfigRequest;
    /** Activation configuration */
    isEnabled: boolean;
    /** SSO SAML Single Sign On endpoints */
    ssoEndpoints?: Endpoint[];
    /** SSO SAML Single Logout On endpoints */
    sloEndpoints?: Endpoint[];
    /** SSO SAML Name id Formats */
    nameIdFormats?: string[];
};
export type SsoIdResponse = {
    /** Id response. */
    id: string;
};
export type AccountSsoParserResponse = {
    config?: Config;
    /** SAML Want Signed Requests */
    wantSignedRequests?: boolean;
    /** SAML SSO Endpoints */
    ssoEndpoints: Endpoint[];
    /** SAML SLO Endpoints */
    sloEndpoints: Endpoint[];
    /** SAML Name Id Formats */
    nameIdFormats: string[];
    /** SSO callback url */
    callbackUrl?: string;
};
export type AccountFreemiumCreateRequest = {
    /** The account's name. Example: Zup IT Innovation */
    name: string;
    /** The slug to use in URL as unique identifying part representing the account (https://developer.mozilla.org/en-US/docs/Glossary/Slug). Example: zup */
    slug: string;
};
export type AccountCollaboratorRequest = {
    /** The API id of account requester */
    accountApiId: string;
};
export type CreateAccountPartnerOrderRequest = {
    /** The account's name. Example: Zup IT Innovation */
    name: string;
    /** Account holder's first name */
    adminFirstName: string;
    /** Account holder's last name */
    adminLastName: string;
    /** Account holder's email */
    adminEmail: string;
    /** Email domains list that account users will use to login into StackSpot. Example: zup.com.br */
    domains: string[];
    /** Account logo image in base64 */
    image?: string;
};
export type IdDefaultResponse = {
    /** Id response. */
    id: string;
};
export type ValidateAccountPartnerDataRequest = {
    /** The account's name. Example: Zup IT Innovation */
    name?: string;
    /** Email domains list that account users will use to login into StackSpot. Example: zup.com.br */
    domains?: string[];
};
export type RotateServiceCredentialSecretRequest = {
    /** Service credential secret */
    secret: string;
};
export type RotateServiceCredentialSecretResponse = {
    secret?: string;
};
export type ServiceCredentialAssociateGroupRequest = {
    /** Service credential groups ids */
    teams: string[];
};
export type ReadPreferencesResponse = {
    /** Dashboard widgets preferences */
    dashboardWidgets?: string[];
    /** Preferred language preferences */
    preferredLanguage?: "PT" | "EN";
    /** Theme preferences */
    theme?: "DARK" | "LIGHT";
};
export type UpdateMemberPreferencesRequest = {
    /** Dashboard widgets preferences Key */
    dashboardWidgets?: string[];
    /** Preferred language preferences Key */
    preferredLanguage?: "PT" | "EN";
    /** Theme preferences Key */
    theme?: "DARK" | "LIGHT";
};
export type DeleteMemberPermissionsRequest = {
    /** Permission Action */
    actionName: string;
    /** Slug from resource type */
    resourceTypeSlug: string;
    /** Slug from resource */
    resourceSlug: string;
};
export type UpdateMemberPermissionsRequest = {
    /** Permission Action */
    actionName: string;
    /** Slug from resource type */
    resourceTypeSlug: string;
    /** Slug from resource */
    resourceSlug: string;
};
export type MemberCredentialResponse = {
    /** Field to represents if credential is active */
    active: boolean;
    /** Member credential type */
    credentialType: "password" | "otp" | "fido";
    /** Member credential encoded data */
    aaguid?: string;
    /** Member credential identifier */
    id: number;
    /** Member credential was created */
    createdAt: string;
    /** Member credential last updated */
    updatedAt: string;
    /** Member id */
    userId: string;
};
export type MemberCredentialsListResponse = {
    /** Describes whether the user has fido configured */
    pendingConfiguration: boolean;
    /** List of User Credentials */
    items: MemberCredentialResponse[];
    /** Size of list */
    size: number;
    /** Total elements */
    totalElements: number;
};
export type GroupReadDetailResponse = {
    /** Group id */
    id: string;
    /** Group name */
    name: string;
    /** Group description */
    description?: string;
    /** Total users */
    totalUsers?: number;
    /** Group image URL */
    imageUrl?: string;
};
export type UpdateGroupRequest = {
    /** Group name */
    name?: string;
    /** Group description */
    description: string;
    /** Group image base64 */
    image?: string;
};
export type DeleteGroupPermissionsRequest = {
    /** Permission Action */
    actionName: string;
    /** Slug from resource type */
    resourceTypeSlug: string;
    /** Slug from resource */
    resourceSlug: string;
};
export type UpdateGroupPermissionsRequest = {
    /** Permission Action */
    actionName: string;
    /** Slug from resource type */
    resourceTypeSlug: string;
    /** Slug from resource */
    resourceSlug: string;
};
export type AddNewEmailDomainRequest = {
    /** Email domains list that account users will use to login into StackSpot. Example: zup.com.br */
    domains: string[];
};
export type AccountSsoAttributesConfigResponse = {
    /** Id from SSO */
    id: string;
    /** SSO Name attribute configuration */
    email?: string;
    /** SSO First Name attribute configuration */
    firstName?: string;
    /** SSO Last Name attribute configuration */
    lastName?: string;
};
export type AccountSsoAddAttributesConfigRequest = {
    /** SSO Name attribute configuration */
    email: string;
    /** SSO First Name attribute configuration */
    firstName: string;
    /** SSO Last Name attribute configuration */
    lastName?: string;
};
export type AccountPartnerAccountDataUpdateRequest = {
    /** The account's name. Example: Zup IT Innovation */
    name?: string;
    /** Account logo image in base64 */
    image?: string;
};
export type AccountPartnerAdminDataUpdateRequest = {
    /** Admin first name */
    firstName: string;
    /** Admin last name */
    lastName: string;
    /** Admin email */
    email: string;
};
export type AccountCollaborationInfoResponse = {
    /** Account ID */
    id: string;
    /** Account Name */
    name: string;
    /** Account Tenant */
    tenant: string;
    /** Account Slug */
    slug: string;
    /** Role type of user in Account */
    roleType: "OWNER" | "MEMBER";
};
export type AccountDataReadResponse = {
    /** Account ID */
    id: string;
    /** Account Name */
    name: string;
    /** Account Tenant */
    tenant: string;
    /** Account Slug */
    slug: string;
    /** Account Admin Name */
    adminName: string;
    /** Account Admin Email */
    adminEmail: string;
    /** Account Type */
    accountType: "ENTERPRISE" | "PARTNER" | "FREEMIUM";
    /** Account logo URL */
    logoBase64?: string;
};
export type ServiceCredentialDetailsResponse = {
    /** Service credential id */
    id: string;
    /** Service credential name */
    name: string;
    /** Service credential user email creator */
    createdBy: string;
    /** Service credential created date */
    createdAt: string;
    /** Service credential expire date */
    expirationDate?: string;
    /** Service credential user email revoked */
    revokedBy?: string;
    /** Service credential revoked date */
    revokedAt?: string;
    /** Service credential status */
    status: "ACTIVE" | "DISABLED" | "REVOKED" | "EXPIRED";
    /** Service credential scopes */
    scopes?: string[];
};
export type EditableActionResponse = {
    /** Id of action. */
    id: string;
    /** Client of action. */
    clientId?: string;
    /** Name of action. */
    name: string;
    /** Description of action. */
    description: string;
    /** Creation time of action. */
    createdAt: string;
    /** Action is active for parent resource. */
    active?: boolean;
};
export type FullResourceResponse = {
    /** Id of resource. */
    id: string;
    /** Name of resource. */
    name: string;
    /** Description of resource. */
    description?: string;
    actions?: EditableActionResponse[];
    globalResourceId: string;
    createdAt: string;
};
export type AccountScmProviderResponse = {
    /** SCM repository provider */
    provider: "GITHUB" | "GITLAB" | "BITBUCKET" | "AZURE" | "GITLAB_ONPRM";
};
export type AccountScmStatusResponse = {
    /** Flag used to indicate if the SCM repository account credential configuration is mandated */
    mandate: boolean;
    /** Flag used to indicate if the user credentials to access the account SCM repository already has configured by User */
    hasUserConfiguration: boolean;
};
export type RolePermissionResponse = {
    status?: boolean;
    /** Permission ID from StackSpot IAM */
    id: string;
    /** Permission's name */
    name: string;
    /** Permission's description */
    description?: string;
    /** Permission's creation timestamp */
    createdAt: string;
    /** The statements defined in the permission */
    statements: PermissionStatementResponse[];
};
export type MembersFromResourceResponse = {
    /** Member ID */
    id: string;
    /** Member username */
    username: string;
    /** Member company email */
    email: string;
    /** Member name */
    name?: string;
    /** Member permission actions */
    actions: string[];
};
export type GroupsFromResourceResponse = {
    /** Group ID */
    id: string;
    /** Group name */
    name: string;
    /** Group description */
    description?: string;
    /** Group slug */
    slug: string;
    /** Group member count */
    memberCount: number;
    /** Group permission actions */
    actions: string[];
};
export type ResourceTypeResponse = {
    id: string;
    name: string;
    slug: string;
    description: string;
    createdAt: string;
};
export type ResourceDto = {
    id: string;
    name: string;
    slug: string;
    description?: string;
    "type"?: ResourceTypeDto;
};
export type AccountAuthenticationConfigResponse = {
    /** OpenID Well Known url for current account */
    openIdWellKnownUrl: string;
};
export type AccountDataResponse = {
    /** Account tenant */
    tenant: string;
    /** Account IDP */
    idp?: string;
    /** Account Freemium available to user */
    freemiumAvailable: boolean;
    /** Account Type */
    accountType: "ENTERPRISE" | "PARTNER" | "FREEMIUM";
    /** Stackspot IAM Migrated */
    isIamMigrated: boolean;
    /** Stackspot IAM Tenant */
    openIdWellKnownUrl?: string;
    /** Account OpenID Well Known url */
    iamTenant?: string;
};
export type AccountSlugResponse = {
    /** Account slug */
    slug: string;
};
export type AccountSsoResponse = {
    /** SSO configuration name */
    name: string;
    /** Unique identifier for the SSO configuration */
    id: string;
    /** Alias for the SSO configuration */
    alias: string;
    /** List of attribute importers */
    attributeImporters: AttributeImporter[];
    /** Creation timestamp of the SSO configuration */
    createdAt?: string;
    /** Discovery endpoint for the SSO configuration */
    discoveryEndpoint?: string;
    /** Indicates if the SSO configuration is enabled */
    isEnabled?: boolean;
    idMapper?: IdMapper;
    /** Type of the SSO configuration */
    "type": "SAML" | "OPENID";
    /** Indicates if the SSO is fully configured */
    isConfigured: boolean;
};
export type PageResponseAccountSsoResponse = {
    /** Current page content */
    items?: AccountSsoResponse[];
    /** Total elements found */
    totalElements: number;
    /** Current page number */
    page: number;
    /** Length of current page items */
    size: number;
};
export type AccountDataAvailableResponse = {
    /** Account data (name and slug) is available to be registered */
    available: boolean;
};
export type AccountPartnerResponse = {
    /** Account id */
    accountApiId: string;
    /** Account slug */
    slug: string;
    /** Account name */
    name: string;
    /** Account logo image */
    image?: string;
    /** Account creation time */
    createdAt: string;
    /** Account current status */
    isActive: boolean;
};
/**
 * List User repository credential's.
 */
export declare function listScmCredentials(opts?: Oazapfts.RequestOpts): Promise<UserScmInfoResponse[]>;
/**
 * Update User repository credential's.
 */
export declare function scmCredentialUpdate({ userScmInfoRequest }: {
    userScmInfoRequest: UserScmInfoRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Save User repository credential's.
 */
export declare function scmCredentialSave({ userScmInfoRequest }: {
    userScmInfoRequest: UserScmInfoRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete an user SCM credentials.
 */
export declare function scmDelete(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get scope by ID
 */
export declare function getById({ scopeId }: {
    scopeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ScopeResponse>;
/**
 * Update scope information
 */
export declare function updateScope({ scopeId, iamUpdateScopeRequest }: {
    scopeId: string;
    iamUpdateScopeRequest: IamUpdateScopeRequest;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
/**
 * Delete scope by ID
 */
export declare function deleteScope({ scopeId }: {
    scopeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
/**
 * List repository credential's.
 */
export declare function listScmCredentials1(opts?: Oazapfts.RequestOpts): Promise<AccountScmInfoResponse[]>;
/**
 * Update repository credential's.
 */
export declare function scmCredentialUpdate1({ accountScmInfoUpdateRequest }: {
    accountScmInfoUpdateRequest: AccountScmInfoUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Save repository credential's.
 */
export declare function scmCredentialSave1({ accountScmInfoSaveRequest }: {
    accountScmInfoSaveRequest: AccountScmInfoSaveRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update a new role for Account
 */
export declare function updateAccountRole({ roleId, updateAccountRoleRequest }: {
    roleId: string;
    updateAccountRoleRequest: UpdateAccountRoleRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete a role for Account
 */
export declare function deleteAccountRole({ roleId }: {
    roleId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get all Global Reources and Actions compared to role
 */
export declare function getResourcesAndActionsWithStatus({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    roleId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<IamResourceType[]>;
/**
 * Update role with new resource and actions
 */
export declare function updateRoleWithNewActions({ roleId, body }: {
    roleId: string;
    body: IamCreateStatementRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Updates actions from a resource
 */
export declare function updateResourceActions({ roleId, resourceId, updateResourceActionsRequest }: {
    roleId: string;
    resourceId: string;
    updateResourceActionsRequest: UpdateResourceActionsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get user by id
 */
export declare function getMemberById({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountMemberStackspotIamDto>;
/**
 * Update user on current tenant
 */
export declare function updateUser({ memberId, updateUserRequest }: {
    memberId: string;
    updateUserRequest: UpdateUserRequest;
}, opts?: Oazapfts.RequestOpts): Promise<UpdateUserResponse>;
/**
 * Update user password on current tenant
 */
export declare function updateUserPassword({ memberId, updatePasswordRequest }: {
    memberId: string;
    updatePasswordRequest: UpdatePasswordRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Accept user invitation
 */
export declare function accept({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<UserInvitationResponse>;
/**
 * Update a Feature Flag
 */
export declare function update({ id, updateFeatureFlagRequest }: {
    id: number;
    updateFeatureFlagRequest: UpdateFeatureFlagRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Sets a new sales representative list to an existing account
 */
export declare function updateSalesRepresentatives({ accountId, updateSalesRepresentativesRequest }: {
    accountId: string;
    updateSalesRepresentativesRequest: UpdateSalesRepresentativesRequest;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
/**
 * Update status account
 */
export declare function updateAccountStatus({ accountId, accountStatusRequest }: {
    accountId: string;
    accountStatusRequest: AccountStatusRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get a configured SSO from account
 */
export declare function getAccountSso({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountSsoDetailedResponse>;
/**
 * Update a configured SSO from account
 */
export declare function updateSso({ id, accountSsoUpdateRequest }: {
    id: string;
    accountSsoUpdateRequest: AccountSsoUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete a configured Account SSO from account
 */
export declare function deleteSso({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update partially a configured SSO from account
 */
export declare function partialUpdateSso({ id, accountSsoPartialUpdateRequest }: {
    id: string;
    accountSsoPartialUpdateRequest: AccountSsoPartialUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get SSO Group Mapping By Id
 */
export declare function getGroupMapById({ id, attributeImporterId }: {
    id: string;
    attributeImporterId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountSsoGroupMappingResponse>;
/**
 * Update SSO Group Mapping
 */
export declare function updateGroupMapping({ id, attributeImporterId, accountGroupMappingUpdateRequest }: {
    id: string;
    attributeImporterId: string;
    accountGroupMappingUpdateRequest: AccountGroupMappingUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete SSO Group Mapping
 */
export declare function deleteGroupMapping({ id, attributeImporterId }: {
    id: string;
    attributeImporterId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Create Service Credential v2
 */
export declare function createServiceCredential({ serviceCredentialCreateRequestV2 }: {
    serviceCredentialCreateRequestV2: ServiceCredentialCreateRequestV2;
}, opts?: Oazapfts.RequestOpts): Promise<ServiceCredentialCreateResponseV2>;
/**
 * Get Service Credentials
 */
export declare function getServiceCredentials({ name, status, page, size }: {
    name?: string;
    status?: string;
    page?: string;
    size?: string;
}, opts?: Oazapfts.RequestOpts): Promise<ServiceCredentialResponse[]>;
/**
 * Create Service Credential
 */
export declare function createServiceCredential1({ serviceCredentialCreateRequest }: {
    serviceCredentialCreateRequest: ServiceCredentialCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ServiceCredentialCreateResponse>;
/**
 * Notify about Service Credential expiration
 */
export declare function notifyServiceCredentialExpiration({ serviceCredentialExpirationRequest }: {
    serviceCredentialExpirationRequest: ServiceCredentialExpirationNotifyRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Find all the existing scopes
 */
export declare function findScopes({ page }: {
    page?: PagingRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ScopeResponse[]>;
/**
 * Create a new scope
 */
export declare function createScope({ iamCreateScopeRequest }: {
    iamCreateScopeRequest: IamCreateScopeRequest;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
/**
 * Get Roles
 */
export declare function getRoles({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<RoleResponse[]>;
/**
 * Create a new role for Account
 */
export declare function createAccountRole({ createAccountRoleRequest }: {
    createAccountRoleRequest: CreateAccountRoleRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get role members
 */
export declare function getRoleMembers({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    roleId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<RoleMemberResponse[]>;
/**
 * Add Role to Member
 */
export declare function addRoleToMember({ roleId, addRoleToMemberRequest }: {
    roleId: string;
    addRoleToMemberRequest: AddRoleToMemberRequest;
}, opts?: Oazapfts.RequestOpts): Promise<AddUsersToRoleResponse>;
/**
 * Get Groups from role
 */
export declare function getRoleGroups({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    roleId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<RoleGroupResponse[]>;
/**
 * Bind roles groups
 */
export declare function bindRoleGroups({ roleId, roleGroupIdsRequest }: {
    roleId: string;
    roleGroupIdsRequest: RoleGroupIdsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Resources
 */
export declare function getResources({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<ResourceResponse[]>;
/**
 * Create a new resource for Account
 */
export declare function createResource({ createResourceRequest }: {
    createResourceRequest: CreateResourceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdResponse>;
/**
 * Get Account Members
 */
export declare function getAccountMembers1({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<AccountMemberResponse[]>;
/**
 * Create user on current tenant
 */
export declare function createUser({ createUserRequest }: {
    createUserRequest: CreateUserRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CreateUserResponse>;
/**
 * Get member roles
 */
export declare function getRoles1({ memberId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    memberId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<ReadMemberRoleResponse[]>;
/**
 * Bind users to roles
 */
export declare function bindToRoles({ memberId, memberIdsCommonRequest }: {
    memberId: string;
    memberIdsCommonRequest: MemberIdsCommonRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Reset member OTP
 */
export declare function resetOtp({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get member Groups
 */
export declare function getMemberGroups({ memberId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    memberId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<GroupReadResponse[]>;
/**
 * Bind users to groups
 */
export declare function bindToGroups({ memberId, memberIdsCommonRequest }: {
    memberId: string;
    memberIdsCommonRequest: MemberIdsCommonRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get account member favorite resources
 */
export declare function listAccountMemberFavorites({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<FavoriteResourcesResponse[]>;
/**
 * Add account member favorite resource
 */
export declare function addAccountMemberFavorite({ memberId, createFavoriteResourceRequest }: {
    memberId: string;
    createFavoriteResourceRequest: CreateFavoriteResourceRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Send Email to reset password
 */
export declare function resetPassword({ memberEmailRequest }: {
    memberEmailRequest: MemberEmailRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Invite new members to account
 */
export declare function inviteMembers({ body }: {
    body: InviteNewMemberRequest[];
}, opts?: Oazapfts.RequestOpts): Promise<InviteMembersResponse>;
/**
 * List user invitations for account
 */
export declare function listUserInvitations({ filterBy, filterValue, page, size }: {
    filterBy?: string;
    filterValue?: string;
    page?: string;
    size?: string;
}, opts?: Oazapfts.RequestOpts): Promise<UserInvitationResponse[]>;
/**
 * Create user invitations for account
 */
export declare function createUserInvitation({ createUserInvitationRequest }: {
    createUserInvitationRequest: CreateUserInvitationRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Groups
 */
export declare function getGroups({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn, includeDefaultGroup }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
    includeDefaultGroup?: boolean;
}, opts?: Oazapfts.RequestOpts): Promise<GroupReadResponse[]>;
/**
 * Create Group
 */
export declare function save({ newGroupRequest }: {
    newGroupRequest: NewGroupRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IamIdResponse>;
/**
 * Get Group members
 */
export declare function getRoles2({ groupId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    groupId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<RoleResponse[]>;
/**
 * Bind Group roles
 */
export declare function bindRoles({ groupId, groupRoleIdsRequest }: {
    groupId: string;
    groupRoleIdsRequest: GroupRoleIdsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Group Resources
 */
export declare function getGroupResources({ groupId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    groupId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<ResourceResponse[]>;
/**
 * Add Multiple Resources to Group
 */
export declare function addResourcesToGroup({ groupId, addResourcesToGroupRequest }: {
    groupId: string;
    addResourcesToGroupRequest: AddResourcesToGroupRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Group members
 */
export declare function getMembers({ groupId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    groupId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<ReadGroupMembersResponse[]>;
/**
 * Bind Group member
 */
export declare function bindGroupMembers({ groupId, groupMemberIdsRequest }: {
    groupId: string;
    groupMemberIdsRequest: GroupMemberIdsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List Feature Flags in an Account
 */
export declare function getFeatures(opts?: Oazapfts.RequestOpts): Promise<FeatureFlagsResponse[]>;
/**
 * Create a Feature Flag
 */
export declare function create({ createFeatureFlagRequest }: {
    createFeatureFlagRequest: CreateFeatureFlagRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Send Welcome Email
 */
export declare function sendWelcomeEmail({ welcomeEmailRequest }: {
    welcomeEmailRequest: WelcomeEmailRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Send Download Email
 */
export declare function sendDownloadEmail(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Send contact email
 */
export declare function sendContactEmail({ contactEmailRequest }: {
    contactEmailRequest: ContactEmailRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Switch user to account passed in the body
 */
export declare function switchAccount({ switchAccountRequest }: {
    switchAccountRequest: SwitchAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ExchangeAccountResponse>;
/**
 * Get credentials from personal service client (create if not exists one to the logged user).
 */
export declare function getPersonalClientCredentials(opts?: Oazapfts.RequestOpts): Promise<PersonalClientCredentialsResponse>;
/**
 * Get an Access Token generated With Audience on logged user behalf, since previously authorized.
 */
export declare function getPersonalAccessToken1({ apiAuthorization, generateTokenFromPersonalAccountRequest }: {
    apiAuthorization: string;
    generateTokenFromPersonalAccountRequest?: GenerateTokenFromPersonalAccountRequest;
}, opts?: Oazapfts.RequestOpts): Promise<PersonalAccessTokenResponse>;
/**
 * Disable client that generates Personal Access Tokens.
 */
export declare function disablePersonalAccessTokenGeneration(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Verify if exists a client created (authorized) to generate Access Token on logged user behalf.
 */
export declare function personalAccessTokenAuthorization(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Authorize creating a client to generate Personal Access Tokens on your behalf.
 */
export declare function createPersonalAccessToken(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get an Access Token generated on logged user's service account behalf, since previously authorized.
 */
export declare function getPersonalAccessTokenFromServiceAccountOnly(opts?: Oazapfts.RequestOpts): Promise<PersonalAccessTokenResponse>;
/**
 * Generate device code.
 */
export declare function deviceCode({ email, freemiumAccess, codeChallenge, body }: {
    email: string;
    freemiumAccess?: boolean;
    codeChallenge: string;
    body?: Blob;
}, opts?: Oazapfts.RequestOpts): Promise<DeviceCodeResponse>;
/**
 * Find accounts
 */
export declare function getAccounts1({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<PageResponseAccountResponse>;
/**
 * Create an Enterprise Account Order
 */
export declare function create1({ createAccountOrderRequest }: {
    createAccountOrderRequest: CreateAccountOrderRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get All SSO Group Mapping
 */
export declare function getAllGroupMapping({ id, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    id: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<PageResponseAccountSsoGroupMappingResponse>;
/**
 * Create SSO Group Mapping
 */
export declare function createGroupMapping({ id, accountGroupMappingCreateRequest }: {
    id: string;
    accountGroupMappingCreateRequest: AccountGroupMappingCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Configure new SSO in account
 */
export declare function ssoConfigure({ protocol, accountSsoCreateRequest }: {
    protocol: "SAML" | "OPENID";
    accountSsoCreateRequest: AccountSsoCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<SsoIdResponse>;
/**
 * Parse SSO configuration file
 */
export declare function ssoParseConfigurationFile({ protocol, body }: {
    protocol: "SAML" | "OPENID";
    body?: {
        name?: string;
        alias?: string;
        file: Blob;
    };
}, opts?: Oazapfts.RequestOpts): Promise<AccountSsoParserResponse>;
/**
 * Create Account Freemium
 */
export declare function createAccountFreemium({ accountFreemiumCreateRequest }: {
    accountFreemiumCreateRequest: AccountFreemiumCreateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Adding Collaborator Account
 */
export declare function addCollaborator({ accountCollaboratorRequest }: {
    accountCollaboratorRequest: AccountCollaboratorRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Create an Account Order for Partner
 */
export declare function createPartner({ createAccountPartnerOrderRequest }: {
    createAccountPartnerOrderRequest: CreateAccountPartnerOrderRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IdDefaultResponse>;
/**
 * Validate new Partner account data
 */
export declare function validateNewPartnerData({ validateAccountPartnerDataRequest }: {
    validateAccountPartnerDataRequest: ValidateAccountPartnerDataRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Rotate Service Credential Secret v2
 */
export declare function rotateServiceCredentialSecret({ id, rotateServiceCredentialSecretRequest }: {
    id: string;
    rotateServiceCredentialSecretRequest: RotateServiceCredentialSecretRequest;
}, opts?: Oazapfts.RequestOpts): Promise<RotateServiceCredentialSecretResponse>;
/**
 * Revoke Service Credential v2
 */
export declare function revokeServiceCredential({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Associate Group to Service Credential
 */
export declare function associateGroupToServiceCredential({ id, serviceCredentialAssociateGroupRequest }: {
    id: string;
    serviceCredentialAssociateGroupRequest: ServiceCredentialAssociateGroupRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Revoke Service Credential
 */
export declare function revokeServiceCredential1({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update member preferences
 */
export declare function getMemberPreferences({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ReadPreferencesResponse>;
/**
 * Update member preferences
 */
export declare function updateMemberPreferences({ memberId, updateMemberPreferencesRequest }: {
    memberId: string;
    updateMemberPreferencesRequest: UpdateMemberPreferencesRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete a member permissions
 */
export declare function deleteMemberPermissions({ memberId, deleteMemberPermissionsRequest }: {
    memberId: string;
    deleteMemberPermissionsRequest: DeleteMemberPermissionsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update member permissions
 */
export declare function updateMemberPermissions({ memberId, updateMemberPermissionsRequest }: {
    memberId: string;
    updateMemberPermissionsRequest: UpdateMemberPermissionsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get All Fido credentials for given user
 */
export declare function getAllMemberFidoCredentials({ memberId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    memberId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<MemberCredentialsListResponse>;
/**
 * Disables Fido credentials for given user
 */
export declare function deactivateFidoCredentials({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Enable Fido credentials for given user
 */
export declare function enableFidoCredentials({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Revoke user invitation
 */
export declare function cancelUserInvitation({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Resend user invitation
 */
export declare function resendUserInvitation({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Group by ID
 */
export declare function getGroupById({ groupId }: {
    groupId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GroupReadDetailResponse>;
/**
 * Delete Group
 */
export declare function deleteV1GroupsByGroupId({ groupId }: {
    groupId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update Group
 */
export declare function update1({ groupId, updateGroupRequest }: {
    groupId: string;
    updateGroupRequest: UpdateGroupRequest;
}, opts?: Oazapfts.RequestOpts): Promise<IamIdResponse>;
/**
 * Delete Group permissions
 */
export declare function deleteGroupPermissions({ groupId, deleteGroupPermissionsRequest }: {
    groupId: string;
    deleteGroupPermissionsRequest: DeleteGroupPermissionsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update Group permissions
 */
export declare function updateGroupPermissions({ groupId, updateGroupPermissionsRequest }: {
    groupId: string;
    updateGroupPermissionsRequest: UpdateGroupPermissionsRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Enable a Feature Flag in an Account
 */
export declare function enable({ id }: {
    id: number;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Disable a Feature Flag in an Account
 */
export declare function disable({ id }: {
    id: number;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Adds a new email domain to an existing account
 */
export declare function addNewEmailDomain({ accountId, addNewEmailDomainRequest }: {
    accountId: string;
    addNewEmailDomainRequest: AddNewEmailDomainRequest;
}, opts?: Oazapfts.RequestOpts): Promise<never>;
/**
 * Get configured account SSO attributes
 */
export declare function ssoGetAttributesConfig({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountSsoAttributesConfigResponse>;
/**
 * Configure account SSO attributes
 */
export declare function ssoAddAttributes({ id, accountSsoAddAttributesConfigRequest }: {
    id: string;
    accountSsoAddAttributesConfigRequest: AccountSsoAddAttributesConfigRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Get Partner by account Id
 */
export declare function getPartnerAccount({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountResponse>;
/**
 * Delete Partner
 */
export declare function deletePartner({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update Partner Account data.
 */
export declare function updatePartnerAccountData({ id, accountPartnerAccountDataUpdateRequest }: {
    id: string;
    accountPartnerAccountDataUpdateRequest: AccountPartnerAccountDataUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Update Partner Account Admin data.
 */
export declare function updatePartnerAccountAdminData({ id, accountPartnerAdminDataUpdateRequest }: {
    id: string;
    accountPartnerAdminDataUpdateRequest: AccountPartnerAdminDataUpdateRequest;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Verify User repository credential configuration status.
 */
export declare function isCreatedScmCredentials(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * List Accounts of User can use and collaborate.
 */
export declare function getUserAccountWithRole(opts?: Oazapfts.RequestOpts): Promise<AccountCollaborationInfoResponse[]>;
/**
 * Get Accounts
 */
export declare function getAccounts({ accountType, slug, id }: {
    accountType?: string;
    slug?: string;
    id?: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountDataReadResponse[]>;
/**
 * Get Account by id
 */
export declare function getAccount({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountDataReadResponse>;
/**
 * Get Account Members
 */
export declare function getAccountMembers({ id, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    id: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<AccountMemberResponse[]>;
/**
 * Get Service Credential by ID (Client ID)
 */
export declare function getServiceCredential({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<ServiceCredentialDetailsResponse>;
/**
 * List service credential permissions
 */
export declare function getServiceCredentialPermissions({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<FullResourceResponse[]>;
/**
 * List service credential groups
 */
export declare function getServiceCredentialGroups({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<GroupReadResponse[]>;
/**
 * Get SCM provider.
 */
export declare function getScmProvider(opts?: Oazapfts.RequestOpts): Promise<AccountScmProviderResponse>;
/**
 * Verify repository credential configuration status.
 */
export declare function isCreatedScmCredentials1(opts?: Oazapfts.RequestOpts): Promise<AccountScmStatusResponse>;
/**
 * Get Permissions from role
 */
export declare function getPermissionsWithStatus({ roleId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    roleId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<RolePermissionResponse[]>;
/**
 * Get Members from Resource
 */
export declare function getResourceMembers({ resourceId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    resourceId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<MembersFromResourceResponse[]>;
/**
 * Get Groups from Resource
 */
export declare function getResourceGroups({ resourceId, size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    resourceId: string;
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<GroupsFromResourceResponse[]>;
/**
 * Get Resource Types
 */
export declare function getResourceTypes({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<ResourceTypeResponse[]>;
/**
 * Validate permission access
 */
export declare function getAccess({ resourceType, resource, action, attribute }: {
    resourceType: string;
    resource: string;
    action: string;
    attribute?: string;
}, opts?: Oazapfts.RequestOpts): Promise<boolean>;
/**
 * Get Resources Members
 */
export declare function getResources1({ memberId }: {
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ResourceDto[]>;
/**
 * Get member favorite resources by type
 */
export declare function listMemberFavoritesByResource({ memberId, resourceType }: {
    memberId: string;
    resourceType: string;
}, opts?: Oazapfts.RequestOpts): Promise<any>;
/**
 * Get Account Collaborators Members
 */
export declare function getAccountMembersToCollaborators({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<AccountMemberResponse[]>;
/**
 * Get Authentication Configuration for account
 */
export declare function getAuthenticationConfig({ tenantSlug }: {
    tenantSlug: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountAuthenticationConfigResponse>;
/**
 * Get an account by ID
 */
export declare function getAccount1({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountResponse>;
/**
 * Get account data (tenant, IDP alias, account freemium available to user) by email
 */
export declare function getAccountDataByEmail({ email }: {
    email: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountDataResponse>;
/**
 * Get account Slug - this API is temporary
 */
export declare function getAccountSlug({ accountId }: {
    accountId: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountSlugResponse>;
/**
 * Get all SSO configured in account
 */
export declare function getAllAccountSso({ size, page, sort, direction, search, filterMode, filterBy, filterValue, multiFilterMode, filterIn }: {
    size?: any;
    page?: any;
    sort?: string;
    direction?: "ASC" | "DESC";
    search?: string;
    filterMode?: "MATCH" | "CONTAINS" | "IN";
    filterBy?: string;
    filterValue?: string;
    multiFilterMode?: string;
    filterIn?: any;
}, opts?: Oazapfts.RequestOpts): Promise<PageResponseAccountSsoResponse>;
/**
 * Returns information if account data (name and slug) are available to be registered
 */
export declare function accountDataIsAvailable({ name, slug }: {
    name: string;
    slug: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountDataAvailableResponse>;
/**
 * Get Partners who are sharing content.
 */
export declare function getSharingPartners({ name }: {
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountPartnerResponse[]>;
/**
 * Get Partners with whom it is allowed to share content.
 */
export declare function getPartnersSharingAllowed({ name }: {
    name?: string;
}, opts?: Oazapfts.RequestOpts): Promise<AccountPartnerResponse[]>;
/**
 * Validate Partner association limit
 */
export declare function validatePartnerAssociationLimit(opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Disassociate Group to Service Credential
 */
export declare function disassociateGroupToServiceCredential({ id, groupId }: {
    id: string;
    groupId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Remove Role from Member
 */
export declare function removeRoleFromMember({ roleId, memberId }: {
    roleId: string;
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete a resource from Account
 */
export declare function deleteResource({ resourceId }: {
    resourceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Remove resource from member favorites
 */
export declare function deleteMemberFavorite({ memberId, resourceType, resourceId }: {
    memberId: string;
    resourceType: string;
    resourceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete Group role
 */
export declare function deleteRole({ groupId, roleId }: {
    groupId: string;
    roleId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete Resource from Group
 */
export declare function deleteResourceFromGroup({ groupId, resourceId }: {
    groupId: string;
    resourceId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
/**
 * Delete Group member
 */
export declare function deleteMember({ groupId, memberId }: {
    groupId: string;
    memberId: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
//# sourceMappingURL=account.d.ts.map