/**
 * OpenAPI definition
 * v0
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "@oazapfts/runtime";
export declare const defaults: Oazapfts.Defaults<Oazapfts.CustomHeaders>;
export declare const servers: {
    generatedServerUrl: string;
};
export type ScheduleRequest = {
    applicationId: string;
    runtimeId: string;
    startDate: string;
    endDate: string;
    time: string;
    repeats: "NEVER" | "DAILY" | "WEEKLY" | "MONTHLY";
    action: "START" | "STOP" | "RESTART" | "DEPLOY";
};
export type ScheduleResponse = {
    applicationId: string;
    runtimeId: string;
    startDate: string;
    endDate: string;
    time: string;
    repeats: "NEVER" | "DAILY" | "WEEKLY" | "MONTHLY";
    action: "START" | "STOP" | "RESTART" | "DEPLOY";
};
export type StatusType = number;
export type EnvVar = {
    key: string;
    value: string;
};
export type SecretVar = {
    key: string;
    value: string;
};
export type ReplicaNum = {
    min?: number;
    max?: number;
};
export type CreateDeploymentRequestV2 = {
    runtimeId: string;
    applicationId?: string;
    applicationName?: string;
    action: string;
    containerPort?: number;
    healthCheckPath?: string;
    imageUrl: string;
    tag: string;
    mem?: number;
    envVars?: EnvVar[];
    secretVars?: SecretVar[];
    cpu?: number;
    replicaNum?: ReplicaNum;
    awsAccount?: string;
    idAwsAccount?: string;
    health?: string;
    applicationURL?: string;
};
export type SetAutoscalingRequest = {
    deploymentId: string;
    replicaNum: ReplicaNum;
    applicationName: string;
};
export type CreateDeploymentResponseV2 = {
    id?: string;
    runtimeId: string;
    applicationId?: string;
    applicationName?: string;
    action: string;
    containerPort?: number;
    healthCheckPath?: string;
    imageUrl: string;
    tag: string;
    mem?: number;
    envVars?: EnvVar[];
    secretVars?: SecretVar[];
    cpu?: number;
    replicaNum?: ReplicaNum;
    awsAccount: string;
    idAwsAccount: string;
    health?: string;
    applicationURL?: string;
    status?: string;
};
export type ApplicationDtov2 = {
    id?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    url?: string;
    projectId?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type RuntimeSpecDto = {
    id: string;
};
export type ResourcesDto = {
    memory: string;
    cpu: number;
};
export type HpaDto = {
    enabled: boolean;
    max: number;
    min: number;
    cpu: number;
};
export type ContainerValuesDto = {
    resources: ResourcesDto;
    volume: string;
    hpa: HpaDto;
};
export type ContainerSpecDto = {
    port: string;
    healthCheckPath: string;
    envVars: {
        [key: string]: string;
    };
    imageUrl: string;
    versionTag: string;
    values: ContainerValuesDto;
};
export type SpecDto = {
    runtime: RuntimeSpecDto;
    container: ContainerSpecDto;
};
export type CreateDeploymentRequest = {
    ulid?: string;
    kind: string;
    apiVersion: string;
    runtimeId: number;
    sourceId: string;
    imageUrl: string;
    metadata?: {
        [key: string]: object;
    };
    action: "START" | "STOP" | "RESTART" | "DEPLOY";
    sourceType: string;
    spec: SpecDto;
};
export type ApplicationDto = {
    id?: number;
    ulid?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    projectId: number;
    url?: string;
    projectUlid?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type CreateApplicationResponse = {
    id?: number;
    ulid?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    projectId: number;
    url?: string;
    projectUlid?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type ProjectDtov2 = {
    id: string;
    name: string;
    description: string;
    environment: string;
    region?: string;
};
export type AddOnDto = {
    name: string;
    description: string;
};
export type RuntimeDtov2 = {
    id: string;
    name: string;
    description: string;
    "type": "CONTAINER" | "STATIC";
    projects: ProjectDtov2[];
    tags: string[];
    env?: string;
    addons: AddOnDto[];
};
export type RepositoryResponse = {
    repositoryName: string;
    repositoryUri: string;
};
export type ListRepositoryResponse = {
    repositories: RepositoryResponse[];
    totalCount: number;
    limit: number;
    offset: number;
};
export type ImageResponse = {
    imageUri: string;
    tags: string[];
};
export type GetRuntimesByProjectUlidV2 = {
    runtimes: RuntimeDtov2[];
};
export type PaginatedResponseApplicationDto = {
    content?: ApplicationDto[];
    last?: boolean;
    totalElements?: number;
    totalPages?: number;
    first?: boolean;
    size?: number;
    "number"?: number;
    numberOfElements?: number;
    empty?: boolean;
};
export type StatusResponse = {
    status: "UP" | "DEPLOYING" | "STOPPED" | "UNKNOWN";
};
export type GetDeploymentLogsResponse = {
    logs: string;
};
export type HealthResponse = {
    health: "HEALTHY" | "UNHEALTHY";
};
export type GetApplicationByUlidResponseV2 = {
    id?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    url?: string;
    projectId?: string;
    createdAt?: string;
    updatedAt?: string;
};
export type GetInstanceResponse = {
    used: number;
    available: number;
};
export type ApplicationHistoryResponse = {
    applicationId?: string;
    runtimeName?: string;
    creator?: string;
    action: string;
    date: string;
};
export type ListApplicationHistoryResponse = {
    applicationId: string;
    applicationHistory: ApplicationHistoryResponse[];
};
export type BasicDeploymentResponse = {
    deploymentId: string;
    runtimeName: string;
    deploymentStatus: string;
    runtimeEnv: string;
};
export type GetApplicationByProjectResponse = {
    name: string;
    id: string;
    description: string;
    "type": string;
    creator: string;
    projectId: string;
    url?: string;
};
export type PaginatedResponseGetApplicationByProjectResponse = {
    content?: GetApplicationByProjectResponse[];
    last?: boolean;
    totalElements?: number;
    totalPages?: number;
    first?: boolean;
    size?: number;
    "number"?: number;
    numberOfElements?: number;
    empty?: boolean;
};
export type ProjectDto = {
    ulid: string;
    name: string;
    description: string;
    environment: string;
    region?: string;
};
export type GetRuntimeByUlidResponse = {
    ulid: string;
    name: string;
    description: string;
    "type": "CONTAINER" | "STATIC";
    projects: ProjectDto[];
    tags: {
        [key: string]: string;
    };
};
export type RegistryDto = {
    id: string;
    name?: string;
    projectId?: string;
    "type": "ECR";
};
export type ListResponseRegistryDto = {
    totalCount: number;
    limit: number;
    offset: number;
    data: RegistryDto[];
};
export type RepositoryDto = {
    id: string;
    name: string;
    registryId: string;
    repositoryUri: string;
};
export type ImageDto = {
    imageUri: string;
    tags: string[];
    digest?: string;
};
export type RuntimeDto = {
    ulid: string;
    name: string;
    description: string;
    "type": "CONTAINER" | "STATIC";
    projects: ProjectDto[];
    tags: {
        [key: string]: string;
    };
};
export type GetRuntimesByProjectUlid = {
    runtimes: RuntimeDto[];
};
export type GetApplicationByUlidResponse = {
    id?: number;
    ulid?: string;
    name: string;
    description?: string;
    "type": string;
    creator: string;
    projectId: number;
    url?: string;
    projectUlid?: string;
    createdAt?: string;
    updatedAt?: string;
};
export declare function createSchedule({ scheduleRequest }: {
    scheduleRequest: ScheduleRequest;
}, opts?: Oazapfts.RequestOpts): Promise<ScheduleResponse>;
export declare function createDeployment({ authorization, createDeploymentRequestV2 }: {
    authorization: string;
    createDeploymentRequestV2: CreateDeploymentRequestV2;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function setAutoscaling({ authorization, setAutoscalingRequest }: {
    authorization: string;
    setAutoscalingRequest: SetAutoscalingRequest;
}, opts?: Oazapfts.RequestOpts): Promise<CreateDeploymentResponseV2>;
export declare function cleanDeployments({ authorization }: {
    authorization: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
export declare function cleanApplications({ authorization }: {
    authorization: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
export declare function createApplication({ authorization, applicationDtov2 }: {
    authorization: string;
    applicationDtov2: ApplicationDtov2;
}, opts?: Oazapfts.RequestOpts): Promise<ApplicationDtov2>;
export declare function stopApplication({ authorization, applicationId, runtimeId }: {
    authorization: string;
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function startApplication({ authorization, applicationId, runtimeId }: {
    authorization: string;
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function restartApplication({ authorization, applicationId, runtimeId }: {
    authorization: string;
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function createRuntimeTag({ tagId, runtimeId }: {
    tagId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function createDeployment1({ createDeploymentRequest }: {
    createDeploymentRequest: CreateDeploymentRequest;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function getNamespace(opts?: Oazapfts.RequestOpts): Promise<string>;
export declare function createNamespace(opts?: Oazapfts.RequestOpts): Promise<string>;
export declare function createApplication1({ applicationDto }: {
    applicationDto: ApplicationDto;
}, opts?: Oazapfts.RequestOpts): Promise<CreateApplicationResponse>;
export declare function getScheduling({ applicationId, runtimeId }: {
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ScheduleResponse[]>;
export declare function getRuntimeByUlid({ runtimeId }: {
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<RuntimeDtov2>;
export declare function listRepositories({ limit, offset }: {
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts): Promise<ListRepositoryResponse>;
export declare function getRepositoryImages({ repositoryId }: {
    repositoryId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ImageResponse[]>;
export declare function listRuntimes({ projectId }: {
    projectId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetRuntimesByProjectUlidV2>;
export declare function listApplications({ projectId, limit, offset }: {
    projectId: string;
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseApplicationDto>;
export declare function getDeployment({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<CreateDeploymentResponseV2>;
export declare function getDeploymentStatus({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<StatusResponse>;
export declare function getDeploymentLogs({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetDeploymentLogsResponse>;
export declare function getDeploymentHealth({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<HealthResponse>;
export declare function getApplication({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetApplicationByUlidResponseV2>;
export declare function getSecrets({ applicationId, runtimeId }: {
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<SecretVar[]>;
export declare function getInstances({ applicationId, runtimeId }: {
    applicationId: string;
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetInstanceResponse>;
export declare function getApplicationHistory({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<ListApplicationHistoryResponse>;
export declare function listDeployments({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<BasicDeploymentResponse[]>;
export declare function getLastDeploymentByRuntime({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<BasicDeploymentResponse[]>;
export declare function listApplications1({ projectId, limit, offset }: {
    projectId: string;
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseGetApplicationByProjectResponse>;
export declare function getRuntimeByUlid1({ runtimeId }: {
    runtimeId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetRuntimeByUlidResponse>;
export declare function getRevisions({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function list({ limit, offset }: {
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts): Promise<ListResponseRegistryDto>;
export declare function listRepositoriesByRegistryId({ limit, offset, id }: {
    limit?: number;
    offset?: number;
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<RepositoryDto[]>;
export declare function listRepositoriesByDefaultRegistryId({ limit, offset }: {
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function getImages({ repositoryName }: {
    repositoryName: string;
}, opts?: Oazapfts.RequestOpts): Promise<ImageDto[]>;
export declare function getRepositoryById({ id, registryId }: {
    id: string;
    registryId?: string;
}, opts?: Oazapfts.RequestOpts): Promise<RepositoryDto>;
export declare function listRuntimes1({ projectId }: {
    projectId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetRuntimesByProjectUlid>;
export declare function listApplications2({ projectId, limit, offset }: {
    projectId: string;
    limit?: number;
    offset?: number;
}, opts?: Oazapfts.RequestOpts): Promise<PaginatedResponseApplicationDto>;
export declare function getDeployment1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function getDeploymentStatus1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function getDeploymentLogs1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetDeploymentLogsResponse>;
export declare function getDeploymentHealth1({ deploymentId }: {
    deploymentId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function getDeploymentsId({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<object>;
export declare function getApplication1({ applicationId }: {
    applicationId: string;
}, opts?: Oazapfts.RequestOpts): Promise<GetApplicationByUlidResponse>;
export declare function deleteDeployment({ id }: {
    id: string;
}, opts?: Oazapfts.RequestOpts): Promise<unknown>;
//# sourceMappingURL=cloudRuntimes.d.ts.map