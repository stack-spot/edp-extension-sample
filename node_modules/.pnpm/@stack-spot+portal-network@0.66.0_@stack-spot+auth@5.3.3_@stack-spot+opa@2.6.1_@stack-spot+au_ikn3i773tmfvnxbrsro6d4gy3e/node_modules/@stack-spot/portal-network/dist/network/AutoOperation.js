/* eslint-disable react-hooks/rules-of-hooks */
import { useQuery } from '@tanstack/react-query';
import { queryClient } from './react-query-client.js';
export class AutoOperation {
    constructor({ apiName, onFetchPermission, fn, transformError }) {
        Object.defineProperty(this, "fn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onFetchPermission", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "transformError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fn = fn;
        this.onFetchPermission = onFetchPermission;
        this.apiName = apiName;
        this.transformError = transformError;
        if (typeof fn === 'function' && !fn.name) {
            throw new Error("Anonymous functions can't be automatically converted into React queries or mutations.");
        }
    }
    async callFn(variables, signal, fetchFn) {
        const fn = this.fn;
        try {
            const result = await (fn.length === 2
                ? fn(variables ?? {}, fetchFn ? { fetch: fetchFn, signal } : { signal })
                : fn(fetchFn ? { fetch: fetchFn, signal } : { signal }));
            return result;
        }
        catch (error) {
            throw this.transformError ? this.transformError(error) : error;
        }
    }
    createPermissionQueryFn(variables) {
        return () => this.callFn(variables, undefined, this.onFetchPermission);
    }
    isAllowed(...[variables]) {
        return queryClient.fetchQuery({
            queryKey: this.getPermissionKey(variables),
            queryFn: this.createPermissionQueryFn(variables),
        });
    }
    useAllowed(...args) {
        /* `this.fn` is a oazapfts function, i.e. it has arity 1 or 2. If it accepts variables, its arity is 2: the 1st parameter is the
        variables and the 2nd is the RequestOpts. If it doesn't accept variables, its arity is one: it accepts only the RequestOpts.
        We can use this information to determine what the type of `args` actually is at runtime. If variables are accepted, than the 1st
        argument is the variables and the 2nd is the query options, otherwise, it has a single argument, which is the query options. */
        const [variables, options] = this.fn.length > 1
            ? args
            : [undefined, args[0]];
        const result = useQuery({
            ...options,
            queryKey: this.getPermissionKey(variables),
            queryFn: this.createPermissionQueryFn(variables),
        }, queryClient);
        return [result.data, result.isPending, result.error, result];
    }
    getPermissionKey(variables) {
        return [this.apiName, `${this.fn.name}.permission`, variables];
    }
}
//# sourceMappingURL=AutoOperation.js.map