import { type RequestOpts } from '@oazapfts/runtime';
import { UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { AutoQueryObjectParams, OperationObject } from './types.js';
export declare abstract class AutoOperation<Variables> implements OperationObject<Variables> {
    protected fn: ((variables: Variables, opts?: RequestOpts) => Promise<any>) | ((opts?: RequestOpts) => Promise<any>);
    protected apiName: string;
    protected onFetchPermission: typeof fetch;
    private transformError?;
    constructor({ apiName, onFetchPermission, fn, transformError }: AutoQueryObjectParams<Variables, any>);
    protected callFn(variables: Partial<Variables> | undefined, signal: AbortSignal | undefined, fetchFn?: typeof fetch): Promise<any>;
    private createPermissionQueryFn;
    isAllowed(...[variables]: Variables extends void ? [] : [variables?: Partial<Variables>]): Promise<any>;
    useAllowed(...args: Variables extends void ? [options?: Omit<UseQueryOptions, 'queryFn' | 'queryKey'>] : [variables?: Partial<Variables>, options?: Omit<UseQueryOptions, 'queryFn' | 'queryKey'>]): readonly [boolean | undefined, boolean, StackspotAPIError | null, UseQueryResult<boolean, StackspotAPIError>];
    getPermissionKey(variables?: Partial<Variables>): (string | Partial<Variables> | undefined)[];
}
//# sourceMappingURL=AutoOperation.d.ts.map