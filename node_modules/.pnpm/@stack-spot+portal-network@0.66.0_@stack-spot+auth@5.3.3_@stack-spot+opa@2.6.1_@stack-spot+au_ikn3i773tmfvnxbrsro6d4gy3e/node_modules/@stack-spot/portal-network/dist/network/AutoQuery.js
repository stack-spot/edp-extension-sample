/* eslint-disable react-hooks/rules-of-hooks */
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AutoQuery_instances, _AutoQuery_useQueryResult;
import { useQuery, useSuspenseQuery } from '@tanstack/react-query';
import { AutoOperation } from './AutoOperation.js';
import { queryClient } from './react-query-client.js';
export class AutoQuery extends AutoOperation {
    constructor(params) {
        super(params);
        _AutoQuery_instances.add(this);
    }
    query(...[variables]) {
        return queryClient.fetchQuery({
            queryKey: this.getKey(variables),
            queryFn: ({ signal }) => this.callFn(variables, signal),
        });
    }
    useQuery(...args) {
        const result = __classPrivateFieldGet(this, _AutoQuery_instances, "m", _AutoQuery_useQueryResult).call(this, true, ...args);
        return result.data;
    }
    useStatefulQuery(...args) {
        const result = __classPrivateFieldGet(this, _AutoQuery_instances, "m", _AutoQuery_useQueryResult).call(this, false, ...args);
        return [result.data, result.isPending, result.error, result];
    }
    invalidate(variables) {
        return queryClient.invalidateQueries({ queryKey: this.getKey(variables) });
    }
    getKey(variables) {
        const key = [this.apiName, this.fn.name];
        if (variables)
            key.push(variables);
        return key;
    }
    cancel(variables) {
        queryClient.cancelQueries({ queryKey: this.getKey(variables) });
    }
}
_AutoQuery_instances = new WeakSet(), _AutoQuery_useQueryResult = function _AutoQuery_useQueryResult(suspense, ...args) {
    /* `this.fn` is a oazapfts function, i.e. it has arity 1 or 2. If it accepts variables, its arity is 2: the 1st parameter is the
    variables and the 2nd is the RequestOpts. If it doesn't accept variables, its arity is one: it accepts only the RequestOpts.
    We can use this information to determine what the type of `args` actually is at runtime. If variables are accepted, than the 1st
    argument is the variables and the 2nd is the query options, otherwise, it has a single argument, which is the query options. */
    const [variables, options] = this.fn.length > 1
        ? args
        : [undefined, args[0]];
    const use = suspense ? useSuspenseQuery : useQuery;
    return use({
        ...options,
        // without this, this lib won't work in React's strict mode, since every request will be immediately aborted (component unmounted).
        gcTime: 60000,
        queryKey: this.getKey(variables),
        queryFn: ({ signal }) => this.callFn(variables, signal),
    }, queryClient);
};
//# sourceMappingURL=AutoQuery.js.map