import { InfiniteData, UseInfiniteQueryResult } from '@tanstack/react-query';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ManualQuery } from './ManualQuery.js';
import { InfiniteQueryConfig, InfiniteQueryObject, UseInfiniteQueryObjectOptions } from './types.js';
export declare class ManualInfiniteQuery<Variables extends Record<string, any>, Result, PageParamName extends keyof Variables, Accumulator extends keyof Result | ''> extends ManualQuery<Variables, Result> implements InfiniteQueryObject<Variables, Result, Accumulator> {
    constructor(config: InfiniteQueryConfig<Variables, Result, PageParamName, Accumulator> & {
        apiName: string;
        transformError: (error: any) => StackspotAPIError;
    });
    private getConfig;
    private createInfiniteQueryFn;
    private getListFromData;
    private useInfiniteQueryResult;
    useInfiniteQuery(variables?: Variables, options?: UseInfiniteQueryObjectOptions<Result>): [
        Accumulator extends keyof Result ? Result[Accumulator] : Result,
        UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>
    ];
    useStatefulInfiniteQuery(variables?: Variables, options?: UseInfiniteQueryObjectOptions<Result>): [
        Accumulator extends keyof Result ? Result[Accumulator] : Result,
        boolean,
        StackspotAPIError | undefined | null,
        UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>
    ];
    invalidate(variables?: Partial<Variables> | undefined): Promise<void>;
}
//# sourceMappingURL=ManualInfiniteQuery.d.ts.map