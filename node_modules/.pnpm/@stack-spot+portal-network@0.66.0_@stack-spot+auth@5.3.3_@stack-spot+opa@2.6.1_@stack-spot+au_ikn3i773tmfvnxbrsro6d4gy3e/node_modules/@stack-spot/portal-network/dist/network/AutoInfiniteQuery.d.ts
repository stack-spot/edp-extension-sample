import { InfiniteData, UseInfiniteQueryResult } from '@tanstack/react-query';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { AutoQuery } from './AutoQuery.js';
import { AutoQueryObjectParams, InfiniteQueryObject, InfiniteQueryOptions, UseInfiniteQueryObjectOptions } from './types.js';
export declare class AutoInfiniteQuery<Variables, Result, PageParamName extends keyof Variables, Accumulator extends keyof Result | ''> extends AutoQuery<Variables, Result> implements InfiniteQueryObject<Variables, Result, Accumulator> {
    private options;
    constructor(params: AutoQueryObjectParams<Variables, Result>, options: InfiniteQueryOptions<Variables, Result, PageParamName, Accumulator>);
    private createInfiniteQueryFn;
    private getListFromData;
    private useInfiniteQueryResult;
    useInfiniteQuery(variables?: Variables, options?: UseInfiniteQueryObjectOptions<Result>): [
        Accumulator extends keyof Result ? Result[Accumulator] : Result,
        UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>
    ];
    useStatefulInfiniteQuery(variables?: Variables, options?: UseInfiniteQueryObjectOptions<Result>): [
        Accumulator extends keyof Result ? Result[Accumulator] : Result,
        boolean,
        StackspotAPIError | undefined | null,
        UseInfiniteQueryResult<InfiniteData<Result>, StackspotAPIError>
    ];
    invalidate(variables?: Partial<Variables> | undefined): Promise<void>;
    private getInfiniteKey;
    cancel(variables?: Partial<Variables> | undefined): Promise<void>;
}
//# sourceMappingURL=AutoInfiniteQuery.d.ts.map