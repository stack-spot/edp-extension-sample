import { DefinedUseQueryResult } from '@tanstack/react-query';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { AutoOperation } from './AutoOperation.js';
import { AutoQueryObjectParams, QueryObject, UseQueryObjectOptions } from './types.js';
export declare class AutoQuery<Variables, Result> extends AutoOperation<Variables> implements QueryObject<Variables, Result> {
    #private;
    constructor(params: AutoQueryObjectParams<Variables, Result>);
    query(...[variables]: Variables extends void ? [] : [variables: Variables]): Promise<any>;
    useQuery(...args: Variables extends void ? [options?: UseQueryObjectOptions<Result>] : [variables: Variables, options?: UseQueryObjectOptions<Result>]): Result;
    useStatefulQuery(...args: Variables extends void ? [options?: UseQueryObjectOptions<Result>] : [variables: Variables, options?: UseQueryObjectOptions<Result>]): readonly [Result, false, StackspotAPIError | undefined, DefinedUseQueryResult<Result, StackspotAPIError>];
    invalidate(variables?: Partial<Variables>): Promise<void>;
    getKey(variables?: Partial<Variables>): any[];
    cancel(variables?: Partial<Variables>): void;
}
//# sourceMappingURL=AutoQuery.d.ts.map