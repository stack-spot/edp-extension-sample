import { Env, FetchEventStream, HTTPMethod, SessionManager } from './types.js';
/**
 * A set of methods for performing network requests to an API.
 *
 * The requests are authenticated unless there's no session available.
 *
 * In order for a network client to work properly, the general setup for the class `NetworkClient` must be made before any request is
 * attempted:
 *
 * ```
 * NetworkClient.setup(mySessionManager, currentEnv)
 * ```
 */
export declare abstract class NetworkClient {
    private baseURL;
    private static sessionManager?;
    private static env?;
    /**
     * @param baseURL An object with the keys "dev", "stg" and "prd". The values must be the url for each of these environments.
     */
    constructor(baseURL: Record<Env, string>);
    /**
     * Sets up all network clients. Must be called before attempting to make any request.
     * @param sessionManager An object with functions capable of checking, retrieving and ending the current session.
     * @param env The environment to send the requests to.
     */
    static setup(sessionManager: SessionManager, env: Env): void;
    private uninitializedError;
    /**
     * Builds a URL with the `baseUrl` of this network client and the `path` passed as parameter.
     * @param path the path to the resource.
     * @returns a full URL.
     */
    protected resolveURL(path: string): URL;
    /**
     * Verifies if the current user is allowed to send the given request.
     * @param method the request's method.
     * @param path the path to the resource.
     * @param body the request's body.
     * @returns a promise that resolves to true if it's allowed or false otherwise.
     */
    protected requestPermission(method: HTTPMethod, path: string, body?: string | object): Promise<boolean>;
    private getSessionManager;
    /**
     * Makes a request (same signature as `globalThis.fetch`). This request will prepend the base url to the url and, if there's an active
     * session, include authentication headers.
     * @param input the url or request object.
     * @param init the fetch options.
     * @returns a promise with the Response.
     */
    protected fetch(input: string | URL | Request, init?: RequestInit): Promise<Response>;
    /**
     * Reads an EventSource from the endpoint. Differently than the original specification, this allows common HTTP requests with method and
     * body to be made.
     *
     * @example
     * ```
     * let events = this.stream('url', options)
     * for await (let event of events) {
     *   console.log('<<', event.data)
     * }
     * ```
     * @param input the url or request object.
     * @param init the fetch options.
     * @returns a promise with a FetchEventStream, which is an AsyncGenerator.
     */
    protected stream(input: string | URL | Request, init?: RequestInit): Promise<FetchEventStream>;
    /**
     * Checks whether or not the current account is freemium.
     * @returns true if it's a freemium account, false otherwise.
     */
    protected isFreemium(): boolean;
}
//# sourceMappingURL=NetworkClient.d.ts.map