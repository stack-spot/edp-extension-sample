/* eslint-disable react-hooks/rules-of-hooks */
import { useQuery } from '@tanstack/react-query';
import { queryClient } from './react-query-client.js';
export class ManualOperation {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.config = config;
    }
    async makePermissionRequest(variables) {
        try {
            // @ts-ignore the following is correct. TS can't correctly infer the conditional type here =(
            return await this.config.permission(variables);
        }
        catch (error) {
            throw this.config.transformError(error);
        }
    }
    isAllowed(...[variables]) {
        return queryClient.fetchQuery({
            queryKey: this.getPermissionKey(variables),
            queryFn: () => this.makePermissionRequest(variables),
        });
    }
    useAllowed(...args) {
        /* `this.config.permission` is a function with arity 0 or 1. If it accepts variables, its arity is 1. If it doesn't accept variables,
        its arity is zero. We can use this information to determine what the type of `args` actually is at runtime. If variables are accepted,
        than the 1st argument is the variables and the 2nd is the query options, otherwise, it has a single argument, which is the query
        options. */
        const [variables, options] = this.config.permission.length === 1 ? args : [undefined, args[0]];
        const result = useQuery({
            ...options,
            queryKey: this.getPermissionKey(variables),
            queryFn: () => this.makePermissionRequest(variables),
        }, queryClient);
        return [result.data, result.isPending, result.error, result];
    }
    getPermissionKey(variables) {
        return [this.config.apiName, `${this.config.name}.permission`, variables];
    }
}
//# sourceMappingURL=ManualOperation.js.map