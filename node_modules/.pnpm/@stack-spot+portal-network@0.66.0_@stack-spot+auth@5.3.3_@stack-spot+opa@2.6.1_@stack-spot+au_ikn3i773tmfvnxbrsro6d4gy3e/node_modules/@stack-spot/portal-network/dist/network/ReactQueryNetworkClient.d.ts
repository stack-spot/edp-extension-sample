import { Defaults, HttpError, RequestOpts } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { NetworkClient } from './NetworkClient.js';
import { Env, InfiniteQueryConfig, InfiniteQueryObject, InfiniteQueryOptions, MutationObject, OperationConfig, OperationObject, QueryObject } from './types.js';
export declare const DEFAULT_PAGE_SIZE = 20;
/**
 * A Network Client that uses oazapfts for making requests and React Query for managing responses.
 */
export declare abstract class ReactQueryNetworkClient extends NetworkClient {
    #private;
    /**
     * @param baseURL An object with the keys "dev", "stg" and "prd". The values must be the url for each of these environments.
     * @param defaults the `default` object of the API this client is for (provided by the code generated by oazapfts).
     */
    constructor(baseURL: Record<Env, string>, defaults: Defaults<any>);
    /**
     * Receives an HttpError and returns a StackspotAPIError.
     * @param error the original HttpError created by oazapfts.
     */
    protected abstract buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Creates a function that checks the permission for a request generated by an oazapfts function.
     *
     * This is intended to help creating a manual operation.
     *
     * @example
     * ```
     * myOperation = this.mutation({
     *   // ...
     *   permission: this.createPermissionFunctionFor(oazapftsFnForMyOperation)
     * })
     * ```
     * @param fn the function generated by oazapfts.
     * @returns a function that receives the variables of `fn` (if any) and returns a promise that resolves to true if the request is allowed
     * and false otherwise.
     */
    protected createPermissionFunctionFor<Args extends [variables: Record<string, any>, opts?: RequestOpts] | [opts?: RequestOpts]>(fn: (...args: Args) => Promise<any>): (...args: Args extends [opts?: RequestOpts] ? [] : [variables?: Partial<Args[0]>]) => Promise<boolean>;
    /**
     * Creates a function that runs a oazapfts function with an abort signal.
     *
     * This is intended to help creating a manual operation.
     *
     * @example
     * ```
     * myOperation = this.mutation({
     *   // ...
     *   request: this.createRequestFunctionFor(oazapftsFnForMyOperation)
     * })
     * ```
     * @param fn the function generated by oazapfts.
     * @returns a function that receives a signal and the variables of `fn` (if any) and returns the same as `fn`.
     */
    protected createRequestFunctionFor<Args extends [variables: Record<string, any>, opts?: RequestOpts] | [opts?: RequestOpts], Result>(fn: (...args: Args) => Promise<Result>): (...args: Args extends [opts?: RequestOpts] ? [signal: AbortSignal] : [signal: AbortSignal, variables: Args[0]]) => Promise<Result>;
    /**
     * Builds a query manually by using a configuration object.
     * @param config the configuration object containing the name, a request function and a permission function.
     */
    protected query<Args extends [AbortSignal, Record<string, any>] | [AbortSignal], Result>(config: OperationConfig<Args, Result>): QueryObject<Args extends [AbortSignal] ? void : Args[1], Result>;
    /**
     * Builds a query manually by using a configuration object.
     * @param config the configuration object containing the name and a request function.
     */
    protected query<Args extends [AbortSignal, Record<string, any>] | [AbortSignal], Result>(config: Omit<OperationConfig<Args, Result>, 'permission'>): Omit<QueryObject<Args extends [AbortSignal] ? void : Args[1], Result>, 'isAllowed' | 'useAllowed' | 'getPermissionKey'>;
    /**
     * Builds a query automatically by using a function generated by oazapfts.
     * @param fn the oazapfts function.
     */
    protected query<Args extends [opts?: RequestOpts] | [variables: Record<string, any>, opts?: RequestOpts], Result>(fn: (...args: Args) => Promise<Result>): Args extends [variables: infer Variables, opts?: RequestOpts] ? QueryObject<Variables, Result> : QueryObject<void, Result>;
    /**
     * Builds a query manually by using a configuration object.
     * @param config the configuration object containing the name, a request function and a permission function.
     */
    protected infiniteQuery<Variables extends Record<string, any>, Result, PageParamName extends keyof Variables, Accumulator extends keyof Result | ''>(config: InfiniteQueryConfig<Variables, Result, PageParamName, Accumulator>): InfiniteQueryObject<Variables, Result, Accumulator>;
    /**
     * Builds a query manually by using a configuration object.
     * @param config the configuration object containing the name and a request function.
     */
    protected infiniteQuery<Variables extends Record<string, any>, Result, PageParamName extends keyof Variables, Accumulator extends keyof Result | ''>(config: Omit<InfiniteQueryConfig<Variables, Result, PageParamName, Accumulator>, 'permission'>): Omit<InfiniteQueryObject<Variables, Result, Accumulator>, 'isAllowed' | 'useAllowed' | 'getPermissionKey'>;
    /**
     * Builds a query automatically by using a function generated by oazapfts.
     * @param fn the oazapfts function.
     * @param options the configuration for the infinite query.
     */
    protected infiniteQuery<Variables extends Record<string, any>, Result, PageParamName extends keyof Variables, Accumulator extends keyof Result>(fn: (variables: Variables, opts?: RequestOpts) => Promise<Result>, options: Partial<InfiniteQueryOptions<Variables, Result, PageParamName, Accumulator>>): InfiniteQueryObject<Variables, Result, Accumulator>;
    /**
     * Builds a query automatically by using a function generated by oazapfts with the variables `page` and `size`.
     * @param fn the oazapfts function that returns an array.
     * @param options optional configuration for the infinite query. By default, it will use the variables page and size of the function
     * passed in the first parameter.
     */
    protected infiniteQuery<Variables extends {
        page?: number | string;
        size?: number | string;
    }, Result extends any[], PageParamName extends keyof Variables = 'page', Accumulator extends keyof Result | '' = ''>(fn: (variables: Variables, opts?: RequestOpts) => Promise<Result>, options?: Partial<InfiniteQueryOptions<Variables, Result, PageParamName, Accumulator>>): InfiniteQueryObject<Variables, Result, Accumulator>;
    /**
     * Builds a query automatically by using a function generated by oazapfts in which the variables `pageParamName` is a string
     * which can be used for dynamic indexing.
     * @param fn the oazapfts function that returns an array.
     * @param options optional configuration for the infinite query. By default, it will use the variables page and size of the function
     * passed in the first parameter.
     */
    protected infiniteQuery<Variables extends Record<string, any>, Result, PageParamName extends string, Accumulator extends keyof Result>(fn: (variables: Variables, opts?: RequestOpts) => Promise<Result>, options: Partial<InfiniteQueryOptions<Variables, Result, PageParamName, Accumulator>>): InfiniteQueryObject<Variables, Result, Accumulator>;
    /**
     * Builds a mutation manually by using a configuration object.
     * @param config the configuration object containing the name, a request function and a permission function.
     */
    protected mutation<Args extends [AbortSignal, Record<string, any>] | [AbortSignal], Result>(config: OperationConfig<Args, Result>): MutationObject<Args extends [AbortSignal] ? void : Args[1], Result>;
    /**
     * Builds a mutation manually by using a configuration object.
     * @param config the configuration object containing the name and a request function.
     */
    protected mutation<Args extends [AbortSignal, Record<string, any>] | [AbortSignal], Result>(config: Omit<OperationConfig<Args, Result>, 'permission'>): Omit<MutationObject<Args extends [AbortSignal] ? void : Args[1], Result>, keyof OperationObject<any>>;
    /**
     * Builds a mutation automatically by using a function generated by oazapfts.
     * @param fn the oazapfts function.
     */
    protected mutation<Args extends [opts?: RequestOpts] | [variables: Record<string, any>, opts?: RequestOpts], Result>(fn: (...args: Args) => Promise<Result>): Args extends [variables: infer Variables, opts?: RequestOpts] ? MutationObject<Variables, Result> : MutationObject<void, Result>;
}
//# sourceMappingURL=ReactQueryNetworkClient.d.ts.map