/* eslint-disable react-hooks/rules-of-hooks */
import { useInfiniteQuery, useSuspenseInfiniteQuery, } from '@tanstack/react-query';
import { get, set } from 'lodash';
import { AutoQuery } from './AutoQuery.js';
import { queryClient } from './react-query-client.js';
export class AutoInfiniteQuery extends AutoQuery {
    constructor(params, options) {
        super(params);
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.options = {
            ...options,
            accumulator: options.accumulator ?? '',
            defaultVariables: options.defaultVariables ?? {},
        };
    }
    createInfiniteQueryFn(variables) {
        return ({ pageParam, signal }) => {
            const paginatedVariables = {
                ...variables,
            };
            set(paginatedVariables, this.options.pageParamName, pageParam ?? get(variables, this.options.pageParamName));
            return this.callFn(paginatedVariables, signal);
        };
    }
    getListFromData(data) {
        return data?.pages.map(page => this.options.accumulator ? page[this.options.accumulator] : page).flat();
    }
    useInfiniteQueryResult(suspense, variables = {}, options) {
        variables = { ...this.options.defaultVariables, ...variables };
        const use = suspense ? useSuspenseInfiniteQuery : useInfiniteQuery;
        return use({
            ...options,
            queryKey: this.getInfiniteKey(variables),
            queryFn: this.createInfiniteQueryFn(variables),
            initialPageParam: this.options.initialPageParam,
            getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => this.options.getNextPageParam({ variables, lastPage, allPages, lastPageParam, allPageParams }),
        }, queryClient);
    }
    useInfiniteQuery(variables, options) {
        const result = this.useInfiniteQueryResult(true, variables, options);
        return [
            this.getListFromData(result.data),
            result,
        ];
    }
    useStatefulInfiniteQuery(variables, options) {
        const result = this.useInfiniteQueryResult(false, variables, options);
        return [
            this.getListFromData(result.data),
            result.isPending,
            result.error,
            result,
        ];
    }
    async invalidate(variables) {
        await Promise.all([
            super.invalidate(variables),
            queryClient.invalidateQueries({ queryKey: this.getInfiniteKey(variables) }),
        ]);
    }
    getInfiniteKey(variables) {
        return ['infinite', ...this.getKey(variables)];
    }
    async cancel(variables) {
        super.cancel(variables);
        queryClient.cancelQueries({ queryKey: this.getInfiniteKey() });
    }
}
//# sourceMappingURL=AutoInfiniteQuery.js.map