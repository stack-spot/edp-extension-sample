import { UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { FullOperationConfig, OperationObject } from './types.js';
export declare abstract class ManualOperation<Variables extends Record<string, any> | void> implements OperationObject<Variables> {
    protected config: FullOperationConfig<Variables extends void ? [AbortSignal] : [AbortSignal, Variables], any>;
    constructor(config: FullOperationConfig<Variables extends void ? [AbortSignal] : [AbortSignal, Variables], any>);
    private makePermissionRequest;
    isAllowed(...[variables]: Variables extends void ? [] : [variables?: Partial<Variables>]): Promise<boolean>;
    useAllowed(...args: Variables extends void ? [options?: Omit<UseQueryOptions, 'queryFn' | 'queryKey'>] : [variables?: Partial<Variables>, options?: Omit<UseQueryOptions, 'queryFn' | 'queryKey'>]): readonly [boolean | undefined, boolean, StackspotAPIError | null, UseQueryResult<boolean, StackspotAPIError>];
    getPermissionKey(variables?: Partial<Variables>): (string | Partial<Variables> | undefined)[];
}
//# sourceMappingURL=ManualOperation.d.ts.map