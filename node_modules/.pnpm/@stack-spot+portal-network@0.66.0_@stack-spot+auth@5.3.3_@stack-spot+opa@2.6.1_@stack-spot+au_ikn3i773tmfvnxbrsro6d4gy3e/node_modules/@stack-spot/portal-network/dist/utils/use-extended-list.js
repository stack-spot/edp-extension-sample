import { useEffect, useRef, useState } from 'react';
export function useExtendedList(list, extensions, idProp = 'id') {
    const [listWithExtensions, setListWithExtensions] = useState(list);
    const [isLoading, setLoading] = useState(true);
    const extensionMap = useRef(new Map());
    const listId = list.map(i => i[idProp]).join(';');
    useEffect(() => {
        async function update() {
            setLoading(true);
            const newList = await Promise.all(list.map(async (item) => {
                const itemExtensions = extensionMap.current.get(item[idProp]) ?? {};
                if (Object.keys(itemExtensions).length === 0) {
                    await Promise.all(Object.keys(extensions).map(async (key) => {
                        try {
                            // "await" because it might be a promise
                            itemExtensions[key] = await extensions[key](item);
                        }
                        catch (error) {
                            // eslint-disable-next-line no-console
                            console.error(`Failed to compute extension "${String(key)}" for item with id "${item[idProp]}". It will have undefined as its value, which may cause errors ahead. Caused by the error below:`);
                            // eslint-disable-next-line no-console
                            console.error(error);
                        }
                    }));
                    extensionMap.current.set(item[idProp], itemExtensions);
                }
                return { ...item, ...itemExtensions };
            }));
            setLoading(false);
            setListWithExtensions(newList);
        }
        update();
    }, [listId]);
    return [listWithExtensions.length ? listWithExtensions : list, isLoading];
}
//# sourceMappingURL=use-extended-list.js.map