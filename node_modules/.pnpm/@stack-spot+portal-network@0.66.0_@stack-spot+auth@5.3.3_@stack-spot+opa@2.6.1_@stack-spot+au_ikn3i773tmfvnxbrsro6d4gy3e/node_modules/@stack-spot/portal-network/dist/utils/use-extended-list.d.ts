type ExtensionMap<T> = Record<string, (item: T) => any>;
type Unpromisify<T> = T extends Promise<infer R> ? R : T;
type Extension<E extends ExtensionMap<any>> = {
    [K in keyof E]?: Unpromisify<ReturnType<E[K]>>;
};
type ItemWithExtensions<T, E extends ExtensionMap<T>> = T & Extension<E>;
/**
 * Computes the given extensions for the items in the list passed as parameter. An extension will, most of the times, return a promise,
 * but it can return whatever you'd like.
 *
 * If the extensions are promises and are still loading, the items won't have the corresponding keys.
 *
 * Attention: once an extension is calculated for an item, it's never calculated again. An item is identified by the parameter "idProp"
 * (3rd), which is "id" by default.
 *
 * @example
 * ```
 * const [groups] = accountClient.memberGroups.useInfiniteQuery({ memberId: 'someId' })
 * const extendedGroups = useExtendedList(groups, {
 *   canRemoveMemberFromGroup: group => accountClient.removeMemberFromGroup.isAllowed({ groupId: group.id, memberId: 'someId' }),
 *   title: group => `${group.name} (${group.totalUsers})`,
 * })
 * ```
 * Above, each item in `extendedGroups` will have the properties `canRemoveMemberFromGroup` and `title`, once all permission have been
 * fetched.
 *
 * @param list the items to compute extensions for.
 * @param extensions an object where the keys are the extension names and the values are functions that return the value of the extension.
 * @param idProp the name of the property that can be used as an id. 'id' by default.
 * @returns an array with 2 items:
 * - [0]: the list with the permission properties.
 * - [1]: true if waiting for a promise, false otherwise.
 */
export declare function useExtendedList<T, E extends ExtensionMap<T>>(list: T[], extensions: E, idProp: keyof T): [ItemWithExtensions<T, E>[], boolean];
export declare function useExtendedList<T extends {
    id: string;
}, E extends ExtensionMap<T>>(list: T[], extensions: E, idProp?: keyof T): [ItemWithExtensions<T, E>[], boolean];
export {};
//# sourceMappingURL=use-extended-list.d.ts.map