import { defaults, getV1AgentByAgentId, getV1Agents, getV1PublicAgents } from '../api/agent.js';
import apis from '../apis.json';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
class AgentClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.agent.url, defaults);
        Object.defineProperty(this, "agents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getV1Agents)
        });
        Object.defineProperty(this, "publicAgents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getV1PublicAgents)
        });
        Object.defineProperty(this, "agent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getV1AgentByAgentId)
        });
    }
    buildStackSpotError(error) {
        const errorData = error.data;
        const message = [errorData?.details];
        Object.keys(errorData?.additionalInformation ?? {}).forEach(k => message.push(`  - ${k}: ${errorData?.additionalInformation?.[k]}`));
        return new StackspotAPIError({
            status: error.status,
            headers: error.headers,
            stack: error.stack,
            code: error.data?.code,
            message: message.join('\n'),
        });
    }
}
export const agentClient = new AgentClient();
//# sourceMappingURL=agent.js.map