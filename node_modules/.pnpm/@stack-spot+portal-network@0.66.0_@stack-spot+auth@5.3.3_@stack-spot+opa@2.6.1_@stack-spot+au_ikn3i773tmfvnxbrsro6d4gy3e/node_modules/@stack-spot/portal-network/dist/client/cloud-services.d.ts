import { HttpError } from '@oazapfts/runtime';
import { BillingAccountSummaryResponse } from '../api/cloudServices.js';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { CostAllocationResult, CostAllocationVariables, FixedManagedService } from './types.js';
declare class CloudServicesClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Gets overview of costs over the current month, last month and last 3 months.
     */
    costOverview: import("../network/types.js").QueryObject<Omit<{
        sortBy?: string | undefined;
        sortOrder?: string | undefined;
    }, "sortOrder"> & {
        sortOrder?: "asc" | "desc" | undefined;
    }, import("../api/cloudServices.js").CostOverview>;
    /**
     * Gets a CSV file with the data of `costOverview`.
     */
    downloadCostOverviewCSV: import("../network/types.js").MutationObject<{
        year: number;
        month: number;
    }, import("../api/cloudServices.js").AttachmentBase64>;
    /**
     * Gets the alerts in a workspace and environment (paginated).
     */
    alerts: import("../network/types.js").InfiniteQueryObject<{
        workspace: string;
        env: string;
        pillar?: "SECURITY" | "COST_OPTIMIZATION" | "RELIABILITY" | undefined;
        severity?: "MANDATORY" | "LOW" | "MEDIUM" | "HIGH" | undefined;
        status?: "PENDING" | "NOT_APPLICABLE" | "COMPLETED" | undefined;
        search?: string | undefined;
        sort?: ("STATUS_ASC" | "STATUS_DESC" | "POLICIES_ASC" | "POLICIES_DESC" | "PILLAR_ASC" | "PILLAR_DESC" | "SEVERITY_ASC" | "SEVERITY_DESC")[] | undefined;
        page?: number | undefined;
        pageSize?: number | undefined;
    }, import("../api/cloudServices.js").PaginatedResponseAlert, "data">;
    /**
     * Lists instances of a particular service resource running in a workspace.
     */
    allInstancesOfResource: import("../network/types.js").QueryObject<{
        workspaceId: string;
        resourceId: string;
        pageToken?: string | undefined;
        search?: string | undefined;
    }, import("../api/cloudServices.js").ManagedResourceList>;
    /**
     * Lists all managed services.
     */
    allServices: import("../network/types.js").QueryObject<void, FixedManagedService[]>;
    /**
     * Gets the description of an instance.
     */
    instance: import("../network/types.js").QueryObject<{
        cloudAccountId: string;
        resourceId: string;
        instanceId: string;
    }, string>;
    /**
     * Gets all Guard Rails.
     */
    guardRails: import("../network/types.js").QueryObject<{
        account: string;
        workspace?: string | undefined;
        env?: string | undefined;
    }, import("../api/cloudServices.js").GroupedGuardrailResponse[]>;
    /**
     * Enables a Guard Rail in any level
     */
    enableGuardRail: import("../network/types.js").MutationObject<{
        account: string;
        workspace?: string | undefined;
        env?: string | undefined;
        enable: boolean;
        guardrailId: string;
    }, unknown>;
    /**
     * Retrieves cost and usage metrics for the current account.
     */
    costAllocation: import("../network/types.js").QueryObject<CostAllocationVariables, CostAllocationResult>;
    /**
     * Lists the filters related to the given type.
     */
    costAllocationFilters: import("../network/types.js").QueryObject<{
        $type: "REGION" | "SUB_ACCOUNT_ID";
    }, string[]>;
    /**
     * Gets a CSV file with the data of `costAllocation`.
     */
    downloadCostAllocationCSV: import("../network/types.js").QueryObject<{
        stackspotAccountId: string;
        masterAccount: string;
        startDate: string;
        endDate: string;
    }, import("../api/cloudServices.js").AttachmentBase64>;
    /**
     * Lists all tags.
     */
    allTags: import("../network/types.js").QueryObject<{
        stackspotAccountId: string;
    }, string[]>;
    /**
     * Retrieves a summary for each billing account of the account with the id passed as parameter.
     */
    billingAccounts: import("../network/types.js").QueryObject<{
        stackSpotAccountId: string;
        showDeleted?: boolean | undefined;
    }, BillingAccountSummaryResponse[]>;
}
export declare const cloudServicesClient: CloudServicesClient;
export {};
//# sourceMappingURL=cloud-services.d.ts.map