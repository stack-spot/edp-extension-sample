import { createApiServiceWorkflowsCreateApiDispatchPost, defaults, getExecutionDispatchRequestServiceWorkflowsExecutionIdRequestGet, getExecutionStatusServiceWorkflowsExecutionStatusExecutionIdGet, healthCheckServiceWorkflowsHealthCheckDispatchPost, runActionServiceWorkflowsRunActionDispatchPost, v1AcceptWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdAcceptPost, v1GetWorkflowExecutionJobDetailServiceV1ExecutionsExecutionIdJobsJobIdGet, v1GetWorkflowExecutionJobGraphServiceV1ExecutionsExecutionIdGet, v1RefuseWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdRefusePost } from '../api/workflows.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { actionDictionary } from '../error/dictionary/action.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { removeAuthorizationParam } from '../utils/remove-authorization-param.js';
class WorkflowClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.workflows.url, defaults);
        /**
         * Runs an action
         */
        Object.defineProperty(this, "runAction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(runActionServiceWorkflowsRunActionDispatchPost))
        });
        /**
         * Creates an api
         */
        Object.defineProperty(this, "createApi", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createApiServiceWorkflowsCreateApiDispatchPost)
        });
        /**
         * Gets the execution status of a workflow by id
         */
        Object.defineProperty(this, "executionStatus", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getExecutionStatusServiceWorkflowsExecutionStatusExecutionIdGet))
        });
        /**
         * Gets the execution dispatch service
         */
        Object.defineProperty(this, "executionDispatchInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getExecutionDispatchRequestServiceWorkflowsExecutionIdRequestGet))
        });
        /**
         * Gets the health check of an execution id
         */
        Object.defineProperty(this, "executionHealthCheck", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(healthCheckServiceWorkflowsHealthCheckDispatchPost))
        });
        /**
         * Get data about the workflow plus a graph representation of its jobs.
         */
        Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(v1GetWorkflowExecutionJobGraphServiceV1ExecutionsExecutionIdGet))
        });
        /**
         * Gets the steps of a workflow job.
         */
        Object.defineProperty(this, "jobSteps", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(v1GetWorkflowExecutionJobDetailServiceV1ExecutionsExecutionIdJobsJobIdGet))
        });
        /**
         * Approves a workflow step that is suspended so the execution can continue.
         */
        Object.defineProperty(this, "acceptWorkflowStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(v1AcceptWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdAcceptPost))
        });
        /**
         * Refuses a workflow step that is suspended so the execution can be canceled.
         */
        Object.defineProperty(this, "refuseWorkflowStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(v1RefuseWorkflowExecutionJobSuspendedServiceV1ExecutionsExecutionIdJobsJobIdRefusePost))
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, actionDictionary, error.headers);
    }
}
export const workflowClient = new WorkflowClient();
//# sourceMappingURL=workflow.js.map