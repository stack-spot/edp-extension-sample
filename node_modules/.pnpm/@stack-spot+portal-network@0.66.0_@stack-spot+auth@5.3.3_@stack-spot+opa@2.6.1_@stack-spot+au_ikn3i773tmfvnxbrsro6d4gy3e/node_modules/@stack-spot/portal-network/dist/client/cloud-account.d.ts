import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { FixedConnectAccountRequestV2, FixedManagedAccountProvisionRequest } from './types.js';
declare class CloudAccountClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Lists all cloud accounts according to the parameters (paginated).
     */
    cloudAccounts: import("../network/types.js").InfiniteQueryObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        sortBy?: string | undefined;
        sortOrder?: string | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        pageSize?: number | undefined;
        $type?: "CustomCloud" | "CloudServices" | undefined;
        environment?: string | undefined;
        status?: "Connecting" | "Connected" | "Disconnected" | "Failed" | "Unknown" | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudAccount.js").PaginatedResourceCloudAccountResponse, "data">;
    /**
     * Gets a list of cloud accounts connected to a workspace
     */
    cloudAccountByWorkspace: import("../network/types.js").QueryObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        accountId?: string | undefined;
        id: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudAccount.js").CloudAccountDetails[]>;
    /**
     * Gets the cloud account workflow of a workspace environment
     */
    workflowByWorkspace: import("../network/types.js").QueryObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        workspaceId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudAccount.js").Workflow>;
    /**
     * Creates a cloud account.
     */
    createCloudAccount: import("../network/types.js").MutationObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        stackspotCustomerIp?: string | undefined;
        connectAccountRequestV2: import("../api/cloudAccount.js").ConnectAccountRequestV2;
    }, "jwtToken" | "connectAccountRequestV2"> & {
        connectAccountRequestV2: FixedConnectAccountRequestV2;
    }, import("../api/cloudAccount.js").CloudAccountDetails>;
    /**
     * Deletes a cloud account.
     */
    deleteCloudAccount: import("../network/types.js").MutationObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        stackspotCustomerIp?: string | undefined;
        id: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudAccount.js").DeleteCloudAccountResponse>;
    /**
     * Deletes all accounts in a workspace.
     */
    deleteAllCloudAccounts: import("../network/types.js").MutationObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        stackspotCustomerIp?: string | undefined;
        workspaceId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudAccount.js").DeleteCloudAccountResponse>;
    /**
     * Provisions managed accounts in a workspace.
     */
    createCloudServicesAccount: import("../network/types.js").MutationObject<Omit<{
        jwtToken: import("../api/cloudAccount.js").JwtToken;
        stackspotCustomerIp?: string | undefined;
        managedAccountProvisionRequest: import("../api/cloudAccount.js").ManagedAccountProvisionRequest;
    }, "jwtToken" | "managedAccountProvisionRequest"> & {
        managedAccountProvisionRequest: FixedManagedAccountProvisionRequest;
    }, "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED">;
    /**
     * Gets all available templates for the managed Cloud Account.
     */
    managedAccountTemplates: import("../network/types.js").QueryObject<void, import("../api/cloudAccount.js").ManagedAccountTemplateResponse[]>;
    /**
     * Gets all the available regions for the managed Cloud Account.
     */
    managesAccountRegions: import("../network/types.js").QueryObject<void, import("../api/cloudAccount.js").ManagedAccountRegionResponse[]>;
}
export declare const cloudAccountClient: CloudAccountClient;
export {};
//# sourceMappingURL=cloud-account.d.ts.map