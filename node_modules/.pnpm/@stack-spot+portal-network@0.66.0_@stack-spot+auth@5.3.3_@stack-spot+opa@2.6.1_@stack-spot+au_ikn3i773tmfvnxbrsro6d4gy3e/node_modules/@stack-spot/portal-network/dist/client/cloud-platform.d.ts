import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
declare class CloudPlatformClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * List foundations
     */
    listFoundations: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListFoundationResponse>;
    /**
     * Get a foundation by id
     */
    foundation: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").FoundationResponse>;
    /**
     * Get list of foundations folders or folder by id
     */
    getFolder: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
        folderId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").FolderResponse>;
    /**
     * Get list of providers for a foundation
     */
    listProviders: import("../network/types.js").QueryObject<Omit<import("@oazapfts/runtime").RequestOpts | undefined, "authorization" | "jwtToken"> & {}, {
        [key: string]: object;
    }[]>;
    /**
     * Create a foundation
     */
    createFoundation: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        createFoundationRequest: import("../api/cloudPlatform.js").CreateFoundationRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").FoundationResponse>;
    /**
     * Create a foundation folder
     */
    createFolder: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createFolderRequest: import("../api/cloudPlatform.js").CreateFolderRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").FolderResponse>;
    /**
     * Get a list of dns zones
     */
    listDnsZones: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListDnsZoneResponse>;
    /**
     * Create a dns zone
     */
    createDnsZone: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createDnsZoneRequest: import("../api/cloudPlatform.js").CreateDnsZoneRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").DnsZoneResponse>;
    /**
     * Get a list of cidrs
     */
    listCidrs: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListCidrResponse>;
    /**
     * Create a cidr
     */
    createCidr: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createCidrRequest: import("../api/cloudPlatform.js").CreateCidrRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").CidrResponse>;
    /**
     * Get a list of certificates
     */
    listCertificates: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListCertificateResponse>;
    /**
     * Get a certificate by id
     */
    getCertificate: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
        certificateId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").CertificateResponse>;
    /**
     * Create a certificate
     */
    createCertificate: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        body: import("../api/cloudPlatform.js").CreatePrivateCertificateRequest | import("../api/cloudPlatform.js").CreatePublicCertificateRequest | import("../api/cloudPlatform.js").ImportCertificateRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").CertificateResponse>;
    /**
     * Create a project
     */
    createProject: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createProjectRequest: import("../api/cloudPlatform.js").CreateProjectRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ProjectResponse>;
    /**
     * Get a project by id
     */
    getProjectById: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
        projectId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ProjectResponse>;
    /**
     * Get a list of dns records
     */
    listDnsRecords: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
        projectId?: string | undefined;
        dnsZoneId?: string | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListDnsRecordResponse>;
    /**
     * Create a dns record
     */
    createDnsRecord: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createDnsRecordRequest: import("../api/cloudPlatform.js").CreateDnsRecordRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").DnsRecordResponse>;
    /**
     * Get a list of networks
     */
    listNetworks: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
        projectId?: string | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListNetworkResponse>;
    /**
     * Create a network
     */
    createNetwork: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createNetworkRequest: import("../api/cloudPlatform.js").CreateNetworkRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").NetworkResponse>;
    /**
     * Get a list of subnets
     */
    listSubnets: import("../network/types.js").QueryObject<Omit<{
        authorization: string;
        foundationId: string;
        projectId?: string | undefined;
        vpcId?: string | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").ListSubnetResponse>;
    /**
     * Create a subnet
     */
    createSubnet: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        foundationId: string;
        createSubnetRequest: import("../api/cloudPlatform.js").CreateSubnetRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudPlatform.js").SubnetResponse>;
}
export declare const cloudPlatformClient: CloudPlatformClient;
export {};
//# sourceMappingURL=cloud-platform.d.ts.map