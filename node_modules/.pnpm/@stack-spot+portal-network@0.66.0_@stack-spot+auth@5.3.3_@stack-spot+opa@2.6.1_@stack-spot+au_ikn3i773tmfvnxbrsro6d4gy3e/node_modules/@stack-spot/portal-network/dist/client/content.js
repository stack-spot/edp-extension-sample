import { addAction, addLink, addWorkflow, addWorkspace, associateActionToPlugin, changeVisibility, createStudio, defaults, deleteAction, deleteActionVersion, deleteLink, deletePluginVersion, deleteStudio, deleteV1StacksVersionsByStackVersionId, delWorkspace, deprecateActionVersion, deprecatePluginVersion, deprecateStackVersionBy, downloadAction, getActionBySlug, getActionsVersions, getActionVersionById, getAllActionVersions, getApplicationDetailsView, getApplicationsUsesPlugin, getAvailableActionVersionsByActionSlug, getAvailableWorkflowVersionsByWorkflowSlug, getDependentPluginsVersions, getGetPluginView, getInfrastructureEnvironmentsUsesPlugin, getListOfInputs, getPluginInfrastructureView, getPluginModalView, getPluginVersions, getPluginVersionsNotInUse, getPluginVersionUsageSummary, getStackUsesPlugin, getStackVersionById, getStackVersionListByIds, getStackWorkspaceDetailView, getStackWorkspaces, getStarterStackVersionsAndPluginsVersions, getStarterUsesPlugin, getStudioByIdOrSlug, getStudios, getStudios1, getStudiosToCreateButton, getStudioTabs, getUnusedStackVersions, getWorkflow, getWorkflowByStudioSlug, getWorkflowDoc, listAccountWorkflow, listActions, listActions1, listActions2, listActionsByFilters1, listConnectionInterfaceTypes, listLinksByStackVersion, listMostUsedStackVersions, listPlugins, listPluginVersionByIdsController, listReasons, listStacks, listStacks1, listStacksByFilters, listStarters, listWorkflows, listWorkflowVersion, listWorkspaces, patchStarterV2, removeActionFromPlugin, removeStackWorkflow, stackModalViewSummary, stackVersionUsageSummary, updateStudio, updateStudioTabs, } from '../api/content.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { cntDictionary } from '../error/dictionary/cnt.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { removeAuthorizationParam } from '../utils/remove-authorization-param.js';
class ContentClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.content.url, defaults);
        /**
         * Gets links in a stack
         */
        Object.defineProperty(this, "linksInStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listLinksByStackVersion)
        });
        /**
         * Adds a link in a stack
         */
        Object.defineProperty(this, "addLinkInStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addLink)
        });
        /**
         * Adds a link in a stack
         */
        Object.defineProperty(this, "deleteLinkFromStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteLink)
        });
        /**
         * Gets all stack version by a list of ids
         */
        Object.defineProperty(this, "allStackVersionByIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStackVersionListByIds)
        });
        /**
         * Gets all studios
         */
        Object.defineProperty(this, "studios", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getStudios1))
        });
        /**
         * Gets all studios
         */
        Object.defineProperty(this, "studiosWithPagination", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getStudios))
        });
        /**
         * Gets all studios
         */
        Object.defineProperty(this, "studiosUserHasCreatePermission", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getStudiosToCreateButton))
        });
        /**
         * Gets a studio
         */
        Object.defineProperty(this, "studio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStudioByIdOrSlug)
        });
        /**
         * Creates a studio
         */
        Object.defineProperty(this, "createStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createStudio))
        });
        /**
         * Updates a studio
         */
        Object.defineProperty(this, "updateStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateStudio)
        });
        /**
         * Deletes a studio
         */
        Object.defineProperty(this, "deleteStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteStudio)
        });
        /**
         * Changes studio visibility
         */
        Object.defineProperty(this, "changeStudioVisibility", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(changeVisibility)
        });
        /**
         * Adds a workspace to a studio
         */
        Object.defineProperty(this, "addWorkspaceToStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addWorkspace)
        });
        /**
         * Removes a given workspace from a studio
         */
        Object.defineProperty(this, "removeWorkspaceFromStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(delWorkspace)
        });
        /**
         * Gets all workspaces associated with a given studio
         */
        Object.defineProperty(this, "workspacesAssociatedToStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listWorkspaces)
        });
        /**
         * Gets studio tabs
         */
        Object.defineProperty(this, "studioTabs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStudioTabs)
        });
        /**
         * Updates studio tabs
         */
        Object.defineProperty(this, "updateStudioTabs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateStudioTabs)
        });
        /**
         * Gets content deprecation reasons
         */
        Object.defineProperty(this, "deprecationReasons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listReasons)
        });
        /**
         * Gets stacks from a given studio
         */
        Object.defineProperty(this, "stacksFromStudios", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listStacksByFilters)
        });
        //Workflow
        /**
         * Gets workflows from a given studio
         */
        Object.defineProperty(this, "workflowsFromStudio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getWorkflowByStudioSlug, { accumulator: 'content',
                pageParamName: 'pageable.page',
                initialPageParam: { page: 0 },
                getNextPageParam: ({ variables, lastPage, lastPageParam }) => {
                    const size = variables.pageable.size ?? 1;
                    const parsedLastPageParam = lastPageParam?.page ?? 0;
                    return lastPage.content && lastPage.content.length < size ? undefined : { page: parsedLastPageParam + 1 };
                },
            })
        });
        /**
         * Gets all account workflows
         */
        Object.defineProperty(this, "accountWorkflows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(listAccountWorkflow, { accumulator: 'content', initialPageParam: 0 })
        });
        /**
         * Gets workflow doc
         */
        Object.defineProperty(this, "workflowDoc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getWorkflowDoc)
        });
        /**
         * Gets a workflow by slug
         */
        Object.defineProperty(this, "workflow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getWorkflow)
        });
        /**
         * Gets all the versions of a workflow
         */
        Object.defineProperty(this, "workflowVersions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listWorkflowVersion)
        });
        /**
         * Gets workflows of a stack version
         */
        Object.defineProperty(this, "workflowsFromStackVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listWorkflows)
        });
        /**
         * Removes a workflow from a stack version
         */
        Object.defineProperty(this, "removeWorkflowsFromStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeStackWorkflow)
        });
        /**
         * Adds a workflow from a stack version
         */
        Object.defineProperty(this, "addWorkflowToStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addWorkflow)
        });
        /**
         * Gets workflow doc
         */
        Object.defineProperty(this, "availableWorkflowVersionsBySlug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAvailableWorkflowVersionsByWorkflowSlug)
        });
        /**
         * Gets usage summary of stack
         */
        Object.defineProperty(this, "stackUsageSummary", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(stackModalViewSummary)
        });
        /**
         * Gets list of Workspaces using the Stack
         */
        Object.defineProperty(this, "workspacesUsingStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStackWorkspaces)
        });
        /**
         * Gets list StackVersions used by Workspace
         */
        Object.defineProperty(this, "stackVersionsUsedByWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStackWorkspaceDetailView)
        });
        /**
         * Gets list of StackVersions not used by any Content
         */
        Object.defineProperty(this, "stackVersionsNotInUse", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getUnusedStackVersions)
        });
        /**
        * Get usage summary of plugin
        */
        Object.defineProperty(this, "pluginUsageSummary", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPluginModalView)
        });
        /**
         * Gets list of Stacks using the plugin
         */
        Object.defineProperty(this, "stacksUsingPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStackUsesPlugin)
        });
        /**
         * Gets list of PluginVersions used by Stack
         */
        Object.defineProperty(this, "pluginVersionsUsedByStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPluginVersions)
        });
        /**
         * Gets list of Plugin that requires the plugin
         */
        Object.defineProperty(this, "pluginsRequiresPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getGetPluginView)
        });
        /**
         * Gets list of PluginVersions used by Plugin
         */
        Object.defineProperty(this, "pluginVersionsUsedByPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getDependentPluginsVersions)
        });
        /**
         * Gets list of Starter using the plugin
         */
        Object.defineProperty(this, "starterUsingPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStarterUsesPlugin)
        });
        /**
         * Gets list of PluginVersions used by Starter
         */
        Object.defineProperty(this, "pluginVersionsUsedByStarter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStarterStackVersionsAndPluginsVersions)
        });
        /**
         * Gets list of Infrastructure using the plugin
         */
        Object.defineProperty(this, "infrastructureUsingPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPluginInfrastructureView)
        });
        /**
         * Gets list of PluginVersions used by Infrastructure
         */
        Object.defineProperty(this, "pluginVersionsUsedByInfrastructure", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getInfrastructureEnvironmentsUsesPlugin)
        });
        /**
         * Gets list of Application using the plugin
         */
        Object.defineProperty(this, "applicationUsingPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getApplicationsUsesPlugin)
        });
        /**
         * Gets list of PluginVersions used by Applications
         */
        Object.defineProperty(this, "pluginVersionsUsedByApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getApplicationDetailsView)
        });
        /**
         * Gets list of PluginVersions not used by any Content
         */
        Object.defineProperty(this, "pluginVersionsNotInUse", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPluginVersionsNotInUse)
        });
        /**
         * Get Stack Version Usage Summary
         */
        Object.defineProperty(this, "stackVersionsUsageSummary", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(stackVersionUsageSummary)
        });
        /**
         * Get Plugin Version Usage Summary
         */
        Object.defineProperty(this, "pluginVersionUsageSummary", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPluginVersionUsageSummary)
        });
        /**
         * Deprecate a stack version
         */
        Object.defineProperty(this, "deprecateStackVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(deprecateStackVersionBy))
        });
        /**
         * Delete a stack version of type draft or unpublish
         */
        Object.defineProperty(this, "deleteStackVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteV1StacksVersionsByStackVersionId)
        });
        /**
         * Deprecate a plugin version
         */
        Object.defineProperty(this, "deprecatePluginVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(deprecatePluginVersion))
        });
        /**
         * Delete a Plugin version of type draft or unpublish
         */
        Object.defineProperty(this, "deletePluginVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deletePluginVersion)
        });
        /**
         * Gets Action by Slug and Studio
         */
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getActionBySlug)
        });
        /**
         * Gets all Versions of Action
         */
        Object.defineProperty(this, "actionVersions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAllActionVersions)
        });
        /**
         * Gets Action by Action Version Id
         */
        Object.defineProperty(this, "actionByActionVersionId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getActionVersionById)
        });
        /**
         * Gets list of Actions V2
         */
        Object.defineProperty(this, "actionsV2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listActions)
        });
        /**
         * Gets list of Actions V1
         */
        Object.defineProperty(this, "actions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listActions2)
        });
        /**
         * Get list of Actions in Stack
         */
        Object.defineProperty(this, "actionsInStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listActions1)
        });
        /**
         * Add Action to Stack Version
         */
        Object.defineProperty(this, "addActionsToStackVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addAction)
        });
        /**
         * Add Action to Plugin Version
         */
        Object.defineProperty(this, "addActionsToPluginVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(associateActionToPlugin)
        });
        /**
         * Remove Action Version from Stack
         */
        Object.defineProperty(this, "removeActionVersionFromStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteAction)
        });
        /**
         * Remove Action Version from Plugin
         */
        Object.defineProperty(this, "removeActionVersionFromPlugin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeActionFromPlugin)
        });
        /**
         * Delete Action Version
         */
        Object.defineProperty(this, "deleteActionVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteActionVersion)
        });
        /**
         * Deprecate Action Version
         */
        Object.defineProperty(this, "deprecateActionVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deprecateActionVersion)
        });
        /**
         * Download Action Version
         */
        Object.defineProperty(this, "downloadActionVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(downloadAction)
        });
        /**
         * Get Action Version range by Action Slug
         */
        Object.defineProperty(this, "actionVersionRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAvailableActionVersionsByActionSlug)
        });
        /**
         * Get Actions from Stack
         */
        Object.defineProperty(this, "actionsFromStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listActionsByFilters1)
        });
        /*
         * Update starter
         */
        Object.defineProperty(this, "updateStarter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(patchStarterV2)
        });
        /**
         * Gets connection interface types
         */
        Object.defineProperty(this, "connectionInterfaceTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listConnectionInterfaceTypes)
        });
        /**
         * Gets a list of plugin versions from list of ids.
         */
        Object.defineProperty(this, "pluginVersionsByIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listPluginVersionByIdsController)
        });
        /**
         * Gets plugins from a stack version
         */
        Object.defineProperty(this, "listPluginsFromStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listPlugins)
        });
        /**
         * Gets the inputs of a specific Action. This fn is only used for permission purposes.
         */
        Object.defineProperty(this, "actionInputs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getListOfInputs)
        });
        /**
         * Gets action versions by ids
         */
        Object.defineProperty(this, "actionsVersions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getActionsVersions)
        });
        /**
         * Gets all starters from a stack version id
         */
        Object.defineProperty(this, "startersInStackVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listStarters)
        });
        /**
         * Gets a stack from a stack version id
         */
        Object.defineProperty(this, "getStackByVersionId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getStackVersionById)
        });
        /**
         * View all stacks V3 by account
         */
        Object.defineProperty(this, "getAllStacksV3", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listStacks)
        });
        /**
         * View all stacks by account
         */
        Object.defineProperty(this, "getAllStacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listStacks1)
        });
        /**
         * List most used stack versions
         */
        Object.defineProperty(this, "listMostUsedStackVersions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listMostUsedStackVersions)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, cntDictionary, error.headers);
    }
}
export const contentClient = new ContentClient();
//# sourceMappingURL=content.js.map