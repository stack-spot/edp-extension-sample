import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
declare class CloudRuntimesClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Get list of applications
     */
    listApplications: import("../network/types.js").QueryObject<Omit<{
        projectId: string;
        limit?: number | undefined;
        offset?: number | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").PaginatedResponseApplicationDto>;
    /**
     * Get an application by id
     */
    application: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").GetApplicationByUlidResponseV2>;
    /**
     * Get an application history
     */
    applicationHistory: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").ListApplicationHistoryResponse>;
    /**
     * Get list of application deployments
     */
    listApplicationDeployments: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").BasicDeploymentResponse[]>;
    /**
     * Get list of last deployments by runtime
     */
    listLastApplicationDeploymentsByRuntime: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").BasicDeploymentResponse[]>;
    /**
     * Get an application deployment by id
     */
    applicationDeployment: import("../network/types.js").QueryObject<Omit<{
        deploymentId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").CreateDeploymentResponseV2>;
    /**
     * Get an application deployment status
     */
    applicationDeploymentStatus: import("../network/types.js").QueryObject<Omit<{
        deploymentId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").StatusResponse>;
    /**
     * Get an application deployment health
     */
    applicationDeploymentHealth: import("../network/types.js").QueryObject<Omit<{
        deploymentId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").HealthResponse>;
    /**
     * Get an application deployment logs
     */
    applicationDeploymentLogs: import("../network/types.js").QueryObject<Omit<{
        deploymentId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").GetDeploymentLogsResponse>;
    /**
     * Get an application runtimes
     */
    listApplicationRuntimes: import("../network/types.js").QueryObject<Omit<{
        projectId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").GetRuntimesByProjectUlidV2>;
    /**
     * Get list of repositories
     */
    listRepositories: import("../network/types.js").QueryObject<Omit<{
        limit?: number | undefined;
        offset?: number | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").ListRepositoryResponse>;
    /**
     * Get list of images from a repository
     */
    listRepositoryImages: import("../network/types.js").QueryObject<Omit<{
        repositoryId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").ImageResponse[]>;
    /**
     * Create a deploy of the application
     */
    createDeployment: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        createDeploymentRequestV2: import("../api/cloudRuntimes.js").CreateDeploymentRequestV2;
    }, "authorization" | "jwtToken"> & {}, object>;
    /**
     * Create an application
     */
    createApplication: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        applicationDtov2: import("../api/cloudRuntimes.js").ApplicationDtov2;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").ApplicationDtov2>;
    /**
     * Start an application
     */
    startApplication: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        applicationId: string;
        runtimeId: string;
    }, "authorization" | "jwtToken"> & {}, object>;
    /**
     * Stop an application
     */
    stopApplication: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        applicationId: string;
        runtimeId: string;
    }, "authorization" | "jwtToken"> & {}, object>;
    /**
     * Get secret keys of an application by runtime
     */
    applicationSecretKeys: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
        runtimeId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").SecretVar[]>;
    /**
     * Get application instances in use
     */
    applicationInstancesNow: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
        runtimeId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").GetInstanceResponse>;
    /**
     * Edit application instances
     */
    editApplicationInstances: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        setAutoscalingRequest: import("../api/cloudRuntimes.js").SetAutoscalingRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").CreateDeploymentResponseV2>;
    /**
     * Configure a schedule for application
     */
    createSchedule: import("../network/types.js").MutationObject<Omit<{
        scheduleRequest: import("../api/cloudRuntimes.js").ScheduleRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").ScheduleResponse>;
    /**
     * Get application scheduling
     */
    getScheduling: import("../network/types.js").QueryObject<Omit<{
        applicationId: string;
        runtimeId: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/cloudRuntimes.js").ScheduleResponse[]>;
}
export declare const cloudRuntimesClient: CloudRuntimesClient;
export {};
//# sourceMappingURL=cloud-runtimes.d.ts.map