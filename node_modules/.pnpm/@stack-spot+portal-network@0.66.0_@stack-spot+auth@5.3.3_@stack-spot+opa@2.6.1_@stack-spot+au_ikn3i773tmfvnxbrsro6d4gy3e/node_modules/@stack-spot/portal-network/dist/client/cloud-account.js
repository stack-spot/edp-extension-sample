import { createCloudAccount, defaults, deleteCloudAccountFromEnvironment, deleteManagedAccountsFromWorkspace, getCloudAccountByWorkspace, getManagedCloudRegion, getManagedCloudTemplate, getProvisionWorkflowInWorkspace, listCloudAccounts, provisionManagedAccountsForWorkspace } from '../api/cloudAccount.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { removeAuthorizationParam } from '../utils/remove-authorization-param.js';
const listAccounts = removeAuthorizationParam(listCloudAccounts);
class CloudAccountClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.cloudAccount.url, defaults);
        /**
         * Lists all cloud accounts according to the parameters (paginated).
         */
        Object.defineProperty(this, "cloudAccounts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(listAccounts, {
                accumulator: 'data',
                getNextPageParam: ({ lastPage }) => lastPage.nextPage,
            })
        });
        /**
         * Gets a list of cloud accounts connected to a workspace
         */
        Object.defineProperty(this, "cloudAccountByWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getCloudAccountByWorkspace))
        });
        /**
         * Gets the cloud account workflow of a workspace environment
         */
        Object.defineProperty(this, "workflowByWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getProvisionWorkflowInWorkspace))
        });
        /**
         * Creates a cloud account.
         */
        Object.defineProperty(this, "createCloudAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createCloudAccount)
        });
        /**
         * Deletes a cloud account.
         */
        Object.defineProperty(this, "deleteCloudAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(deleteCloudAccountFromEnvironment))
        });
        /**
         * Deletes all accounts in a workspace.
         */
        Object.defineProperty(this, "deleteAllCloudAccounts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(deleteManagedAccountsFromWorkspace))
        });
        /**
         * Provisions managed accounts in a workspace.
         */
        Object.defineProperty(this, "createCloudServicesAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(provisionManagedAccountsForWorkspace)
        });
        /**
         * Gets all available templates for the managed Cloud Account.
         */
        Object.defineProperty(this, "managedAccountTemplates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getManagedCloudTemplate)
        });
        /**
         * Gets all the available regions for the managed Cloud Account.
         */
        Object.defineProperty(this, "managesAccountRegions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getManagedCloudRegion)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, { en: {}, pt: {} }, error.headers);
    }
}
export const cloudAccountClient = new CloudAccountClient();
//# sourceMappingURL=cloud-account.js.map