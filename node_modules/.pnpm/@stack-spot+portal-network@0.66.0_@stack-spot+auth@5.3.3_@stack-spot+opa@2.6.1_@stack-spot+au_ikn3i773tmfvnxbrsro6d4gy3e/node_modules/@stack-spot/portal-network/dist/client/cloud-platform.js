import { createCertificate, createCidr, createDnsRecord, createDnsZone, createFolder, createFoundation, createNetwork, createProject, createSubnet, defaults, getCertificate, getFolder, getFoundation, getProject, listCertificates, listCidr, listDnsRecord, listDnsZone, listFoundations, listNetwork, listSubnet, providers, } from '../api/cloudPlatform.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { cntDictionary } from '../error/dictionary/cnt.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { removeAuthorizationParam } from '../utils/remove-authorization-param.js';
class CloudPlatformClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.cloudPlatform.url, defaults);
        /**
         * List foundations
         */
        Object.defineProperty(this, "listFoundations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listFoundations))
        });
        /**
         * Get a foundation by id
         */
        Object.defineProperty(this, "foundation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getFoundation))
        });
        /**
         * Get list of foundations folders or folder by id
         */
        Object.defineProperty(this, "getFolder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getFolder))
        });
        /**
         * Get list of providers for a foundation
         */
        Object.defineProperty(this, "listProviders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(providers))
        });
        /**
         * Create a foundation
         */
        Object.defineProperty(this, "createFoundation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createFoundation))
        });
        /**
         * Create a foundation folder
         */
        Object.defineProperty(this, "createFolder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createFolder))
        });
        /**
         * Get a list of dns zones
         */
        Object.defineProperty(this, "listDnsZones", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listDnsZone))
        });
        /**
         * Create a dns zone
         */
        Object.defineProperty(this, "createDnsZone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createDnsZone))
        });
        /**
         * Get a list of cidrs
         */
        Object.defineProperty(this, "listCidrs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listCidr))
        });
        /**
         * Create a cidr
         */
        Object.defineProperty(this, "createCidr", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createCidr))
        });
        /**
         * Get a list of certificates
         */
        Object.defineProperty(this, "listCertificates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listCertificates))
        });
        /**
         * Get a certificate by id
         */
        Object.defineProperty(this, "getCertificate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getCertificate))
        });
        /**
         * Create a certificate
         */
        Object.defineProperty(this, "createCertificate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createCertificate))
        });
        /**
         * Create a project
         */
        Object.defineProperty(this, "createProject", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createProject))
        });
        /**
         * Get a project by id
         */
        Object.defineProperty(this, "getProjectById", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getProject))
        });
        /**
         * Get a list of dns records
         */
        Object.defineProperty(this, "listDnsRecords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listDnsRecord))
        });
        /**
         * Create a dns record
         */
        Object.defineProperty(this, "createDnsRecord", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createDnsRecord))
        });
        /**
         * Get a list of networks
         */
        Object.defineProperty(this, "listNetworks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listNetwork))
        });
        /**
         * Create a network
         */
        Object.defineProperty(this, "createNetwork", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createNetwork))
        });
        /**
         * Get a list of subnets
         */
        Object.defineProperty(this, "listSubnets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listSubnet))
        });
        /**
         * Create a subnet
         */
        Object.defineProperty(this, "createSubnet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(createSubnet))
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, cntDictionary, error.headers);
    }
}
export const cloudPlatformClient = new CloudPlatformClient();
//# sourceMappingURL=cloud-platform.js.map