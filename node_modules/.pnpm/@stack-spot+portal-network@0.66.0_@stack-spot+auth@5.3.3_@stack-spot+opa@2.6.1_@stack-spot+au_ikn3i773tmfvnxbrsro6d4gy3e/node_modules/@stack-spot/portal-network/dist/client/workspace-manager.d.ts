import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { FixedFullInputContextResponse, FixedPaginatedActivityResponse, FixedPluginForAppCreationV2Response, FixedWorkflowForCreationResponse } from './types.js';
declare class WorkspaceManagerClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Gets all stacks in a workspace
     */
    stacksInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
    }, import("../api/workspaceManager.js").WorkspaceStackResponse[]>;
    /**
     * Add a stack in a workspace
     */
    addStackToWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        addStackInWorkspaceRequest: import("../api/workspaceManager.js").AddStackInWorkspaceRequest;
    }, never>;
    /**
     * Removes a stack from a workspace
     */
    removeStackFromWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        stackVersionId: string;
    }, never>;
    /**
     * Deletes a workspace
     */
    deleteWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
    }, never>;
    /**
     * Gets inputs from a plugin in a workspace stack
     */
    pluginInputsInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackVersionId: string;
        pluginVersionId: string;
        envName?: string | undefined;
    }, FixedFullInputContextResponse>;
    /**
     * Gets workflow in a workspace stack
     */
    workflowDataWithInputsInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackVersionId: string;
        workflowVersionId: string;
    }, FixedWorkflowForCreationResponse>;
    /**
     * Gets workflow inputs in an account stack
     */
    workflowInputsInAccount: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        workflowVersionId: string;
        envName?: string | undefined;
    }, FixedFullInputContextResponse>;
    /**
     * Gets inputs from a plugin in account context
     */
    pluginInputsAccount: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        pluginVersionId: string;
        envName?: string | undefined;
    }, FixedFullInputContextResponse>;
    /**
    * Update context inputs from an action in workspace
    */
    updateInputContextPluginWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        stackVersionId: string;
        pluginVersionId: string;
        body: import("../api/workspaceManager.js").UpsertPluginInputContextRequest[];
    }, never>;
    /**
     * Update context inputs from an action in account
     */
    updateInputContextPluginAccount: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        pluginVersionId: string;
        body: import("../api/workspaceManager.js").UpsertPluginInputContextRequest[];
    }, never>;
    /**
     * Gets links in a shared infra for a given env
     */
    sharedInfraLinks: import("../network/types.js").QueryObject<{
        workspaceId: string;
        sharedInfraId: string;
        envName: string;
    }, import("../api/workspaceManager.js").LinksConsolidateResponse[]>;
    /**
     * Gets links in an application for a given env
     */
    applicationLinks: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
        envName: string;
    }, import("../api/workspaceManager.js").LinksConsolidateResponse[]>;
    /**
     * Gets applied plugins in shared infra
     */
    appliedPluginsSharedInfra: import("../network/types.js").QueryObject<{
        workspaceId: string;
        sharedInfraId: string;
        envName: string;
        pluginType?: string | undefined;
        containsLinks?: boolean | undefined;
    }, import("../api/workspaceManager.js").SharedInfraAppliedPluginsV2Response>;
    /**
     * Gets applied plugins in application
     */
    appliedPluginsApplication: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
        envName: string;
        pluginType?: string | undefined;
        containsLinks?: boolean | undefined;
    }, import("../api/workspaceManager.js").ApplicationAppliedPluginsV2Response>;
    /**
     * Gets plugin inputs and connection interface from a plugin in a stack version in workspace
     */
    pluginInputsWithConnectionInterfaces: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackVersionId: string;
        pluginVersionId: string;
    }, FixedPluginForAppCreationV2Response>;
    /**
     * Gets workflows from a given stack and workflow type
     */
    workflowsByStackIdAndWorkflowType: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackId: string;
        workflowType: string;
    }, import("../api/workspaceManager.js").WorkflowCompleteResponse>;
    /**
     * Creates an infra using workflow
     */
    createInfraUsingWorkflow: import("../network/types.js").MutationObject<{
        workspaceId: string;
        workflowVersionId: string;
        contentWorkflowSaveRequest: import("../api/workspaceManager.js").ContentWorkflowSaveRequest;
    }, import("../api/workspaceManager.js").ContentWorkflowSaveResponse>;
    /**
     * Creates an application using workflow
     */
    createAppUsingWorkflow: import("../network/types.js").MutationObject<{
        workspaceId: string;
        workflowVersionId: string;
        contentWorkflowSaveRequest: import("../api/workspaceManager.js").ContentWorkflowSaveRequest;
    }, import("../api/workspaceManager.js").ContentWorkflowSaveResponse>;
    /**
    * Gets inputs from an action in a workspace
    */
    actionInputsInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackVersionId: string;
        actionsVersionId: string;
        envName?: string | undefined;
    }, FixedFullInputContextResponse>;
    /**
     * Gets inputs from an action in account context
     */
    actionInputsAccount: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        actionsVersionId: string;
        envName?: string | undefined;
    }, FixedFullInputContextResponse>;
    /**
     * Update context inputs from an action in workspace
     */
    updateInputContextActionWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        stackVersionId: string;
        actionVersionId: string;
        body: import("../api/workspaceManager.js").UpsertActionInputContextRequest[];
    }, never>;
    /**
     * Update context inputs from an action in account
     */
    updateInputContextActionAccount: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        actionVersionId: string;
        body: import("../api/workspaceManager.js").UpsertActionInputContextRequest[];
    }, never>;
    /**
     * Gets details of an application in an environment
     */
    applicationDetails: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
        envName: string;
    }, import("../api/workspaceManager.js").ApplicationResponse>;
    /**
     * Deletes an application
     */
    deleteApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
    }, import("../api/workspaceManager.js").ManagerRunResponse[]>;
    /**
     * Gets details of a shared infra in an environment
     */
    sharedInfraDetails: import("../network/types.js").QueryObject<{
        workspaceId: string;
        sharedInfraId: string;
        envName: string;
    }, import("../api/workspaceManager.js").SharedInfraResponse>;
    /**
     * Deletes an infra
     */
    deleteInfra: import("../network/types.js").MutationObject<{
        workspaceId: string;
        sharedInfraId: string;
    }, never>;
    /**
     * Gets activities of a shared infra
     */
    activitiesSharedInfra: import("../network/types.js").InfiniteQueryObject<{
        workspaceId: string;
        sharedInfraId: string;
        envName: string;
        $type?: "DEPLOY" | "DESTROY" | "ROLLBACK" | "CREATE" | "ACTION" | "CUSTOMER_WORKFLOW" | undefined;
        page: number;
        size: number;
    }, FixedPaginatedActivityResponse, "items">;
    /**
     * Gets activities of an application
     */
    activitiesApplication: import("../network/types.js").InfiniteQueryObject<{
        workspaceId: string;
        applicationId: string;
        envName: string;
        $type?: "DEPLOY" | "DESTROY" | "ROLLBACK" | "CREATE" | "ACTION" | "CUSTOMER_WORKFLOW" | undefined;
        page: number;
        size: number;
    }, FixedPaginatedActivityResponse, "items">;
    /**
     * Updates Stacks To Latest Version By Workspace
     */
    updateStacksToLatestVersionByWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        addStackInWorkspaceRequest: import("../api/workspaceManager.js").AddStackInWorkspaceRequest;
    }, never>;
    /**
     * Get all workspaces with pagination
     */
    workspacesWithPagination: import("../network/types.js").QueryObject<{
        name?: string | undefined;
        aclOnly?: boolean | undefined;
        accountId?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "NAME" | "DESCRIPTION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
        tabFilter?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE" | undefined;
    }, import("../api/workspaceManager.js").WorkspacePageResponse>;
    /**
     * Get all applications by workspace with pagination
     */
    applicationsByWorkspaceWithPagination: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackVersionId?: string | undefined;
        stackId?: string | undefined;
        name?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "STACK" | "NAME" | "CREATED_AT" | "STACK_VERSION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
    }, import("../api/workspaceManager.js").ApplicationPageResponse>;
    /**
     * Get all shared infra by workspace with pagination
     */
    sharedInfraByWorkspaceWithPagination: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackId?: string | undefined;
        stackVersionId?: string | undefined;
        name?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "STACK" | "NAME" | "CREATED_AT" | "STACK_VERSION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
    }, import("../api/workspaceManager.js").SharedInfraPageResponse>;
    /**
     * Get all stacks used to create application in a workspace
     */
    filterStacksFromApplicationInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
    }, import("../api/workspaceManager.js").StackFilterResponse>;
    /**
     * Get all stacks used to create infra in a workspace.
     */
    filterStacksFromInfraInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
    }, import("../api/workspaceManager.js").StackFilterResponse>;
    /**
     * Get all workspaces associated with an account.
     */
    getAccountWorkspaces: import("../network/types.js").QueryObject<{
        name?: string | undefined;
        aclOnly?: boolean | undefined;
        accountId?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "NAME" | "DESCRIPTION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
        tabFilter?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE" | undefined;
    }, import("../api/workspaceManager.js").WorkspacePageResponse>;
    /**
     * Get all applications associated with an account.
     */
    getAccountApplications: import("../network/types.js").QueryObject<{
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "STACK" | "NAME" | "CREATED_AT" | "STACK_VERSION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
        tab?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE" | undefined;
        name?: string | undefined;
        stackVersionId?: string | undefined;
        stackId?: string | undefined;
    }, import("../api/workspaceManager.js").AccountApplicationPageResponse>;
    /**
     * Get all shared infrastructures associated with an account.
     */
    getAccountSharedInfra: import("../network/types.js").QueryObject<{
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "STACK" | "NAME" | "CREATED_AT" | "STACK_VERSION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
        name?: string | undefined;
        tab?: "FAVORITES" | "MY_RESOURCE" | "ALL_RESOURCE" | undefined;
        stackVersionId?: string | undefined;
        stackId?: string | undefined;
    }, import("../api/workspaceManager.js").AccountSharedInfraPageResponse>;
    /** * Gets filters for applications associated with an account. */
    getAccountApplicationsFilters: import("../network/types.js").QueryObject<void, import("../api/workspaceManager.js").StackFilterResponse>;
    /** * Gets filters for shared infrastructures associated with an account. */
    getAccountSharedInfraFilters: import("../network/types.js").QueryObject<void, import("../api/workspaceManager.js").StackFilterResponse>;
}
export declare const workspaceManagerClient: WorkspaceManagerClient;
export {};
//# sourceMappingURL=workspace-manager.d.ts.map