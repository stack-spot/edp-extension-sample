import { conversationHistoryV1ConversationsConversationIdGet, defaults, deleteConversationV1ConversationsConversationIdDelete, downloadConversationV1ConversationsConversationIdDownloadGet, findKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdGet, formatFetchStepV1QuickCommandsSlugStepsStepSlugFetchFormatPost, formatResultV1QuickCommandsSlugResultFormatPost, getQuickCommandV1QuickCommandsSlugGet, listAiStacksV1AiStacksGet, listAllV1QuickCommandsAllGet, listAssociationV1WorkspaceWorkspaceIdGet, listConversationsV1ConversationsGet, listKnowledgeSourcesV1KnowledgeSourcesGet, postEventV1EventsPost, quickActionsV1QuickActionsPost, quickCommandsRunV2V2QuickCommandsSlugStepsStepSlugRunPost, updateTitleV1ConversationsConversationIdPatch, } from '../api/ai.js';
import apis from '../apis.json';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { removeAuthorizationParam } from '../utils/remove-authorization-param.js';
import { StreamedJson } from '../utils/StreamedJson.js';
class AIClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.ai.url, defaults);
        Object.defineProperty(this, "runQuickAction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(quickActionsV1QuickActionsPost))
        });
        Object.defineProperty(this, "aiStacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listAiStacksV1AiStacksGet))
        });
        Object.defineProperty(this, "workspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listAssociationV1WorkspaceWorkspaceIdGet))
        });
        Object.defineProperty(this, "quickCommands", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listAllV1QuickCommandsAllGet))
        });
        Object.defineProperty(this, "quickCommand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(getQuickCommandV1QuickCommandsSlugGet))
        });
        Object.defineProperty(this, "knowledgeSources", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(listKnowledgeSourcesV1KnowledgeSourcesGet))
        });
        Object.defineProperty(this, "knowledgeSourceDocument", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(findKnowledgeObjectByCustomIdV1KnowledgeSourcesSlugObjectsCustomIdGet))
        });
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(removeAuthorizationParam(listConversationsV1ConversationsGet))
        });
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(removeAuthorizationParam(conversationHistoryV1ConversationsConversationIdGet))
        });
        Object.defineProperty(this, "deleteChat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(deleteConversationV1ConversationsConversationIdDelete))
        });
        Object.defineProperty(this, "downloadChat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(downloadConversationV1ConversationsConversationIdDownloadGet))
        });
        Object.defineProperty(this, "renameChat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(updateTitleV1ConversationsConversationIdPatch))
        });
        Object.defineProperty(this, "createEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(postEventV1EventsPost))
        });
        Object.defineProperty(this, "fetchStepOfQuickCommand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(formatFetchStepV1QuickCommandsSlugStepsStepSlugFetchFormatPost))
        });
        Object.defineProperty(this, "llmStepOfQuickCommand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(quickCommandsRunV2V2QuickCommandsSlugStepsStepSlugRunPost))
        });
        Object.defineProperty(this, "formatResultOfQuickCommand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeAuthorizationParam(formatResultV1QuickCommandsSlugResultFormatPost))
        });
    }
    buildStackSpotError(error) {
        return new StackspotAPIError({
            status: error.status,
            headers: error.headers,
            stack: error.stack,
            message: error.data?.detail?.map(d => d.msg)?.join('\n'),
        });
    }
    sendChatMessage(request, minChangeIntervalMS) {
        const abortController = new AbortController();
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'text/event-stream',
        };
        const events = this.stream(this.resolveURL('v3/chat'), { method: 'post', body: JSON.stringify(request), headers, signal: abortController.signal });
        return new StreamedJson(events, abortController, minChangeIntervalMS);
    }
}
export const aiClient = new AIClient();
//# sourceMappingURL=ai.js.map