import { HttpError } from '@oazapfts/runtime';
import { Pageable } from '../api/content.js';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { OperationObject } from '../network/types.js';
declare class ContentClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Gets links in a stack
     */
    linksInStack: import("../network/types.js").QueryObject<{
        stackVersionId: string;
    }, import("../api/content.js").GetLinkResponse[]>;
    /**
     * Adds a link in a stack
     */
    addLinkInStack: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        addLinkRequest: import("../api/content.js").AddLinkRequest;
    }, import("../api/content.js").LinkResponse>;
    /**
     * Adds a link in a stack
     */
    deleteLinkFromStack: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        linkId: string;
    }, unknown>;
    /**
     * Gets all stack version by a list of ids
     */
    allStackVersionByIds: import("../network/types.js").QueryObject<{
        xWorkspaceId?: string | undefined;
        filterStackVersionRequest: import("../api/content.js").FilterStackVersionRequest;
    }, import("../api/content.js").GetStackVersionResponse[]>;
    /**
     * Gets all studios
     */
    studios: import("../network/types.js").QueryObject<Omit<{
        xWorkspaceId?: string | undefined;
        aclOnly?: boolean | undefined;
        filter?: string | undefined;
        isAccountHolder?: boolean | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/content.js").StudioResponse[]>;
    /**
     * Gets all studios
     */
    studiosWithPagination: import("../network/types.js").QueryObject<Omit<{
        xWorkspaceId?: string | undefined;
        authorization: string;
        aclOnly?: boolean | undefined;
        filter?: string | undefined;
        view?: "FAVORITES" | "ALL" | undefined;
        isAccountHolder?: boolean | undefined;
        startersOnly?: boolean | undefined;
        infraOnly?: boolean | undefined;
        workspaceId?: string | undefined;
        pageable: Pageable;
    }, "authorization" | "jwtToken"> & {}, import("../api/content.js").PageStudioResponse>;
    /**
     * Gets all studios
     */
    studiosUserHasCreatePermission: import("../network/types.js").QueryObject<Omit<import("@oazapfts/runtime").RequestOpts | undefined, "authorization" | "jwtToken"> & {}, import("../api/content.js").StudioSummaryResponse[]>;
    /**
     * Gets a studio
     */
    studio: import("../network/types.js").QueryObject<{
        studioIdOrSlug: string;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").StudioResponse>;
    /**
     * Creates a studio
     */
    createStudio: import("../network/types.js").MutationObject<Omit<{
        createStudioRequest: import("../api/content.js").CreateStudioRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/content.js").CreateStudioResponse>;
    /**
     * Updates a studio
     */
    updateStudio: import("../network/types.js").MutationObject<{
        studioId: string;
        updateStudioRequest: import("../api/content.js").UpdateStudioRequest;
    }, import("../api/content.js").StudioResponse>;
    /**
     * Deletes a studio
     */
    deleteStudio: import("../network/types.js").MutationObject<{
        studioId: string;
    }, unknown>;
    /**
     * Changes studio visibility
     */
    changeStudioVisibility: import("../network/types.js").MutationObject<{
        studioSlug: string;
        changeVisibilityRequest: import("../api/content.js").ChangeVisibilityRequest;
    }, import("../api/content.js").StudioResponse>;
    /**
     * Adds a workspace to a studio
     */
    addWorkspaceToStudio: import("../network/types.js").MutationObject<{
        studioSlug: string;
        studioWorkspaceRequest: import("../api/content.js").StudioWorkspaceRequest;
    }, unknown>;
    /**
     * Removes a given workspace from a studio
     */
    removeWorkspaceFromStudio: import("../network/types.js").MutationObject<{
        studioSlug: string;
        workspaceId: string;
    }, unknown>;
    /**
     * Gets all workspaces associated with a given studio
     */
    workspacesAssociatedToStudio: import("../network/types.js").QueryObject<{
        studioSlug: string;
    }, import("../api/content.js").StudioWorkspaceResponse[]>;
    /**
     * Gets studio tabs
     */
    studioTabs: import("../network/types.js").QueryObject<{
        studioSlug: string;
    }, string[]>;
    /**
     * Updates studio tabs
     */
    updateStudioTabs: import("../network/types.js").MutationObject<{
        studioSlug: string;
        body: string[];
    }, unknown>;
    /**
     * Gets content deprecation reasons
     */
    deprecationReasons: import("../network/types.js").QueryObject<void, string[]>;
    /**
     * Gets stacks from a given studio
     */
    stacksFromStudios: import("../network/types.js").QueryObject<{
        xWorkspaceId?: string | undefined;
        studioSlug: string;
        pageable: Pageable;
        filterStackRequest: import("../api/content.js").FilterStackRequest;
    }, import("../api/content.js").PageGetStackStudioResponse>;
    /**
     * Gets workflows from a given studio
     */
    workflowsFromStudio: import("../network/types.js").InfiniteQueryObject<{
        studioSlug: string;
        xWorkspaceId?: string | undefined;
        displayName?: string | undefined;
        $type?: "create" | "deploy" | "destroy" | "reusable" | "rollback" | "starter" | undefined;
        slug?: string | undefined;
        description?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageGetWorkflowsByStudioResponse, "content">;
    /**
     * Gets all account workflows
     */
    accountWorkflows: import("../network/types.js").InfiniteQueryObject<{
        filter?: string | undefined;
        accountOnly?: boolean | undefined;
        page?: number | undefined;
        size?: number | undefined;
    }, import("../api/content.js").PageAccountWorkflowResponse, "content">;
    /**
     * Gets workflow doc
     */
    workflowDoc: import("../network/types.js").QueryObject<{
        studioSlug: string;
        documentationId: string;
        language: string;
        status?: string | undefined;
    }, import("../api/content.js").DocumentationResponse>;
    /**
     * Gets a workflow by slug
     */
    workflow: import("../network/types.js").QueryObject<{
        studioSlug: string;
        workflowSlug: string;
        version?: string | undefined;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").GetWorkflowResponse>;
    /**
     * Gets all the versions of a workflow
     */
    workflowVersions: import("../network/types.js").QueryObject<{
        studioSlug: string;
        workflowSlug: string;
        status?: "PUBLISHED" | "DEPRECATED" | undefined;
        xWorkspaceId?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageListWorkflowVersionsResponse>;
    /**
     * Gets workflows of a stack version
     */
    workflowsFromStackVersion: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        xWorkspaceId?: string | undefined;
        displayName?: string | undefined;
        $type?: string | undefined;
        target?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageListStackWorkflowResponse>;
    /**
     * Removes a workflow from a stack version
     */
    removeWorkflowsFromStack: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        workflowId: string;
    }, unknown>;
    /**
     * Adds a workflow from a stack version
     */
    addWorkflowToStack: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        body: import("../api/content.js").AddWorkflowRequest[];
    }, unknown>;
    /**
     * Gets workflow doc
     */
    availableWorkflowVersionsBySlug: import("../network/types.js").QueryObject<{
        studioSlug: string;
        workflowSlug: string;
        xWorkspaceId?: string | undefined;
        range: string;
        pageable: Pageable;
    }, import("../api/content.js").PageGetAvailableWorkflowVersionsResponse>;
    /**
     * Gets usage summary of stack
     */
    stackUsageSummary: import("../network/types.js").QueryObject<{
        studioSlug: string;
        stackSlug: string;
    }, import("../api/content.js").StackModalViewResponse>;
    /**
     * Gets list of Workspaces using the Stack
     */
    workspacesUsingStack: import("../network/types.js").QueryObject<{
        studioSlug: string;
        stackSlug: string;
        filter?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageStackWorkspaceViewResponse>;
    /**
     * Gets list StackVersions used by Workspace
     */
    stackVersionsUsedByWorkspace: import("../network/types.js").QueryObject<{
        studioSlug: string;
        stackSlug: string;
        workspaceId: string;
        pageable: Pageable;
    }, import("../api/content.js").PageStackWorkspaceDetailViewResponse>;
    /**
     * Gets list of StackVersions not used by any Content
     */
    stackVersionsNotInUse: import("../network/types.js").QueryObject<{
        studioSlug: string;
        stackSlug: string;
        pageable: Pageable;
    }, import("../api/content.js").PageGetUnusedStackVersionsResponse>;
    /**
    * Get usage summary of plugin
    */
    pluginUsageSummary: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
    }, import("../api/content.js").PluginInUseSummaryResponse>;
    /**
     * Gets list of Stacks using the plugin
     */
    stacksUsingPlugin: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        filter?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PagePluginStacksResponse>;
    /**
     * Gets list of PluginVersions used by Stack
     */
    pluginVersionsUsedByStack: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        stackId: string;
        xWorkspaceId?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageGetPluginStackUsageResponse>;
    /**
     * Gets list of Plugin that requires the plugin
     */
    pluginsRequiresPlugin: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        studio?: string | undefined;
        filter?: string | undefined;
        $type?: "INFRA" | "APP" | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PagePluginViewUsageMonitorResponse>;
    /**
     * Gets list of PluginVersions used by Plugin
     */
    pluginVersionsUsedByPlugin: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        pluginId: string;
        pageable: Pageable;
    }, import("../api/content.js").PageGetDependentPluginsVersionsResponse>;
    /**
     * Gets list of Starter using the plugin
     */
    starterUsingPlugin: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        filter?: string | undefined;
        $type?: "INFRA" | "APP" | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PagePluginStarterResponse>;
    /**
     * Gets list of PluginVersions used by Starter
     */
    pluginVersionsUsedByStarter: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        starterSlug: string;
        pageable: Pageable;
    }, import("../api/content.js").PageGetPluginStackStarterUsageResponse>;
    /**
     * Gets list of Infrastructure using the plugin
     */
    infrastructureUsingPlugin: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        filter?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PagePluginInfrastructureViewResponse>;
    /**
     * Gets list of PluginVersions used by Infrastructure
     */
    pluginVersionsUsedByInfrastructure: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        infraId: string;
        pageable: Pageable;
    }, import("../api/content.js").PageInfrastructureEnvironmentsUsesPluginResponse>;
    /**
     * Gets list of Application using the plugin
     */
    applicationUsingPlugin: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        filter?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PagePluginApplicationsResponse>;
    /**
     * Gets list of PluginVersions used by Applications
     */
    pluginVersionsUsedByApplication: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        applicationId: string;
        pageable: Pageable;
    }, import("../api/content.js").PagePluginUsageMonitorApplicationViewResponse>;
    /**
     * Gets list of PluginVersions not used by any Content
     */
    pluginVersionsNotInUse: import("../network/types.js").QueryObject<{
        studioSlug: string;
        pluginSlug: string;
        pageable: Pageable;
    }, import("../api/content.js").PageGetPluginVersionsNotInUseResponse>;
    /**
     * Get Stack Version Usage Summary
     */
    stackVersionsUsageSummary: import("../network/types.js").QueryObject<{
        stackVersionId: string;
    }, import("../api/content.js").StackVersionUsageSummaryResponse>;
    /**
     * Get Plugin Version Usage Summary
     */
    pluginVersionUsageSummary: import("../network/types.js").QueryObject<{
        pluginVersionId: string;
    }, import("../api/content.js").PluginVersionUsageSummaryResponse>;
    /**
     * Deprecate a stack version
     */
    deprecateStackVersion: import("../network/types.js").MutationObject<Omit<{
        stackVersionId: string;
        deprecateContentRequest: import("../api/content.js").DeprecateContentRequest;
    }, "authorization" | "jwtToken"> & {}, unknown>;
    /**
     * Delete a stack version of type draft or unpublish
     */
    deleteStackVersion: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        deletionType: "DRAFT" | "UNPUBLISH";
    }, import("../api/content.js").DeleteStackVersionResponse>;
    /**
     * Deprecate a plugin version
     */
    deprecatePluginVersion: import("../network/types.js").MutationObject<Omit<{
        pluginVersionId: string;
        deprecateContentRequest: import("../api/content.js").DeprecateContentRequest;
    }, "authorization" | "jwtToken"> & {}, unknown>;
    /**
     * Delete a Plugin version of type draft or unpublish
     */
    deletePluginVersion: import("../network/types.js").MutationObject<{
        pluginVersionId: string;
        $override?: boolean | undefined;
    }, unknown>;
    /**
     * Gets Action by Slug and Studio
     */
    action: import("../network/types.js").QueryObject<{
        studioSlug: string;
        actionSlug: string;
        version?: string | undefined;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").GetActionResponse>;
    /**
     * Gets all Versions of Action
     */
    actionVersions: import("../network/types.js").QueryObject<{
        studioSlug: string;
        actionSlug: string;
        status?: ("DRAFT" | "PUBLISHED" | "DEPRECATED" | "REPROVED")[] | undefined;
        xWorkspaceId?: string | undefined;
        requiresConnection?: boolean | undefined;
    }, import("../api/content.js").ListActionVersionResponse>;
    /**
     * Gets Action by Action Version Id
     */
    actionByActionVersionId: import("../network/types.js").QueryObject<{
        actionVersionId: string;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").GetActionResponse>;
    /**
     * Gets list of Actions V2
     */
    actionsV2: import("../network/types.js").QueryObject<{
        studioSlug?: string | undefined;
        actionSlug?: string | undefined;
        requiresConnection?: boolean | undefined;
        filter?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageListActionV2Response>;
    /**
     * Gets list of Actions V1
     */
    actions: import("../network/types.js").QueryObject<{
        studioSlug?: string | undefined;
        name?: string | undefined;
        $type?: string | undefined;
        technologies?: string[] | undefined;
        status?: ("PENDING_APPROVAL" | "PENDING_CREATOR_UPDATE" | "PUBLICATION_APPROVED" | "PUBLICATION_DECLINED")[] | undefined;
        filter?: string | undefined;
        accountOnly?: boolean | undefined;
        xWorkspaceId?: string | undefined;
        requiresConnection?: boolean | undefined;
    }, import("../api/content.js").ActionResponse[]>;
    /**
     * Get list of Actions in Stack
     */
    actionsInStack: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        forPluginVersionId?: string | undefined;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").GetStackActionResponse[]>;
    /**
     * Add Action to Stack Version
     */
    addActionsToStackVersion: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        body: import("../api/content.js").AddActionRequest[];
    }, unknown>;
    /**
     * Add Action to Plugin Version
     */
    addActionsToPluginVersion: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        pluginVersionId: string;
        body: import("../api/content.js").AddActionRequest[];
    }, unknown>;
    /**
     * Remove Action Version from Stack
     */
    removeActionVersionFromStack: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        actionVersionId: string;
    }, unknown>;
    /**
     * Remove Action Version from Plugin
     */
    removeActionVersionFromPlugin: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        pluginVersionId: string;
        actionVersionId: string;
    }, unknown>;
    /**
     * Delete Action Version
     */
    deleteActionVersion: import("../network/types.js").MutationObject<{
        actionVersionId: string;
    }, unknown>;
    /**
     * Deprecate Action Version
     */
    deprecateActionVersion: import("../network/types.js").MutationObject<{
        actionVersionId: string;
        deprecateContentRequest: import("../api/content.js").DeprecateContentRequest;
    }, unknown>;
    /**
     * Download Action Version
     */
    downloadActionVersion: import("../network/types.js").QueryObject<{
        studioSlug: string;
        actionSlug: string;
        version: string;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").DownloadBase64Response>;
    /**
     * Get Action Version range by Action Slug
     */
    actionVersionRange: import("../network/types.js").QueryObject<{
        studioSlug: string;
        actionSlug: string;
        xWorkspaceId?: string | undefined;
        range: string;
        requiresConnection?: boolean | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageActionVersionDto>;
    /**
     * Get Actions from Stack
     */
    actionsFromStack: import("../network/types.js").QueryObject<{
        xWorkspaceId?: string | undefined;
        stackVersionId: string;
        pageable: Pageable;
        filterStackActionRequest: import("../api/content.js").FilterStackActionRequest;
    }, import("../api/content.js").PageGetStackActionResponse>;
    updateStarter: import("../network/types.js").MutationObject<{
        stackVersionId: string;
        starterId: string;
        patchStarterV2Request: import("../api/content.js").PatchStarterV2Request;
    }, import("../api/content.js").StarterResponseWithRange>;
    /**
     * Gets connection interface types
     */
    connectionInterfaceTypes: import("../network/types.js").QueryObject<void, import("../api/content.js").ConnectionInterfaceResponseV2[]>;
    /**
     * Gets a list of plugin versions from list of ids.
     */
    pluginVersionsByIds: import("../network/types.js").QueryObject<{
        xWorkspaceId?: string | undefined;
        filterPluginVersionByIdsRequest: import("../api/content.js").FilterPluginVersionByIdsRequest;
    }, import("../api/content.js").PluginVersionResponse[]>;
    /**
     * Gets plugins from a stack version
     */
    listPluginsFromStack: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        starterType?: "INFRA" | "APP" | undefined;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").GetStackPluginsResponse>;
    /**
     * Gets the inputs of a specific Action. This fn is only used for permission purposes.
     */
    actionInputs: OperationObject<{
        actionVersionId: string;
        xWorkspaceId?: string | undefined;
        accountId?: string | undefined;
    }>;
    /**
     * Gets action versions by ids
     */
    actionsVersions: import("../network/types.js").QueryObject<{
        body: import("../api/content.js").ActionIdAndVersionReferenceRequest[];
    }, import("../api/content.js").ActionVersionDataWithInputsResponse[]>;
    /**
     * Gets all starters from a stack version id
     */
    startersInStackVersion: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        $type?: "INFRA" | "APP" | undefined;
        appAllowed?: boolean | undefined;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").StarterResponseWithRange[]>;
    /**
     * Gets a stack from a stack version id
     */
    getStackByVersionId: import("../network/types.js").QueryObject<{
        stackVersionId: string;
        xWorkspaceId?: string | undefined;
    }, import("../api/content.js").GetStackVersionResponse>;
    /**
     * View all stacks V3 by account
     */
    getAllStacksV3: import("../network/types.js").QueryObject<{
        isAccountHolder?: boolean | undefined;
        view?: "FAVORITES" | "ALL" | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: "NAME" | "VERSION" | "DATE" | "STUDIO_NAME" | undefined;
        direction?: "ASC" | "DESC" | undefined;
    }, import("../api/content.js").PageGetStackV3Response>;
    /**
     * View all stacks by account
     */
    getAllStacks: import("../network/types.js").QueryObject<{
        xWorkspaceId?: string | undefined;
        isAccountHolder?: boolean | undefined;
    }, import("../api/content.js").GetStackV2Response[]>;
    /**
     * List most used stack versions
     */
    listMostUsedStackVersions: import("../network/types.js").QueryObject<{
        filter?: string | undefined;
        pageable: Pageable;
    }, import("../api/content.js").PageStackVersionMostUsedListResponse>;
}
export declare const contentClient: ContentClient;
export {};
//# sourceMappingURL=content.d.ts.map