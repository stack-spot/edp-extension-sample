import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
declare class WorkflowClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Runs an action
     */
    runAction: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        stackspotCustomerIp?: string | undefined;
        xExecutionId?: string | null | undefined;
        runActionRequest: import("../api/workflows.js").RunActionRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").WorkflowResponse>;
    /**
     * Creates an api
     */
    createApi: import("../network/types.js").MutationObject<{
        authorization: string;
        stackspotCustomerIp?: string | undefined;
        xExecutionId?: string | null | undefined;
        createApiRequest: import("../api/workflows.js").CreateApiRequest;
    }, import("../api/workflows.js").WorkflowResponse>;
    /**
     * Gets the execution status of a workflow by id
     */
    executionStatus: import("../network/types.js").QueryObject<Omit<{
        executionId: string;
        authorization: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").ExecutionResponse>;
    /**
     * Gets the execution dispatch service
     */
    executionDispatchInfo: import("../network/types.js").QueryObject<Omit<{
        executionId: string;
        authorization: string;
    }, "authorization" | "jwtToken"> & {}, any>;
    /**
     * Gets the health check of an execution id
     */
    executionHealthCheck: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        stackspotCustomerIp?: string | undefined;
        xExecutionId?: string | null | undefined;
        body?: import("../api/workflows.js").HealthCheckRequest | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").WorkflowResponse>;
    /**
     * Get data about the workflow plus a graph representation of its jobs.
     */
    graph: import("../network/types.js").QueryObject<Omit<{
        executionId: string;
        authorization: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").GetWorkflowExecutionJobGraphResponse>;
    /**
     * Gets the steps of a workflow job.
     */
    jobSteps: import("../network/types.js").QueryObject<Omit<{
        executionId: string;
        jobId: string;
        authorization: string;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").WorkflowJobDetailResponse>;
    /**
     * Approves a workflow step that is suspended so the execution can continue.
     */
    acceptWorkflowStep: import("../network/types.js").MutationObject<Omit<{
        executionId: string;
        jobId: string;
        authorization: string;
        stackspotCustomerIp?: string | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").GetWorkflowExecutionJobGraphResponse>;
    /**
     * Refuses a workflow step that is suspended so the execution can be canceled.
     */
    refuseWorkflowStep: import("../network/types.js").MutationObject<Omit<{
        executionId: string;
        jobId: string;
        authorization: string;
        stackspotCustomerIp?: string | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/workflows.js").GetWorkflowExecutionJobGraphResponse>;
}
export declare const workflowClient: WorkflowClient;
export {};
//# sourceMappingURL=workflow.d.ts.map