import { HttpError } from '@oazapfts/runtime';
import { ChatResponse3 } from '../api/ai.js';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { StreamedJson } from '../utils/StreamedJson.js';
import { FixedChatRequest, FixedConversationResponse } from './types.js';
declare class AIClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    runQuickAction: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        xAccountId?: string | null | undefined;
        quickActionsRequest: import("../api/ai.js").QuickActionsRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").SimpleResponse>;
    aiStacks: import("../network/types.js").QueryObject<Omit<{
        visibility?: import("../api/ai.js").VisibilityLevelEnum | undefined;
        order?: import("../api/ai.js").OrderEnum | undefined;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").GetAiStackResponse[]>;
    workspace: import("../network/types.js").QueryObject<Omit<{
        workspaceId: string;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").KnowledgeSourceResponse[]>;
    quickCommands: import("../network/types.js").QueryObject<Omit<{
        visibility?: import("../api/ai.js").VisibilityLevelEnum | null | undefined;
        order?: import("../api/ai.js").OrderEnum | undefined;
        types?: import("../api/ai.js").QuickCommandTypeRequest[] | null | undefined;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").QuickCommandListResponse[]>;
    quickCommand: import("../network/types.js").QueryObject<Omit<{
        slug: string;
        findAgents?: boolean | undefined;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").QuickCommandResponse>;
    knowledgeSources: import("../network/types.js").QueryObject<Omit<{
        visibility?: import("../api/ai.js").VisibilityLevelEnum | undefined;
        order?: import("../api/ai.js").OrderEnum | undefined;
        $default?: boolean | null | undefined;
        types?: import("../api/ai.js").KnowledgeSourceTypeEnum[] | null | undefined;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").KnowledgeSourceItemResponse[]>;
    knowledgeSourceDocument: import("../network/types.js").QueryObject<Omit<{
        slug: string;
        customId: string;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").DocumentResponse>;
    chats: import("../network/types.js").InfiniteQueryObject<Omit<{
        size?: number | undefined;
        page?: number | undefined;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").ConversationResponse[], "">;
    chat: import("../network/types.js").QueryObject<Omit<{
        conversationId: string;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, FixedConversationResponse>;
    deleteChat: import("../network/types.js").MutationObject<Omit<{
        conversationId: string;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, unknown>;
    downloadChat: import("../network/types.js").MutationObject<Omit<{
        conversationId: string;
        authorization: string;
        xAccountId?: string | null | undefined;
    }, "authorization" | "jwtToken"> & {}, any>;
    renameChat: import("../network/types.js").MutationObject<Omit<{
        conversationId: string;
        authorization: string;
        xAccountId?: string | null | undefined;
        conversationUpdateTitleRequest: import("../api/ai.js").ConversationUpdateTitleRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").ConversationResponse>;
    createEvent: import("../network/types.js").MutationObject<Omit<{
        authorization: string;
        xAccountId?: string | null | undefined;
        body: import("../api/ai.js").GenericEventRequest[];
    }, "authorization" | "jwtToken"> & {}, unknown>;
    fetchStepOfQuickCommand: import("../network/types.js").MutationObject<Omit<{
        slug: string;
        stepSlug: string;
        authorization: string;
        xAccountId?: string | null | undefined;
        quickCommandsExecutionRequest: import("../api/ai.js").QuickCommandsExecutionRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").QuickCommandStepFetchResponse>;
    llmStepOfQuickCommand: import("../network/types.js").MutationObject<Omit<{
        slug: string;
        stepSlug: string;
        accept?: string | null | undefined;
        authorization: string;
        xAccountId?: string | null | undefined;
        quickCommandsExecutionRequest: import("../api/ai.js").QuickCommandsExecutionRequest;
    }, "authorization" | "jwtToken"> & {}, string | import("../api/ai.js").QuickCommandPromptResponse2>;
    formatResultOfQuickCommand: import("../network/types.js").MutationObject<Omit<{
        slug: string;
        authorization: string;
        xAccountId?: string | null | undefined;
        quickCommandsExecutionRequest: import("../api/ai.js").QuickCommandsExecutionRequest;
    }, "authorization" | "jwtToken"> & {}, import("../api/ai.js").QuickCommandFinalResultResponse>;
    sendChatMessage(request: FixedChatRequest, minChangeIntervalMS?: number): StreamedJson<ChatResponse3>;
}
export declare const aiClient: AIClient;
export {};
//# sourceMappingURL=ai.d.ts.map