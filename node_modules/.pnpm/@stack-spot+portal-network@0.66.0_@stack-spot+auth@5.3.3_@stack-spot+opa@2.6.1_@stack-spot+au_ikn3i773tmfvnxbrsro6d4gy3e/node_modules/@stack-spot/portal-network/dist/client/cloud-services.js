import { defaults, downloadCsvFiles, enableGuardrail, getAlerts, getAllocationCostCsv, getAllocationCostFilters, getAllTags, getCostOverview, getGuardrails, getInstanceDetails, listBillingAccounts, listInstances, listServices, processAllocationCostRequest, } from '../api/cloudServices.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
class CloudServicesClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.cloudServices.url, defaults);
        /**
         * Gets overview of costs over the current month, last month and last 3 months.
         */
        Object.defineProperty(this, "costOverview", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getCostOverview)
        });
        /**
         * Gets a CSV file with the data of `costOverview`.
         */
        Object.defineProperty(this, "downloadCostOverviewCSV", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(downloadCsvFiles)
        });
        /**
         * Gets the alerts in a workspace and environment (paginated).
         */
        Object.defineProperty(this, "alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getAlerts, {
                accumulator: 'data',
                defaultVariables: { pageSize: 40 },
                initialPageParam: 1,
                getNextPageParam: ({ lastPage }) => lastPage.nextPage,
            })
        });
        /**
         * Lists instances of a particular service resource running in a workspace.
         */
        Object.defineProperty(this, "allInstancesOfResource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listInstances)
        });
        /**
         * Lists all managed services.
         */
        Object.defineProperty(this, "allServices", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listServices)
        });
        /**
         * Gets the description of an instance.
         */
        // we need a manual query here because the backend returns application/json in error responses and application/yaml in successful
        // responses. Oazapfts will handle the request as JSON whenever at least one of the response types is JSON, which I think is wrong, but
        // it is what it is. This manual query changes the accept header to */* and the return type to string, which is the fallback when Oazapfts
        // can't parse what it expects to be a json. 
        Object.defineProperty(this, "instance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'instance',
                request: (signal, variables) => {
                    return getInstanceDetails(variables, { signal, headers: { 'accept': '*/*' } });
                },
                permission: this.createPermissionFunctionFor(getInstanceDetails),
            })
        });
        /**
         * Gets all Guard Rails.
         */
        Object.defineProperty(this, "guardRails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getGuardrails)
        });
        /**
         * Enables a Guard Rail in any level
         */
        Object.defineProperty(this, "enableGuardRail", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(enableGuardrail)
        });
        /**
         * Retrieves cost and usage metrics for the current account.
         */
        Object.defineProperty(this, "costAllocation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(processAllocationCostRequest)
        });
        /**
         * Lists the filters related to the given type.
         */
        Object.defineProperty(this, "costAllocationFilters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAllocationCostFilters)
        });
        /**
         * Gets a CSV file with the data of `costAllocation`.
         */
        Object.defineProperty(this, "downloadCostAllocationCSV", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAllocationCostCsv)
        });
        /**
         * Lists all tags.
         */
        Object.defineProperty(this, "allTags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAllTags)
        });
        /**
         * Retrieves a summary for each billing account of the account with the id passed as parameter.
         */
        Object.defineProperty(this, "billingAccounts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listBillingAccounts)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, { en: {}, pt: {} }, error.headers);
    }
}
export const cloudServicesClient = new CloudServicesClient();
//# sourceMappingURL=cloud-services.js.map