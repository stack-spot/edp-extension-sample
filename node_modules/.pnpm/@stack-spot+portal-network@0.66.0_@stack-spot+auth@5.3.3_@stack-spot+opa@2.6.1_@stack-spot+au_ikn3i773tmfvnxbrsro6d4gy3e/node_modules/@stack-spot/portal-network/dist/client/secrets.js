import { createKey, defaults, deleteKey, deleteSecretValue, editKey, encrypt, getAll1, getAvailability, updateSecretValue } from '../api/secrets.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { secretsDictionary } from '../error/dictionary/secrets.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
class SecretClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.secrets.url, defaults);
        /**
         * Create a key
         */
        Object.defineProperty(this, "createKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createKey)
        });
        /**
         * Get all keys
         */
        Object.defineProperty(this, "getAllKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAll1)
        });
        /**
         * Delete a key
         */
        Object.defineProperty(this, "deleteKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteKey)
        });
        /**
         * Update a key's description
         */
        Object.defineProperty(this, "updateKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(editKey)
        });
        /**
         * Get which secrets are defined or undefined for a user
         */
        Object.defineProperty(this, "getAvailability", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAvailability)
        });
        /**
         * Update a secret's value
         */
        Object.defineProperty(this, "updateSecretValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateSecretValue)
        });
        /**
         * Delete a secret's value
         */
        Object.defineProperty(this, "deleteSecretValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteSecretValue)
        });
        /**
       * Encrypt a value
       */
        Object.defineProperty(this, "encrypt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(encrypt)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, secretsDictionary, error.headers);
    }
}
export const secretsClient = new SecretClient();
//# sourceMappingURL=secrets.js.map