import { accountApplicationControllergetAccountApplicationPage, accountApplicationControllergetAccountApplicationsFilters, accountSharedInfraControllergetAccountSharedInfraFilters, accountSharedInfraControllergetAccountSharedInfraPage, applicationControllerV2GetApplicationActivities, applicationControllerV2GetApplicationAppliedPlugins, applicationControllergetApplicationDetails, applicationControllergetApplicationFilters, applicationControllergetApplicationLinks, applicationControllergetApplications, contentWorkflowControllercreateApplicationThroughWorkflow, contentWorkflowControllercreateSharedInfraThroughWorkflow, contextActionControllergetStackActionInputsInAccountContext, contextActionControllergetStackActionInputsInWorkspaceContext, contextControllerupsertAccountActionsInputContext, contextControllerupsertPluginAccountContext, contextControllerupsertPluginWorkspaceContext, contextControllerupsertWorkspaceActionsInputContext, contextWorkflowControllergetAccountWorkflowInputs, contextWorkflowControllergetConsolidatedWorkflowInputs, contextgetAccountPluginInputs, contextgetConsolidatedPluginInputs, contextgetConsolidatedPluginInputsWithConnectionInterfaces, defaults, managerRunControllerdeleteApplication, managerRunControllerdeleteSharedInfra, sharedInfraControllerV2GetSharedInfraActivities, sharedInfraControllerV2GetSharedInfraAppliedPlugins, sharedInfraControllergetApplicationLinks, sharedInfraControllergetSharedInfra, sharedInfraControllergetSharedInfraAppliedPlugins, sharedInfraControllergetSharedInfraFilters, workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType, workspaceControllerdelete, workspaceControllergetWorkspaces, workspaceStackControlleraddStacksInWorkspace, workspaceStackControllerdeleteStacksInWorkspace, workspaceStackControllerlistStacks, workspaceStackControllerrefreshStacksInWorkspace, } from '../api/workspaceManager.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { workspaceDictionary } from '../error/dictionary/workspace.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { contentClient } from './content.js';
import { workspaceClient } from './workspace.js';
class WorkspaceManagerClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.workspaceManager.url, defaults);
        /**
         * Gets all stacks in a workspace
         */
        Object.defineProperty(this, "stacksInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'stacksInWorkspace',
                request: async (signal, variables) => workspaceStackControllerlistStacks(variables, { signal }),
                permission: async (variables) => {
                    const contentStacksPermission = await contentClient.allStackVersionByIds.isAllowed();
                    const workspaceStacksPermission = await workspaceClient.stacks.isAllowed(variables);
                    return workspaceStacksPermission && contentStacksPermission;
                },
            })
        });
        /**
         * Add a stack in a workspace
         */
        Object.defineProperty(this, "addStackToWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'addStackToWorkspace',
                request: async (signal, variables) => workspaceStackControlleraddStacksInWorkspace(variables, { signal }),
                permission: async ({ workspaceId }) => workspaceClient.addStackInWorkspace.isAllowed({ workspaceId }),
            })
        });
        /**
         * Removes a stack from a workspace
         */
        Object.defineProperty(this, "removeStackFromWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'removeStackFromWorkspace',
                request: async (signal, variables) => workspaceStackControllerdeleteStacksInWorkspace(variables, { signal }),
                permission: async ({ workspaceId }) => workspaceClient.removeStackFromWorkspace.isAllowed({ workspaceId }),
            })
        });
        /**
         * Deletes a workspace
         */
        Object.defineProperty(this, "deleteWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'removeStackFromWorkspace',
                request: async (signal, variables) => workspaceControllerdelete(variables, { signal }),
                permission: async ({ workspaceId }) => workspaceClient.deleteWorkspace.isAllowed({ workspaceId }),
            })
        });
        /**
         * Gets inputs from a plugin in a workspace stack
         */
        Object.defineProperty(this, "pluginInputsInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'pluginInputsInWorkspace',
                request: async (signal, variables) => {
                    const data = await contextgetConsolidatedPluginInputs(variables, { signal });
                    return data;
                },
                permission: async ({ workspaceId, stackVersionId }) => {
                    const canViewContext = await workspaceClient.listConsolidatedWorkspaceContext.isAllowed({ $type: 'plugin', workspaceId, stackVersionId });
                    const canGetConnectionInterfaceTypes = await contentClient.connectionInterfaceTypes.isAllowed();
                    const canGetPluginVersions = await contentClient.pluginVersionsByIds.isAllowed({});
                    return canViewContext && canGetConnectionInterfaceTypes && canGetPluginVersions;
                },
            })
        });
        /**
         * Gets workflow in a workspace stack
         */
        Object.defineProperty(this, "workflowDataWithInputsInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextWorkflowControllergetConsolidatedWorkflowInputs)
        });
        /**
         * Gets workflow inputs in an account stack
         */
        Object.defineProperty(this, "workflowInputsInAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextWorkflowControllergetAccountWorkflowInputs)
        });
        /**
         * Gets inputs from a plugin in account context
         */
        Object.defineProperty(this, "pluginInputsAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'pluginInputsAccount',
                request: async (signal, variables) => {
                    const data = await contextgetAccountPluginInputs(variables, { signal });
                    return data;
                },
                permission: async ({ stackVersionId }) => {
                    const canViewContext = await workspaceClient.listConsolidatedContext.isAllowed({ $type: 'plugin', stackVersionId });
                    const canGetConnectionInterfaceTypes = await contentClient.connectionInterfaceTypes.isAllowed();
                    const canGetPluginVersions = await contentClient.pluginVersionsByIds.isAllowed({});
                    return canViewContext && canGetConnectionInterfaceTypes && canGetPluginVersions;
                },
            })
        });
        /**
        * Update context inputs from an action in workspace
        */
        Object.defineProperty(this, "updateInputContextPluginWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'updateInputContextPluginWorkspace',
                request: async (signal, variables) => contextControllerupsertPluginWorkspaceContext(variables, { signal }),
                permission: async ({ stackVersionId, workspaceId, pluginVersionId }) => workspaceClient.saveContextInWorkspace.isAllowed({ $type: 'plugin', workspaceId, stackVersionId, externalId: pluginVersionId }),
            })
        });
        /**
         * Update context inputs from an action in account
         */
        Object.defineProperty(this, "updateInputContextPluginAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'updateInputContextPluginAccount',
                request: async (signal, variables) => contextControllerupsertPluginAccountContext(variables, { signal }),
                permission: async ({ stackVersionId, pluginVersionId }) => workspaceClient.saveContextInAccount.isAllowed({ $type: 'plugin', stackVersionId, externalId: pluginVersionId }),
            })
        });
        /**
         * Gets links in a shared infra for a given env
         */
        Object.defineProperty(this, "sharedInfraLinks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(sharedInfraControllergetApplicationLinks)
        });
        /**
         * Gets links in an application for a given env
         */
        Object.defineProperty(this, "applicationLinks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationControllergetApplicationLinks)
        });
        /**
         * Gets applied plugins in shared infra
         */
        Object.defineProperty(this, "appliedPluginsSharedInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(sharedInfraControllerV2GetSharedInfraAppliedPlugins)
        });
        /**
         * Gets applied plugins in application
         */
        Object.defineProperty(this, "appliedPluginsApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationControllerV2GetApplicationAppliedPlugins)
        });
        /**
         * Gets plugin inputs and connection interface from a plugin in a stack version in workspace
         */
        Object.defineProperty(this, "pluginInputsWithConnectionInterfaces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextgetConsolidatedPluginInputsWithConnectionInterfaces)
        });
        /**
         * Gets workflows from a given stack and workflow type
         */
        Object.defineProperty(this, "workflowsByStackIdAndWorkflowType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType)
        });
        /**
         * Creates an infra using workflow
         */
        Object.defineProperty(this, "createInfraUsingWorkflow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(contentWorkflowControllercreateSharedInfraThroughWorkflow)
        });
        /**
         * Creates an application using workflow
         */
        Object.defineProperty(this, "createAppUsingWorkflow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(contentWorkflowControllercreateApplicationThroughWorkflow)
        });
        /**
        * Gets inputs from an action in a workspace
        */
        Object.defineProperty(this, "actionInputsInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'actionInputsInWorkspace',
                request: async (signal, variables) => {
                    const data = await contextActionControllergetStackActionInputsInWorkspaceContext(variables, { signal });
                    return data;
                },
                permission: async ({ workspaceId, stackVersionId, actionsVersionId }) => {
                    const canViewContext = await workspaceClient.listConsolidatedWorkspaceContext.isAllowed({ $type: 'action', workspaceId, stackVersionId });
                    const canGetActionInput = await contentClient.actionInputs.isAllowed({ actionVersionId: actionsVersionId });
                    return canViewContext && canGetActionInput;
                },
            })
        });
        /**
         * Gets inputs from an action in account context
         */
        Object.defineProperty(this, "actionInputsAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'actionInputsFromStack',
                request: async (signal, variables) => {
                    const data = await contextActionControllergetStackActionInputsInAccountContext(variables, { signal });
                    return data;
                },
                permission: async ({ stackVersionId, actionsVersionId }) => {
                    const canViewContext = await workspaceClient.listConsolidatedContext.isAllowed({ $type: 'action', stackVersionId });
                    const canGetActionInput = await contentClient.actionInputs.isAllowed({ actionVersionId: actionsVersionId });
                    return canViewContext && canGetActionInput;
                },
            })
        });
        /**
         * Update context inputs from an action in workspace
         */
        Object.defineProperty(this, "updateInputContextActionWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'updateInputContextActionWorkspace',
                request: async (signal, variables) => contextControllerupsertWorkspaceActionsInputContext(variables, { signal }),
                permission: async ({ stackVersionId, workspaceId, actionVersionId }) => workspaceClient.saveContextInWorkspace.isAllowed({ $type: 'action', workspaceId, stackVersionId, externalId: actionVersionId }),
            })
        });
        /**
         * Update context inputs from an action in account
         */
        Object.defineProperty(this, "updateInputContextActionAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'updateInputContextActionAccount',
                request: async (signal, variables) => contextControllerupsertAccountActionsInputContext(variables, { signal }),
                permission: async ({ stackVersionId, actionVersionId }) => workspaceClient.saveContextInAccount.isAllowed({ $type: 'action', stackVersionId, externalId: actionVersionId }),
            })
        });
        /**
         * Gets details of an application in an environment
         */
        Object.defineProperty(this, "applicationDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'applicationDetails',
                request: async (signal, variables) => applicationControllergetApplicationDetails(variables, { signal }),
                permission: async ({ applicationId, workspaceId }) => workspaceClient.applicationDetail.isAllowed({ applicationId, workspaceId }),
            })
        });
        /**
         * Deletes an application
         */
        Object.defineProperty(this, "deleteApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'deleteApplication',
                request: async (signal, variables) => managerRunControllerdeleteApplication(variables, { signal }),
                permission: async (variables) => workspaceClient.deleteApplication.isAllowed(variables),
            })
        });
        /**
         * Gets details of a shared infra in an environment
         */
        Object.defineProperty(this, "sharedInfraDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'sharedInfraDetails',
                request: async (signal, variables) => sharedInfraControllergetSharedInfraAppliedPlugins(variables, { signal }),
                permission: async ({ sharedInfraId, workspaceId }) => workspaceClient.infraDetail.isAllowed({ sharedInfraId, workspaceId }),
            })
        });
        /**
         * Deletes an infra
         */
        Object.defineProperty(this, "deleteInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation({
                name: 'deleteInfra',
                request: async (signal, variables) => managerRunControllerdeleteSharedInfra(variables, { signal }),
                permission: async (variables) => workspaceClient.deleteInfra.isAllowed(variables),
            })
        });
        /**
         * Gets activities of a shared infra
         */
        Object.defineProperty(this, "activitiesSharedInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(sharedInfraControllerV2GetSharedInfraActivities, { accumulator: 'items', initialPageParam: 0 })
        });
        /**
         * Gets activities of an application
         */
        Object.defineProperty(this, "activitiesApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(applicationControllerV2GetApplicationActivities, { accumulator: 'items', initialPageParam: 0 })
        });
        /**
         * Updates Stacks To Latest Version By Workspace
         */
        Object.defineProperty(this, "updateStacksToLatestVersionByWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceStackControllerrefreshStacksInWorkspace)
        });
        /**
         * Get all workspaces with pagination
         */
        Object.defineProperty(this, "workspacesWithPagination", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceControllergetWorkspaces)
        });
        /**
         * Get all applications by workspace with pagination
         */
        Object.defineProperty(this, "applicationsByWorkspaceWithPagination", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationControllergetApplications)
        });
        /**
         * Get all shared infra by workspace with pagination
         */
        Object.defineProperty(this, "sharedInfraByWorkspaceWithPagination", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(sharedInfraControllergetSharedInfra)
        });
        /**
         * Get all stacks used to create application in a workspace
         */
        Object.defineProperty(this, "filterStacksFromApplicationInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationControllergetApplicationFilters)
        });
        /**
         * Get all stacks used to create infra in a workspace.
         */
        Object.defineProperty(this, "filterStacksFromInfraInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(sharedInfraControllergetSharedInfraFilters)
        });
        /**
         * Get all workspaces associated with an account.
         */
        Object.defineProperty(this, "getAccountWorkspaces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceControllergetWorkspaces)
        });
        /**
         * Get all applications associated with an account.
         */
        Object.defineProperty(this, "getAccountApplications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountApplicationControllergetAccountApplicationPage)
        });
        /**
         * Get all shared infrastructures associated with an account.
         */
        Object.defineProperty(this, "getAccountSharedInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountSharedInfraControllergetAccountSharedInfraPage)
        });
        /** * Gets filters for applications associated with an account. */
        Object.defineProperty(this, "getAccountApplicationsFilters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountApplicationControllergetAccountApplicationsFilters)
        });
        /** * Gets filters for shared infrastructures associated with an account. */
        Object.defineProperty(this, "getAccountSharedInfraFilters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountSharedInfraControllergetAccountSharedInfraFilters)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, workspaceDictionary, error.headers);
    }
}
export const workspaceManagerClient = new WorkspaceManagerClient();
//# sourceMappingURL=workspace-manager.js.map