import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
declare class SecretClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Create a key
     */
    createKey: import("../network/types.js").MutationObject<{
        createKeyRequest: import("../api/secrets.js").CreateKeyRequest;
    }, unknown>;
    /**
     * Get all keys
     */
    getAllKeys: import("../network/types.js").QueryObject<void, import("../api/secrets.js").SecretKeyResponse[]>;
    /**
     * Delete a key
     */
    deleteKey: import("../network/types.js").MutationObject<{
        key: string;
    }, unknown>;
    /**
     * Update a key's description
     */
    updateKey: import("../network/types.js").MutationObject<{
        key: string;
        editKeyRequest: import("../api/secrets.js").EditKeyRequest;
    }, unknown>;
    /**
     * Get which secrets are defined or undefined for a user
     */
    getAvailability: import("../network/types.js").QueryObject<void, import("../api/secrets.js").SecretAvailabilityResponse>;
    /**
     * Update a secret's value
     */
    updateSecretValue: import("../network/types.js").MutationObject<{
        key: string;
        updateSecretValueRequest: import("../api/secrets.js").UpdateSecretValueRequest;
    }, unknown>;
    /**
     * Delete a secret's value
     */
    deleteSecretValue: import("../network/types.js").MutationObject<{
        key: string;
    }, unknown>;
    /**
   * Encrypt a value
   */
    encrypt: import("../network/types.js").MutationObject<{
        encryptRequest: import("../api/secrets.js").EncryptRequest;
    }, import("../api/secrets.js").EncryptResponse>;
}
export declare const secretsClient: SecretClient;
export {};
//# sourceMappingURL=secrets.d.ts.map