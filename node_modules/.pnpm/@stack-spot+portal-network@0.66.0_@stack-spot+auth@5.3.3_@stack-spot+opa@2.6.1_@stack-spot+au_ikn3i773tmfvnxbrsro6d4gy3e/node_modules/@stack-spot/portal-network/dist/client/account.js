import { HttpError } from '@oazapfts/runtime';
import { accountDataIsAvailable, addAccountMemberFavorite, addResourcesToGroup, addRoleToMember, associateGroupToServiceCredential, bindGroupMembers, bindRoleGroups, bindRoles, bindToGroups, bindToRoles, create, createAccountRole, createGroupMapping, createPartner, createPersonalAccessToken, createServiceCredential1, createUser, deactivateFidoCredentials, defaults, deleteAccountRole, deleteGroupMapping, deleteMember, deleteMemberFavorite, deletePartner, deleteResourceFromGroup, deleteRole, deleteSso, deleteV1GroupsByGroupId, disablePersonalAccessTokenGeneration, disassociateGroupToServiceCredential, enableFidoCredentials, getAccess, getAccountMembers1, getAccountSso, getAllAccountSso, getAllGroupMapping, getAllMemberFidoCredentials, getFeatures, getGroupById, getGroupResources, getGroups, getMemberById, getMemberGroups, getMemberPreferences, getMembers, getPartnerAccount, getPartnersSharingAllowed, getPersonalClientCredentials, getResources, getResources1, getResourcesAndActionsWithStatus, getResourceTypes, getRoleGroups, getRoleMembers, getRoles, getRoles1, getRoles2, getScmProvider, getServiceCredential, getServiceCredentialGroups, getServiceCredentialPermissions, getServiceCredentials, isCreatedScmCredentials, isCreatedScmCredentials1, listAccountMemberFavorites, listMemberFavoritesByResource, listScmCredentials, listScmCredentials1, partialUpdateSso, personalAccessTokenAuthorization, removeRoleFromMember, resetOtp, resetPassword, revokeServiceCredential1, save, scmCredentialSave, scmCredentialSave1, scmCredentialUpdate, scmCredentialUpdate1, scmDelete, sendDownloadEmail, ssoAddAttributes, ssoConfigure, ssoGetAttributesConfig, ssoParseConfigurationFile, update1, updateAccountRole, updateGroupMapping, updateMemberPreferences, updatePartnerAccountAdminData, updatePartnerAccountData, updateResourceActions, updateRoleWithNewActions, updateSso, updateUser, validateNewPartnerData, validatePartnerAssociationLimit, } from '../api/account.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { accountDictionary } from '../error/dictionary/account.js';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
class AccountClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.account.url, defaults);
        /**
         * Gets credentials from personal service client (create if not exists one to the logged user).
         */
        Object.defineProperty(this, "generatePersonalClientCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(getPersonalClientCredentials)
        });
        /**
         * Creates a Feature Flag
         */
        Object.defineProperty(this, "createFeatureFlag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(create)
        });
        /**
         * Returns information if account data (name and slug) are available to be registered
         */
        Object.defineProperty(this, "isAvailable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountDataIsAvailable)
        });
        /**
         * Lists all Feature Flags in an Account
         */
        Object.defineProperty(this, "featureFlags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getFeatures)
        });
        /**
         * Gets Partners with whom it is allowed to share content.
         */
        Object.defineProperty(this, "partners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPartnersSharingAllowed)
        });
        /**
         * Gets Partner by account Id
         */
        Object.defineProperty(this, "partner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getPartnerAccount)
        });
        /**
         * Creates an Account Order for Partner
         */
        Object.defineProperty(this, "createPartner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createPartner)
        });
        /**
         * Updates Partner Account data.
         */
        Object.defineProperty(this, "updatePartner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updatePartnerAccountData)
        });
        /**
         * Updates Partner Account Admin data.
         */
        Object.defineProperty(this, "updatePartnerAdmin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updatePartnerAccountAdminData)
        });
        /**
         * Deletes Partner
         */
        Object.defineProperty(this, "deactivatePartner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deletePartner)
        });
        /**
         * Validates new Partner account data
         */
        Object.defineProperty(this, "validateNewPartnerData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(validateNewPartnerData)
        });
        /**
         * Validates the association limit for the partner. Yields `{ isValid: true }` if valid or `{ isValid: false, message: string }`
         * otherwise.
         */
        Object.defineProperty(this, "validatePartnerAssociationLimit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'validatePartnerAssociationLimit',
                request: async (signal) => {
                    try {
                        await validatePartnerAssociationLimit({ signal });
                        return { isValid: true, message: '' };
                    }
                    catch (error) {
                        if (error instanceof HttpError) {
                            const stkError = this.buildStackSpotError(error);
                            if (stkError.status === 422 || stkError.code === 'BAD_USER_INPUT')
                                return { isValid: false, message: stkError.translate() };
                        }
                        throw error;
                    }
                },
            })
        });
        /**
         * Gets member by id.
         */
        Object.defineProperty(this, "member", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getMemberById)
        });
        /**
         * Gets all members (paginated).
         */
        Object.defineProperty(this, "allMembers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getAccountMembers1)
        });
        /**
         * Gets member Groups (paginated).
         */
        Object.defineProperty(this, "memberGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getMemberGroups)
        });
        /**
         * Gets member roles (paginated).
         */
        Object.defineProperty(this, "memberRoles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getRoles1)
        });
        /**
         * Gets member resources.
         */
        Object.defineProperty(this, "memberResources", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getResources1)
        });
        /**
         * Gets All Fido credentials for the given member (paginated).
         */
        Object.defineProperty(this, "fidoCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getAllMemberFidoCredentials, { accumulator: 'items' })
        });
        /**
         * Creates member on current tenant.
         */
        Object.defineProperty(this, "createMember", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createUser)
        });
        /**
         * Updates member on current tenant.
         */
        Object.defineProperty(this, "updateMember", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateUser)
        });
        /**
         * Adds a member to several groups.
         */
        Object.defineProperty(this, "addMemberToGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(bindToGroups)
        });
        /**
         * Attributes several roles to a member.
         */
        Object.defineProperty(this, "addRolesToMember", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(bindToRoles)
        });
        /**
         * Removes a role from a member.
         */
        Object.defineProperty(this, "removeRoleFromMember", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(removeRoleFromMember)
        });
        /**
         * Sends an e-mail to reset the password of the member with the provided e-mail address.
         */
        Object.defineProperty(this, "resetMemberPassword", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(resetPassword)
        });
        /**
         * Reset member OTP
         */
        Object.defineProperty(this, "resetOtp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(resetOtp)
        });
        /**
         * Enables Fido credentials for the given member.
         */
        Object.defineProperty(this, "enableFidoCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(enableFidoCredentials)
        });
        /**
         * Disables Fido credentials for the given member.
         */
        Object.defineProperty(this, "disableFidoCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deactivateFidoCredentials)
        });
        /**
         * Gets group by id.
         */
        Object.defineProperty(this, "group", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getGroupById)
        });
        /**
         * Get all groups (paginated).
         */
        Object.defineProperty(this, "allGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getGroups)
        });
        /**
         * Creates a group.
         */
        Object.defineProperty(this, "createGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(save)
        });
        /**
         * Updates a group.
         */
        Object.defineProperty(this, "updateGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(update1)
        });
        /**
         * Deletes a group.
         */
        Object.defineProperty(this, "deleteGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteV1GroupsByGroupId)
        });
        /**
         * Gets all members in a group (paginated).
         */
        Object.defineProperty(this, "groupMembers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getMembers)
        });
        /**
         * Adds several members to a group
         */
        Object.defineProperty(this, "addMembersToGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(bindGroupMembers)
        });
        /**
         * Removes a member from a group
         */
        Object.defineProperty(this, "removeMemberFromGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteMember)
        });
        /**
         * Gets all roles of a group.
         */
        Object.defineProperty(this, "groupRoles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getRoles2)
        });
        /**
         * Adds several roles to a group.
         */
        Object.defineProperty(this, "addRolesToGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(bindRoles)
        });
        /**
         * Removes a role from a group.
         */
        Object.defineProperty(this, "removeRoleFromGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteRole)
        });
        /**
         * Gets all resources of a group (paginated).
         */
        Object.defineProperty(this, "groupResources", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getGroupResources)
        });
        /**
         * Adds several resources to a group.
         */
        Object.defineProperty(this, "addResourcesToGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addResourcesToGroup)
        });
        /**
         * Removes a resource from a group.
         */
        Object.defineProperty(this, "removeResourceFromGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteResourceFromGroup)
        });
        /**
         * Gets all roles in the account (paginated)
         */
        Object.defineProperty(this, "allRoles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getRoles)
        });
        /**
         * Get a role by id
         */
        Object.defineProperty(this, "role", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'account.role',
                request: async (signal, { id }) => {
                    const roles = await getRoles({ filterBy: 'id', filterValue: id }, { signal });
                    if (!roles.length)
                        throw new StackspotAPIError({ status: 404 });
                    return roles[0];
                },
            })
        });
        /**
         * Gets all members with the provided role (paginated)
         */
        Object.defineProperty(this, "roleMembers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getRoleMembers)
        });
        /**
         * Creates a role
         */
        Object.defineProperty(this, "createRole", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createAccountRole)
        });
        /**
         * Updates a role
         */
        Object.defineProperty(this, "updateRole", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateAccountRole)
        });
        /**
         * Deletes a role
         */
        Object.defineProperty(this, "deleteRole", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteAccountRole)
        });
        /**
         * Adds a role to several members
         */
        Object.defineProperty(this, "addRoleToMembers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addRoleToMember)
        });
        /**
         * Gets all groups with the provided role (paginated)
         */
        Object.defineProperty(this, "roleGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getRoleGroups)
        });
        /**
         * Adds a role to several groups
         */
        Object.defineProperty(this, "addRoleToGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(bindRoleGroups)
        });
        /**
         * Get the actions a role is allowed to perform
         */
        Object.defineProperty(this, "rolePermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getResourcesAndActionsWithStatus)
        });
        /**
         * Updates a role with new list of permissions
         */
        Object.defineProperty(this, "updateRolePermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateRoleWithNewActions)
        });
        /**
         * Updates a specific role permission
         */
        Object.defineProperty(this, "updateRolePermission", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateResourceActions)
        });
        /**
         * Gets all resources (paginated)
         */
        Object.defineProperty(this, "allResources", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getResources)
        });
        /**
         * Gets all resource types (paginated)
         */
        Object.defineProperty(this, "allResourceTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getResourceTypes)
        });
        /**
         * Sends an email for downloading the CLI
         */
        Object.defineProperty(this, "sendDownloadCLIEmail", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(sendDownloadEmail)
        });
        /**
         * Creates an SCM credential (account level).
         */
        Object.defineProperty(this, "createSCMCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(scmCredentialSave1)
        });
        /**
         * Updates an SCM credential (account level).
         */
        Object.defineProperty(this, "updateSCMCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(scmCredentialUpdate1)
        });
        /**
         * Gets all SCM credentials (account level).
         */
        Object.defineProperty(this, "allSCMCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listScmCredentials1)
        });
        /**
         * Gets the status for the SCM credential.
         *
         * - If the SCM status is invalid because there's no configuration at the account level, it returns `{ status: 'missing-account' }`.
         * - If the SCM status is invalid because, although the SCM integration is configured, the SCM access is not, it returns
         * `{ status: 'missing-user' }`.
         * - If the SCM status is valid, it returns `{ status: 'valid', mandate: boolean, hasUserConfiguration: boolean }`. `mandate` indicates
         * if the SCM credential is mandatory at the account level for every user. `hasUserConfiguration` indicates if the user currently logged
         * in has an SCM credential configured or not.
         */
        Object.defineProperty(this, "scmCredentialStatus", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'account.scmStatus',
                request: async (signal) => {
                    try {
                        const data = await isCreatedScmCredentials1({ signal });
                        return { status: 'valid', ...data };
                    }
                    catch (error) {
                        if (error instanceof HttpError) {
                            // 404 means that the scm integration was not configured
                            if (error.status === 404)
                                return { status: 'missing-account' };
                            // 422 means that the scm integration is configured, but the scm access is not
                            if (error.status === 422)
                                return { status: 'missing-user' };
                        }
                        throw error;
                    }
                },
            })
        });
        /**
         * Enables Personal Access Token (PAT) generation.
         */
        Object.defineProperty(this, "enablePATGeneration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createPersonalAccessToken)
        });
        /**
         * Disables Personal Access Token (PAT) generation.
         */
        Object.defineProperty(this, "disablePATGeneration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(disablePersonalAccessTokenGeneration)
        });
        /**
         * Verifies if Personal Access Token (PAT) generation is enabled.
         */
        Object.defineProperty(this, "patGenerationEnabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'account.patEnabled',
                request: async (signal) => {
                    try {
                        await personalAccessTokenAuthorization({ signal });
                        return true;
                    }
                    catch (error) {
                        if (error instanceof HttpError && error.status === 404)
                            return false;
                        throw error;
                    }
                },
            })
        });
        /**
         * Verifies if the current user has an SCM credential configured.
         */
        Object.defineProperty(this, "userHasSCMCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'account.userHasSCMCredential',
                request: async (signal) => {
                    try {
                        await isCreatedScmCredentials({ signal });
                        return true;
                    }
                    catch {
                        return false;
                    }
                },
            })
        });
        /**
         * Creates an SCM credential for the user currently logged in.
         */
        Object.defineProperty(this, "createUserSCMCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(scmCredentialSave)
        });
        /**
         * Updates an SCM credential for the user currently logged in.
         */
        Object.defineProperty(this, "updateUserSCMCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(scmCredentialUpdate)
        });
        /**
         * Gets all SCM credentials for the user currently logged in.
         */
        Object.defineProperty(this, "allUserSCMCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listScmCredentials)
        });
        /**
         * Gets the SCM provider.
         */
        Object.defineProperty(this, "scmProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getScmProvider)
        });
        /**
         * Deletes the SCM credentials for the user currently logged in.
         */
        Object.defineProperty(this, "deleteSCMCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(scmDelete)
        });
        /**
         * Gets all service credentials (paginated).
         */
        Object.defineProperty(this, "allServiceCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getServiceCredentials)
        });
        /**
         * Gets a service credential by id.
         */
        Object.defineProperty(this, "serviceCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getServiceCredential)
        });
        /**
         * Gets all the permissions linked to a service credential.
         */
        Object.defineProperty(this, "serviceCredentialPermissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getServiceCredentialPermissions)
        });
        /**
         * Gets all groups linked to a service credential.
         */
        Object.defineProperty(this, "serviceCredentialGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getServiceCredentialGroups)
        });
        /**
         * Creates a service credential.
         */
        Object.defineProperty(this, "createServiceCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createServiceCredential1)
        });
        /**
         * Adds a service credential to several groups.
         */
        Object.defineProperty(this, "addServiceCredentialToGroups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(associateGroupToServiceCredential)
        });
        /**
         * Removes a service credential from a group.
         */
        Object.defineProperty(this, "removeServiceCredentialFromGroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(disassociateGroupToServiceCredential)
        });
        /**
         * Revokes a service credential.
         */
        Object.defineProperty(this, "revokeServiceCredential", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(revokeServiceCredential1)
        });
        /**
         * Creates a group mapping within an SSO.
         */
        Object.defineProperty(this, "createSSOGroupMapping", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(createGroupMapping)
        });
        /**
         * Deletes a group mapping from an SSO.
         */
        Object.defineProperty(this, "deleteSSOGroupMapping", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteGroupMapping)
        });
        /**
         * Updates a group mapping within an SSO.
         */
        Object.defineProperty(this, "updateSSOGroupMapping", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateGroupMapping)
        });
        /**
         * Get All SSO Group Mappings (paginated).
         */
        Object.defineProperty(this, "allSSOGroupMappings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.infiniteQuery(getAllGroupMapping, { accumulator: 'items' })
        });
        /**
         * Parses a file with a configuration for an SSO. The protocol can be either SAML or OPENID.
         */
        Object.defineProperty(this, "parseSSOConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(ssoParseConfigurationFile)
        });
        /**
         * Creates an SSO. The protocol can be either SAML or OPENID.
         */
        Object.defineProperty(this, "setupSSO", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(ssoConfigure)
        });
        /**
         * Gets all SSOs.
         */
        Object.defineProperty(this, "allSSO", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAllAccountSso)
        });
        /**
         * Updates an SSO. The payload will replace everything in the current configuration (won't be merged). Use `patchSSO` for merging.
         */
        Object.defineProperty(this, "updateSSO", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateSso)
        });
        /**
         * Patches an SSO with a partial configuration change.
         */
        Object.defineProperty(this, "patchSSO", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(partialUpdateSso)
        });
        /**
         * Gets an SSO by id.
         */
        Object.defineProperty(this, "sso", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getAccountSso)
        });
        /**
         * Deletes an SSO.
         */
        Object.defineProperty(this, "deleteSSO", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteSso)
        });
        /**
         * Gets the attributes of an SSO.
         */
        Object.defineProperty(this, "ssoAttributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(ssoGetAttributesConfig)
        });
        /**
         * Updates the attributes in a SSO.
         */
        Object.defineProperty(this, "updateSSOAttributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(ssoAddAttributes)
        });
        /**
         * Gets the preferences of a member.
         */
        Object.defineProperty(this, "preferences", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(getMemberPreferences)
        });
        /**
         * Updates the preferences of a member.
         */
        Object.defineProperty(this, "updatePreferences", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(updateMemberPreferences)
        });
        /**
         * Get account member favorite resources
       */
        Object.defineProperty(this, "getAccountMemberFavoriteResources", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listAccountMemberFavorites)
        });
        /**
         * Add account member favorite resource
       */
        Object.defineProperty(this, "addAccountMemberFavoriteResource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(addAccountMemberFavorite)
        });
        /**
         * Get member favorite resources by type
       */
        Object.defineProperty(this, "getMemberFavoriteResourcesByType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(listMemberFavoritesByResource)
        });
        /**
         * Remove resource from member favorites
       */
        Object.defineProperty(this, "removeResourceFromMemberFavorites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(deleteMemberFavorite)
        });
        /**
         * Validate permission access
         */
        Object.defineProperty(this, "validatePermissionAccess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query({
                name: 'account.getAccess',
                request: async (signal, variables) => {
                    try {
                        await getAccess(variables, { signal });
                        return true;
                    }
                    catch {
                        return false;
                    }
                },
                permission: this.createPermissionFunctionFor(getAccess),
            })
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, accountDictionary, error.headers);
    }
}
export const accountClient = new AccountClient();
//# sourceMappingURL=account.js.map