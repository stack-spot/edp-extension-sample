import { commit, committedNotifications, defaults, findAll } from '../api/notification.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { baseDictionary } from '../error/dictionary/base.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
class NotificationClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.notification.url, defaults);
        /**
         * Gets all notification by tenant
         */
        Object.defineProperty(this, "notifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(findAll)
        });
        /**
         * Gets all committed notifications by tenant
         */
        Object.defineProperty(this, "committedNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(committedNotifications)
        });
        /**
         * Mark a notification as committed (mark as read)
         */
        Object.defineProperty(this, "commit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(commit)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, baseDictionary, error.headers);
    }
}
export const notificationClient = new NotificationClient();
//# sourceMappingURL=notification.js.map