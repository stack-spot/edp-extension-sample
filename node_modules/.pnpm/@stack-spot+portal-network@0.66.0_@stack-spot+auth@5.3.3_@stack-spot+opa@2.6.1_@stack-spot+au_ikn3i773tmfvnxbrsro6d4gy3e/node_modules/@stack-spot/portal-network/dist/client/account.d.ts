import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { CreateSCMRequest, SCMStatus, UpdateSCMRequest } from './types.js';
declare class AccountClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Gets credentials from personal service client (create if not exists one to the logged user).
     */
    generatePersonalClientCredentials: import("../network/types.js").MutationObject<void, import("../api/account.js").PersonalClientCredentialsResponse>;
    /**
     * Creates a Feature Flag
     */
    createFeatureFlag: import("../network/types.js").MutationObject<{
        createFeatureFlagRequest: import("../api/account.js").CreateFeatureFlagRequest;
    }, unknown>;
    /**
     * Returns information if account data (name and slug) are available to be registered
     */
    isAvailable: import("../network/types.js").QueryObject<{
        name: string;
        slug: string;
    }, import("../api/account.js").AccountDataAvailableResponse>;
    /**
     * Lists all Feature Flags in an Account
     */
    featureFlags: import("../network/types.js").QueryObject<void, import("../api/account.js").FeatureFlagsResponse[]>;
    /**
     * Gets Partners with whom it is allowed to share content.
     */
    partners: import("../network/types.js").QueryObject<{
        name?: string | undefined;
    }, import("../api/account.js").AccountPartnerResponse[]>;
    /**
     * Gets Partner by account Id
     */
    partner: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").AccountResponse>;
    /**
     * Creates an Account Order for Partner
     */
    createPartner: import("../network/types.js").MutationObject<{
        createAccountPartnerOrderRequest: import("../api/account.js").CreateAccountPartnerOrderRequest;
    }, import("../api/account.js").IdDefaultResponse>;
    /**
     * Updates Partner Account data.
     */
    updatePartner: import("../network/types.js").MutationObject<{
        id: string;
        accountPartnerAccountDataUpdateRequest: import("../api/account.js").AccountPartnerAccountDataUpdateRequest;
    }, unknown>;
    /**
     * Updates Partner Account Admin data.
     */
    updatePartnerAdmin: import("../network/types.js").MutationObject<{
        id: string;
        accountPartnerAdminDataUpdateRequest: import("../api/account.js").AccountPartnerAdminDataUpdateRequest;
    }, unknown>;
    /**
     * Deletes Partner
     */
    deactivatePartner: import("../network/types.js").MutationObject<{
        id: string;
    }, unknown>;
    /**
     * Validates new Partner account data
     */
    validateNewPartnerData: import("../network/types.js").MutationObject<{
        validateAccountPartnerDataRequest: import("../api/account.js").ValidateAccountPartnerDataRequest;
    }, unknown>;
    /**
     * Validates the association limit for the partner. Yields `{ isValid: true }` if valid or `{ isValid: false, message: string }`
     * otherwise.
     */
    validatePartnerAssociationLimit: Omit<import("../network/types.js").QueryObject<void, {
        isValid: boolean;
        message: string;
    }>, "isAllowed" | "useAllowed" | "getPermissionKey">;
    /**
     * Gets member by id.
     */
    member: import("../network/types.js").QueryObject<{
        memberId: string;
    }, import("../api/account.js").AccountMemberStackspotIamDto>;
    /**
     * Gets all members (paginated).
     */
    allMembers: import("../network/types.js").InfiniteQueryObject<{
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").AccountMemberResponse[], "">;
    /**
     * Gets member Groups (paginated).
     */
    memberGroups: import("../network/types.js").InfiniteQueryObject<{
        memberId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").GroupReadResponse[], "">;
    /**
     * Gets member roles (paginated).
     */
    memberRoles: import("../network/types.js").InfiniteQueryObject<{
        memberId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").ReadMemberRoleResponse[], "">;
    /**
     * Gets member resources.
     */
    memberResources: import("../network/types.js").QueryObject<{
        memberId: string;
    }, import("../api/account.js").ResourceDto[]>;
    /**
     * Gets All Fido credentials for the given member (paginated).
     */
    fidoCredentials: import("../network/types.js").InfiniteQueryObject<{
        memberId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").MemberCredentialsListResponse, "items">;
    /**
     * Creates member on current tenant.
     */
    createMember: import("../network/types.js").MutationObject<{
        createUserRequest: import("../api/account.js").CreateUserRequest;
    }, import("../api/account.js").CreateUserResponse>;
    /**
     * Updates member on current tenant.
     */
    updateMember: import("../network/types.js").MutationObject<{
        memberId: string;
        updateUserRequest: import("../api/account.js").UpdateUserRequest;
    }, import("../api/account.js").UpdateUserResponse>;
    /**
     * Adds a member to several groups.
     */
    addMemberToGroups: import("../network/types.js").MutationObject<{
        memberId: string;
        memberIdsCommonRequest: import("../api/account.js").MemberIdsCommonRequest;
    }, unknown>;
    /**
     * Attributes several roles to a member.
     */
    addRolesToMember: import("../network/types.js").MutationObject<{
        memberId: string;
        memberIdsCommonRequest: import("../api/account.js").MemberIdsCommonRequest;
    }, unknown>;
    /**
     * Removes a role from a member.
     */
    removeRoleFromMember: import("../network/types.js").MutationObject<{
        roleId: string;
        memberId: string;
    }, unknown>;
    /**
     * Sends an e-mail to reset the password of the member with the provided e-mail address.
     */
    resetMemberPassword: import("../network/types.js").MutationObject<{
        memberEmailRequest: import("../api/account.js").MemberEmailRequest;
    }, unknown>;
    /**
     * Reset member OTP
     */
    resetOtp: import("../network/types.js").MutationObject<{
        memberId: string;
    }, unknown>;
    /**
     * Enables Fido credentials for the given member.
     */
    enableFidoCredentials: import("../network/types.js").MutationObject<{
        memberId: string;
    }, unknown>;
    /**
     * Disables Fido credentials for the given member.
     */
    disableFidoCredentials: import("../network/types.js").MutationObject<{
        memberId: string;
    }, unknown>;
    /**
     * Gets group by id.
     */
    group: import("../network/types.js").QueryObject<{
        groupId: string;
    }, import("../api/account.js").GroupReadDetailResponse>;
    /**
     * Get all groups (paginated).
     */
    allGroups: import("../network/types.js").InfiniteQueryObject<{
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
        includeDefaultGroup?: boolean | undefined;
    }, import("../api/account.js").GroupReadResponse[], "">;
    /**
     * Creates a group.
     */
    createGroup: import("../network/types.js").MutationObject<{
        newGroupRequest: import("../api/account.js").NewGroupRequest;
    }, import("../api/account.js").IamIdResponse>;
    /**
     * Updates a group.
     */
    updateGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        updateGroupRequest: import("../api/account.js").UpdateGroupRequest;
    }, import("../api/account.js").IamIdResponse>;
    /**
     * Deletes a group.
     */
    deleteGroup: import("../network/types.js").MutationObject<{
        groupId: string;
    }, unknown>;
    /**
     * Gets all members in a group (paginated).
     */
    groupMembers: import("../network/types.js").InfiniteQueryObject<{
        groupId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").ReadGroupMembersResponse[], "">;
    /**
     * Adds several members to a group
     */
    addMembersToGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        groupMemberIdsRequest: import("../api/account.js").GroupMemberIdsRequest;
    }, unknown>;
    /**
     * Removes a member from a group
     */
    removeMemberFromGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        memberId: string;
    }, unknown>;
    /**
     * Gets all roles of a group.
     */
    groupRoles: import("../network/types.js").InfiniteQueryObject<{
        groupId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").RoleResponse[], "">;
    /**
     * Adds several roles to a group.
     */
    addRolesToGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        groupRoleIdsRequest: import("../api/account.js").GroupRoleIdsRequest;
    }, unknown>;
    /**
     * Removes a role from a group.
     */
    removeRoleFromGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        roleId: string;
    }, unknown>;
    /**
     * Gets all resources of a group (paginated).
     */
    groupResources: import("../network/types.js").InfiniteQueryObject<{
        groupId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").ResourceResponse[], "">;
    /**
     * Adds several resources to a group.
     */
    addResourcesToGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        addResourcesToGroupRequest: import("../api/account.js").AddResourcesToGroupRequest;
    }, unknown>;
    /**
     * Removes a resource from a group.
     */
    removeResourceFromGroup: import("../network/types.js").MutationObject<{
        groupId: string;
        resourceId: string;
    }, unknown>;
    /**
     * Gets all roles in the account (paginated)
     */
    allRoles: import("../network/types.js").InfiniteQueryObject<{
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").RoleResponse[], "">;
    /**
     * Get a role by id
     */
    role: Omit<import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").RoleResponse>, "isAllowed" | "useAllowed" | "getPermissionKey">;
    /**
     * Gets all members with the provided role (paginated)
     */
    roleMembers: import("../network/types.js").InfiniteQueryObject<{
        roleId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").RoleMemberResponse[], "">;
    /**
     * Creates a role
     */
    createRole: import("../network/types.js").MutationObject<{
        createAccountRoleRequest: import("../api/account.js").CreateAccountRoleRequest;
    }, import("../api/account.js").IdResponse>;
    /**
     * Updates a role
     */
    updateRole: import("../network/types.js").MutationObject<{
        roleId: string;
        updateAccountRoleRequest: import("../api/account.js").UpdateAccountRoleRequest;
    }, unknown>;
    /**
     * Deletes a role
     */
    deleteRole: import("../network/types.js").MutationObject<{
        roleId: string;
    }, unknown>;
    /**
     * Adds a role to several members
     */
    addRoleToMembers: import("../network/types.js").MutationObject<{
        roleId: string;
        addRoleToMemberRequest: import("../api/account.js").AddRoleToMemberRequest;
    }, import("../api/account.js").AddUsersToRoleResponse>;
    /**
     * Gets all groups with the provided role (paginated)
     */
    roleGroups: import("../network/types.js").InfiniteQueryObject<{
        roleId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").RoleGroupResponse[], "">;
    /**
     * Adds a role to several groups
     */
    addRoleToGroups: import("../network/types.js").MutationObject<{
        roleId: string;
        roleGroupIdsRequest: import("../api/account.js").RoleGroupIdsRequest;
    }, unknown>;
    /**
     * Get the actions a role is allowed to perform
     */
    rolePermissions: import("../network/types.js").InfiniteQueryObject<{
        roleId: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").IamResourceType[], "">;
    /**
     * Updates a role with new list of permissions
     */
    updateRolePermissions: import("../network/types.js").MutationObject<{
        roleId: string;
        body: import("../api/account.js").IamCreateStatementRequest[];
    }, unknown>;
    /**
     * Updates a specific role permission
     */
    updateRolePermission: import("../network/types.js").MutationObject<{
        roleId: string;
        resourceId: string;
        updateResourceActionsRequest: import("../api/account.js").UpdateResourceActionsRequest;
    }, unknown>;
    /**
     * Gets all resources (paginated)
     */
    allResources: import("../network/types.js").InfiniteQueryObject<{
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").ResourceResponse[], "">;
    /**
     * Gets all resource types (paginated)
     */
    allResourceTypes: import("../network/types.js").InfiniteQueryObject<{
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").ResourceTypeResponse[], "">;
    /**
     * Sends an email for downloading the CLI
     */
    sendDownloadCLIEmail: import("../network/types.js").MutationObject<void, unknown>;
    /**
     * Creates an SCM credential (account level).
     */
    createSCMCredential: import("../network/types.js").MutationObject<CreateSCMRequest, unknown>;
    /**
     * Updates an SCM credential (account level).
     */
    updateSCMCredential: import("../network/types.js").MutationObject<UpdateSCMRequest, unknown>;
    /**
     * Gets all SCM credentials (account level).
     */
    allSCMCredentials: import("../network/types.js").QueryObject<void, import("../api/account.js").AccountScmInfoResponse[]>;
    /**
     * Gets the status for the SCM credential.
     *
     * - If the SCM status is invalid because there's no configuration at the account level, it returns `{ status: 'missing-account' }`.
     * - If the SCM status is invalid because, although the SCM integration is configured, the SCM access is not, it returns
     * `{ status: 'missing-user' }`.
     * - If the SCM status is valid, it returns `{ status: 'valid', mandate: boolean, hasUserConfiguration: boolean }`. `mandate` indicates
     * if the SCM credential is mandatory at the account level for every user. `hasUserConfiguration` indicates if the user currently logged
     * in has an SCM credential configured or not.
     */
    scmCredentialStatus: Omit<import("../network/types.js").QueryObject<void, SCMStatus>, "isAllowed" | "useAllowed" | "getPermissionKey">;
    /**
     * Enables Personal Access Token (PAT) generation.
     */
    enablePATGeneration: import("../network/types.js").MutationObject<void, unknown>;
    /**
     * Disables Personal Access Token (PAT) generation.
     */
    disablePATGeneration: import("../network/types.js").MutationObject<void, unknown>;
    /**
     * Verifies if Personal Access Token (PAT) generation is enabled.
     */
    patGenerationEnabled: Omit<import("../network/types.js").QueryObject<void, boolean>, "isAllowed" | "useAllowed" | "getPermissionKey">;
    /**
     * Verifies if the current user has an SCM credential configured.
     */
    userHasSCMCredential: Omit<import("../network/types.js").QueryObject<void, boolean>, "isAllowed" | "useAllowed" | "getPermissionKey">;
    /**
     * Creates an SCM credential for the user currently logged in.
     */
    createUserSCMCredential: import("../network/types.js").MutationObject<{
        userScmInfoRequest: import("../api/account.js").UserScmInfoRequest;
    }, unknown>;
    /**
     * Updates an SCM credential for the user currently logged in.
     */
    updateUserSCMCredential: import("../network/types.js").MutationObject<{
        userScmInfoRequest: import("../api/account.js").UserScmInfoRequest;
    }, unknown>;
    /**
     * Gets all SCM credentials for the user currently logged in.
     */
    allUserSCMCredentials: import("../network/types.js").QueryObject<void, import("../api/account.js").UserScmInfoResponse[]>;
    /**
     * Gets the SCM provider.
     */
    scmProvider: import("../network/types.js").QueryObject<void, import("../api/account.js").AccountScmProviderResponse>;
    /**
     * Deletes the SCM credentials for the user currently logged in.
     */
    deleteSCMCredentials: import("../network/types.js").MutationObject<void, unknown>;
    /**
     * Gets all service credentials (paginated).
     */
    allServiceCredentials: import("../network/types.js").InfiniteQueryObject<{
        name?: string | undefined;
        status?: string | undefined;
        page?: string | undefined;
        size?: string | undefined;
    }, import("../api/account.js").ServiceCredentialResponse[], "">;
    /**
     * Gets a service credential by id.
     */
    serviceCredential: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").ServiceCredentialDetailsResponse>;
    /**
     * Gets all the permissions linked to a service credential.
     */
    serviceCredentialPermissions: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").FullResourceResponse[]>;
    /**
     * Gets all groups linked to a service credential.
     */
    serviceCredentialGroups: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").GroupReadResponse[]>;
    /**
     * Creates a service credential.
     */
    createServiceCredential: import("../network/types.js").MutationObject<{
        serviceCredentialCreateRequest: import("../api/account.js").ServiceCredentialCreateRequest;
    }, import("../api/account.js").ServiceCredentialCreateResponse>;
    /**
     * Adds a service credential to several groups.
     */
    addServiceCredentialToGroups: import("../network/types.js").MutationObject<{
        id: string;
        serviceCredentialAssociateGroupRequest: import("../api/account.js").ServiceCredentialAssociateGroupRequest;
    }, unknown>;
    /**
     * Removes a service credential from a group.
     */
    removeServiceCredentialFromGroup: import("../network/types.js").MutationObject<{
        id: string;
        groupId: string;
    }, unknown>;
    /**
     * Revokes a service credential.
     */
    revokeServiceCredential: import("../network/types.js").MutationObject<{
        id: string;
    }, unknown>;
    /**
     * Creates a group mapping within an SSO.
     */
    createSSOGroupMapping: import("../network/types.js").MutationObject<{
        id: string;
        accountGroupMappingCreateRequest: import("../api/account.js").AccountGroupMappingCreateRequest;
    }, unknown>;
    /**
     * Deletes a group mapping from an SSO.
     */
    deleteSSOGroupMapping: import("../network/types.js").MutationObject<{
        id: string;
        attributeImporterId: string;
    }, unknown>;
    /**
     * Updates a group mapping within an SSO.
     */
    updateSSOGroupMapping: import("../network/types.js").MutationObject<{
        id: string;
        attributeImporterId: string;
        accountGroupMappingUpdateRequest: import("../api/account.js").AccountGroupMappingUpdateRequest;
    }, unknown>;
    /**
     * Get All SSO Group Mappings (paginated).
     */
    allSSOGroupMappings: import("../network/types.js").InfiniteQueryObject<{
        id: string;
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").PageResponseAccountSsoGroupMappingResponse, "items">;
    /**
     * Parses a file with a configuration for an SSO. The protocol can be either SAML or OPENID.
     */
    parseSSOConfig: import("../network/types.js").MutationObject<{
        protocol: "SAML" | "OPENID";
        body?: {
            name?: string | undefined;
            alias?: string | undefined;
            file: Blob;
        } | undefined;
    }, import("../api/account.js").AccountSsoParserResponse>;
    /**
     * Creates an SSO. The protocol can be either SAML or OPENID.
     */
    setupSSO: import("../network/types.js").MutationObject<{
        protocol: "SAML" | "OPENID";
        accountSsoCreateRequest: import("../api/account.js").AccountSsoCreateRequest;
    }, import("../api/account.js").SsoIdResponse>;
    /**
     * Gets all SSOs.
     */
    allSSO: import("../network/types.js").QueryObject<{
        size?: any;
        page?: any;
        sort?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        filterMode?: "MATCH" | "CONTAINS" | "IN" | undefined;
        filterBy?: string | undefined;
        filterValue?: string | undefined;
        multiFilterMode?: string | undefined;
        filterIn?: any;
    }, import("../api/account.js").PageResponseAccountSsoResponse>;
    /**
     * Updates an SSO. The payload will replace everything in the current configuration (won't be merged). Use `patchSSO` for merging.
     */
    updateSSO: import("../network/types.js").MutationObject<{
        id: string;
        accountSsoUpdateRequest: import("../api/account.js").AccountSsoUpdateRequest;
    }, unknown>;
    /**
     * Patches an SSO with a partial configuration change.
     */
    patchSSO: import("../network/types.js").MutationObject<{
        id: string;
        accountSsoPartialUpdateRequest: import("../api/account.js").AccountSsoPartialUpdateRequest;
    }, unknown>;
    /**
     * Gets an SSO by id.
     */
    sso: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").AccountSsoDetailedResponse>;
    /**
     * Deletes an SSO.
     */
    deleteSSO: import("../network/types.js").MutationObject<{
        id: string;
    }, unknown>;
    /**
     * Gets the attributes of an SSO.
     */
    ssoAttributes: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/account.js").AccountSsoAttributesConfigResponse>;
    /**
     * Updates the attributes in a SSO.
     */
    updateSSOAttributes: import("../network/types.js").MutationObject<{
        id: string;
        accountSsoAddAttributesConfigRequest: import("../api/account.js").AccountSsoAddAttributesConfigRequest;
    }, unknown>;
    /**
     * Gets the preferences of a member.
     */
    preferences: import("../network/types.js").QueryObject<{
        memberId: string;
    }, import("../api/account.js").ReadPreferencesResponse>;
    /**
     * Updates the preferences of a member.
     */
    updatePreferences: import("../network/types.js").MutationObject<{
        memberId: string;
        updateMemberPreferencesRequest: import("../api/account.js").UpdateMemberPreferencesRequest;
    }, unknown>;
    /**
     * Get account member favorite resources
   */
    getAccountMemberFavoriteResources: import("../network/types.js").QueryObject<{
        memberId: string;
    }, import("../api/account.js").FavoriteResourcesResponse[]>;
    /**
     * Add account member favorite resource
   */
    addAccountMemberFavoriteResource: import("../network/types.js").MutationObject<{
        memberId: string;
        createFavoriteResourceRequest: import("../api/account.js").CreateFavoriteResourceRequest;
    }, unknown>;
    /**
     * Get member favorite resources by type
   */
    getMemberFavoriteResourcesByType: import("../network/types.js").QueryObject<{
        memberId: string;
        resourceType: string;
    }, any>;
    /**
     * Remove resource from member favorites
   */
    removeResourceFromMemberFavorites: import("../network/types.js").MutationObject<{
        memberId: string;
        resourceType: string;
        resourceId: string;
    }, unknown>;
    /**
     * Validate permission access
     */
    validatePermissionAccess: import("../network/types.js").QueryObject<{
        resourceType: string;
        resource: string;
        action: string;
        attribute?: string | undefined;
    }, boolean>;
}
export declare const accountClient: AccountClient;
export {};
//# sourceMappingURL=account.d.ts.map