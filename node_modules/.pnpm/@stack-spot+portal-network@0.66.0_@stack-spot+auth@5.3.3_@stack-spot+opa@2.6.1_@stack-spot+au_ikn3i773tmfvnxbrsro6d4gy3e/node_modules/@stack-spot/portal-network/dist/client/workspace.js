import { accountVariableControllercreate, accountVariableControllerdelete, accountVariableControllerfindAll, accountVariableControllerfindByName, accountVariableControllerupdate, accountVariableControllerusage, applicationEmbeddedLinkControllerdelete, applicationEmbeddedLinkControllergetEmbeddedLink, applicationEmbeddedLinkControllergetEmbeddedLinks, applicationEmbeddedLinkControllersave, applicationEmbeddedLinkControllerupdate, applicationEmbeddedLinkControllerupsertBatch, applicationLinkControllerdelete, applicationLinkControllergetApplicationLink, applicationLinkControllersave, applicationLinkControllerupdate, applicationLinkControllerupdateLinksVisibility, availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAnApplication, availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAWorkspace, checkConnectionSlugAvailabilityControllercheckConnectionSlugAvailability, connectionInterfaceControllerdeleteConnectionInterfaceAttributesFromEnvironment, connectionInterfaceControllerdeleteConnectionInterfaceFromAllEnvironments, connectionInterfaceControllergetConnectionInterface, connectionInterfaceControllergetConnectionInterfaces, connectionInterfaceControllerupdateConnectionInterfaceAttributes, connectionInterfaceControllerupdateConnectionInterfaceVisibility, contextControllerlistAccountContext, contextControllerlistConsolidatedContext, contextV2ControlleraddTypedContextInAccount, contextV2ControlleraddTypedContextInWorkspace, defaults, environmentControllergetEnvironment, environmentControllergetEnvironments, environmentControllersave, environmentControllerupdate, sharedInfraLinkControllerdelete, sharedInfraLinkControllergetSharedInfraLink, sharedInfraLinkControllersave, sharedInfraLinkControllerupdate, sharedInfraLinkControllerupdateLinksVisibility, workflowAccountControllerdeleteAccountWorkflow, workflowAccountControllerlistAccountWorkflows, workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType, workspaceApplicationControllerdeleteApplication, workspaceApplicationControllergetApplication, workspaceApplicationControllergetApplications, workspaceApplicationControllergetDependencyTree, workspaceApplicationControllerupdate, workspaceControllerdelete, workspaceControllergetWorkspaceForId, workspaceControllergetWorkspaces, workspaceControllergetWorkspacesFromUserPermission, workspaceControllersave, workspaceControllerupdate, workspaceEmbeddedLinkControllerdelete, workspaceEmbeddedLinkControllergetEmbeddedLink, workspaceEmbeddedLinkControllergetEmbeddedLinks, workspaceEmbeddedLinkControllersave, workspaceEmbeddedLinkControllerupdate, workspaceEmbeddedLinkControllerupsertBatch, workspaceLinkControllerdelete, workspaceLinkControllergetWorkspaceLinks, workspaceLinkControllersave, workspaceSharedInfrastructureControllerdeleteSharedInfra, workspaceSharedInfrastructureControllergetAllSharedInfrastructure, workspaceSharedInfrastructureControllergetDependencyTree, workspaceSharedInfrastructureControllergetSharedInfrastructure, workspaceSharedInfrastructureControllerupdate, workspaceStackControlleraddStack, workspaceStackControllerdeleteStack, workspaceStackControllergetStackById, workspaceStackControllergetStacks, workspaceV2ControllergetWorkspacesWithoutStackFilter, workspaceVariableV2ControllerfindAll, workspaceVariableV2ControllerfindByName, workspaceVariableV2Controllerupsert, } from '../api/workspace.js';
import apis from '../apis.json';
import { DefaultAPIError } from '../error/DefaultAPIError.js';
import { workspaceDictionary } from '../error/dictionary/workspace.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
class WorkspaceClient extends ReactQueryNetworkClient {
    constructor() {
        super(apis.workspace.url, defaults);
        /**
         * Gets all connection interfaces from a workspace
         */
        Object.defineProperty(this, "allConnectionInterfaces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(connectionInterfaceControllergetConnectionInterfaces)
        });
        /**
         * Gets a connection interface from a workspace
         */
        Object.defineProperty(this, "connectionInterface", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(connectionInterfaceControllergetConnectionInterface)
        });
        /**
         * Get available connection interface for a workspace by connection interface slug
         */
        Object.defineProperty(this, "workspaceAvailableConnInterfaceBySlug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAWorkspace)
        });
        /**
         * Get available connection interface for an application by connection interface slug
         */
        Object.defineProperty(this, "applicationAvailableConnInterface", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(availableConnectionInterfaceV2ControllergetAvailableConnectionInterfaceForAnApplication)
        });
        /**
         * Updates the visibility of a connection interface
         */
        Object.defineProperty(this, "updateConnectionInterfaceVisibility", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(connectionInterfaceControllerupdateConnectionInterfaceVisibility)
        });
        /**
         * Removes a connection interface
         */
        Object.defineProperty(this, "deleteConnectionInterface", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(connectionInterfaceControllerdeleteConnectionInterfaceFromAllEnvironments)
        });
        /**
         * Removes connection interface attributes by environment
         */
        Object.defineProperty(this, "deleteConnectionInterfaceAttributesFromEnvironment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(connectionInterfaceControllerdeleteConnectionInterfaceAttributesFromEnvironment)
        });
        /**
         * Updates the attributes of a connection interface
         */
        Object.defineProperty(this, "updateConnectionInterfaceAttributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(connectionInterfaceControllerupdateConnectionInterfaceAttributes)
        });
        /**
         * Checks the availability of a connection interface slug.
         */
        Object.defineProperty(this, "checkConnectionInterfaceAvailability", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(checkConnectionSlugAvailabilityControllercheckConnectionSlugAvailability)
        });
        /**
         * Gets all environments
         */
        Object.defineProperty(this, "environments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(environmentControllergetEnvironments)
        });
        /**
         * Gets environment by Id
         */
        Object.defineProperty(this, "environment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(environmentControllergetEnvironment)
        });
        /**
         * Creates an environment
         */
        Object.defineProperty(this, "createEnvironment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(environmentControllersave)
        });
        /**
         * Updates environment data
         */
        Object.defineProperty(this, "updateEnvironment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(environmentControllerupdate)
        });
        /**
         * Gets embedded link by id
         */
        Object.defineProperty(this, "embeddedLinkInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceEmbeddedLinkControllergetEmbeddedLink)
        });
        /**
         * Gets all embedded links from a workspace
         */
        Object.defineProperty(this, "allEmbeddedLinksInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceEmbeddedLinkControllergetEmbeddedLinks)
        });
        /**
         * Creates an embedded link in a workspace
         */
        Object.defineProperty(this, "createEmbeddedLinkInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceEmbeddedLinkControllersave)
        });
        /**
         * Deletes an embedded link from a workspace
         */
        Object.defineProperty(this, "deleteEmbeddedLinkFromWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceEmbeddedLinkControllerdelete)
        });
        /**
         * Updates an embedded link from a workspace
         */
        Object.defineProperty(this, "updateEmbeddedLinkInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceEmbeddedLinkControllerupdate)
        });
        /**
         * Updates all embedded links from a workspace
         */
        Object.defineProperty(this, "updateAllEmbeddedLinksInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceEmbeddedLinkControllerupsertBatch)
        });
        /**
         * Gets an embedded link from an application
         */
        Object.defineProperty(this, "embeddedLinkInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationEmbeddedLinkControllergetEmbeddedLink)
        });
        /**
         * Gets all embedded links from an application
         */
        Object.defineProperty(this, "allEmbeddedLinksInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationEmbeddedLinkControllergetEmbeddedLinks)
        });
        /**
         * Creates an embedded link in an application
         */
        Object.defineProperty(this, "createEmbeddedLinkInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationEmbeddedLinkControllersave)
        });
        /**
         * Deletes an embedded link from an application
         */
        Object.defineProperty(this, "deleteEmbeddedLinkFromApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationEmbeddedLinkControllerdelete)
        });
        /**
         * Updates an embedded link in an application
         */
        Object.defineProperty(this, "updateEmbeddedLinkInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationEmbeddedLinkControllerupdate)
        });
        /**
         * Updates all embedded links in an application
         */
        Object.defineProperty(this, "updateAllEmbeddedLinksInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationEmbeddedLinkControllerupsertBatch)
        });
        /**
         * Gets all workspaces
         */
        Object.defineProperty(this, "workspaces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceControllergetWorkspaces)
        });
        /**
         * Gets a workspace
         */
        Object.defineProperty(this, "workspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceControllergetWorkspaceForId)
        });
        /**
         * Get workspaces within user permission
         */
        Object.defineProperty(this, "workspacesFromUserPermission", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceControllergetWorkspacesFromUserPermission)
        });
        /**
         * Creates a workspace
         */
        Object.defineProperty(this, "createWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceControllersave)
        });
        /**
         * Updates a workspace
         */
        Object.defineProperty(this, "updateWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceControllerupdate)
        });
        //App and infra
        /**
         * Gets all applications in a Workspace
         */
        Object.defineProperty(this, "applications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceApplicationControllergetApplications)
        });
        /**
         * Gets an application
         */
        Object.defineProperty(this, "application", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceApplicationControllergetApplication)
        });
        /**
         * Gets the dependencies of an application
         */
        Object.defineProperty(this, "applicationDependencies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceApplicationControllergetDependencyTree)
        });
        /**
         * Gets all shared infra in a Workspace
         */
        Object.defineProperty(this, "allSharedInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceSharedInfrastructureControllergetAllSharedInfrastructure)
        });
        /**
         * Gets a shared infra
         */
        Object.defineProperty(this, "sharedInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceSharedInfrastructureControllergetSharedInfrastructure)
        });
        /**
         * Gets the dependencies of a shared infra
         */
        Object.defineProperty(this, "sharedInfraDependencies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceSharedInfrastructureControllergetDependencyTree)
        });
        /**
         * Updates an application
         */
        Object.defineProperty(this, "updateApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceApplicationControllerupdate)
        });
        /**
         * Updates a shared infra
         */
        Object.defineProperty(this, "updateInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceSharedInfrastructureControllerupdate)
        });
        // Workflow
        /**
         * Gets a workflow by stack id
         */
        Object.defineProperty(this, "workflowsByStackId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType)
        });
        /**
         * Gets account workflows
         */
        Object.defineProperty(this, "accountWorkflows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workflowAccountControllerlistAccountWorkflows)
        });
        /**
         * Gets workflows from a stack
         */
        Object.defineProperty(this, "stackWorkflows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workflowWorkspaceControllerlistWorkflowByStackIdAndWorkflowType)
        });
        /**
         * Removes account workflow
         */
        Object.defineProperty(this, "deleteAccountWorkflow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workflowAccountControllerdeleteAccountWorkflow)
        });
        // Variables Account
        /**
         * Find all account variables
         */
        Object.defineProperty(this, "accountVariables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountVariableControllerfindAll)
        });
        /**
         * Get an account variable by name
         */
        Object.defineProperty(this, "getAccountVariable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountVariableControllerfindByName)
        });
        /**
         * Get account variable usage
         */
        Object.defineProperty(this, "accountVariableUsage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(accountVariableControllerusage)
        });
        /**
         * Create account variable
         */
        Object.defineProperty(this, "createAccountVariable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(accountVariableControllercreate)
        });
        /**
         * Update account variable
         */
        Object.defineProperty(this, "updateAccountVariable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(accountVariableControllerupdate)
        });
        /**
         * Delete account variable
         */
        Object.defineProperty(this, "deleteAccountVariable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(accountVariableControllerdelete)
        });
        // Variables Workspace
        /**
         * Find all workspace variables
         */
        Object.defineProperty(this, "workspaceVariables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceVariableV2ControllerfindAll)
        });
        /**
         * Get a workspace variable by name
         */
        Object.defineProperty(this, "getWorkspaceVariable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceVariableV2ControllerfindByName)
        });
        /**
         * Updates workspace variable based on existing account variable
         */
        Object.defineProperty(this, "updateWorkspaceVariable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceVariableV2Controllerupsert)
        });
        //Links
        /**
         * Gets shared infra links
         */
        Object.defineProperty(this, "linksInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceLinkControllergetWorkspaceLinks)
        });
        /**
         * Adds a link to a workspace
         */
        Object.defineProperty(this, "addLinkInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceLinkControllersave)
        });
        /**
         * Deletes a link from a workspace
         */
        Object.defineProperty(this, "removeLinkFromWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(workspaceLinkControllerdelete)
        });
        /**
         * Gets application link
         */
        Object.defineProperty(this, "linkInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(applicationLinkControllergetApplicationLink)
        });
        /**
         * Adds a link to an application
         */
        Object.defineProperty(this, "addLinkInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationLinkControllersave)
        });
        /**
         * Deletes a link from an application
         */
        Object.defineProperty(this, "removeLinkFromApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationLinkControllerdelete)
        });
        /**
         * Updates a link from an application
         */
        Object.defineProperty(this, "updateLinkInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationLinkControllerupdate)
        });
        /**
         * Updates application links visibility
         */
        Object.defineProperty(this, "updateLinkVisibilityInApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(applicationLinkControllerupdateLinksVisibility)
        });
        /**
         * Gets shared infra link
         */
        Object.defineProperty(this, "linkInInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(sharedInfraLinkControllergetSharedInfraLink)
        });
        /**
         * Adds a link to an infra
         */
        Object.defineProperty(this, "addLinkInInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(sharedInfraLinkControllersave)
        });
        /**
         * Deletes a link from an infra
         */
        Object.defineProperty(this, "removeLinkFromInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(sharedInfraLinkControllerdelete)
        });
        /**
         * Updates a link from an infra
         */
        Object.defineProperty(this, "updateLinkInInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(sharedInfraLinkControllerupdate)
        });
        /**
        * Updates infra links visibility
        */
        Object.defineProperty(this, "updateLinkVisibilityInInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.mutation(sharedInfraLinkControllerupdateLinksVisibility)
        });
        /**
         * Gets stacks in a workspace. This fn is only used for permission purposes.
         */
        Object.defineProperty(this, "stacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceStackControllergetStacks)
        });
        /**
         * List workspace context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
         */
        Object.defineProperty(this, "listConsolidatedWorkspaceContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextControllerlistConsolidatedContext)
        });
        /**
         * List account context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
         */
        Object.defineProperty(this, "listConsolidatedContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextControllerlistAccountContext)
        });
        /**
         * Save workspace context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
         */
        Object.defineProperty(this, "saveContextInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextV2ControlleraddTypedContextInWorkspace)
        });
        /**
         * Save workspace context inputs for a plugin or action in the account. This fn is only used for permission purposes.
         */
        Object.defineProperty(this, "saveContextInAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(contextV2ControlleraddTypedContextInAccount)
        });
        /**
          * Add stack to workspace. This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "addStackInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceStackControlleraddStack)
        });
        /**
          * Removes a stack from a workspace. This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "removeStackFromWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceStackControllerdeleteStack)
        });
        /**
          * Gets a stack in a workspace . This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "stackInWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceStackControllergetStackById)
        });
        /**
          * Deletes a workspace . This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "deleteWorkspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceControllerdelete)
        });
        /**
          * Deletes an application. This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "deleteApplication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceApplicationControllerdeleteApplication)
        });
        /**
          * Deletes an infra. This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "deleteInfra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceSharedInfrastructureControllerdeleteSharedInfra)
        });
        /**
          * Gets the detail of an application. This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "applicationDetail", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceApplicationControllergetApplication)
        });
        /**
          * Gets the detail of an infra. This fn is only used for permission purposes.
          */
        Object.defineProperty(this, "infraDetail", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceSharedInfrastructureControllergetSharedInfrastructure)
        });
        /**
         * Get all workspaces without stack version and favorites filter
         */
        Object.defineProperty(this, "getWorkspacesWithoutStackFilter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.query(workspaceV2ControllergetWorkspacesWithoutStackFilter)
        });
    }
    buildStackSpotError(error) {
        return new DefaultAPIError(error.data, error.status, workspaceDictionary, error.headers);
    }
}
export const workspaceClient = new WorkspaceClient();
//# sourceMappingURL=workspace.js.map