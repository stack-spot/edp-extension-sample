import { HttpError } from '@oazapfts/runtime';
import { StackspotAPIError } from '../error/StackspotAPIError.js';
import { ReactQueryNetworkClient } from '../network/ReactQueryNetworkClient.js';
import { OperationObject } from '../network/types.js';
declare class WorkspaceClient extends ReactQueryNetworkClient {
    constructor();
    protected buildStackSpotError(error: HttpError): StackspotAPIError;
    /**
     * Gets all connection interfaces from a workspace
     */
    allConnectionInterfaces: import("../network/types.js").QueryObject<{
        workspaceId: string;
        typeId?: string | undefined;
    }, import("../api/workspace.js").ConnectionInterfaceSummaryResponse[]>;
    /**
     * Gets a connection interface from a workspace
     */
    connectionInterface: import("../network/types.js").QueryObject<{
        workspaceId: string;
        connectionInterfaceId: string;
        environmentId?: string | undefined;
    }, import("../api/workspace.js").ConnectionInterfaceDetailsResponse>;
    /**
     * Get available connection interface for a workspace by connection interface slug
     */
    workspaceAvailableConnInterfaceBySlug: import("../network/types.js").QueryObject<{
        workspaceId: string;
        slug: string;
        environmentId?: string | undefined;
        accountId?: string | undefined;
    }, import("../api/workspace.js").ConnectionInterfaceDetailsV2Response>;
    /**
     * Get available connection interface for an application by connection interface slug
     */
    applicationAvailableConnInterface: import("../network/types.js").QueryObject<{
        applicationId: string;
        slug: string;
        environmentId?: string | undefined;
    }, import("../api/workspace.js").ConnectionInterfaceDetailsV2Response>;
    /**
     * Updates the visibility of a connection interface
     */
    updateConnectionInterfaceVisibility: import("../network/types.js").MutationObject<{
        workspaceId: string;
        connectionInterfaceId: string;
        updateConnectionInterfaceVisibilityRequest: import("../api/workspace.js").UpdateConnectionInterfaceVisibilityRequest;
    }, unknown>;
    /**
     * Removes a connection interface
     */
    deleteConnectionInterface: import("../network/types.js").MutationObject<{
        workspaceId: string;
        slug: string;
    }, unknown>;
    /**
     * Removes connection interface attributes by environment
     */
    deleteConnectionInterfaceAttributesFromEnvironment: import("../network/types.js").MutationObject<{
        workspaceId: string;
        slug: string;
        environmentId: string;
    }, unknown>;
    /**
     * Updates the attributes of a connection interface
     */
    updateConnectionInterfaceAttributes: import("../network/types.js").MutationObject<{
        workspaceId: string;
        connectionInterfaceId: string;
        updateConnectionInterfaceAttributesRequest: import("../api/workspace.js").UpdateConnectionInterfaceAttributesRequest;
    }, unknown>;
    /**
     * Checks the availability of a connection interface slug.
     */
    checkConnectionInterfaceAvailability: import("../network/types.js").QueryObject<{
        slug: string;
        applicationId?: string | undefined;
        sharedInfraId?: string | undefined;
    }, import("../api/workspace.js").CheckConnectionSlugAvailabilityResponse>;
    /**
     * Gets all environments
     */
    environments: import("../network/types.js").QueryObject<{
        accountId?: string | undefined;
    }, import("../api/workspace.js").EnvironmentReadResponse[]>;
    /**
     * Gets environment by Id
     */
    environment: import("../network/types.js").QueryObject<{
        id: string;
    }, import("../api/workspace.js").EnvironmentReadResponse>;
    /**
     * Creates an environment
     */
    createEnvironment: import("../network/types.js").MutationObject<{
        environmentSaveRequest: import("../api/workspace.js").EnvironmentSaveRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Updates environment data
     */
    updateEnvironment: import("../network/types.js").MutationObject<{
        id: string;
        environmentUpdateRequest: import("../api/workspace.js").EnvironmentUpdateRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Gets embedded link by id
     */
    embeddedLinkInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
        embeddedLinkId: string;
    }, import("../api/workspace.js").WorkspaceEmbeddedLinkReadResponse>;
    /**
     * Gets all embedded links from a workspace
     */
    allEmbeddedLinksInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
        name?: string | undefined;
    }, import("../api/workspace.js").WorkspaceEmbeddedLinkReadResponse[]>;
    /**
     * Creates an embedded link in a workspace
     */
    createEmbeddedLinkInWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        createWorkspaceEmbeddedLinkRequest: import("../api/workspace.js").CreateWorkspaceEmbeddedLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Deletes an embedded link from a workspace
     */
    deleteEmbeddedLinkFromWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        embeddedLinkId: string;
    }, unknown>;
    /**
     * Updates an embedded link from a workspace
     */
    updateEmbeddedLinkInWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        embeddedLinkId: string;
        updateWorkspaceEmbeddedLinkRequest: import("../api/workspace.js").UpdateWorkspaceEmbeddedLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Updates all embedded links from a workspace
     */
    updateAllEmbeddedLinksInWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        body: import("../api/workspace.js").UpsertWorkspaceEmbeddedLinkRequest[];
    }, unknown>;
    /**
     * Gets an embedded link from an application
     */
    embeddedLinkInApplication: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
        embeddedLinkId: string;
    }, import("../api/workspace.js").ApplicationEmbeddedLinkReadResponse>;
    /**
     * Gets all embedded links from an application
     */
    allEmbeddedLinksInApplication: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
        name?: string | undefined;
    }, import("../api/workspace.js").ApplicationEmbeddedLinkReadResponse[]>;
    /**
     * Creates an embedded link in an application
     */
    createEmbeddedLinkInApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        createApplicationEmbeddedLinkRequest: import("../api/workspace.js").CreateApplicationEmbeddedLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Deletes an embedded link from an application
     */
    deleteEmbeddedLinkFromApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        embeddedLinkId: string;
    }, unknown>;
    /**
     * Updates an embedded link in an application
     */
    updateEmbeddedLinkInApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        embeddedLinkId: string;
        updateApplicationEmbeddedLinkRequest: import("../api/workspace.js").UpdateApplicationEmbeddedLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Updates all embedded links in an application
     */
    updateAllEmbeddedLinksInApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        body: import("../api/workspace.js").UpsertApplicationEmbeddedLinkRequest[];
    }, unknown>;
    /**
     * Gets all workspaces
     */
    workspaces: import("../network/types.js").QueryObject<{
        name?: string | undefined;
        aclOnly?: boolean | undefined;
        accountId?: string | undefined;
    }, import("../api/workspace.js").WorkspaceReadResponse[]>;
    /**
     * Gets a workspace
     */
    workspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
    }, import("../api/workspace.js").WorkspaceReadResponse>;
    /**
     * Get workspaces within user permission
     */
    workspacesFromUserPermission: import("../network/types.js").QueryObject<{
        resource: string;
        action: string;
    }, import("../api/workspace.js").WorkspaceReadResponse[]>;
    /**
     * Creates a workspace
     */
    createWorkspace: import("../network/types.js").MutationObject<{
        newWorkspaceRequest: import("../api/workspace.js").NewWorkspaceRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Updates a workspace
     */
    updateWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        updateWorkspaceRequest: import("../api/workspace.js").UpdateWorkspaceRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Gets all applications in a Workspace
     */
    applications: import("../network/types.js").QueryObject<{
        workspaceId: string;
        name?: string | undefined;
        stackVersionId?: string | undefined;
    }, import("../api/workspace.js").ApplicationReadResponse[]>;
    /**
     * Gets an application
     */
    application: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
    }, import("../api/workspace.js").ApplicationReadResponse>;
    /**
     * Gets the dependencies of an application
     */
    applicationDependencies: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
    }, import("../api/workspace.js").AppAndInfraDependencyResponse>;
    /**
     * Gets all shared infra in a Workspace
     */
    allSharedInfra: import("../network/types.js").QueryObject<{
        workspaceId: string;
        name?: string | undefined;
        stackVersionId?: string | undefined;
    }, import("../api/workspace.js").SharedInfraDetailsResponse[]>;
    /**
     * Gets a shared infra
     */
    sharedInfra: import("../network/types.js").QueryObject<{
        workspaceId: string;
        sharedInfraId: string;
    }, import("../api/workspace.js").SharedInfraDetailsResponse>;
    /**
     * Gets the dependencies of a shared infra
     */
    sharedInfraDependencies: import("../network/types.js").QueryObject<{
        workspaceId: string;
        sharedInfraId: string;
    }, import("../api/workspace.js").AppAndInfraDependencyResponse>;
    /**
     * Updates an application
     */
    updateApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        updateApplicationRequest: import("../api/workspace.js").UpdateApplicationRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Updates a shared infra
     */
    updateInfra: import("../network/types.js").MutationObject<{
        workspaceId: string;
        sharedInfraId: string;
        updateSharedInfraRequest: import("../api/workspace.js").UpdateSharedInfraRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Gets a workflow by stack id
     */
    workflowsByStackId: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackId: string;
        workflowType: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    }, import("../api/workspace.js").AccountWorkflowResponse>;
    /**
     * Gets account workflows
     */
    accountWorkflows: import("../network/types.js").QueryObject<{
        $type?: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA" | undefined;
        name?: string | undefined;
    }, import("../api/workspace.js").WorkflowResponse[]>;
    /**
     * Gets workflows from a stack
     */
    stackWorkflows: import("../network/types.js").QueryObject<{
        workspaceId: string;
        stackId: string;
        workflowType: "CREATE_API" | "CREATE_APP" | "CREATE_INFRA";
    }, import("../api/workspace.js").AccountWorkflowResponse>;
    /**
     * Removes account workflow
     */
    deleteAccountWorkflow: import("../network/types.js").MutationObject<{
        workflowId: string;
    }, unknown>;
    /**
     * Find all account variables
     */
    accountVariables: import("../network/types.js").QueryObject<{
        accountId?: string | undefined;
        name?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "NAME" | "CREATED_AT" | "VALUE" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
    }, import("../api/workspace.js").PaginatedAccountVariableResponse>;
    /**
     * Get an account variable by name
     */
    getAccountVariable: import("../network/types.js").QueryObject<{
        accountId?: string | undefined;
        name: string;
    }, import("../api/workspace.js").AccountVariableResponse>;
    /**
     * Get account variable usage
     */
    accountVariableUsage: import("../network/types.js").QueryObject<{
        accountId?: string | undefined;
        name: string;
    }, import("../api/workspace.js").AccountVariableUsageResponse>;
    /**
     * Create account variable
     */
    createAccountVariable: import("../network/types.js").MutationObject<{
        createAccountVariableRequest: import("../api/workspace.js").CreateAccountVariableRequest;
    }, unknown>;
    /**
     * Update account variable
     */
    updateAccountVariable: import("../network/types.js").MutationObject<{
        name: string;
        updateAccountVariableRequest: import("../api/workspace.js").UpdateAccountVariableRequest;
    }, unknown>;
    /**
     * Delete account variable
     */
    deleteAccountVariable: import("../network/types.js").MutationObject<{
        name: string;
    }, unknown>;
    /**
     * Find all workspace variables
     */
    workspaceVariables: import("../network/types.js").QueryObject<{
        workspaceId: string;
        accountId?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "NAME" | "CREATED_AT" | "VALUE" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
        mandate?: boolean | undefined;
        name?: string | undefined;
        showEmptyValues?: boolean | undefined;
    }, import("../api/workspace.js").PaginatedWorkspaceVariableResponse>;
    /**
     * Get a workspace variable by name
     */
    getWorkspaceVariable: import("../network/types.js").QueryObject<{
        accountId?: string | undefined;
        workspaceId: string;
        name: string;
    }, import("../api/workspace.js").WorkspaceVariableResponse>;
    /**
     * Updates workspace variable based on existing account variable
     */
    updateWorkspaceVariable: import("../network/types.js").MutationObject<{
        workspaceId: string;
        name: string;
        upsertWorkspaceVariableRequest: import("../api/workspace.js").UpsertWorkspaceVariableRequest;
    }, unknown>;
    /**
     * Gets shared infra links
     */
    linksInWorkspace: import("../network/types.js").QueryObject<{
        workspaceId: string;
        name?: string | undefined;
    }, import("../api/workspace.js").WorkspaceLinkReadResponse[]>;
    /**
     * Adds a link to a workspace
     */
    addLinkInWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        createWorkspaceLinkRequest: import("../api/workspace.js").CreateWorkspaceLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Deletes a link from a workspace
     */
    removeLinkFromWorkspace: import("../network/types.js").MutationObject<{
        workspaceId: string;
        linkId: string;
    }, unknown>;
    /**
     * Gets application link
     */
    linkInApplication: import("../network/types.js").QueryObject<{
        workspaceId: string;
        applicationId: string;
        linkId: string;
    }, import("../api/workspace.js").ApplicationLinkReadResponse>;
    /**
     * Adds a link to an application
     */
    addLinkInApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        createApplicationLinkRequest: import("../api/workspace.js").CreateApplicationLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Deletes a link from an application
     */
    removeLinkFromApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        linkId: string;
    }, unknown>;
    /**
     * Updates a link from an application
     */
    updateLinkInApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        linkId: string;
        updateApplicationLinkRequest: import("../api/workspace.js").UpdateApplicationLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Updates application links visibility
     */
    updateLinkVisibilityInApplication: import("../network/types.js").MutationObject<{
        workspaceId: string;
        applicationId: string;
        body: import("../api/workspace.js").UpdateApplicationLinkVisibilityRequest[];
    }, unknown>;
    /**
     * Gets shared infra link
     */
    linkInInfra: import("../network/types.js").QueryObject<{
        workspaceId: string;
        sharedInfraId: string;
        linkId: string;
    }, import("../api/workspace.js").SharedInfraLinkReadResponse>;
    /**
     * Adds a link to an infra
     */
    addLinkInInfra: import("../network/types.js").MutationObject<{
        workspaceId: string;
        sharedInfraId: string;
        createSharedInfraLinkRequest: import("../api/workspace.js").CreateSharedInfraLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
     * Deletes a link from an infra
     */
    removeLinkFromInfra: import("../network/types.js").MutationObject<{
        workspaceId: string;
        sharedInfraId: string;
        linkId: string;
    }, unknown>;
    /**
     * Updates a link from an infra
     */
    updateLinkInInfra: import("../network/types.js").MutationObject<{
        workspaceId: string;
        sharedInfraId: string;
        linkId: string;
        updateSharedInfraLinkRequest: import("../api/workspace.js").UpdateSharedInfraLinkRequest;
    }, import("../api/workspace.js").IdResponse>;
    /**
    * Updates infra links visibility
    */
    updateLinkVisibilityInInfra: import("../network/types.js").MutationObject<{
        workspaceId: string;
        sharedInfraId: string;
        body: import("../api/workspace.js").UpdateSharedInfraLinkVisibilityRequest[];
    }, unknown>;
    /**
     * Gets stacks in a workspace. This fn is only used for permission purposes.
     */
    stacks: OperationObject<{
        workspaceId: string;
    }>;
    /**
     * List workspace context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
     */
    listConsolidatedWorkspaceContext: OperationObject<{
        workspaceId: string;
        stackVersionId: string;
        $type: "action" | "plugin";
        envName?: string | undefined;
        externalId?: string | undefined;
    }>;
    /**
     * List account context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
     */
    listConsolidatedContext: OperationObject<{
        stackVersionId: string;
        $type: "action" | "plugin";
        envName?: string | undefined;
        externalId?: string | undefined;
    }>;
    /**
     * Save workspace context inputs for a plugin or action in a stack. This fn is only used for permission purposes.
     */
    saveContextInWorkspace: OperationObject<{
        workspaceId: string;
        stackVersionId: string;
        externalId: string;
        $type: "action" | "plugin";
        contextValuesRequest: import("../api/workspace.js").ContextValuesRequest;
    }>;
    /**
     * Save workspace context inputs for a plugin or action in the account. This fn is only used for permission purposes.
     */
    saveContextInAccount: OperationObject<{
        stackVersionId: string;
        externalId: string;
        $type: "action" | "plugin";
        contextValuesRequest: import("../api/workspace.js").ContextValuesRequest;
    }>;
    /**
      * Add stack to workspace. This fn is only used for permission purposes.
      */
    addStackInWorkspace: OperationObject<{
        workspaceId: string;
        addStackInWorkspaceRequest: import("../api/workspace.js").AddStackInWorkspaceRequest;
    }>;
    /**
      * Removes a stack from a workspace. This fn is only used for permission purposes.
      */
    removeStackFromWorkspace: OperationObject<{
        workspaceId: string;
        stackVersionId: string;
    }>;
    /**
      * Gets a stack in a workspace . This fn is only used for permission purposes.
      */
    stackInWorkspace: OperationObject<{
        workspaceId: string;
        stackVersionId: string;
    }>;
    /**
      * Deletes a workspace . This fn is only used for permission purposes.
      */
    deleteWorkspace: OperationObject<{
        workspaceId: string;
    }>;
    /**
      * Deletes an application. This fn is only used for permission purposes.
      */
    deleteApplication: OperationObject<{
        workspaceId: string;
        applicationId: string;
        accountId?: string | undefined;
    }>;
    /**
      * Deletes an infra. This fn is only used for permission purposes.
      */
    deleteInfra: OperationObject<{
        workspaceId: string;
        sharedInfraId: string;
    }>;
    /**
      * Gets the detail of an application. This fn is only used for permission purposes.
      */
    applicationDetail: OperationObject<{
        workspaceId: string;
        applicationId: string;
    }>;
    /**
      * Gets the detail of an infra. This fn is only used for permission purposes.
      */
    infraDetail: OperationObject<{
        workspaceId: string;
        sharedInfraId: string;
    }>;
    /**
     * Get all workspaces without stack version and favorites filter
     */
    getWorkspacesWithoutStackFilter: import("../network/types.js").QueryObject<{
        name?: string | undefined;
        aclOnly?: boolean | undefined;
        accountId?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sortBy?: "NAME" | "DESCRIPTION" | undefined;
        sortDir?: "ASC" | "DESC" | undefined;
    }, import("../api/workspace.js").WorkspacePageResponse>;
}
export declare const workspaceClient: WorkspaceClient;
export {};
//# sourceMappingURL=workspace.d.ts.map