import defaultTheme from '@citric/core/dist/default-theme'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import Status from '../src/Status'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Status component', () => {
  const { container } = render(<Status>Status</Status>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c1 {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      flex-wrap: wrap;
    }

    .c2 {
      display: flex;
      height: 0.75rem;
      width: 0.75rem;
      background-color: #FF6633;
      border-radius: 600rem;
      margin-left: 0.25rem;
      margin-right: 0.25rem;
    }

    .c0 {
      display: inline-flex;
      align-items: center;
      font: 400 0.75rem/1.333 Roboto,sans-serif;
    }

    <div
      class="c0"
    >
      <span
        class="c1"
      >
        Status
      </span>
      <div
        class="c2"
      />
    </div>
  `)
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(<Status colorScheme={colorSchemeName}>foo</Status>)
    const colorScheme = defaultTheme.colorScheme[colorSchemeName][500]

    expect(container.firstChild?.lastChild).toHaveStyleRule('background-color', colorScheme)
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Status', 'base', {
      padding: '100px',
    })

    const { container } = render(<Status>foo</Status>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Status', 'overwrite', {
      backgroundColor: 'aqua',
    })

    const { container } = render(<Status colorScheme="primary">foo</Status>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Status sx={{ display: 'block' }}>foo</Status>)

    expect(container.firstChild).toHaveStyleRule('display', 'block')
  })
})
