import { defaultTheme } from '@citric/core'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import { Toast, ToastButton } from '../src/Toast'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

describe('Toast component', () => {
  it('should render a Toast', () => {
    const { container } = render(<Toast>foo</Toast>)

    expect(container.firstChild).toMatchInlineSnapshot(`
      .c0 {
        position: fixed;
        z-index: 2000;
        width: 21rem;
        box-sizing: border-box;
        top: 0.75rem;
        right: 0.75rem;
        border-radius: 0.25rem;
        background-color: #FF6633;
        color: #000000;
      }

      <div
        class="c0"
      >
        foo
      </div>
    `)
  })

  it('should render a Toast spreading props in root element', () => {
    const { container } = render(<Toast id="bar">foo</Toast>)

    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render a Toast using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<Toast ref={ref}>foo</Toast>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render a Toast using AsProp', () => {
    const { container } = render(
      <Toast as="a" href="#">
        foo
      </Toast>,
    )

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })
})

describe('ToastButton component', () => {
  it('should render a ToastButton', () => {
    const { container } = render(<ToastButton>foo</ToastButton>)

    expect(container).toMatchInlineSnapshot(`
.c0 {
  box-sizing: border-box;
  display: inline-flex;
  border-radius: 100%;
  cursor: pointer;
  align-items: center;
  justify-content: center;
  border: none;
  padding: 0.375rem;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  border-radius: 0.25rem;
  width: fit-content;
  height: fit-content;
  background-color: transparent;
}

.c0:disabled {
  pointer-events: none;
}

.c0:disabled >svg {
  opacity: 0.24;
}

.c0 >svg {
  width: 0.75rem;
  height: 0.75rem;
  display: inline;
  fill: #FAFAFB;
}

.c0:hover,
.c0:focus {
  background-color: color-mix(in srgb, #FAFAFB 20%, transparent);
  border-color: color-mix(in srgb, #FAFAFB 20%, transparent);
}

.c1 {
  position: absolute;
  right: 0.5rem;
  top: 0.5rem;
}

<div>
  <button
    class="c0 c1"
  >
    foo
  </button>
</div>
`)
  })

  it('should render a ToastButton spreading props in root element', () => {
    const { container } = render(<ToastButton id="bar">foo</ToastButton>)

    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render a ToastButton using ref', () => {
    const ref = createRef<HTMLButtonElement>()
    const { container } = render(<ToastButton ref={ref}>foo</ToastButton>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render a ToastButton using AsProp', () => {
    const { container } = render(
      <ToastButton as="a" href="#">
        foo
      </ToastButton>,
    )

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(<Toast colorScheme={colorSchemeName}>foo</Toast>)
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild).toHaveStyleRule('background-color', colorScheme['500'])
    expect(container.firstChild).toHaveStyleRule('color', colorScheme.contrastText)
  })
})

describe('Component Style Toast', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Toast', 'base', {
      padding: '100px',
    })

    const { container } = render(<Toast>foo</Toast>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Toast', 'overwrite', {
      display: 'block',
    })

    const { container } = render(<Toast>foo</Toast>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('display', 'block')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<Toast sx={{ color: 'aliceblue' }}>foo</Toast>)

    expect(container.firstChild).toHaveStyleRule('color', 'aliceblue')
  })
})

describe('Component Style ToastButton', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('ToastButton', 'base', {
      padding: '100px',
    })

    const { container } = render(<ToastButton>foo</ToastButton>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('ToastButton', 'overwrite', {
      display: 'block',
    })

    const { container } = render(<ToastButton>foo</ToastButton>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('display', 'block')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<ToastButton sx={{ color: 'aliceblue' }}>foo</ToastButton>)

    expect(container.firstChild).toHaveStyleRule('color', 'aliceblue')
  })
})
