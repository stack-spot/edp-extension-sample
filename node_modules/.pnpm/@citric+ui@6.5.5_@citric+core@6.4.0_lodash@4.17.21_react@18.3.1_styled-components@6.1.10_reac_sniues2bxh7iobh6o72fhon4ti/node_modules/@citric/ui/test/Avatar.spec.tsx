import { defaultTheme } from '@citric/core'
import { OneOfPalettes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import Avatar from '../src/Avatar'
import { buildThemeWithComponents, render } from './react'


const palettes = Object.keys(defaultTheme.palette) as OneOfPalettes[]

test('should render a Avatar component', () => {
  const { container } = render(<Avatar>Jane Doe</Avatar>)

  expect(container.firstChild).toMatchInlineSnapshot(`
.c0 {
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  overflow: hidden;
  border-radius: 600rem;
  font-family: Montserrat,sans-serif;
  font-weight: 700;
  background-color: #1D1B85;
  color: #D7D6FF;
  width: 5rem;
  height: 5rem;
  font-size: 1.5rem;
  line-height: 2.25rem;
}

.c0 img {
  width: 5rem;
  height: 5rem;
  font-size: 1.5rem;
  line-height: 2.25rem;
  object-fit: cover;
}

<div
  class="c0"
>
  JD
</div>
`)
})

test('should render a Avatar spreading props in root element', () => {
  const { container } = render(<Avatar id="foo">Jane Doe</Avatar>)

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a image', () => {
  const { getByRole, getByAltText } = render(
    <Avatar id="foo">
      <img src="https://citric.design/static/media/citric.b3f6e642.svg" alt="logo-citric" />
    </Avatar>,
  )

  expect(getByRole('img')).toHaveAttribute(
    'src',
    'https://citric.design/static/media/citric.b3f6e642.svg',
  )
  expect(getByRole('img')).toBeTruthy()
  expect(getByAltText('logo-citric')).toBeTruthy()
})

test('should render a Avatar using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Avatar ref={ref}>Jane Doe</Avatar>)

  expect(ref.current).toBe(container.firstChild)
})

describe('Palette Prop', () => {
  test.each(palettes)('as %s', (paletteName) => {
    const { container } = render(<Avatar palette={paletteName}>Jane Doe</Avatar>)
    const palette = defaultTheme.palette[paletteName]

    expect(container.firstChild).toHaveStyleRule('background-color', palette[800])
    expect(container.firstChild).toHaveStyleRule('color', palette[50])
  })
})

describe('Apearance Prop', () => {
  test('as circle', () => {
    const { container } = render(<Avatar appearance="circle">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('border-radius', '600rem')
  })
  test('as square', () => {
    const { container } = render(<Avatar appearance="square">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('border-radius', '0.5rem')
  })
})

describe('Size Prop', () => {
  test('as small', () => {
    const { container } = render(<Avatar size="xs">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('width', '2rem')
    expect(container.firstChild).toHaveStyleRule('height', '2rem')
    expect(container.firstChild).toHaveStyleRule('font-size', '0.75rem')
    expect(container.firstChild).toHaveStyleRule('line-height', '1rem')
  })
  test('as medium', () => {
    const { container } = render(<Avatar size="sm">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('width', '3rem')
    expect(container.firstChild).toHaveStyleRule('height', '3rem')
    expect(container.firstChild).toHaveStyleRule('font-size', '1rem')
    expect(container.firstChild).toHaveStyleRule('line-height', '2rem')
  })
  test('as large', () => {
    const { container } = render(<Avatar size="md">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('width', '4rem')
    expect(container.firstChild).toHaveStyleRule('height', '4rem')
    expect(container.firstChild).toHaveStyleRule('font-size', '1.25rem')
    expect(container.firstChild).toHaveStyleRule('line-height', '2rem')
  })
  test('as huge', () => {
    const { container } = render(<Avatar size="lg">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('width', '5rem')
    expect(container.firstChild).toHaveStyleRule('height', '5rem')
    expect(container.firstChild).toHaveStyleRule('font-size', '1.5rem')
    expect(container.firstChild).toHaveStyleRule('line-height', '2.25rem')
  })
  test('as astronomic', () => {
    const { container } = render(<Avatar size="xl">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('width', '8rem')
    expect(container.firstChild).toHaveStyleRule('height', '8rem')
    expect(container.firstChild).toHaveStyleRule('font-size', '2rem')
    expect(container.firstChild).toHaveStyleRule('line-height', '4rem')
  })
  test('as galactic', () => {
    const { container } = render(<Avatar size="xxl">Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('width', '12rem')
    expect(container.firstChild).toHaveStyleRule('height', '12rem')
    expect(container.firstChild).toHaveStyleRule('font-size', '3.5rem')
    expect(container.firstChild).toHaveStyleRule('line-height', '5.5rem')
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Avatar', 'base', {
      padding: '100px',
    })

    const { container } = render(<Avatar>Jane Doe</Avatar>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Avatar', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(<Avatar>Jane Doe</Avatar>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Avatar sx={{ color: 'aquamarine' }}>Jane Doe</Avatar>)

    expect(container.firstChild).toHaveStyleRule('color', 'aquamarine')
  })
})
