import { fireEvent } from '@testing-library/dom'
import 'jest-styled-components'
import { createRef } from 'react'
import { Tabs, TabsItem } from '../src/Tabs'
import { buildThemeWithComponents, render } from './react'

test('should render a Tabs component', () => {
  const { container } = render(
    <Tabs>
      <TabsItem title="tab 1">Texto 1</TabsItem>
      <TabsItem title="tab 2">Texto 2</TabsItem>
    </Tabs>,
  )
  expect(container.firstChild).toMatchInlineSnapshot(`
.c2 {
  height: fit-content;
  display: inline-flex;
  border-radius: 0.25rem;
  align-items: center;
  user-select: none;
  text-decoration: none;
  box-sizing: border-box;
  justify-content: center;
  cursor: pointer;
  border-width: 1px;
  border-style: solid;
  white-space: nowrap;
  font: 500 1rem/1.5 Roboto,sans-serif;
  color: #000000;
  background-color: #FF6633;
  border-color: #FF6633;
  padding-inline: 0.75rem;
  padding-block: 0.5rem;
  margin-top: 0.219rem;
  padding-bottom: 0.281rem;
  padding-inline: 2rem;
  cursor: pointer;
  color: #FAFAFB;
  background-color: transparent;
  border: none;
  position: relative;
}

.c1+.c1 {
  margin-left: 0.5rem;
}

.c2:active,
.c2:focus,
.c2:hover {
  background-color: #FF9775;
  border-color: #FF9775;
}

.c2:hover,
.c2:focus,
.c2:active {
  background-color: transparent;
  border-color: transparent;
}

.c2::after {
  content: "";
  width: 100%;
  height: 2px;
  background-color: #FF6633;
  bottom: 0px;
  position: absolute;
}

.c4 {
  height: fit-content;
  display: inline-flex;
  border-radius: 0.25rem;
  align-items: center;
  user-select: none;
  text-decoration: none;
  box-sizing: border-box;
  justify-content: center;
  cursor: pointer;
  border-width: 1px;
  border-style: solid;
  white-space: nowrap;
  font: 500 1rem/1.5 Roboto,sans-serif;
  color: #000000;
  background-color: #FF6633;
  border-color: #FF6633;
  padding-inline: 0.75rem;
  padding-block: 0.5rem;
  margin-top: 0.219rem;
  padding-bottom: 0.281rem;
  padding-inline: 2rem;
  cursor: pointer;
  color: #FAFAFB;
  background-color: transparent;
  border: none;
  position: relative;
}

.c1+.c1 {
  margin-left: 0.5rem;
}

.c4:active,
.c4:focus,
.c4:hover {
  background-color: #FF9775;
  border-color: #FF9775;
}

.c4:hover,
.c4:focus,
.c4:active {
  background-color: transparent;
  border-color: transparent;
}

.c4::after {
  content: "";
  width: 100%;
  height: 2px;
  background-color: transparent;
  bottom: 0px;
  position: absolute;
}

.c3 {
  margin: 0;
  font: 400 0.875rem/1.714 Roboto,sans-serif;
  font-weight: 500;
}

.c5 {
  margin: 0;
  font: 400 0.875rem/1.714 Roboto,sans-serif;
}

.c0 {
  list-style-type: none;
  display: flex;
  flex-direction: row;
  border-bottom: 0.063rem solid #2F2F3C;
}

<nav
  class="c0"
  role="tablist"
>
  <button
    aria-selected="true"
    class="c1 c2"
    role="tab"
    type="button"
  >
    <span
      class="c3"
    >
      tab 1
    </span>
  </button>
  <button
    aria-selected="false"
    class="c1 c4"
    role="tab"
    type="button"
  >
    <span
      class="c5"
    >
      tab 2
    </span>
  </button>
</nav>
`)
})

test('should render Tabs spreading props', () => {
  const { container } = render(
    <Tabs id="foo">
      <TabsItem title="tab 1" id="bar">
        Texto 1
      </TabsItem>
      <TabsItem title="tab 2">Texto 2</TabsItem>
    </Tabs>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'foo')
  expect(container.childNodes[1]).toHaveAttribute('id', 'bar')
})

test('should render Tabs using ref', () => {
  const refTabs = createRef<HTMLDivElement>()
  const refTabsItem = createRef<HTMLDivElement>()
  const { container } = render(
    <Tabs ref={refTabs}>
      <TabsItem title="tab 1" ref={refTabsItem}>
        Texto 1
      </TabsItem>
      <TabsItem title="tab 2">Texto 2</TabsItem>
    </Tabs>,
  )

  expect(refTabs.current).toBe(container.firstChild)
  expect(refTabsItem.current).toBe(container.childNodes[1])
})

test('should render Tab selected by activeIndex', () => {
  const { container } = render(
    <Tabs activeIndex={1}>
      <TabsItem title="tab 1">Texto 1</TabsItem>
      <TabsItem title="tab 2">Texto 2</TabsItem>
    </Tabs>,
  )

  expect(container.firstChild?.childNodes[0]).toHaveAttribute('aria-selected', 'false')
  expect(container.firstChild?.childNodes[1]).toHaveAttribute('aria-selected', 'true')
})

test('should call onChange when TabsItem was clicked', () => {
  const onChange = jest.fn()
  const { container } = render(
    <Tabs onChange={onChange}>
      <TabsItem title="tab 1">Texto 1</TabsItem>
      <TabsItem title="tab 2">Texto 2</TabsItem>
    </Tabs>,
  )

  // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
  fireEvent.click(container.firstChild?.childNodes[1].firstChild!)

  expect(onChange).toHaveBeenCalledWith(1)
})

describe('Component Style', () => {
  const buildTheme = (type: string, style: Record<string, string>) =>
    buildThemeWithComponents('TabsItem', type, style)

  it('extends style from theme', () => {
    const theme = buildTheme('base', { marginTop: '10px' })
    const { container } = render(<TabsItem title="tab 1">Texto 1</TabsItem>, { theme })

    expect(container.firstChild).toHaveStyleRule('margin-top', '10px')
  })

  it('overwrite style from theme', () => {
    const theme = buildTheme('overwrite', { marginTop: '10px' })
    const { container } = render(<TabsItem title="tab 1">Texto 1</TabsItem>, { theme })

    expect(container.firstChild).toHaveStyleRule('margin-top', '10px')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(
      <TabsItem sx={{ borderColor: 'mediumpurple' }} title="tab 1">
        Texto 1
      </TabsItem>,
    )
    expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
  })
})
