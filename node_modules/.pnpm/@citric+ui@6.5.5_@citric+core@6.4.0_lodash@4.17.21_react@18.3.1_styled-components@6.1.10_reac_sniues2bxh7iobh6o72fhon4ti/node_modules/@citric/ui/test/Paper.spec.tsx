import { alias } from '@citric/core/dist/sx'
import 'jest-styled-components'
import { createElement, createRef } from 'react'
import Paper from '../src/Paper'
import { buildThemeWithComponents, render } from './react'

test('should render a Paper component', () => {
  const { container } = render(<Paper>foo</Paper>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      padding: 1.5rem;
      box-sizing: border-box;
      background-color: #14141A;
      border: 1px solid #262631;
      border-radius: 0.5rem;
    }

    <div
      class="c0"
    >
      foo
    </div>
  `)
})

test('should render a Paper spreading props in root element', () => {
  const { container } = render(<Paper id="bar">foo</Paper>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Paper using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Paper ref={ref}>foo</Paper>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Paper using AsProp', () => {
  const { container } = render(
    <Paper as="a" href="#">
      foo
    </Paper>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

describe('Sx Alias as props', () => {
  it.each(Object.entries(alias))('%s', (sxAlias, property) => {
    const { container } = render(createElement(Paper, { [sxAlias]: 'foo' }, 'bar'))
    expect(container.firstChild).toHaveStyle({ [property]: 'foo' })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Paper', 'base', {
      padding: '100px',
    })

    const { container } = render(<Paper>foo</Paper>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Paper', 'overwrite', {
      backgroundColor: 'aliceblue',
    })

    const { container } = render(<Paper>foo</Paper>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aliceblue')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Paper sx={{ border: '1px solid red' }}>foo</Paper>)

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})
