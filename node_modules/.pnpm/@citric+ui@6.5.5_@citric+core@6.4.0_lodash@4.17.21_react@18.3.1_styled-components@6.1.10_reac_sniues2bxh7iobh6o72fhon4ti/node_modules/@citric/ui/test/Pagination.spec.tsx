import { fireEvent } from '@testing-library/dom'
import { act } from '@testing-library/react'
import 'jest-styled-components'
import usePagination from '../src/Pagination'
import { render } from './react'

const listCard = [
  {
    id: 1,
    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 2,
    title: 'qui est esse',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 3,
    title: 'ea molestias quasi exercitationem repellat qui ipsa sit aut',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 4,
    title: 'eum et est occaecati',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 5,
    title: 'nesciunt quas odio',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 6,
    title: 'dolorem eum magni eos aperiam quia',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 7,
    title: 'magnam facilis autem',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 8,
    title: 'dolorem dolore est ipsam',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 9,
    title: 'nesciunt iure omnis dolorem tempora et accusantium',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 10,
    title: 'optio molestias id quia eum',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 11,
    title: 'et ea vero quia laudantium autem',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 12,
    title: 'in quibusdam tempore odit est dolorem',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 13,
    title: 'dolorum ut in voluptas mollitia et saepe quo animi',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 14,
    title: 'voluptatem eligendi optio',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 15,
    title: 'eveniet quod temporibus',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
  {
    id: 16,
    title: 'sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio',
    body: 'quia et suscipitsuscipit recusandae consequuntur expedita et cumreprehenderit molestiae ut ut quas totamnostrum rerum est autem sunt rem eveniet',
  },
]

const Pagination = () => {
  const {
    numberPages,
    listNumberPages,
    indexPagination,
    canNextPage,
    canPreviousPage,
    canViewMore,
    contentPerPage,
    goToPage,
    previousPage,
    nextPage,
    viewMore,
    setContentPerPage,
  } = usePagination({
    data: listCard,
    initialState: 2,
    contentPerPage: 4,
  })

  return (
    <>
      <p>{`listNumberPages: ${listNumberPages}`}</p>
      <p>numberPages: {numberPages}</p>
      <p data-testid="result-content-per-page">contentPerPage: {contentPerPage}</p>
      <p>indexPagination: {indexPagination}</p>
      <p>canNextPage: {canNextPage ? 'true' : 'false'}</p>
      <p>canPreviousPage: {canPreviousPage ? 'true' : 'false'}</p>
      <p>canViewMore: {canViewMore ? 'true' : 'false'}</p>

      <button onClick={() => setContentPerPage(8)} type="button" data-testid="setContentPage">
        setContentPerPage
      </button>
      <button onClick={() => viewMore(4)} type="button" data-testid="viewMore">
        viewMore
      </button>
      <button onClick={() => previousPage()} type="button" data-testid="previousPage">
        previousPage
      </button>
      <button onClick={() => nextPage()} type="button" data-testid="nextPage">
        nextPage
      </button>
      <button onClick={() => goToPage(4)} type="button" data-testid="goToPage">
        goToPage
      </button>
    </>
  )
}

test('should get number pages', () => {
  const { getByText } = render(<Pagination />)

  expect(getByText('numberPages: 4')).toBeTruthy()
})

test('should call the nextPage function', () => {
  const { getByText } = render(<Pagination />)
  const button = getByText('nextPage')

  expect(getByText('indexPagination: 2')).toBeTruthy()

  act(() => fireEvent.click(button))

  expect(getByText('indexPagination: 3')).toBeTruthy()
})

test('should call the previousPage function', () => {
  const { getByText } = render(<Pagination />)
  const button = getByText('previousPage')

  expect(getByText('indexPagination: 2')).toBeTruthy()

  act(() => fireEvent.click(button))

  expect(getByText('indexPagination: 1')).toBeTruthy()
})

test('should call the goToPage function', () => {
  const { getByText } = render(<Pagination />)
  const button = getByText('goToPage')

  expect(getByText('indexPagination: 2')).toBeTruthy()

  act(() => fireEvent.click(button))

  expect(getByText('indexPagination: 4')).toBeTruthy()
})

test('should call the viewMore function', () => {
  const { getByText } = render(<Pagination />)
  const button = getByText('viewMore')

  expect(getByText('contentPerPage: 4')).toBeTruthy()

  act(() => fireEvent.click(button))

  expect(getByText('contentPerPage: 8')).toBeTruthy()
})

it('should call the setContentPerPage function', () => {
  const { getByText } = render(<Pagination />)
  const button = getByText('setContentPerPage')
  expect(getByText('contentPerPage: 4')).toBeTruthy()
  act(() => fireEvent.click(button))
  expect(getByText('contentPerPage: 8')).toBeTruthy()
})

test('should the canNextPage props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('canNextPage: true')).toBeTruthy()
})

test('should the canPreviousPage props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('canPreviousPage: true')).toBeTruthy()
})

test('should the canViewMore props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('canViewMore: true')).toBeTruthy()
})

test('should the numberPages props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('numberPages: 4')).toBeTruthy()
})

test('should the contentPerPage props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('contentPerPage: 4')).toBeTruthy()
})

test('should the indexPagination props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('indexPagination: 2')).toBeTruthy()
})

test('should the listNumberPages props', () => {
  const { getByText } = render(<Pagination />)
  expect(getByText('listNumberPages: 1,2,3,4')).toBeTruthy()
})
