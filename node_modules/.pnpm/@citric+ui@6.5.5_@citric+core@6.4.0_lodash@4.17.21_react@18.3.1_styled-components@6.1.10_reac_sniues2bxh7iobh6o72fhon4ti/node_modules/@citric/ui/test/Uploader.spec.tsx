import 'jest-styled-components'
import { createRef } from 'react'
import Uploader from '../src/Uploader'
import { buildThemeWithComponents, render } from './react'

test('should render a Uploader component', () => {
  const { container } = render(<Uploader>Uploader</Uploader>)
  const input = container.querySelector('input')

  expect(input).toMatchInlineSnapshot(`
    <input
      type="file"
    />
  `)
})

test('should render a Uploader spreading props in root element', () => {
  const { container } = render(<Uploader id="bar">Uploader</Uploader>)
  const input = container.querySelector('input')

  expect(input).toHaveAttribute('id', 'bar')
})

test('should render a Uploader using ref', () => {
  const ref = createRef<HTMLInputElement>()
  const { container } = render(<Uploader ref={ref}>Uploader</Uploader>)
  const input = container.querySelector('input')

  expect(ref.current).toBe(input)
})

test('should render a Uploader with disabled prop as true', () => {
  const { container } = render(<Uploader disabled>Uploader</Uploader>)

  expect(container.firstChild).toHaveStyleRule('opacity', '0.24')
  expect(container.firstChild).toHaveStyleRule('pointer-events', 'none')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Uploader', 'base', {
      padding: '100px',
    })

    const { container } = render(<Uploader>Uploader</Uploader>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Uploader', 'overwrite', {
      backgroundColor: 'azure',
    })

    const { container } = render(<Uploader>Uploader</Uploader>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'azure')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(
      <Uploader sx={{ backgroundColor: 'aquamarine' }}>Uploader</Uploader>,
    )

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })
})
