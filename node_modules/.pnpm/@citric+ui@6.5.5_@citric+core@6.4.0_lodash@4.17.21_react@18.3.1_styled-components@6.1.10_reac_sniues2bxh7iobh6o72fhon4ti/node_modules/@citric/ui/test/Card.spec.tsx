import 'jest-styled-components'
import { createRef } from 'react'
import { Card, CardContent, CardFooter, CardHeader } from '../src/Card'
import { buildThemeWithComponents, render } from './react'

test('should render a complete Card component', () => {
  const { container } = render(
    <Card>
      <CardHeader>Card Header</CardHeader>
      <CardContent>Card Content</CardContent>
      <CardFooter>Card Footer</CardFooter>
    </Card>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      display: block;
      box-sizing: border-box;
      text-decoration: none;
      color: inherit;
      padding: 1rem;
      background-color: #1D1D25;
      border: 1px solid #262631;
      border-radius: 0.25rem;
    }

    <div
      class="c0"
    >
      <div
        class=""
      >
        Card Header
      </div>
      <div
        class=""
      >
        Card Content
      </div>
      <div
        class=""
      >
        Card Footer
      </div>
    </div>
  `)
})

test('should render a Card spreading props in root element', () => {
  const { container } = render(
    <Card id="bar">
      <CardContent> Card Content </CardContent>
    </Card>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})
test('should render a Card with hover css', () => {
  const { container } = render(
    <Card id="bar" clickable>
      <CardContent> Card Content </CardContent>
    </Card>,
  )

  const element = container.firstChild

  expect(element).toHaveStyleRule('cursor', 'pointer', { modifier: ':hover' })
  expect(element).toHaveStyleRule('box-shadow', '0px 0px 0px 2px #2F2F3C', { modifier: ':hover' })
})

test('should render inside a Card spreading props in root element', () => {
  const { container } = render(
    <Card>
      <CardContent id="bar"> Card Content </CardContent>
    </Card>,
  )

  expect(container.firstChild?.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Card using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(
    <Card ref={ref}>
      <CardContent>Card Content</CardContent>
    </Card>,
  )

  expect(ref.current).toBe(container.firstChild)
})

test('should render inside Card using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(
    <Card>
      <CardContent ref={ref}>Card Content</CardContent>
    </Card>,
  )

  expect(ref.current).toBe(container.firstChild?.firstChild)
})

describe('Component Style', () => {
  it('extends style from theme for Card', () => {
    const customTheme = buildThemeWithComponents('Card', 'base', {
      maxWidth: '10px',
    })

    const { container } = render(
      <Card>
        <CardContent>Card Content</CardContent>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('max-width', '10px')
  })

  it('extends style from theme for CardHeader', () => {
    const customTheme = buildThemeWithComponents('CardHeader', 'base', {
      maxWidth: '10px',
    })

    const { container } = render(
      <Card>
        <CardHeader>Card Header</CardHeader>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.firstChild).toHaveStyleRule('max-width', '10px')
  })

  it('extends style from theme for CardContent', () => {
    const customTheme = buildThemeWithComponents('CardContent', 'base', {
      maxWidth: '10px',
    })

    const { container } = render(
      <Card>
        <CardContent>Card Content</CardContent>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.firstChild).toHaveStyleRule('max-width', '10px')
  })

  it('extends style from theme for CardFooter', () => {
    const customTheme = buildThemeWithComponents('CardFooter', 'base', {
      maxWidth: '10px',
    })

    const { container } = render(
      <Card>
        <CardFooter>Card Footer</CardFooter>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.firstChild).toHaveStyleRule('max-width', '10px')
  })

  it('overwrite style from theme for Card', () => {
    const customTheme = buildThemeWithComponents('Card', 'overwrite', {
      padding: '10px',
    })

    const { container } = render(
      <Card>
        <CardContent>Card Content</CardContent>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('padding', '10px')
  })

  it('overwrite style from theme for CardHeader', () => {
    const customTheme = buildThemeWithComponents('CardHeader', 'overwrite', {
      padding: '10px',
    })

    const { container } = render(
      <Card>
        <CardHeader>Card Header</CardHeader>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.firstChild).toHaveStyleRule('padding', '10px')
  })

  it('overwrite style from theme for CardContent', () => {
    const customTheme = buildThemeWithComponents('CardContent', 'overwrite', {
      padding: '10px',
    })

    const { container } = render(
      <Card>
        <CardContent>Card Content</CardContent>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.firstChild).toHaveStyleRule('padding', '10px')
  })

  it('overwrite style from theme for CardFooter', () => {
    const customTheme = buildThemeWithComponents('CardFooter', 'overwrite', {
      padding: '10px',
    })

    const { container } = render(
      <Card>
        <CardFooter>Card Footer</CardFooter>
      </Card>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.firstChild).toHaveStyleRule('padding', '10px')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <Card sx={{ borderColor: 'blueviolet' }}>
        <CardHeader sx={{ borderColor: 'azure' }}>Card Header</CardHeader>
        <CardContent sx={{ borderColor: 'aqua' }}>Card Content</CardContent>
        <CardContent sx={{ borderColor: 'brown' }}>Card Content</CardContent>
      </Card>,
    )
    expect(container.firstChild).toHaveStyleRule('border-color', 'blueviolet')
    expect(container.firstChild?.firstChild).toHaveStyleRule('border-color', 'azure')
    expect(container.firstChild?.firstChild?.nextSibling).toHaveStyleRule('border-color', 'aqua')
    expect(container.firstChild?.lastChild).toHaveStyleRule('border-color', 'brown')
  })
})
