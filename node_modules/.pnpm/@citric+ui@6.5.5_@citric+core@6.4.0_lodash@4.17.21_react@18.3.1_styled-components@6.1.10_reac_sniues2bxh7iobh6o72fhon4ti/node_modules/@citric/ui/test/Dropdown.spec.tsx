import 'jest-styled-components'
import { createRef } from 'react'
import { Dropdown, DropdownItem } from '../src/Dropdown'
import { buildThemeWithComponents, render } from './react'

test('should render a Dropdown component', () => {
  const { container } = render(
    <Dropdown visible onClose={() => { }}>
      <DropdownItem>Option</DropdownItem>
    </Dropdown>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      width: 100%;
      padding: 0;
      margin: 0;
      list-style: none;
      box-sizing: border-box;
      max-height: 0;
      overflow: hidden;
      transition: all 0.3s ease;
      box-shadow: 0.25rem 0.25rem 2rem 0 #1a213814;
      display: none;
      display: block;
      padding: 0.5rem 0;
      max-height: 17rem;
      overflow-y: auto;
      border-radius: 0.25rem;
      background-color: #14141A;
    }

    .c0::-webkit-scrollbar {
      width: 0.125rem;
    }

    .c0::-webkit-scrollbar-thumb {
      background-color: #FF6633;
    }

    .c1 {
      width: 100%;
      min-height: 2rem;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      padding: 0.25rem 0.5rem;
    }

    .c1:hover {
      background-color: #262631;
    }

    <ul
      class="c0"
      role="listbox"
    >
      <li
        class="c1"
        role="option"
        tabindex="0"
      >
        Option
      </li>
    </ul>
  `)
})

test('should render a Dropdown spreading props in root element', () => {
  const { container } = render(
    <Dropdown onClose={() => { }} id="bar">
      foo
    </Dropdown>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Dropdown using ref', () => {
  const ref = createRef<HTMLUListElement>()

  const { container } = render(
    <Dropdown onClose={() => { }} ref={ref}>
      foo
    </Dropdown>,
  )

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Dropdown using AsProp', () => {
  const { container } = render(
    <Dropdown as="a" href="#" onClose={() => { }}>
      foo
    </Dropdown>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

describe('Component Dropdown Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Dropdown', 'base', {
      padding: '100px',
    })

    const { container } = render(<Dropdown onClose={() => { }}>foo</Dropdown>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Dropdown', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(<Dropdown onClose={() => { }}>foo</Dropdown>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <Dropdown onClose={() => { }} sx={{ border: '1px solid red' }}>
        foo
      </Dropdown>,
    )

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})

test('should render a DropdownItem spreading props in root element', () => {
  const { container } = render(<DropdownItem id="bar">foo</DropdownItem>)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a DropdownItem using ref', () => {
  const ref = createRef<HTMLLIElement>()
  const { container } = render(<DropdownItem ref={ref}>foo</DropdownItem>)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a DropdownItem using AsProp', () => {
  const { container } = render(
    <DropdownItem as="a" href="#">
      foo
    </DropdownItem>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

describe('Component DropdownItem Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('DropdownItem', 'base', {
      padding: '100px',
    })

    const { container } = render(<DropdownItem>foo</DropdownItem>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('DropdownItem', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(<DropdownItem>foo</DropdownItem>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<DropdownItem sx={{ border: '1px solid red' }}>foo</DropdownItem>)

    expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
  })
})
