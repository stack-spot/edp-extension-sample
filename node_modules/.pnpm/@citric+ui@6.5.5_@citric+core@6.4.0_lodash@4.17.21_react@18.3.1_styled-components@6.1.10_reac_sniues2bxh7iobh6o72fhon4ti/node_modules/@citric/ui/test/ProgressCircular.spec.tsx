import { defaultTheme } from '@citric/core'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import ProgressCircular from '../src/ProgressCircular'
import { buildThemeWithComponents, render } from './react'

const colors = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a ProgressCircular component', () => {
  const { container } = render(<ProgressCircular />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      transform: rotate(-90deg);
      width: 1.875rem;
      height: 1.875rem;
    }

    .c0 circle:first-child {
      stroke: #2F2F3C;
    }

    .c0 circle:nth-child(2) {
      stroke: #FF6633;
      stroke-dasharray: 100;
    }

    .c1 {
      transform: rotate(90deg);
      font: 400 0.75rem/1.333 Roboto,sans-serif;
      font-size: 1.875rem;
    }

    <svg
      class="c0"
      viewBox="0 0 120 120"
    >
      <circle
        class=""
        cx="60"
        cy="60"
        fill="none"
        r="54"
        stroke-width="12"
      />
      <circle
        class=""
        cx="60"
        cy="60"
        fill="none"
        pathLength="100"
        r="54"
        stroke-linecap="round"
        stroke-width="7"
      />
      <text
        class="c1"
        dominant-baseline="middle"
        text-anchor="middle"
        x="50%"
        y="-50%"
      />
    </svg>
  `)
})

test('should render a ProgressCircular spreading props in root element', () => {
  const { container } = render(<ProgressCircular id="foo" />)

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a ProgressCircular using ref', () => {
  const ref = createRef<SVGSVGElement>()
  const { container } = render(<ProgressCircular ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a ProgressCircular with percentage', () => {
  const valuePercentage = 30
  const { container } = render(<ProgressCircular percentage={valuePercentage} />)
  const valueDashOffSet = 100 - valuePercentage

  expect(container.firstChild).toHaveStyleRule('stroke-dashoffset', valueDashOffSet.toString(), {
    modifier: 'circle:nth-child(2)',
  })
})
test('should render a ProgressCircular with children value', () => {
  const { container } = render(<ProgressCircular>30</ProgressCircular>)

  expect(container.firstChild?.lastChild).toHaveTextContent('30')
})

describe('ColorScheme Prop', () => {
  test.each(colors)('as %s', (colorSchemeName) => {
    const { container } = render(<ProgressCircular colorScheme={colorSchemeName} />)
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild).toHaveStyleRule('stroke', colorScheme[500], {
      modifier: 'circle:nth-child(2)',
    })
  })
})

describe('Size Prop', () => {
  test('as extra small', () => {
    const { container } = render(<ProgressCircular size="xs" />)

    expect(container.firstChild).toHaveStyleRule('width', '0.875rem')
    expect(container.firstChild).toHaveStyleRule('height', '0.875rem')
    expect(container.firstChild?.childNodes[2]).toHaveStyleRule('font-size', '0.875rem')
  })
  test('as small', () => {
    const { container } = render(<ProgressCircular size="sm" />)

    expect(container.firstChild).toHaveStyleRule('width', '1.375rem')
    expect(container.firstChild).toHaveStyleRule('height', '1.375rem')
    expect(container.firstChild?.childNodes[2]).toHaveStyleRule('font-size', '1.375rem')
  })
  test('as medium', () => {
    const { container } = render(<ProgressCircular size="md" />)

    expect(container.firstChild).toHaveStyleRule('width', '1.875rem')
    expect(container.firstChild).toHaveStyleRule('height', '1.875rem')
    expect(container.firstChild?.childNodes[2]).toHaveStyleRule('font-size', '1.875rem')
  })
  test('as large', () => {
    const { container } = render(<ProgressCircular size="lg" />)

    expect(container.firstChild).toHaveStyleRule('width', '2.875rem')
    expect(container.firstChild).toHaveStyleRule('height', '2.875rem')
    expect(container.firstChild?.childNodes[2]).toHaveStyleRule('font-size', '2.875rem')
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('ProgressCircular', 'base', {
      padding: '100px',
    })

    const { container } = render(<ProgressCircular />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('ProgressCircular', 'overwrite', {
      stroke: 'aquamarine',
    })

    const { container } = render(<ProgressCircular />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('stroke', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<ProgressCircular sx={{ color: 'mediumpurple' }} />)

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
