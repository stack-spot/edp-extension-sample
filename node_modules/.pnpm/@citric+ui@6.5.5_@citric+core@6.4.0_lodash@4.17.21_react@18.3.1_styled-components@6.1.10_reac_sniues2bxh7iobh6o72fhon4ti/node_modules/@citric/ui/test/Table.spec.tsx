import { defaultTheme } from '@citric/core'
import 'jest-styled-components'
import { createRef } from 'react'
import { Table, Tbody, Td, Th, Thead, Tr } from '../src/Table'
import { buildThemeWithComponents, render } from './react'

test('should render a Table', () => {
  const { container } = render(
    <Table>
      <Thead>
        <Tr>
          <Th>Cell header</Th>
        </Tr>
      </Thead>
      <Tbody>
        <Tr>
          <Td>Table cell</Td>
        </Tr>
      </Tbody>
    </Table>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      border-collapse: collapse;
      box-sizing: border-box;
      width: 100%;
      background-color: #14141A;
    }

    .c1 {
      box-sizing: border-box;
    }

    .c4 {
      box-sizing: border-box;
    }

    .c2 {
      box-sizing: border-box;
    }

    .c5 {
      box-sizing: border-box;
      padding: 1.25rem 1rem;
      color: #FAFAFB;
      font: 400 0.875rem/1.714 Roboto,sans-serif;
    }

    .c3 {
      box-sizing: border-box;
      padding: 1.25rem 1rem;
      color: #BCBCCF;
      font-family: Roboto,sans-serif;
      font-weight: 400;
      text-align: left;
    }

    <table
      class="c0"
    >
      <thead
        class="c1"
      >
        <tr
          class="c2"
        >
          <th
            class="c3"
          >
            Cell header
          </th>
        </tr>
      </thead>
      <tbody
        class="c4"
      >
        <tr
          class="c2"
        >
          <td
            class="c5"
          >
            Table cell
          </td>
        </tr>
      </tbody>
    </table>
  `)
})

describe('Props', () => {
  it('should render table components using ref', () => {
    const tableRef = createRef<HTMLTableElement>()
    const theadRef = createRef<HTMLTableSectionElement>()
    const trRef = createRef<HTMLTableRowElement>()
    const thRef = createRef<HTMLTableCellElement>()
    const tbodyRef = createRef<HTMLTableSectionElement>()
    const tdRef = createRef<HTMLTableCellElement>()

    const { container } = render(
      <Table ref={tableRef}>
        <Thead ref={theadRef}>
          <Tr ref={trRef}>
            <Th ref={thRef}>Cell header</Th>
          </Tr>
        </Thead>
        <Tbody ref={tbodyRef}>
          <Tr>
            <Td ref={tdRef}>Table cell</Td>
          </Tr>
        </Tbody>
      </Table>,
    )

    expect(tableRef.current).toBe(container.querySelector('table'))
    expect(theadRef.current).toBe(container.querySelector('thead'))
    expect(trRef.current).toBe(container.querySelector('tr'))
    expect(thRef.current).toBe(container.querySelector('th'))
    expect(tbodyRef.current).toBe(container.querySelector('tbody'))
    expect(tdRef.current).toBe(container.querySelector('td'))
  })

  it('should table components spreading props in root elements', () => {
    const { container } = render(
      <Table id="table">
        <Thead id="thead">
          <Tr id="tr">
            <Th id="th">Cell header</Th>
          </Tr>
        </Thead>
        <Tbody id="tbody">
          <Tr>
            <Td id="td">Table cell</Td>
          </Tr>
        </Tbody>
      </Table>,
    )

    expect(container.querySelector('table')?.id).toBe('table')
    expect(container.querySelector('thead')?.id).toBe('thead')
    expect(container.querySelector('tr')?.id).toBe('tr')
    expect(container.querySelector('th')?.id).toBe('th')
    expect(container.querySelector('tbody')?.id).toBe('tbody')
    expect(container.querySelector('td')?.id).toBe('td')
  })
})

describe('Table', () => {
  it('should render a Table with appearance as striped', () => {
    const { container } = render(<Table appearance="striped" />)
    const expected = defaultTheme.colorScheme.light['400']

    expect(container.firstElementChild).toHaveStyleRule('background-color', expected, {
      modifier: '> tbody tr:nth-of-type(2n + 1) td',
    })
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('Table', type, style)

    it('extends style from theme Table', () => {
      const theme = buildTheme('base', { color: 'darkred' })
      const { container } = render(<Table title="tab 1">Texto 1</Table>, { theme })

      expect(container.firstChild).toHaveStyleRule('color', 'darkred')
    })

    it('overwrite style from theme Table', () => {
      const theme = buildTheme('overwrite', { borderColor: 'darkred' })
      const { container } = render(<Table title="tab 1">Texto 1</Table>, { theme })

      expect(container.firstChild).toHaveStyleRule('border-color', 'darkred')
    })
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(
      <Table sx={{ color: 'darkred' }}>
        <Thead sx={{ color: 'blueviolet' }}>
          <Tr sx={{ color: 'greenyellow' }}>
            <Th sx={{ color: 'mediumpurple' }}>Cell header</Th>
          </Tr>
        </Thead>
        <Tbody sx={{ color: 'darkseagreen' }}>
          <Tr>
            <Td sx={{ color: 'deeppink' }}>Table cell</Td>
          </Tr>
        </Tbody>
      </Table>,
    )

    expect(container.querySelector('table')).toHaveStyleRule('color', 'darkred')
    expect(container.querySelector('thead')).toHaveStyleRule('color', 'blueviolet')
    expect(container.querySelector('tr')).toHaveStyleRule('color', 'greenyellow')
    expect(container.querySelector('tbody')).toHaveStyleRule('color', 'darkseagreen')
    expect(container.querySelector('td')).toHaveStyleRule('color', 'deeppink')
    expect(container.querySelector('th')).toHaveStyleRule('color', 'mediumpurple')
  })
})

describe('Component Style Thead', () => {
  const buildTheme = (type: string, style: Record<string, string>) =>
    buildThemeWithComponents('Thead', type, style)

  it('extends style from theme Thead', () => {
    const theme = buildTheme('base', { color: 'yellowgreen' })
    const { container } = render(<Thead title="tab 1">Texto 1</Thead>, { theme })

    expect(container.firstChild).toHaveStyleRule('color', 'yellowgreen')
  })

  it('overwrite style from theme Thead', () => {
    const theme = buildTheme('overwrite', { borderColor: 'yellowgreen' })
    const { container } = render(<Thead title="tab 1">Texto 1</Thead>, { theme })

    expect(container.firstChild).toHaveStyleRule('border-color', 'yellowgreen')
  })
})

describe('Component Style Th', () => {
  const buildTheme = (type: string, style: Record<string, string>) =>
    buildThemeWithComponents('Th', type, style)

  it('extends style from theme Th', () => {
    const theme = buildTheme('base', { color: 'blueviolet' })
    const { container } = render(<Th title="tab 1">Texto 1</Th>, { theme })

    expect(container.firstChild).toHaveStyleRule('color', 'blueviolet')
  })

  it('overwrite style from theme Th', () => {
    const theme = buildTheme('overwrite', { borderColor: 'blueviolet' })
    const { container } = render(<Th title="tab 1">Texto 1</Th>, { theme })

    expect(container.firstChild).toHaveStyleRule('border-color', 'blueviolet')
  })
})

describe('Component Style Tbody', () => {
  const buildTheme = (type: string, style: Record<string, string>) =>
    buildThemeWithComponents('Tbody', type, style)

  it('extends style from theme Tbody', () => {
    const theme = buildTheme('base', { color: 'deeppink' })
    const { container } = render(<Tbody title="tab 1">Texto 1</Tbody>, { theme })

    expect(container.firstChild).toHaveStyleRule('color', 'deeppink')
  })

  it('overwrite style from theme Tbody', () => {
    const theme = buildTheme('overwrite', { borderColor: 'deeppink' })
    const { container } = render(<Tbody title="tab 1">Texto 1</Tbody>, { theme })

    expect(container.firstChild).toHaveStyleRule('border-color', 'deeppink')
  })
})

describe('Component Style Tr', () => {
  const buildTheme = (type: string, style: Record<string, string>) =>
    buildThemeWithComponents('Tr', type, style)

  it('extends style from theme Tr', () => {
    const theme = buildTheme('base', { color: 'mediumpurple' })
    const { container } = render(<Tr title="tab 1">Texto 1</Tr>, { theme })

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })

  it('overwrite style from theme Tr', () => {
    const theme = buildTheme('overwrite', { borderColor: 'mediumpurple' })
    const { container } = render(<Tr title="tab 1">Texto 1</Tr>, { theme })

    expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
  })
})

describe('Component Style Td', () => {
  const buildTheme = (type: string, style: Record<string, string>) =>
    buildThemeWithComponents('Td', type, style)

  it('extends style from theme Td', () => {
    const theme = buildTheme('base', { color: 'darkseagreen' })
    const { container } = render(<Td title="tab 1">Texto 1</Td>, { theme })

    expect(container.firstChild).toHaveStyleRule('color', 'darkseagreen')
  })

  it('overwrite style from theme Td', () => {
    const theme = buildTheme('overwrite', { borderColor: 'darkseagreen' })
    const { container } = render(<Td title="tab 1">Texto 1</Td>, { theme })

    expect(container.firstChild).toHaveStyleRule('border-color', 'darkseagreen')
  })
})
