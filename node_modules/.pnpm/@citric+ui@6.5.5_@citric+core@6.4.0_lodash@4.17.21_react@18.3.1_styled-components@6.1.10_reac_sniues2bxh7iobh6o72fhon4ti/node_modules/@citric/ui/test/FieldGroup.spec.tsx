import 'jest-styled-components'
import { createRef } from 'react'
import FieldGroup from '../src/FieldGroup'
import { buildThemeWithComponents, render } from './react'

test('should render a FieldGroup component', () => {
  const { container } = render(<FieldGroup />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      width: 100%;
      box-sizing: border-box;
      display: inline-flex;
    }

    .c0 >button {
      border-color: #a9a9ac;
    }

    .c0 >button:hover {
      border-color: #a9a9ac;
    }

    .c0 >button:focus {
      padding-inline: 0.75rem;
    }

    .c0 >:not(:last-child) {
      border-radius: 0;
      border-left-width: 0;
      border-right-width: 0;
    }

    .c0 >:not(:last-child):not(button):focus {
      border-width: 1px;
      padding-inline: 0.438rem;
    }

    .c0 >:not(:last-child):not(button):focus {
      padding-inline: 0.5rem;
    }

    .c0 >:not(:first-child) {
      border-radius: 0;
      border-left-width: 0;
      border-right-width: 0;
    }

    .c0 >:not(:first-child):not(button):focus {
      border-width: 1px;
      padding-inline: 0.438rem;
    }

    .c0 >:first-child {
      border-radius: 0.25rem;
      border-left-width: 1px;
      border-right-width: 0;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    .c0 >:last-child {
      border-radius: 0.25rem;
      border-right-width: 1px;
      border-left-width: 0;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    .c0 >select:not(:last-child):focus {
      background-position: right 0.438rem top 50%;
    }

    .c0 >input:only-child,
    .c0 textarea:only-child,
    .c0 select:only-child {
      border-radius: 0.25rem;
      border-width: 1px;
    }

    <div
      class="c0"
    />
  `)
})

test('should render a FieldGroup spreading props in root element', () => {
  const { container } = render(<FieldGroup id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a FieldGroup using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<FieldGroup ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

describe('Component Style FieldGroup', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('FieldGroup', 'base', {
      margin: '100px',
    })

    const { container } = render(<FieldGroup />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('margin', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('FieldGroup', 'overwrite', {
      backgroundColor: 'aqua',
    })

    const { container } = render(<FieldGroup />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<FieldGroup sx={{ color: 'aqua' }} />)

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })
})
