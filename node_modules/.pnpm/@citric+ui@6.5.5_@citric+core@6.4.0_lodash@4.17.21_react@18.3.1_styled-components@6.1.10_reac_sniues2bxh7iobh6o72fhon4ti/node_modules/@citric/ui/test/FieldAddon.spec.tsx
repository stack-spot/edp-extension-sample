import 'jest-styled-components'
import { createRef } from 'react'
import FieldAddon from '../src/FieldAddon'
import { buildThemeWithComponents, render } from './react'

test('should render a FieldAddon component', () => {
  const { container } = render(<FieldAddon />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      height: 2.5rem;
      display: flex;
      align-items: center;
      padding-inline: 0.5rem;
      box-sizing: border-box;
      border: 1px solid #2F2F3C;
      background: #1D1D25;
      font: 400 0.875rem/1.714 Roboto,sans-serif;
      color: #FAFAFB;
    }

    <div
      class="c0"
    />
  `)
})

test('should render a FieldAddon spreading props in root element', () => {
  const { container } = render(<FieldAddon id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a FieldAddon using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<FieldAddon ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

describe('Component Style FieldAddon', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('FieldAddon', 'base', {
      margin: '100px',
    })

    const { container } = render(<FieldAddon />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('margin', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('FieldAddon', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(<FieldAddon />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<FieldAddon sx={{ color: 'mediumpurple' }} />)

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
