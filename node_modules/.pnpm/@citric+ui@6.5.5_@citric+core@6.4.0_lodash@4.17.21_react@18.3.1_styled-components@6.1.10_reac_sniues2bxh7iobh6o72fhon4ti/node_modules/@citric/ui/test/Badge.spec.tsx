import { defaultTheme } from '@citric/core'
import { OneOfPalettes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import Badge from '../src/Badge'
import { buildThemeWithComponents, render } from './react'

const palettes = Object.keys(defaultTheme.palette) as OneOfPalettes[]

test('should render a Badge component', () => {
  const { container } = render(<Badge>Badge</Badge>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c1 {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      flex-wrap: nowrap;
    }

    .c0 {
      display: inline-flex;
      justify-content: center;
      align-items: center;
      height: 1.5rem;
      padding: 0 0.5rem;
      font: 400 0.75rem/1.333 Roboto,sans-serif;
      border-radius: 600rem;
      background-color: #1D1B85;
      color: #D7D6FF;
    }

    .c0:nth-of-type(1n + 1) {
      margin-right: 0.25rem;
    }

    <div
      class="c0"
    >
      <span
        class="c1"
      >
        Badge
      </span>
    </div>
  `)
})

test('should render a Badge spreading props in root element', () => {
  const { container } = render(<Badge id="foo">Badge</Badge>)

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a squared Badge', () => {
  const { container } = render(<Badge appearance="square">Badge</Badge>)

  expect(container.firstChild).toHaveStyleRule('border-radius', '0.25rem')
})

test('should render a Badge using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Badge ref={ref}>Badge</Badge>)

  expect(ref.current).toBe(container.firstChild)
})

describe('Palette Prop', () => {
  test.each(palettes)('as %s', (paletteName) => {
    const { container } = render(<Badge palette={paletteName}>Badge</Badge>)
    const palette = defaultTheme.palette[paletteName]

    expect(container.firstChild).toHaveStyleRule('background-color', palette[800])
    expect(container.firstChild).toHaveStyleRule('color', palette[50])
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Badge', 'base', {
      padding: '100px',
    })

    const { container } = render(<Badge>Badge</Badge>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Badge', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(<Badge>Badge</Badge>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Badge sx={{ color: 'aquamarine' }}>Badge</Badge>)

    expect(container.firstChild).toHaveStyleRule('color', 'aquamarine')
  })
})
