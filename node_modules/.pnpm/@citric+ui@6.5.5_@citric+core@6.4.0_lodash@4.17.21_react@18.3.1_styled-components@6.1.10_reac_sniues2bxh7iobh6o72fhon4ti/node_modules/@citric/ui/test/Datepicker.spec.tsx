import { defaultTheme } from '@citric/core'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import { fireEvent } from '@testing-library/react'
import 'jest-styled-components'
import { createRef } from 'react'
import Datepicker from '../src/Datepicker'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Input component', () => {
  const { container } = render(<Datepicker />)

  expect(container.firstChild).toMatchInlineSnapshot(`
.c0 {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.c1 {
  width: 100%;
  height: 2.5rem;
  padding: 0.5rem;
  outline: none;
  box-sizing: border-box;
  background-color: #14141A;
  border: 1px solid #2F2F3C;
  border-radius: 0.25rem;
  font: 400 0.875rem/1.714 Roboto,sans-serif;
  color: #FAFAFB;
  caret-color: #FAFAFB;
}

.c1::placeholder {
  opacity: 60%;
  color: #FAFAFB;
}

.c1:focus {
  border-color: #FF6633;
  box-shadow: inset 0 0 0 1px #FF6633;
}

.c1:disabled {
  background-color: #262631;
  border-color: #2F2F3C;
  cursor: not-allowed;
}

.c1:-webkit-autofill,
.c1:-webkit-autofill:hover,
.c1:-webkit-autofill:focus {
  -webkit-text-fill-color: #FAFAFB;
  box-shadow: inset 0 0 0 1000px #14141A;
  transition: background-color 50000s ease-in-out 0s;
}

<div
  class="c0"
>
  <input
    class="c1"
    maxlength="10"
  />
</div>
`)
})

test('should render a Input spreading props in root element', () => {
  const { container } = render(<Datepicker id="bar" />)

  expect(container.firstChild?.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a Input using ref', () => {
  const ref = createRef<HTMLInputElement>()
  const { container } = render(<Datepicker ref={ref} />)

  expect(ref.current).toBe(container.firstChild?.firstChild)
})

test('should render a Input with disabled prop as true', () => {
  const { container } = render(<Datepicker disabled />)

  expect(container.firstChild?.firstChild).toHaveAttribute('disabled')
})

test('should render a Input with autofocus prop as true', () => {
  const { container } = render(<Datepicker autoFocus />)
  const colorScheme = defaultTheme.colorScheme.primary
  const item = container.querySelector('input')

  expect(item).toHaveFocus()
  expect(item).toHaveStyleRule('box-shadow', `inset 0 0 0 1px ${colorScheme['500']}`, {
    modifier: ':focus',
  })
})

test('should datepicker be closed', () => {
  const initialDate = new Date('November 28, 2002')
  const { container } = render(<Datepicker initialDate={initialDate} />)

  expect(container.querySelector('[aria-activedescendant="November 28th, 2002"]')).toBeFalsy()
})

test('should open the datepicker', () => {
  const initialDate = new Date('November 28, 2002')
  const { container } = render(<Datepicker initialDate={initialDate} />)
  const input = container.querySelector('input')!

  fireEvent.click(input)

  expect(container.querySelector('[aria-activedescendant="November 28th, 2002"]')).toHaveAttribute(
    'aria-expanded',
    'true',
  )
})

test('should open the years list modal', () => {
  const initialDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(<Datepicker initialDate={initialDate} />)

  fireEvent.click(container.querySelector('input')!)
  fireEvent.click(getByLabelText('open years list'))

  expect(getByLabelText('2002')).toHaveFocus()
})

test('should open the months list modal', () => {
  const initialDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(<Datepicker initialDate={initialDate} />)

  fireEvent.click(container.querySelector('input')!)
  fireEvent.click(getByLabelText('open years list'))
  fireEvent.click(getByLabelText('2002'))
  expect(getByLabelText('November')).toHaveFocus()
})

test('should select initial date', () => {
  const { container, getByLabelText } = render(<Datepicker />)
  const input = container.querySelector('input')!

  fireEvent.click(input)
  fireEvent.change(input, { target: { value: '11/28/2002' } })

  expect(getByLabelText('November 28th, 2002')).toHaveAttribute('aria-selected', 'true')
})

test('should change to previous month', () => {
  const currentDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(<Datepicker initialDate={currentDate} />)
  const input = container.querySelector('input')!

  fireEvent.click(input)
  fireEvent.click(getByLabelText('previous month'))

  expect(getByLabelText('October')).toBeDefined()
})

test('should change to next month', () => {
  const currentDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(<Datepicker initialDate={currentDate} />)
  const input = container.querySelector('input')!

  fireEvent.click(input)
  fireEvent.click(getByLabelText('next month'))
  expect(getByLabelText('December')).toBeDefined()
})

test('should select date', () => {
  const currentDate = new Date('January 01, 2000')
  const { container, getByLabelText } = render(<Datepicker initialDate={currentDate} />)
  const input = container.querySelector('input')!

  fireEvent.click(input)
  fireEvent.click(getByLabelText('open years list'))
  fireEvent.click(getByLabelText('2002'))
  fireEvent.click(getByLabelText('November'))
  fireEvent.click(getByLabelText('November 28th, 2002'))

  expect(input.value).toBe('11/28/2002')
})

test('should have the language in english', () => {
  const currentDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(<Datepicker initialDate={currentDate} />)
  const input = container.querySelector('input')!

  fireEvent.click(input)

  expect(getByLabelText('November 28th, 2002')).toBeTruthy()
  expect(getByLabelText('open years list')).toBeTruthy()
  expect(getByLabelText('previous month')).toBeTruthy()
  expect(getByLabelText('next month')).toBeTruthy()
  expect(input.value).toBe('11/28/2002')
})

test('should have the the format date custom', () => {
  const currentDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(
    <Datepicker formatDate="MM/dd/yyyy" initialDate={currentDate} />,
  )
  const input = container.querySelector('input')!

  fireEvent.click(input)

  expect(getByLabelText('11/28/2002')).toBeTruthy()
})

test('should have the language in portuguese', () => {
  const currentDate = new Date('November 28, 2002')
  const { container, getByLabelText } = render(<Datepicker locale="pt" initialDate={currentDate} />)
  const input = container.querySelector('input')!

  fireEvent.click(input)
  expect(getByLabelText('28 de novembro de 2002')).toBeTruthy()
  expect(getByLabelText('abrir lista de anos')).toBeTruthy()
  expect(getByLabelText('mês anterior')).toBeTruthy()
  expect(getByLabelText('próximo mês')).toBeTruthy()
  expect(input.value).toBe('28/11/2002')
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(<Datepicker colorScheme={colorSchemeName} />)
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild?.firstChild).toHaveStyleRule(
      'border',
      `1px solid ${colorScheme['500']}`,
    )
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Input', 'base', {
      margin: '100px',
    })

    const { container } = render(<Datepicker />, {
      theme: customTheme,
    })

    expect(container.firstChild?.firstChild).toHaveStyleRule('margin', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Input', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(<Datepicker colorScheme="primary" />, {
      theme: customTheme,
    })

    expect(container.firstChild?.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Datepicker sx={{ color: 'mediumpurple' }} />)

    expect(container.firstChild?.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
