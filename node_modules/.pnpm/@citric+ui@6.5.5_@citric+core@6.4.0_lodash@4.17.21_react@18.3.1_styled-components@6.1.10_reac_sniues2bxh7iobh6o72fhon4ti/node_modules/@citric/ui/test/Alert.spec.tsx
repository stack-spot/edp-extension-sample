import { defaultTheme } from '@citric/core'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import Alert from '../src/Alert'
import { buildThemeWithComponents, render } from './react'

const colorScheme = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Alert component', () => {
  const { container } = render(<Alert>Alert</Alert>)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      width: 100%;
      padding: 0.25rem 1rem;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: #FF6633;
    }

    <div
      class="c0"
    >
      Alert
    </div>
  `)
})

test('should render a Alert spreading props in root element', () => {
  const { container } = render(<Alert id="foo">Alert</Alert>)

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a Alert using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Alert ref={ref}>Alert</Alert>)

  expect(ref.current).toBe(container.firstChild)
})

describe('colorScheme Prop', () => {
  test.each(colorScheme)('as %s', (colorName) => {
    const { container } = render(<Alert colorScheme={colorName}>Alert</Alert>)
    const color = defaultTheme.colorScheme[colorName]

    expect(container.firstChild).toHaveStyleRule('background-color', color[500])
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Alert', 'base', {
      padding: '100px',
    })

    const { container } = render(<Alert>Alert</Alert>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Alert', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(<Alert>Alert</Alert>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Alert sx={{ color: 'aquamarine' }}>Alert</Alert>)

    expect(container.firstChild).toHaveStyleRule('color', 'aquamarine')
  })
})
