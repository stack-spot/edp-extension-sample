import 'jest-styled-components'
import { createRef } from 'react'
import Avatar from '../src/Avatar'
import AvatarGroup from '../src/AvatarGroup'
import { buildThemeWithComponents, render } from './react'

test('should render a AvatarGroup component', () => {
  const { container } = render(
    <AvatarGroup>
      <Avatar>Jane Doe</Avatar>
    </AvatarGroup>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c2 {
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  overflow: hidden;
  border-radius: 600rem;
  font-family: Montserrat,sans-serif;
  font-weight: 700;
  background-color: #1D1B85;
  color: #D7D6FF;
  width: 5rem;
  height: 5rem;
  font-size: 1.5rem;
  line-height: 2.25rem;
}

.c2 img {
  width: 5rem;
  height: 5rem;
  font-size: 1.5rem;
  line-height: 2.25rem;
  object-fit: cover;
}

.c0 {
  display: flex;
  flex-direction: row;
  align-items: center;
  list-style: none;
  padding: 0;
}

.c1 {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.c1 div:not(:first-of-type) {
  margin-left: -0.75rem;
}

<ul
  class="c0"
>
  <li
    class="c1"
  >
    <div
      class="c2"
    >
      JD
    </div>
  </li>
</ul>
`)
})

test('should render a AvatarGroup spreading props in root element', () => {
  const { container } = render(
    <AvatarGroup id="foo">
      <Avatar>Jane Doe</Avatar>
    </AvatarGroup>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a AvatarGroup using ref', () => {
  const ref = createRef<HTMLUListElement>()
  const { container } = render(
    <AvatarGroup ref={ref}>
      <Avatar>Jane Doe</Avatar>
    </AvatarGroup>,
  )

  expect(ref.current).toBe(container.firstChild)
})

describe('MaxAvatars Prop', () => {
  test('should render OtherAvatars when the amout of Avatar component is greater than the maxAvatars prop', () => {
    const { container } = render(
      <AvatarGroup maxAvatars={2}>
        <Avatar>Jane Doe</Avatar>
        <Avatar>Jane Ipsum</Avatar>
        <Avatar>Lorem Ipsum</Avatar>
      </AvatarGroup>,
    )

    expect(container.querySelector('li')?.lastChild?.nodeName).toBe('SPAN')
    expect(container.querySelector('li')?.lastChild).toHaveTextContent('+1')
  })

  test('should not render OtherAvatars when the amout of Avatar component is smaller than the maxAvatars prop', () => {
    const { container } = render(
      <AvatarGroup maxAvatars={10}>
        <Avatar>Jane Doe</Avatar>
        <Avatar>Jane Ipsum</Avatar>
        <Avatar>Lorem Ipsum</Avatar>
      </AvatarGroup>,
    )

    expect(container.querySelector('li')?.childElementCount).toBe(3)
  })

  test('should render the count of OtherAvatars correctly', () => {
    const { container } = render(
      <AvatarGroup maxAvatars={1}>
        <Avatar>Jane Doe</Avatar>
        <Avatar>Jane Ipsum</Avatar>
        <Avatar>Lorem Ipsum</Avatar>
      </AvatarGroup>,
    )

    expect(container.querySelector('li')?.lastChild).toHaveTextContent('+2')
  })

  test('should render OtherAvatars font-size correctly', () => {
    const { container } = render(
      <AvatarGroup maxAvatars={2} size="xs">
        <Avatar>Jane Doe</Avatar>
        <Avatar>Jane Ipsum</Avatar>
        <Avatar>Lorem Ipsum</Avatar>
      </AvatarGroup>,
    )

    expect(container.querySelector('li')?.lastChild?.nodeName).toBe('SPAN')
    expect(container.querySelector('li')?.lastChild).toHaveStyleRule('font-size', '0.75rem')
  })
})

describe('Size Prop', () => {
  test('as small', () => {
    const { getByRole } = render(
      <AvatarGroup size="xs">
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(getByRole('listitem')).toHaveStyleRule('margin-left', '-0.25rem', {
      modifier: 'div:not(:first-of-type)',
    })
  })
  test('as medium', () => {
    const { getByRole } = render(
      <AvatarGroup size="sm">
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(getByRole('listitem')).toHaveStyleRule('margin-left', '-0.5rem', {
      modifier: 'div:not(:first-of-type)',
    })
  })
  test('as large', () => {
    const { getByRole } = render(
      <AvatarGroup size="md">
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(getByRole('listitem')).toHaveStyleRule('margin-left', '-0.75rem', {
      modifier: 'div:not(:first-of-type)',
    })
  })
  test('as huge', () => {
    const { getByRole } = render(
      <AvatarGroup size="lg">
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(getByRole('listitem')).toHaveStyleRule('margin-left', '-0.75rem', {
      modifier: 'div:not(:first-of-type)',
    })
  })
  test('as astronomic', () => {
    const { getByRole } = render(
      <AvatarGroup size="xl">
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(getByRole('listitem')).toHaveStyleRule('margin-left', '-1rem', {
      modifier: 'div:not(:first-of-type)',
    })
  })
  test('as galactic', () => {
    const { getByRole } = render(
      <AvatarGroup size="xxl">
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(getByRole('listitem')).toHaveStyleRule('margin-left', '-2rem', {
      modifier: 'div:not(:first-of-type)',
    })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('AvatarGroup', 'base', {
      padding: '100px',
    })

    const { container } = render(
      <AvatarGroup>
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('AvatarGroup', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(
      <AvatarGroup>
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <AvatarGroup sx={{ color: 'aquamarine' }}>
        <Avatar>Jane Doe</Avatar>
      </AvatarGroup>,
    )

    expect(container.firstChild).toHaveStyleRule('color', 'aquamarine')
  })
})
