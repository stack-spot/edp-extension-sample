import { defaultTheme } from '@citric/core'
import { OneOfPalettes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import Badge from '../src/Badge'
import BadgeGroup from '../src/BadgeGroup'
import { buildThemeWithComponents, render } from './react'

const palettes = Object.keys(defaultTheme.palette) as OneOfPalettes[]

test('should render a BadgeGroup component', () => {
  const { container } = render(
    <BadgeGroup>
      <Badge>Jane Doe</Badge>
    </BadgeGroup>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c2 {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  flex-wrap: nowrap;
}

.c1 {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 1.5rem;
  padding: 0 0.5rem;
  font: 400 0.75rem/1.333 Roboto,sans-serif;
  border-radius: 600rem;
  background-color: #1D1B85;
  color: #D7D6FF;
}

.c1:nth-of-type(1n + 1) {
  margin-right: 0.25rem;
}

.c0 {
  display: flex;
  flex-direction: row;
  list-style: none;
  align-items: center;
  padding: 0;
  margin: 0;
}

<ul
  class="c0"
>
  <div
    class="c1"
  >
    <span
      class="c2"
    >
      Jane Doe
    </span>
  </div>
</ul>
`)
})

test('should render a BadgeGroup component with number', () => {
  const { container } = render(
    <BadgeGroup maxBadges={1} numberBadgeColor={'indigo'}>
      <Badge>Jane Doe</Badge>
      <Badge>Jane Doe</Badge>
      <Badge>Jane Doe</Badge>
    </BadgeGroup>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c2 {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  flex-wrap: nowrap;
}

.c3 {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  display: inline-flex;
}

.c6 {
  margin: 0;
  font: 400 0.75rem/1.333 Roboto,sans-serif;
  color: #0B0B0E;
}

.c1 {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 1.5rem;
  padding: 0 0.5rem;
  font: 400 0.75rem/1.333 Roboto,sans-serif;
  border-radius: 600rem;
  background-color: #1D1B85;
  color: #D7D6FF;
}

.c1:nth-of-type(1n + 1) {
  margin-right: 0.25rem;
}

.c4 {
  width: fit-content;
  position: relative;
  height: fit-content;
  cursor: pointer;
}

.c5 {
  z-index: 15000;
  pointer-events: none;
  padding: 0.25rem 0.5rem;
  border-radius: 0.375rem;
  width: max-content;
  box-sizing: border-box;
  display: none;
  background-color: #D1D1DE;
  max-width: 250px;
  position: absolute;
  bottom: 125%;
  left: 50%;
  transform: translateX(-50%);
}

.c5::after {
  content: '';
  position: absolute;
  border-width: 5px;
  border-style: solid;
  border-color: transparent;
  top: 100%;
  left: 50%;
  margin-left: -5px;
  border-top-color: #D1D1DE;
}

.c0 {
  display: flex;
  flex-direction: row;
  list-style: none;
  align-items: center;
  padding: 0;
  margin: 0;
}

<ul
  class="c0"
>
  <div
    class="c1"
  >
    <span
      class="c2"
    >
      Jane Doe
    </span>
  </div>
  <div
    class="c3"
  >
    <div
      class="c4"
      tabindex="0"
    >
      <div
        aria-describedby="tooltip-zlbrz2k"
      >
        <div
          class="c1"
        >
          <span
            class="c2"
          >
            +2
          </span>
        </div>
      </div>
      <div
        class="c5"
        coords="[object Object]"
        id="tooltip-zlbrz2k"
        role="tooltip"
      >
        <small
          class="c6"
        >
          Jane Doe, Jane Doe
        </small>
      </div>
    </div>
  </div>
</ul>
`)
})

test('should render a BadgeGroup spreading props in root element', () => {
  const { container } = render(
    <BadgeGroup id="foo">
      <Badge>Jane Doe</Badge>
    </BadgeGroup>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a BadgeGroup using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(
    <BadgeGroup ref={ref}>
      <Badge>Jane Doe</Badge>
    </BadgeGroup>,
  )

  expect(ref.current).toBe(container.firstChild)
})

describe('MaxBadges Prop', () => {
  test('should render OtherBadges when the amout of Badge component is greater than the maxBadges prop', () => {
    const { container } = render(
      <BadgeGroup maxBadges={2}>
        <Badge>Jane Doe</Badge>
        <Badge>Jane Ipsum</Badge>
        <Badge>Lorem Ipsum</Badge>
      </BadgeGroup>,
    )

    expect(container.firstChild?.lastChild).toHaveTextContent('+1')
  })

  test('should not render OtherBadges when the amout of Badge component is smaller than the maxBadges prop', () => {
    const { container } = render(
      <BadgeGroup maxBadges={10}>
        <Badge>Jane Doe</Badge>
        <Badge>Jane Ipsum</Badge>
        <Badge>Lorem Ipsum</Badge>
      </BadgeGroup>,
    )

    expect(container.querySelector('ul')?.childElementCount).toBe(3)
  })

  test('should render the count of OtherBadges correctly', () => {
    const { container } = render(
      <BadgeGroup maxBadges={1}>
        <Badge>Jane Doe</Badge>
        <Badge>Jane Ipsum</Badge>
        <Badge>Lorem Ipsum</Badge>
      </BadgeGroup>,
    )

    expect(container.firstChild?.lastChild).toHaveTextContent('+2')
  })

  describe('Palette to numberBadgeColor', () => {
    test.each(palettes)('as %s', (paletteName) => {
      const { container } = render(
        <BadgeGroup maxBadges={1} numberBadgeColor={paletteName}>
          <Badge palette={paletteName}>Jane Doe</Badge>
          <Badge>Jane Ipsum</Badge>
          <Badge>Lorem Ipsum</Badge>
        </BadgeGroup>,
      )

      const palette = defaultTheme.palette[paletteName]

      expect(container.querySelector('ul')?.lastChild?.firstChild?.firstChild?.firstChild).toHaveStyleRule(
        'background-color',
        palette['800'],
      )
    })
  })

  test('should render the text of badges not showen in a tooltip', () => {
    const { container } = render(
      <BadgeGroup maxBadges={1}>
        <Badge>Jane Doe</Badge>
        <Badge>Jane Ipsum</Badge>
        <Badge>Lorem Ipsum</Badge>
      </BadgeGroup>,
    )

    const tooltipTextContent = 'Jane Ipsum, Lorem Ipsum'

    expect(container.querySelector('small')).toHaveTextContent(tooltipTextContent)
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('BadgeGroup', 'base', {
      padding: '100px',
    })

    const { container } = render(
      <BadgeGroup>
        <Badge>Jane Doe</Badge>
      </BadgeGroup>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('BadgeGroup', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(
      <BadgeGroup>
        <Badge>Jane Doe</Badge>
      </BadgeGroup>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <BadgeGroup sx={{ color: 'aquamarine' }}>
        <Badge>Jane Doe</Badge>
      </BadgeGroup>,
    )

    expect(container.firstChild).toHaveStyleRule('color', 'aquamarine')
  })
})
