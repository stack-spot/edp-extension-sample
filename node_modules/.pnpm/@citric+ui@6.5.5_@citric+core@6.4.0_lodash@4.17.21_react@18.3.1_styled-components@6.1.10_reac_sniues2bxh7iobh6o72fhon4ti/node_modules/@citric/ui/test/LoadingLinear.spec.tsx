import { defaultTheme } from '@citric/core'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import LoadingLinear from '../src/LoadingLinear'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a LoadingLinear component', () => {
  const { container } = render(<LoadingLinear />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      position: relative;
      border-radius: 2rem;
      width: 100%;
      height: 0.25rem;
      background: #2F2F3C;
    }

    .c0::after {
      content: '';
      position: absolute;
      width: 50%;
      height: 0.125rem;
      top: 1px;
      left: 1px;
      border-radius: 2rem;
      background: #FF6633;
    }

    .c1::after {
      animation: loopLinear 1s infinite;
    }

    <div
      class="c0 c1"
    />
  `)
})

test('should render a LoadingLinear spreading props in root element', () => {
  const { container } = render(<LoadingLinear id="bar" />)

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a LoadingLinear using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<LoadingLinear ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(<LoadingLinear colorScheme={colorSchemeName} />)
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild).toHaveStyleRule('background', `${colorScheme['500']}`, {
      modifier: '::after',
    })
  })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('LoadingLinear', 'base', {
      padding: '100px',
    })

    const { container } = render(<LoadingLinear />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('LoadingLinear', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(<LoadingLinear />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<LoadingLinear sx={{ backgroundColor: 'cornsilk' }} />)

    expect(container.firstChild).toHaveStyleRule('background-color', 'cornsilk')
  })
})
