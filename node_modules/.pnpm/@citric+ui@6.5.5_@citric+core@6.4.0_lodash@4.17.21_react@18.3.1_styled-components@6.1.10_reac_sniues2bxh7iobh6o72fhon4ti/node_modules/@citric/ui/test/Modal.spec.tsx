import 'jest-styled-components'
import { createRef } from 'react'
import { Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader } from '../src/Modal'
import { buildThemeWithComponents, render } from './react'

test('should render a Backdrop component', () => {
  const { container } = render(
    <Modal id="modal">
      <ModalHeader>Title</ModalHeader>
      <ModalCloseButton />
      <ModalContent>Content</ModalContent>
      <ModalFooter>Save</ModalFooter>
    </Modal>,
  )

  expect(container.firstChild).toMatchSnapshot()
})

describe('Modal', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<Modal id="modal">foo</Modal>)
    expect(container.querySelector('section')).toHaveAttribute('id', 'modal')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<Modal ref={ref}>foo</Modal>)

    expect(ref.current).toBe(container.querySelector('section'))
  })

  it('should render using AsProp', () => {
    const { queryByText } = render(<Modal as="span">foo</Modal>)
    expect(queryByText('foo')?.nodeName).toBe('SPAN')
  })

  it('should invoke onClose when Backdrop was clicked', () => {
    const onClose = jest.fn()
    const { queryByTestId } = render(<Modal onClose={onClose}>foo</Modal>)

    queryByTestId('backdrop')?.click()

    expect(onClose).toHaveBeenCalled()
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('Modal', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { background: 'aqua' })
      const { container } = render(<Modal>foo</Modal>, { theme })

      expect(container.querySelector('section')).toHaveStyleRule('background', 'aqua')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('base', { border: '1px solid red' })
      const { container } = render(<Modal>foo</Modal>, { theme })

      expect(container.querySelector('section')).toHaveStyleRule('border', '1px solid #FF0000')
    })

    test('overwrite style with sx prop', () => {
      const { container } = render(<Modal sx={{ bg: 'aqua' }}>foo</Modal>)
      expect(container.querySelector('section')).toHaveStyleRule('background-color', 'aqua')
    })
  })

  describe('Size Prop', () => {
    it('as Large', () => {
      const { container } = render(<Modal size="lg">foo</Modal>)
      expect(container.querySelector('section')).toHaveStyleRule('width', '800px')
    })
    it('as Medium', () => {
      const { container } = render(<Modal size="md">foo</Modal>)
      expect(container.querySelector('section')).toHaveStyleRule('width', '600px')
    })
    it('as Small', () => {
      const { container } = render(<Modal size="sm">foo</Modal>)
      expect(container.querySelector('section')).toHaveStyleRule('width', '400px')
    })
  })

  describe('Position Prop', () => {
    it('as center', () => {
      const { container } = render(<Modal position="center">foo</Modal>)
      expect(container.querySelector('section')).toHaveStyleRule('margin', '3.75rem auto')
      expect(container.querySelector('section')).toHaveStyleRule('border-radius', '1rem')
    })
    it('as right', () => {
      const { container } = render(<Modal position="right">foo</Modal>)
      expect(container.querySelector('section')).toHaveStyleRule('position', 'absolute')
      expect(container.querySelector('section')).toHaveStyleRule('height', '100vh')
      expect(container.querySelector('section')).toHaveStyleRule('right', '0')
      expect(container.querySelector('section')).toHaveStyleRule('border-top-left-radius', '1rem')
      expect(container.querySelector('section')).toHaveStyleRule(
        'border-bottom-left-radius',
        '1rem',
      )
    })
  })
})

describe('ModalHeader', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<ModalHeader id="bar">foo</ModalHeader>)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<ModalHeader ref={ref}>foo</ModalHeader>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(<ModalHeader as="span">foo</ModalHeader>)
    expect(container.firstChild?.nodeName).toBe('SPAN')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('ModalHeader', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { background: 'aqua' })
      const { container } = render(<ModalHeader>foo</ModalHeader>, { theme })

      expect(container.firstChild).toHaveStyleRule('background', 'aqua')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('base', { border: '1px solid red' })
      const { container } = render(<ModalHeader>foo</ModalHeader>, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    test('overwrite style with sx prop', () => {
      const { container } = render(<ModalHeader sx={{ color: 'aqua' }}>foo</ModalHeader>)
      expect(container.firstChild).toHaveStyleRule('color', 'aqua')
    })
  })
})

describe('ModalContent', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<ModalContent id="bar">foo</ModalContent>)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<ModalContent ref={ref}>foo</ModalContent>)

    expect(ref.current).toBe(container.firstChild)
  })

  describe('ScrollBehavior Prop', () => {
    it('as inside', () => {
      const { container } = render(<ModalContent scrollBehavior="inside">foo</ModalContent>)
      expect(container.firstChild).toHaveStyleRule('max-height', '50vh')
    })

    it('as outside', () => {
      const { container } = render(<ModalContent scrollBehavior="outside">foo</ModalContent>)
      expect(container.firstChild).toHaveStyleRule('max-height', 'fit-content')
    })
  })

  it('should render using AsProp', () => {
    const { container } = render(<ModalContent as="span">foo</ModalContent>)
    expect(container.firstChild?.nodeName).toBe('SPAN')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('ModalContent', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { background: 'aqua' })
      const { container } = render(<ModalContent>foo</ModalContent>, { theme })

      expect(container.firstChild).toHaveStyleRule('background', 'aqua')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('base', { border: '1px solid red' })
      const { container } = render(<ModalContent>foo</ModalContent>, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    test('overwrite style with sx prop', () => {
      const { container } = render(<ModalContent sx={{ bg: 'aqua' }}>foo</ModalContent>)
      expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
    })
  })
})

describe('ModalFooter', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<ModalFooter id="bar">foo</ModalFooter>)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<ModalFooter ref={ref}>foo</ModalFooter>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(<ModalFooter as="span">foo</ModalFooter>)
    expect(container.firstChild?.nodeName).toBe('SPAN')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('ModalFooter', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { background: 'aqua' })
      const { container } = render(<ModalFooter>foo</ModalFooter>, { theme })

      expect(container.firstChild).toHaveStyleRule('background', 'aqua')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('base', { border: '1px solid red' })
      const { container } = render(<ModalFooter>foo</ModalFooter>, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    test('overwrite style with sx prop', () => {
      const { container } = render(<ModalFooter sx={{ bg: 'aqua' }}>foo</ModalFooter>)
      expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
    })
  })
})

describe('ModalCloseButton', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<ModalCloseButton id="bar" />)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLButtonElement>()
    const { container } = render(<ModalCloseButton ref={ref} />)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(<ModalCloseButton as="a" href="/" />)
    expect(container.firstChild?.nodeName).toBe('A')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('ModalCloseButton', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { background: 'aqua' })
      const { container } = render(<ModalCloseButton />, { theme })

      expect(container.firstChild).toHaveStyleRule('background', 'aqua')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('base', { border: '1px solid red' })
      const { container } = render(<ModalCloseButton />, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    test('overwrite style with sx prop', () => {
      const { container } = render(<ModalCloseButton sx={{ bg: 'aqua' }} />)
      expect(container.firstChild).toHaveStyleRule('background-color', 'aqua')
    })
  })
})
