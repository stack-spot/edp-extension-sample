import 'jest-styled-components'
import { createRef } from 'react'
import IconButton from '../src/IconButton'
import { buildThemeWithComponents, render } from './react'

test('should render a IconButton component', () => {
  const { container } = render(
    <IconButton>
      <svg />
    </IconButton>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c0 {
  box-sizing: border-box;
  display: inline-flex;
  border-radius: 100%;
  cursor: pointer;
  align-items: center;
  justify-content: center;
  border: none;
  padding: 0.375rem;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  border-radius: 0.25rem;
  width: fit-content;
  height: fit-content;
  background-color: transparent;
}

.c0:disabled {
  pointer-events: none;
}

.c0:disabled >svg {
  opacity: 0.24;
}

.c0 >svg {
  width: 0.75rem;
  height: 0.75rem;
  display: inline;
  fill: #FAFAFB;
}

.c0:hover,
.c0:focus {
  background-color: color-mix(in srgb, #FAFAFB 20%, transparent);
  border-color: color-mix(in srgb, #FAFAFB 20%, transparent);
}

<button
  class="c0"
>
  <svg />
</button>
`)
})

test('should render a IconButton spreading props in root element', () => {
  const { container } = render(
    <IconButton id="bar">
      <svg />
    </IconButton>,
  )

  expect(container.firstChild).toHaveAttribute('id', 'bar')
})

test('should render a IconButton using ref', () => {
  const ref = createRef<HTMLButtonElement>()
  const { container } = render(
    <IconButton ref={ref}>
      <svg />
    </IconButton>,
  )

  expect(ref.current).toBe(container.firstChild)
})

test('should render a IconButton using AsProp', () => {
  const { container } = render(
    <IconButton as="a" href="#">
      <svg />
    </IconButton>,
  )

  expect(container.firstChild?.nodeName).toBe('A')
  expect(container.firstChild).toHaveAttribute('href', '#')
})

test('should render a IconButton with disabled prop as true', () => {
  const { container } = render(
    <IconButton disabled>
      <svg />
    </IconButton>,
  )

  expect(container.firstChild).toHaveAttribute('disabled')

  expect(container.firstChild).toHaveStyleRule('opacity', '0.24', { modifier: ':disabled > svg' })
  expect(container.firstChild).toHaveStyleRule('pointer-events', 'none', { modifier: ':disabled' })
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('IconButton', 'base', {
      padding: '100px',
    })

    const { container } = render(
      <IconButton>
        <svg />
      </IconButton>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('IconButton', 'overwrite', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(
      <IconButton>
        <svg />
      </IconButton>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('background-color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <IconButton sx={{ color: 'mediumpurple' }}>
        <svg />
      </IconButton>,
    )

    expect(container.firstChild).toHaveStyleRule('color', 'mediumpurple')
  })
})
