import 'jest-styled-components'
import { createRef } from 'react'
import FormItem, { FormHelper } from '../src/FormItem'
import { buildThemeWithComponents, render } from './react'

describe('FormItem', () => {
  it('should render a FormItem component', () => {
    const { container } = render(<FormItem>foo</FormItem>)

    expect(container.firstChild).toMatchInlineSnapshot(`
      .c0 {
        margin-bottom: 1.25rem;
      }

      <div
        class="c0"
      >
        foo
      </div>
    `)
  })

  it('should render a FormItem spreading props in root element', () => {
    const { container } = render(<FormItem id="bar">foo</FormItem>)

    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render a FormItem using ref', () => {
    const ref = createRef<HTMLParagraphElement>()
    const { container } = render(<FormItem ref={ref}>foo</FormItem>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render a FormItem using AsProp', () => {
    const { container } = render(
      <FormItem as="a" href="#">
        foo
      </FormItem>,
    )

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })

  describe('Component Style', () => {
    it('extends style from theme', () => {
      const customTheme = buildThemeWithComponents('FormItem', 'base', {
        marginBottom: '10px',
      })

      const { container } = render(<FormItem>foo</FormItem>, {
        theme: customTheme,
      })

      expect(container.firstChild).toHaveStyleRule('margin-bottom', '10px')
    })

    it('overwrite style from theme', () => {
      const customTheme = buildThemeWithComponents('FormItem', 'overwrite', {
        marginBottom: '20px',
      })

      const { container } = render(<FormItem>foo</FormItem>, {
        theme: customTheme,
      })

      expect(container.firstChild).toHaveStyleRule('margin-bottom', '20px')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(<FormItem sx={{ marginBottom: '100px' }}>foo</FormItem>)

      expect(container.firstChild).toHaveStyleRule('margin-bottom', '100px')
    })
  })
})

describe('FormHelper', () => {
  it('should render a FormHelper component', () => {
    const { container } = render(<FormHelper>foo</FormHelper>)

    expect(container.firstChild).toMatchInlineSnapshot(`
      .c0 {
        margin: 0;
      }

      .c1 {
        margin-top: 0.25rem;
        font: 400 0.875rem/1.714 Roboto,sans-serif;
      }

      <p
        class="c0 c1"
      >
        foo
      </p>
    `)
  })

  it('should render a FormHelper spreading props in root element', () => {
    const { container } = render(<FormHelper id="bar">foo</FormHelper>)

    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render a FormHelper using ref', () => {
    const ref = createRef<HTMLParagraphElement>()
    const { container } = render(<FormHelper ref={ref}>foo</FormHelper>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render a FormHelper using AsProp', () => {
    const { container } = render(
      <FormHelper as="a" href="#">
        foo
      </FormHelper>,
    )

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })

  it('should accept Text props', () => {
    const { container } = render(
      <FormHelper weight="bold" colorScheme="primary" align="center">
        foo
      </FormHelper>,
    )

    expect(container.firstChild).toBeInTheDocument()
  })

  describe('Component Style', () => {
    it('extends style from theme', () => {
      const customTheme = buildThemeWithComponents('FormHelper', 'base', {
        color: 'azure',
      })

      const { container } = render(<FormHelper>foo</FormHelper>, {
        theme: customTheme,
      })

      expect(container.firstChild).toHaveStyleRule('color', 'azure')
    })

    it('overwrite style from theme', () => {
      const customTheme = buildThemeWithComponents('FormHelper', 'overwrite', {
        color: 'cadetblue',
      })

      const { container } = render(<FormHelper colorScheme="primary">foo</FormHelper>, {
        theme: customTheme,
      })

      expect(container.firstChild).toHaveStyleRule('color', 'cadetblue')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(<FormHelper sx={{ color: 'crimson' }}>foo</FormHelper>)

      expect(container.firstChild).toHaveStyleRule('color', 'crimson')
    })
  })
})
