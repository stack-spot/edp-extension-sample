import 'jest-styled-components'
import { createRef } from 'react'
import Skeleton from '../src/Skeleton'
import { buildThemeWithComponents, render } from './react'

test('should render a Skeleton component', () => {
  const { container } = render(<Skeleton />)

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      animation: bYWalr 1s linear infinite alternate;
      width: 100%;
      height: 2rem;
    }

    <div
      class="c0"
    />
  `)
})

test('should render a Skeleton spreading props in root element', () => {
  const { container } = render(<Skeleton id="foo" />)

  expect(container.firstChild).toHaveAttribute('id', 'foo')
})

test('should render a Skeleton using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(<Skeleton ref={ref} />)

  expect(ref.current).toBe(container.firstChild)
})

test('should render a Skeleton using AsProp', () => {
  const { container } = render(<Skeleton as="a" />)

  expect(container.firstChild?.nodeName).toBe('A')
})

test('should render a Skeleton using appearance circle', () => {
  const { container } = render(<Skeleton appearance="circle" />)

  expect(container.firstChild).toHaveStyleRule('border-radius', '50%')
})

test('should render a Skeleton using width props', () => {
  const { container } = render(<Skeleton width="50%" />)

  expect(container.firstChild).toHaveStyleRule('width', '50%')
})
test('should render a Skeleton using height props', () => {
  const { container } = render(<Skeleton height="50px" />)

  expect(container.firstChild).toHaveStyleRule('height', '50px')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Skeleton', 'base', {
      padding: '100px',
    })

    const { container } = render(<Skeleton />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Skeleton', 'overwrite', {
      backgroundColor: 'aquamarine',
    })

    const { container } = render(<Skeleton />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('background-color', 'aquamarine')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(<Skeleton sx={{ color: 'aquamarine' }} />)

    expect(container.firstChild).toHaveStyleRule('color', 'aquamarine')
  })
})
