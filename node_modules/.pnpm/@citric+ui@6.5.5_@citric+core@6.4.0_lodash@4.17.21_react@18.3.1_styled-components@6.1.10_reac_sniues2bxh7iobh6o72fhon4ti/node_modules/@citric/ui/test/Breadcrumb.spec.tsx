import 'jest-styled-components'
import { createRef } from 'react'
import { Breadcrumb, BreadcrumbIcon, BreadcrumbItem, BreadcrumbLink } from '../src/Breadcrumb'
import { buildThemeWithComponents, render } from './react'

test('should render a Breadcrumb component', () => {
  const { container } = render(
    <Breadcrumb>
      <BreadcrumbItem>
        <BreadcrumbLink>foo</BreadcrumbLink>
      </BreadcrumbItem>
    </Breadcrumb>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
    .c0 {
      box-sizing: border-box;
      display: flex;
      flex-wrap: wrap;
      margin: 0rem;
      padding: 0rem;
    }

    .c1 {
      display: inline-flex;
      align-items: center;
      text-decoration: none;
      color: #FAFAFB;
      font: 400 0.875rem/1.5 Roboto,sans-serif;
      opacity: 40%;
    }

    .c1:last-of-type {
      color: #FAFAFB;
      opacity: 1;
    }

    .c1:first-of-type {
      font-weight: 500;
    }

    .c2 {
      cursor: pointer;
      color: inherit;
      text-decoration: inherit;
    }

    .c2:hover {
      text-decoration: underline;
      color: #FAFAFB;
    }

    <nav
      class=""
    >
      <ul
        class="c0"
      >
        <li
          class="c1"
        >
          <a
            class="c2"
          >
            foo
          </a>
        </li>
      </ul>
    </nav>
  `)
})

describe('should render a Breadcrumb', () => {
  it('spreading props in root element', () => {
    const { container } = render(
      <Breadcrumb id="bar">
        <BreadcrumbItem>foo</BreadcrumbItem>
      </Breadcrumb>,
    )

    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('using ref', () => {
    const refBreadcrumb = createRef<HTMLElement>()
    const { container } = render(
      <Breadcrumb ref={refBreadcrumb}>
        <BreadcrumbItem>foo</BreadcrumbItem>
      </Breadcrumb>,
    )
    const item = container.querySelector('nav')

    expect(refBreadcrumb.current).toBe(item)
  })

  it('using AsProp', () => {
    const { container } = render(<Breadcrumb as="div">foo</Breadcrumb>)

    expect(container.firstChild?.nodeName).toBe('DIV')
  })

  it('last BreadcrumbItem appear disabled', () => {
    const { container } = render(
      <Breadcrumb>
        <BreadcrumbItem>foo</BreadcrumbItem>
        <BreadcrumbItem>foo</BreadcrumbItem>
      </Breadcrumb>,
    )

    expect(container.firstChild?.firstChild?.lastChild).toHaveStyleRule('color', '#FAFAFB', {
      modifier: ':last-of-type',
    })
  })
})

describe('should render a BreadcrumbItem', () => {
  it('spreading props in root element', () => {
    const { getByText } = render(<BreadcrumbItem id="bar">foo</BreadcrumbItem>)

    expect(getByText('foo')).toHaveAttribute('id', 'bar')
  })

  it('using ref', () => {
    const refItem = createRef<HTMLLIElement>()
    const { container } = render(
      <Breadcrumb>
        <BreadcrumbItem ref={refItem}>foo</BreadcrumbItem>
      </Breadcrumb>,
    )
    const item = container.querySelector('li')

    expect(refItem.current).toBe(item)
  })

  it('using AsProp', () => {
    const { container } = render(<BreadcrumbItem as="div">foo</BreadcrumbItem>)

    expect(container.firstChild?.nodeName).toBe('DIV')
  })
})

describe('should render a BreadcrumbLink', () => {
  it('spreading props in root element', () => {
    const { getByText } = render(<BreadcrumbLink id="bar">foo</BreadcrumbLink>)

    expect(getByText('foo')).toHaveAttribute('id', 'bar')
  })

  it('using ref', () => {
    const refLink = createRef<HTMLAnchorElement>()
    const { container } = render(
      <Breadcrumb>
        <BreadcrumbItem>
          <BreadcrumbLink ref={refLink}>foo</BreadcrumbLink>
        </BreadcrumbItem>
      </Breadcrumb>,
    )
    const item = container.querySelector('a')

    expect(refLink.current).toBe(item)
  })

  it('using AsProp', () => {
    const { getByText } = render(
      <Breadcrumb>
        <BreadcrumbItem>
          <BreadcrumbLink as="h3">foo</BreadcrumbLink>
        </BreadcrumbItem>
      </Breadcrumb>,
    )

    expect(getByText('foo').nodeName).toBe('H3')
  })

  it('hover in component', () => {
    const { getByText } = render(
      <Breadcrumb>
        <BreadcrumbItem>
          <BreadcrumbLink as="h3">foo</BreadcrumbLink>
        </BreadcrumbItem>
      </Breadcrumb>,
    )

    expect(getByText('foo')).toHaveStyleRule('text-decoration', 'underline', { modifier: ':hover' })
  })
})

describe('should render a BreadcrumbIcon', () => {
  it('spreading props in root element', () => {
    const { container } = render(<BreadcrumbIcon id="bar" />)

    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('using ref', () => {
    const refItem = createRef<HTMLDivElement>()
    const { container } = render(<BreadcrumbIcon ref={refItem} />)

    expect(refItem.current).toBe(container.firstChild)
  })

  it('using AsProp', () => {
    const { container } = render(<BreadcrumbIcon as="i" />)

    expect(container.firstChild?.nodeName).toBe('I')
  })
})

describe('Component Style Breadcrumb', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Breadcrumb', 'base', {
      padding: '100px',
    })

    const { container } = render(
      <Breadcrumb>
        <BreadcrumbItem>foo</BreadcrumbItem>
      </Breadcrumb>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Breadcrumb', 'overwrite', {
      display: 'block',
    })

    const { container } = render(
      <Breadcrumb>
        <BreadcrumbItem>foo</BreadcrumbItem>
      </Breadcrumb>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild).toHaveStyleRule('display', 'block')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(
      <Breadcrumb sx={{ color: 'aqua' }}>
        <BreadcrumbItem>foo</BreadcrumbItem>
      </Breadcrumb>,
    )

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })
})

describe('Component Style BreadcrumItem', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('BreadcrumbItem', 'base', {
      padding: '100px',
    })

    const { container } = render(<BreadcrumbItem>foo</BreadcrumbItem>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('BreadcrumbItem', 'overwrite', {
      display: 'block',
    })

    const { container } = render(<BreadcrumbItem>foo</BreadcrumbItem>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('display', 'block')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<BreadcrumbItem sx={{ color: 'aqua' }}>foo</BreadcrumbItem>)

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })
})

describe('Component Style BreadcrumLink', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('BreadcrumbLink', 'base', {
      padding: '100px',
    })

    const { container } = render(<BreadcrumbLink>foo</BreadcrumbLink>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('BreadcrumbLink', 'overwrite', {
      color: 'aqua',
    })

    const { container } = render(<BreadcrumbLink colorScheme="primary">foo</BreadcrumbLink>, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<BreadcrumbLink sx={{ color: 'aqua' }}>foo</BreadcrumbLink>)

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })
})

describe('Component Style BreadcrumbIcon', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('BreadcrumbIcon', 'base', {
      padding: '100px',
    })

    const { container } = render(<BreadcrumbIcon />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('padding', '100px')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('BreadcrumbIcon', 'overwrite', {
      color: 'aqua',
    })

    const { container } = render(<BreadcrumbIcon />, {
      theme: customTheme,
    })

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })

  it('overwrite style with sx prop', () => {
    const { container } = render(<BreadcrumbIcon sx={{ color: 'aqua' }} />)

    expect(container.firstChild).toHaveStyleRule('color', 'aqua')
  })
})
