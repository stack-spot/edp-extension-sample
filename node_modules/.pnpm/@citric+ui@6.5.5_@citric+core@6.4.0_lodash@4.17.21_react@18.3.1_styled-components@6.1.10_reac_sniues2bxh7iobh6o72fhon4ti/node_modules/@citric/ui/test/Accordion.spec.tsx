import { fireEvent } from '@testing-library/react'
import 'jest-styled-components'
import { createRef } from 'react'
import {
  Accordion,
  AccordionContent,
  AccordionHeader,
  AccordionIcon,
  AccordionItem,
  AccordionTitle,
} from '../src/Accordion'
import { buildThemeWithComponents, render } from './react'

test('should render a Accordion component', () => {
  const { container } = render(
    <Accordion>
      <AccordionItem name="foo">
        <AccordionHeader>
          Foo
          <AccordionIcon />
        </AccordionHeader>
      </AccordionItem>
    </Accordion>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c5 {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 0.25rem;
  background-color: transparent;
  fill: #FAFAFB;
}

.c5 >svg {
  overflow: inherit;
  width: 1rem;
  height: 1rem;
}

.c3 {
  margin: 0;
}

.c0 {
  box-sizing: border-box;
}

.c2 {
  box-sizing: border-box;
  border-radius: 0.25rem;
  background-color: #14141A;
}

.c1+.c1 {
  margin-top: 0.25rem;
}

.c4 {
  font: 400 1rem/1.5 Roboto,sans-serif;
  font-weight: 500;
  line-height: 1;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  color: inherit;
  background-color: transparent;
  border: none;
  padding: 1rem;
  cursor: pointer;
  align-items: center;
  justify-content: space-between;
  border-radius: 0.25rem;
}

.c4:hover {
  background-color: #1D1D25;
}

.c4:disabled {
  opacity: 0.24;
  pointer-events: none;
}

.c6 {
  width: auto;
  padding-inline: 0.75rem;
}

.c6 >svg {
  fill: #FAFAFB;
}

<div
  class="c0"
>
  <div
    class="c1 c2"
  >
    <h2
      class="c3"
    >
      <button
        aria-expanded="false"
        class="c4"
      >
        Foo
        <i
          class="c5 c6"
        >
          <svg
            height="16"
            viewBox="0 0 512 512"
            width="16"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              clip-rule="evenodd"
              d="M104.444 192.444C113.035 183.852 126.965 183.852 135.556 192.444L256.057 312.944L377.501 192.387C386.124 183.827 400.053 183.878 408.613 192.501C417.173 201.124 417.122 215.053 408.499 223.613L271.499 359.613C262.899 368.151 249.013 368.126 240.444 359.556L104.444 223.556C95.8521 214.965 95.8521 201.035 104.444 192.444Z"
              fill-rule="evenodd"
            />
          </svg>
        </i>
      </button>
    </h2>
  </div>
</div>
`)
})

describe('Accordion', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<Accordion id="bar" />)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<Accordion ref={ref} />)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(<Accordion as="a" href="#" />)

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })

  it('should render p using AsTitleProp', () => {
    const { container } = render(<AccordionHeader asTitle="p" />)

    expect(container.firstChild?.nodeName).toBe('P')
  })

  it('should render h2 not using AsTitleProp', () => {
    const { container } = render(<AccordionHeader />)

    expect(container.firstChild?.nodeName).toBe('H2')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('Accordion', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { maxWidth: '10px' })
      const { container } = render(<Accordion />, { theme })

      expect(container.firstChild).toHaveStyleRule('max-width', '10px')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('overwrite', { border: '1px solid red' })
      const { container } = render(<Accordion />, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(<Accordion sx={{ borderColor: 'mediumpurple' }} />)
      expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
    })
  })
})

describe('AccordionItem', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<AccordionItem name="foo" id="bar" />)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<AccordionItem name="foo" ref={ref} />)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(<AccordionItem name="foo" as="a" href="#" />)

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('AccordionItem', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { maxWidth: '10px' })
      const { container } = render(<AccordionItem name="foo" />, { theme })

      expect(container.firstChild).toHaveStyleRule('max-width', '10px')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('overwrite', { border: '1px solid red' })
      const { container } = render(<AccordionItem name="foo" />, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(
        <AccordionItem name="foo" sx={{ borderColor: 'mediumpurple' }} />,
      )
      expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
    })
  })
})
describe('AccordionHeader', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<AccordionHeader id="bar" />)
    expect(container.querySelector('button')).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLButtonElement>()
    const { container } = render(<AccordionHeader ref={ref} />)

    expect(ref.current).toBe(container.querySelector('button'))
  })

  it('should render using AsProp', () => {
    const { container } = render(<AccordionHeader as="a" href="#" />)
    const element = container.querySelector('a')

    expect(element).toHaveAttribute('href', '#')
  })
})

describe('AccordionIcon', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<AccordionIcon id="bar" />)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLButtonElement>()
    const { container } = render(<AccordionIcon ref={ref} />)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using children', () => {
    const { queryByTestId } = render(
      <AccordionIcon>
        <svg data-testid="icon" />
      </AccordionIcon>,
    )

    expect(queryByTestId('icon')).toBeTruthy()
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('AccordionIcon', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { maxWidth: '10px' })
      const { container } = render(<AccordionIcon />, { theme })

      expect(container.firstChild).toHaveStyleRule('max-width', '10px')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('overwrite', { border: '1px solid red' })
      const { container } = render(<AccordionIcon />, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(<AccordionIcon sx={{ borderColor: 'mediumpurple' }} />)
      expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
    })
  })
})

describe('AccordionTitle', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<AccordionTitle id="bar" />)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLButtonElement>()
    const { container } = render(<AccordionTitle ref={ref} />)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(<AccordionTitle as="a" href="#" />)

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('AccordionTitle', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { maxWidth: '10px' })
      const { container } = render(<AccordionTitle />, { theme })

      expect(container.firstChild).toHaveStyleRule('max-width', '10px')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('overwrite', { border: '1px solid red' })
      const { container } = render(<AccordionTitle />, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(<AccordionTitle sx={{ borderColor: 'mediumpurple' }} />)
      expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
    })
  })
})

describe('AccordionContent', () => {
  it('should render spreading props in root element', () => {
    const { container } = render(<AccordionContent id="bar">foo</AccordionContent>)
    expect(container.firstChild).toHaveAttribute('id', 'bar')
  })

  it('should render using ref', () => {
    const ref = createRef<HTMLDivElement>()
    const { container } = render(<AccordionContent ref={ref}>foo</AccordionContent>)

    expect(ref.current).toBe(container.firstChild)
  })

  it('should render using AsProp', () => {
    const { container } = render(
      <AccordionContent as="a" href="#">
        foo
      </AccordionContent>,
    )

    expect(container.firstChild?.nodeName).toBe('A')
    expect(container.firstChild).toHaveAttribute('href', '#')
  })

  describe('Component Style', () => {
    const buildTheme = (type: string, style: Record<string, string>) =>
      buildThemeWithComponents('AccordionContent', type, style)

    it('extends style from theme', () => {
      const theme = buildTheme('base', { maxWidth: '10px' })
      const { container } = render(<AccordionContent>foo</AccordionContent>, { theme })

      expect(container.firstChild).toHaveStyleRule('max-width', '10px')
    })

    it('overwrite style from theme', () => {
      const theme = buildTheme('overwrite', { border: '1px solid red' })
      const { container } = render(<AccordionContent>foo</AccordionContent>, { theme })

      expect(container.firstChild).toHaveStyleRule('border', '1px solid #FF0000')
    })

    it('overwrite style with sx prop', () => {
      const { container } = render(
        <AccordionContent sx={{ borderColor: 'mediumpurple' }}>foo</AccordionContent>,
      )
      expect(container.firstChild).toHaveStyleRule('border-color', 'mediumpurple')
    })
  })
})

describe('Integration', () => {
  it('should display AccordionContent when AccordionItem is open', () => {
    const { queryByTestId } = render(
      <Accordion active="bar">
        <AccordionItem name="foo">
          <AccordionHeader>Title</AccordionHeader>
          <AccordionContent data-testid="content-closed">Content</AccordionContent>
        </AccordionItem>
        <AccordionItem name="bar">
          <AccordionHeader>Title</AccordionHeader>
          <AccordionContent data-testid="content-open">Content</AccordionContent>
        </AccordionItem>
      </Accordion>,
    )

    expect(queryByTestId('content-open')).toBeTruthy()
    expect(queryByTestId('content-closed')).toBeFalsy()
  })

  it('should call Accordion.onChange when AccordionItem is clicked', () => {
    const onChange = jest.fn()

    const { container } = render(
      <Accordion active="bar" onChange={onChange}>
        <AccordionItem name="foo">
          <AccordionHeader>Title Foo</AccordionHeader>
          <AccordionContent data-testid="content-closed">Content</AccordionContent>
        </AccordionItem>
        <AccordionItem name="bar">
          <AccordionHeader>Title</AccordionHeader>
          <AccordionContent data-testid="content-open">Content</AccordionContent>
        </AccordionItem>
      </Accordion>,
    )

    fireEvent.click(container.querySelector('button')!)
    expect(onChange).toHaveBeenCalledWith('foo')

    fireEvent.click(container.querySelector('button')!)
    expect(onChange).toHaveBeenCalledWith(null)
  })
})
