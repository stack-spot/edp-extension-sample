import { defaultTheme } from '@citric/core'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import 'jest-styled-components'
import { createRef } from 'react'
import Tooltip from '../src/Tooltip'
import { buildThemeWithComponents, render } from './react'

const colorSchemes = Object.keys(defaultTheme.colorScheme) as OneOfColorSchemes[]

test('should render a Tooltip component', () => {
  const { container } = render(
    <Tooltip text="Tooltip">
      <span>Hover me</span>
    </Tooltip>,
  )

  expect(container.firstChild).toMatchInlineSnapshot(`
.c2 {
  margin: 0;
  font: 400 0.75rem/1.333 Roboto,sans-serif;
  color: #0B0B0E;
}

.c0 {
  width: fit-content;
  position: relative;
  height: fit-content;
  cursor: pointer;
}

.c1 {
  z-index: 15000;
  pointer-events: none;
  padding: 0.25rem 0.5rem;
  border-radius: 0.375rem;
  width: max-content;
  box-sizing: border-box;
  display: none;
  background-color: #D1D1DE;
  max-width: 250px;
  position: absolute;
  bottom: 125%;
  left: 50%;
  transform: translateX(-50%);
}

.c1::after {
  content: '';
  position: absolute;
  border-width: 5px;
  border-style: solid;
  border-color: transparent;
  top: 100%;
  left: 50%;
  margin-left: -5px;
  border-top-color: #D1D1DE;
}

<div
  class="c0"
  tabindex="0"
>
  <div
    aria-describedby="tooltip-i54dfqn"
  >
    <span>
      Hover me
    </span>
  </div>
  <div
    class="c1"
    coords="[object Object]"
    id="tooltip-i54dfqn"
    role="tooltip"
  >
    <small
      class="c2"
    >
      Tooltip
    </small>
  </div>
</div>
`)
})

test('should render a Tooltip spreading props in root element', () => {
  const { container } = render(
    <Tooltip text="Tooltip" id="foo">
      <span>Hover me</span>
    </Tooltip>,
  )

  expect(container.firstChild?.childNodes[1]).toHaveAttribute('id', 'foo')
})

test('should render a Tooltip using ref', () => {
  const ref = createRef<HTMLDivElement>()
  const { container } = render(
    <Tooltip text="Tooltip" ref={ref}>
      <span>Hover me</span>
    </Tooltip>,
  )

  expect(ref.current).toBe(container.firstChild?.childNodes[1])
})

describe('Tooltip Position', () => {
  it('as Top', () => {
    const { container } = render(
      <Tooltip text="Tooltip" position="top">
        <span>Hover me</span>
      </Tooltip>,
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('bottom', '125%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('left', '50%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('transform', 'translateX(-50%)')
  })
  it('as Bottom', () => {
    const { container } = render(
      <Tooltip text="Tooltip" position="bottom">
        <span>Hover me</span>
      </Tooltip>,
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('top', '135%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('left', '50%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('transform', 'translateX(-50%)')
  })
  it('as Right', () => {
    const { container } = render(
      <Tooltip text="Tooltip" position="right">
        <span>Hover me</span>
      </Tooltip>,
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('top', '50%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('left', '110%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('transform', 'translateY(-50%)')
  })
  it('as Left', () => {
    const { container } = render(
      <Tooltip text="Tooltip" position="left">
        <span>Hover me</span>
      </Tooltip>,
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('top', '50%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('right', '110%')
    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('transform', 'translateY(-50%)')
  })
})

test('should render a Tooltip with text no wrap', () => {
  const { container } = render(
    <Tooltip text="Tooltip" nowrap>
      <span>Hover me</span>
    </Tooltip>,
  )

  expect(container.firstChild?.childNodes[1]).toHaveStyleRule('white-space', 'nowrap', {
    modifier: 'span:last-of-type',
  })
})

describe('ColorScheme Prop', () => {
  it.each(colorSchemes)('as %s', (colorSchemeName) => {
    const { container } = render(
      <Tooltip text="Tooltip" colorScheme={colorSchemeName}>
        <span>Hover me</span>
      </Tooltip>,
    )
    const colorScheme = defaultTheme.colorScheme[colorSchemeName]

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule(
      'background-color',
      colorScheme['500'],
    )
    expect(container.firstChild?.childNodes[1].firstChild).toHaveStyleRule(
      'color',
      colorScheme.contrastText,
    )
  })
})

test('should render a Tooltip float', () => {
  const { container } = render(
    <Tooltip text="Tooltip" float>
      <span>Hover me</span>
    </Tooltip>,
  )
  expect(container.firstChild?.childNodes[1]).toHaveStyleRule('position', 'fixed')
})

describe('Component Style', () => {
  it('extends style from theme', () => {
    const customTheme = buildThemeWithComponents('Tooltip', 'base', {
      backgroundColor: 'mediumpurple',
    })

    const { container } = render(
      <Tooltip text="Tooltip">
        <span>Hover me</span>
      </Tooltip>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('background-color', 'mediumpurple')
  })

  it('overwrite style from theme', () => {
    const customTheme = buildThemeWithComponents('Tooltip', 'overwrite', {
      color: 'mediumpurple',
    })

    const { container } = render(
      <Tooltip text="Tooltip">
        <span>Hover me</span>
      </Tooltip>,
      {
        theme: customTheme,
      },
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('color', 'mediumpurple')
  })

  test('overwrite style with sx prop', () => {
    const { container } = render(
      <Tooltip text="Tooltip" sx={{ padding: '50px' }}>
        <span>Hover me</span>
      </Tooltip>,
    )

    expect(container.firstChild?.childNodes[1]).toHaveStyleRule('padding', '50px')
  })
})
