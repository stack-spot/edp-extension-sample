import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { css, styled } from '@citric/core/dist/styled'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getRadius, getSpacing } from '@citric/core/dist/utils/theme'
import React, { useEffect } from 'react'
import { Interpolation } from 'styled-components'
import { useNavigationVertical, useOutsideClick } from './hooks'

export interface DropdownProps {
  as?: AsProp,
  sx?: SxProp,
  visible?: boolean,
  visibleHeight?: string,
  onClose: () => void,
  ignoredRef?: React.MutableRefObject<unknown>,
  children?: React.ReactNode,
}

export interface DropdownItemProps {
  as?: AsProp,
  sx?: SxProp,
}

const DropdownStyled = styled.ul.withConfig(defaultConfig) <DropdownProps>`
  width: 100%;
  padding: 0;
  margin: 0;
  list-style: none;
  box-sizing: border-box;
  max-height: 0;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0.25rem 0.25rem 2rem 0 #1a213814;
  display: none;

  ${extendStyle('Dropdown')};

  ${props =>
    props?.visible &&
    css`
      display: block;
      padding: ${({ theme }) => `${getSpacing(theme, 3)} 0` as Interpolation<object>};
      max-height: ${props?.visibleHeight || '17rem'} ;
      overflow-y: auto;

      &::-webkit-scrollbar {
        width: 0.125rem;
      }

      &::-webkit-scrollbar-thumb {
        background-color: ${({ theme }) => getColor(theme, 'primary')};
      }
    `}

  border-radius: ${({ theme }) => getRadius(theme, 'xs')};
  background-color: ${({ theme }) => getColor(theme, 'light.300')};

  ${overwriteStyle('Dropdown')};
`

const DropdownItemStyled = styled.li.withConfig(defaultConfig)`
  width: 100%;
  min-height: 2rem;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding: ${({ theme }) => `${getSpacing(theme, 2)} ${getSpacing(theme, 3)}`};

  ${extendStyle('DropdownItem')};

  &:hover {
    background-color: ${({ theme }) => getColor(theme, 'light')};
  }

  ${overwriteStyle('DropdownItem')};
`

const Dropdown = forwardRefAs<DropdownProps, 'ul'>(function Dropdown({ as, ...props }, ref) {
  const [dropdownRef, onKeyDown] = useNavigationVertical(props.children)

  useOutsideClick({
    ref: dropdownRef,
    callback: props.onClose,
    ignoredRef: props.ignoredRef,
  })

  useEffect(() => {
    if (ref && typeof ref === 'object') {
      ref.current = dropdownRef.current
    }
  }, [ref, dropdownRef])

  return (
    <DropdownStyled
      as={as}
      ref={dropdownRef}
      role="listbox"
      onKeyDown={onKeyDown}
      {...props}
    />
  )
})

const DropdownItem = forwardRefAs<DropdownItemProps, 'li'>(function DropdownItem(
  { as, ...props },
  ref,
) {
  return <DropdownItemStyled role="option" tabIndex={0} ref={ref} {...props} as={as} />
})

export { Dropdown, DropdownItem }
