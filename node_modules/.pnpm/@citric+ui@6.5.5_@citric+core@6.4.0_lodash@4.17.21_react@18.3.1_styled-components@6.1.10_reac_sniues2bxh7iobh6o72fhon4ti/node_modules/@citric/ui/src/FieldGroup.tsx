import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import { css, styled } from '@citric/core/dist/styled'
import { Theme } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getRadius } from '@citric/core/dist/utils/theme'

export interface FieldGroupProps {
  sx?: SxProp,
}

const getBorderLastChildStyle = (theme: Theme) => css`
  border-radius: ${getRadius(theme, 'xs')};
  border-right-width: 1px;
  border-left-width: 0;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
`

const getBorderFirstChildStyle = (theme: Theme) => css`
  border-radius: ${getRadius(theme, 'xs')};
  border-left-width: 1px;
  border-right-width: 0;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
`

const getBorderWithSiblingStyle = () => css`
  border-radius: 0;
  border-left-width: 0;
  border-right-width: 0;
  &:not(button) {
    &:focus {
      border-width: 1px;
      padding-inline: 0.438rem;
    }
  }
`

const FieldGroup = styled.div.withConfig(defaultConfig) <FieldGroupProps>`
  width: 100%;
  box-sizing: border-box;
  display: inline-flex;

  > button {
    border-color: #a9a9ac;
    &:hover {
      border-color: #a9a9ac;
    }
    &:focus {
      padding-inline: 0.75rem;
    }
  }

  ${extendStyle('FieldGroup')};

  > :not(:last-child) {
    ${getBorderWithSiblingStyle()}
    &:not(button) {
      &:focus {
        padding-inline: 0.5rem;
      }
    }
  }

  > :not(:first-child) {
    ${getBorderWithSiblingStyle()}
  }

  > :first-child {
    ${({ theme }) => getBorderFirstChildStyle(theme)}
  }

  > :last-child {
    ${({ theme }) => getBorderLastChildStyle(theme)}
  }

  > select:not(:last-child) {
    &:focus {
      background-position: right 0.438rem top 50%;
    }
  }

  > input:only-child,
  textarea:only-child,
  select:only-child {
    border-radius: ${({ theme }) => getRadius(theme, 'xs')};
    border-width: 1px;
  }

  ${overwriteStyle('FieldGroup')};
`

export default FieldGroup
