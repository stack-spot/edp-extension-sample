
import { Button, Text } from '@citric/core'
import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor } from '@citric/core/dist/utils/theme'
import { ReactElement, ReactNode, useEffect, useState } from 'react'

export interface TabProps {
  sx?: SxProp,
  activeIndex?: number,
  children: (ReactElement<TabItemProps> | null)[],
  onChange?: (index: number) => void,
}

export interface TabItemProps {
  sx?: SxProp,
  title?: ReactNode,
  disabled?: boolean,
  children?: ReactNode,
}

const styleButton = (selected: boolean) => {
  const bgColor = selected ? 'primary' : 'transparent'

  const styles = {
    button: {
      marginTop: '0.219rem',
      paddingBottom: '0.281rem',
      paddingInline: '2rem',
      cursor: 'pointer',
      color: 'light.contrastText',
      backgroundColor: 'transparent',
      border: 'none',
      position: 'relative' as const,
      '&:hover, &:focus, &:active': {
        backgroundColor: 'transparent',
        borderColor: 'transparent',
      },
      '&::after': {
        content: '',
        width: '100%',
        height: '2px',
        backgroundColor: bgColor,
        bottom: '0px',
        position: 'absolute' as const,
      },
    },
  }

  return styles.button
}

const TabList = styled.nav.withConfig(defaultConfig) <TabProps>`
  list-style-type: none;
  display: flex;
  flex-direction: row;
  ${extendStyle('Tabs')}
  border-bottom: 0.063rem solid ${({ theme }) => getColor(theme, 'light.600')};
  ${overwriteStyle('Tabs')}
`

const TabsItemStyled = styled.div.withConfig(defaultConfig) <TabItemProps>`
  display: flex;
  flex-direction: column;
  margin-top: 1rem;

  ${extendStyle('TabsItem')}
  ${overwriteStyle('TabsItem')}
`

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const TabsItem = forwardRefAs<TabItemProps, 'div'>(function TabsItem({ title, ...props }, ref) {
  return <TabsItemStyled ref={ref} {...props} />
})

export const Tabs = forwardRefAs<TabProps, 'nav'>(function Tabs(
  { activeIndex = 0, children, onChange, ...props },
  ref,
) {
  const [tabsChildren, setTabsChildren] = useState<ReactElement<TabItemProps>[] | undefined>()

  useEffect(() => {
    const tabs = children.reduce((acc, tab) => (tab ? acc.concat(tab) : acc), [] as ReactElement<TabItemProps>[])
    setTabsChildren(tabs)
  }, [children])

  if (!Array.isArray(children)) {
    return null
  }

  return (
    <>
      {tabsChildren && <TabList {...props} ref={ref} role="tablist">
        {tabsChildren.map((child, index) => (
          <Button
            type="button"
            aria-selected={index === activeIndex}
            key={index}
            onClick={() => onChange && onChange(index)}
            role="tab"
            disabled={child.props.disabled}
            sx={styleButton(index === activeIndex)}
          >
            <Text
              as="span"
              appearance="body2"
              weight={activeIndex === index ? 'medium' : undefined}
            >
              {child.props.title}
            </Text>
          </Button>
        ))}
      </TabList>}
      {tabsChildren && tabsChildren[activeIndex]}
    </>
  )
})
