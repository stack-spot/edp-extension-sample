import { Theme } from '@citric/core'
import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import { AsProp } from '@citric/core/dist/forward-ref-as'
import { css, styled } from '@citric/core/dist/styled'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getRadius } from '@citric/core/dist/utils/theme'
import { ReactNode } from 'react'
import IconButton from './IconButton'

type PositionProps = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'

export interface ToastProps {
  as?: AsProp,
  sx?: SxProp,
  children: ReactNode,
  colorScheme?: OneOfColorSchemes,
  position?: PositionProps,
}

const getToastPosition = (position: PositionProps) => {
  const toastPosition = {
    'top-right': css`
      top: 0.75rem;
      right: 0.75rem;
    `,
    'top-left': css`
      top: 0.75rem;
      left: 0.75rem;
    `,
    'bottom-right': css`
      bottom: 0.75rem;
      right: 0.75rem;
    `,
    'bottom-left': css`
      bottom: 0.75rem;
      left: 0.75rem;
    `,
  }

  return toastPosition[position]
}

const Toast = styled.div.withConfig(defaultConfig) <ToastProps>`
  position: fixed;
  z-index: 2000;
  width: 21rem;

  box-sizing: border-box;

  ${extendStyle('Toast')};
  ${(props: ToastProps) => getToastPosition(props?.position || 'top-right')}
  border-radius: ${({ theme }) => getRadius(theme, 'xs')};
  background-color: ${({ theme, colorScheme }: { theme: Theme, colorScheme?: OneOfColorSchemes }) =>
    getColor(theme, colorScheme || 'primary.500')};
  color: ${({ theme, colorScheme }: { theme: Theme, colorScheme?: OneOfColorSchemes }) =>
    getColor(theme, colorScheme ? `${colorScheme}.contrastText` : 'primary.contrastText')};

  ${overwriteStyle('Toast')};
`

const ToastButton = styled(IconButton)`
  position: absolute;
  right: 0.5rem;
  top: 0.5rem;
  ${extendStyle('ToastButton')};
  ${overwriteStyle('ToastButton')};
`

export { Toast, ToastButton }
