import { Flex } from '@citric/core'
import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { OneOfPalettes } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { Children, isValidElement, ReactNode } from 'react'
import Badge from './Badge'
import Tooltip from './Tooltip'

interface BadgeGroupProps {
  as?: AsProp,
  sx?: SxProp,
  maxBadges?: number,
  children: ReactNode,
  tooltipPosition?: 'left' | 'right' | 'top' | 'bottom',
  numberBadgeColor?: OneOfPalettes,
}

function getValidChildren(children: React.ReactNode) {
  return Children.toArray(children).filter((child) => isValidElement(child)) as React.ReactElement[]
}

function getCountOfOthersAvatars(children: React.ReactNode, maxBadges: number) {
  const MAX_COUNT_BADGES = 999
  const countOfBadges = getValidChildren(children).length

  if (countOfBadges >= MAX_COUNT_BADGES) return `+${MAX_COUNT_BADGES}`
  if (countOfBadges > maxBadges) return `+${getValidChildren(children).length - maxBadges}`

  return null
}

const BadgeGroupStyled = styled.div.withConfig(defaultConfig)<BadgeGroupProps>`
  display: flex;
  flex-direction: row;
  list-style: none;
  align-items: center;
  padding: 0;
  margin:0;

  ${extendStyle('BadgeGroup')}
  ${overwriteStyle('BadgeGroup')}
`

const BadgeGroup = forwardRefAs<BadgeGroupProps, 'div'>(function BadgeGroup(
  { as = 'ul', ...props },
  ref,
) {
  const MAX_BADGE_DEFAULT = 9
  const { children, maxBadges = MAX_BADGE_DEFAULT } = props

  const listBadges = getValidChildren(children)
  const badges = listBadges.slice(0, maxBadges)
  const badgeOthers = listBadges.slice(maxBadges, listBadges.length)

  const listBadgeOthersText = Array<string>()
  badgeOthers.map((badge) => {
    const typeofBadge = typeof badge.props.children
    listBadgeOthersText.push(
      typeofBadge === 'string' ? badge.props.children : badge.props.children[0].props.children,
    )
  })
  const textOthersBadges = listBadgeOthersText.join(', ')

  const countOfOthersBadges = getCountOfOthersAvatars(children, maxBadges)

  return (
    <BadgeGroupStyled {...props} ref={ref} as={as}>
      {badges}
      {countOfOthersBadges && (
        <Flex sx={{ display: 'inline-flex' }}>
          <Tooltip text={textOthersBadges} position={props.tooltipPosition} >
            <Badge palette={props.numberBadgeColor}>{countOfOthersBadges}</Badge>
          </Tooltip>
        </Flex>
      )}
    </BadgeGroupStyled>
  )
})

export default BadgeGroup
