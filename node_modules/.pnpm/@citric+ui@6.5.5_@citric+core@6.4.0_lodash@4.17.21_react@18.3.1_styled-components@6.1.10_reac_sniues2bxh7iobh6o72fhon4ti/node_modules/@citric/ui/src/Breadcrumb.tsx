import { Flex } from '@citric/core'
import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getFontStyle, getFontWeight } from '@citric/core/dist/utils/theme'
import { Slash } from '@citric/icons'

export interface BreadcrumbProps {
  sx?: SxProp,
  children?: React.ReactNode,
}

export interface BreadcrumbItemProps {
  as?: AsProp,
  sx?: SxProp,
  children?: React.ReactNode,
}

export interface BreadcrumbIconProps {
  as?: AsProp,
  sx?: SxProp,
  children?: React.ReactNode,
}

export interface BreadcrumbLinkProps {
  as?: AsProp,
  sx?: SxProp,
  colorScheme?: OneOfColorSchemes,
  children?: React.ReactNode,
}

const BreadcrumbStyled = styled.nav.withConfig(defaultConfig) <BreadcrumbProps>`
  ${extendStyle('Breadcrumb')};
  ${overwriteStyle('Breadcrumb')};
`

const BreadcrumbItemStyled = styled.li.withConfig(defaultConfig) <BreadcrumbItemProps>`
  display: inline-flex;
  align-items: center;
  text-decoration: none;

  ${extendStyle('BreadcrumbItem')};

  color: ${({ theme }) => getColor(theme, 'light.contrastText')};
  font: ${({ theme }) => getFontStyle(theme, 'breadcrumb')};
  opacity: 40%;

  &:last-of-type {
    color: ${({ theme }) => getColor(theme, 'light.contrastText')};
    opacity: 1;
  }

  &:first-of-type {
    font-weight: ${({ theme }) => getFontWeight(theme, 'medium')};
  }

  ${overwriteStyle('BreadcrumbItem')};
`

const BreadcrumbLinkStyled = styled.a.withConfig(defaultConfig) <BreadcrumbLinkProps>`
  cursor: pointer;
  color: inherit;
  text-decoration: inherit;

  ${extendStyle('BreadcrumbLink')};

  &:hover {
    text-decoration: underline;
    color: ${({ theme }) => getColor(theme, 'light.contrastText')};
  }

  ${overwriteStyle('BreadcrumbLink')};
`

const BreadcrumbIconStyled = styled.span.withConfig(defaultConfig).attrs(({ children = <Slash /> }) => ({
  children,
})) <BreadcrumbIconProps>`
  margin: 0 0.375rem;
  display: inline-flex;

  ${extendStyle('BreadcrumbIcon')};

  > svg {
    fill: ${({ theme }) => getColor(theme, 'light.contrastText')};
    width: 0.9rem;
    height: 0.9rem;
  }

  ${overwriteStyle('BreadcrumbIcon')};
`

const BreadcrumbIcon = forwardRefAs<BreadcrumbIconProps, 'span'>(
  ({ as = 'span', children, ...props }, ref) => (
    <BreadcrumbIconStyled as={as} ref={ref} {...props}>
      {children}
    </BreadcrumbIconStyled>
  ),
)

const BreadcrumbLink = forwardRefAs<BreadcrumbLinkProps, 'a'>(({ as = 'a', children, ...props }, ref) => (
  <BreadcrumbLinkStyled as={as} ref={ref} {...props}>
    {children}
  </BreadcrumbLinkStyled>
))

const BreadcrumbItem = forwardRefAs<BreadcrumbItemProps, 'li'>(({ as = 'li', children, ...props }, ref) => (
  <BreadcrumbItemStyled as={as} ref={ref} {...props}>
    {children}
  </BreadcrumbItemStyled>
))

const Breadcrumb = forwardRefAs<BreadcrumbProps, 'nav'>(({ children, ...props }, ref) => (
  <BreadcrumbStyled ref={ref} {...props}>
    <Flex as="ul" sx={{ m: '0', p: '0' }}>
      {children}
    </Flex>
  </BreadcrumbStyled>
))

export { Breadcrumb, BreadcrumbIcon, BreadcrumbItem, BreadcrumbLink }

