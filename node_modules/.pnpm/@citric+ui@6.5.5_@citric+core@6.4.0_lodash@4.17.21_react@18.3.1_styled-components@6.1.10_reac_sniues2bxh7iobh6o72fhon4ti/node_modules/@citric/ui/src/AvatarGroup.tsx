import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { css, styled } from '@citric/core/dist/styled'
import { WithTheme } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getFontFamily, getSpacing } from '@citric/core/dist/utils/theme'
import { Children, isValidElement, ReactNode } from 'react'
import { OneOfAvatarSizes } from './Avatar'

export interface AvatarGroupProps {
  as?: AsProp,
  sx?: SxProp,
  size?: OneOfAvatarSizes,
  maxAvatars?: number,
  children: ReactNode,
}

const getMarginLeft: Record<OneOfAvatarSizes, any> = {
  xxs: () => css`
    margin-left: -0.25rem;
  `,
  xs: () => css`
    margin-left: -0.25rem;
  `,
  sm: () => css`
    margin-left: -0.5rem;
  `,
  md: () => css`
    margin-left: -0.75rem;
  `,
  lg: () => css`
    margin-left: -0.75rem;
  `,
  xl: () => css`
    margin-left: -1rem;
  `,
  xxl: () => css`
    margin-left: -2rem;
  `,
}

const otherAvatarsStyles: Record<OneOfAvatarSizes, any> = {
  xxs: () => css`
    font-size: 0.75rem;
    line-height: 1rem;
  `,
  xs: () => css`
    font-size: 0.75rem;
    line-height: 1rem;
  `,
  sm: () => css`
    font-size: 1rem;
    line-height: 2rem;
  `,
  md: () => css`
    font-size: 1.25rem;
    line-height: 2rem;
  `,
  lg: () => css`
    font-size: 1.5rem;
    line-height: 2.25rem;
  `,
  xl: () => css`
    font-size: 2rem;
    line-height: 4rem;
  `,
  xxl: () => css`
    font-size: 3.5rem;
    line-height: 5.5rem;
  `,
}

function getOtherAvatarsStyles({ size = 'lg' }: WithTheme<AvatarGroupProps>) {
  return otherAvatarsStyles[size]()
}

function getValidChildren(children: React.ReactNode) {
  return Children.toArray(children).filter((child) => isValidElement(child)) as React.ReactElement[]
}

function getCountOfOthersAvatars(children: React.ReactNode, maxAvatars: number) {
  const MAX_COUNT_AVATARS = 999
  const countOfAvatars = getValidChildren(children).length

  if (countOfAvatars >= MAX_COUNT_AVATARS) return `+${MAX_COUNT_AVATARS}`
  if (countOfAvatars > maxAvatars) return `+${getValidChildren(children).length - maxAvatars}`

  return null
}

const AvatarGroupStyled = styled.ul.withConfig(defaultConfig) <AvatarGroupProps>`
  display: flex;
  flex-direction: row;
  align-items: center;
  list-style: none;
  padding: 0;

  ${extendStyle('AvatarGroup')};
  ${overwriteStyle('AvatarGroup')};
`

const AvatarGroupContent = styled.li.withConfig(defaultConfig) <AvatarGroupProps>`
  display: flex;
  flex-direction: row;
  align-items: center;

  ${extendStyle('AvatarGroupContent')};

  div:not(:first-of-type) {
    ${(props: AvatarGroupProps) => props?.size ? getMarginLeft[props.size]() : undefined};
  }

  ${overwriteStyle('AvatarGroupContent')};
`

const OtherAvatars = styled.span.withConfig(defaultConfig) <AvatarGroupProps>`
  color: ${({ theme }) => getColor(theme, 'light.contrastText')};
  font-family: ${({ theme }) => getFontFamily(theme, 'code')};
  margin-left: ${({ theme }) => getSpacing(theme, 3)};
  ${extendStyle('AvatarGroupChildrenOver')};

  ${overwriteStyle('AvatarGroupChildrenOver')};

  ${getOtherAvatarsStyles};
`

const AvatarGroup = forwardRefAs<AvatarGroupProps, 'ul'>(function AvatarGroup(
  { as = 'ul', ...props },
  ref,
) {
  const MAX_AVATARS_DEFAULT = 8
  const { size, children, maxAvatars = MAX_AVATARS_DEFAULT } = props
  const avatars = getValidChildren(children).slice(0, maxAvatars)
  const countOfOtherAvatars = getCountOfOthersAvatars(children, maxAvatars)

  return (
    <AvatarGroupStyled {...props} ref={ref} as={as}>
      <AvatarGroupContent size={size || 'lg'}>
        {avatars}
        {countOfOtherAvatars && <OtherAvatars {...props}>{countOfOtherAvatars}</OtherAvatars>}
      </AvatarGroupContent>
    </AvatarGroupStyled>
  )
})

export default AvatarGroup
