
import { useState } from 'react'

type CoordsProps = { x: number, y: number }

const useMouseMove = (
  tooltipRef: React.MutableRefObject<any>,
): {
  coords: CoordsProps,
  handleMouseMove: (event: { clientX: number, clientY: number }) => void,
} => {
  const [coords, setCoords] = useState<CoordsProps>({ x: 0, y: 0 })

  function getPosition(clientPosition: number, tooltipSize: number, windowSize: number) {
    const totalSize = clientPosition + tooltipSize

    const position = totalSize > windowSize ? clientPosition - tooltipSize : clientPosition

    return position
  }

  function handleMouseMove(event: { clientX: number, clientY: number }) {
    const { clientX, clientY } = event
    const { width, height } = tooltipRef.current.getBoundingClientRect()

    const windowWidth = window.innerWidth
    const windowHeight = window.innerHeight

    setCoords({
      x: getPosition(clientX, width, windowWidth),
      y: getPosition(clientY, height, windowHeight),
    })
  }

  return { coords, handleMouseMove }
}

export default useMouseMove
