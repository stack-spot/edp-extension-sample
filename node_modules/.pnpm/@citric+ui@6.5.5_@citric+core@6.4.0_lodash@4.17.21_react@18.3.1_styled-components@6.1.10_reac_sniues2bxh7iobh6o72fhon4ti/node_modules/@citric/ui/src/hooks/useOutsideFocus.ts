 
import React, { useEffect } from 'react'

interface UseOutsideClickProps {
  ref: React.MutableRefObject<any>,
  callback: (event: MouseEvent | FocusEvent) => void,
  ignoredRef?: React.MutableRefObject<any>,
}

const useOutsideFocus = (props: UseOutsideClickProps) => {
  useEffect(() => {
    const handleClick = (event: MouseEvent | FocusEvent) => {
      if (
        !props.ref?.current?.contains(event.target) &&
        !props.ignoredRef?.current?.contains(event.target)
      ) {
        props.callback(event)
      }
    }

    document.addEventListener('mousedown', handleClick)
    document.addEventListener('focusin', handleClick)

    return () => {
      document.removeEventListener('mousedown', handleClick)
      document.removeEventListener('focusin', handleClick)
    }
  }, [props])
}

export default useOutsideFocus
