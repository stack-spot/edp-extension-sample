
import React, { useEffect } from 'react'

interface UseOutsideClickProps {
  ref: React.MutableRefObject<any>,
  callback: (event: MouseEvent) => void,
  ignoredRef?: React.MutableRefObject<any>,
}

interface HandleClickProps extends UseOutsideClickProps {
  event: MouseEvent,
}

function handleCallback(props: HandleClickProps) {
  if (
    !props?.ref?.current?.contains(props.event.target) &&
    !props?.ignoredRef?.current?.contains(props.event.target)
  ) {
    props.callback(props.event)
  }
}

const useOutsideClick = (props: UseOutsideClickProps) => {
  useEffect(() => {
    const handleClick = (event: MouseEvent) => {
      handleCallback({
        event,
        ref: props.ref,
        callback: props.callback,
        ignoredRef: props.ignoredRef || props.ref,
      })
    }

    document.addEventListener('mousedown', handleClick)

    return () => {
      document.removeEventListener('mousedown', handleClick)
    }
  }, [props.ref, props.callback, props.ignoredRef])
}

export default useOutsideClick
