
import React, { KeyboardEvent, useEffect, useRef, useState } from 'react'

const useNavigationVertical = (
  list: any,
): [React.MutableRefObject<any>, React.KeyboardEventHandler<any>] => {
  const [focusIndex, setFocusIndex] = useState<number>(-1)
  const ulRef = useRef<any>(null)

  const listLength = ulRef.current?.children.length ?? React.Children.count(list)

  const getDropdownChildren = (dropdownElement: any) => {
    const children = []

    for (let i = 0; i < dropdownElement?.children.length; i++) {
      const child = dropdownElement?.children[i]
      children.push(child)
    }

    return children
  }

  useEffect(() => {
    if (focusIndex >= 0) {
      const ulChildren = getDropdownChildren(ulRef.current)
      ulChildren?.[focusIndex]?.focus()
    }
  }, [focusIndex])

  const onKeyDown = (event: KeyboardEvent) => {
    switch (event.key) {
      case 'ArrowUp':
        setFocusIndex(focusIndex - 1 <= 0 ? 0 : focusIndex - 1)
        break
      case 'ArrowDown':
        setFocusIndex(focusIndex + 1 > listLength ? focusIndex - 1 : focusIndex + 1)
        break
      case 'Tab':
        setFocusIndex(-1)
        ulRef?.current?.focus()
        break
      default:
        break
    }
  }

  return [ulRef, onKeyDown]
}

export default useNavigationVertical
