import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import { css, styled } from '@citric/core/dist/styled'
import { OneOfFontWeights } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import {
  getColor,
  getFontFamily,
  getFontStyle,
  getFontWeight,
  getSpacing,
} from '@citric/core/dist/utils/theme'

export interface TableProps {
  appearance?: 'striped' | 'filled',
  sx?: SxProp,
}

export interface TableCellProps {
  weight?: OneOfFontWeights,
  sx?: SxProp,
}

const tableStripedStyle = css`
  > tbody tr:nth-of-type(2n + 1) td {
    background-color: ${({ theme }) => getColor(theme, 'light.400')};
  }
`

const tableFilledStyle = css`
  border-collapse: separate;
  border-spacing: 0 8px; 
  
  > tbody tr td {
    background-color: ${({ theme }) => getColor(theme, 'light.400')};
    padding: ${({ theme }) => `${getSpacing(theme, 3)} ${getSpacing(theme, 5)}`};
    border-radius: 4px;
  }

  > tbody tr {
    background-color: transparent;
  }
`

export const Table = styled.table.withConfig(defaultConfig) <TableProps>`
  border-collapse: collapse;
  box-sizing: border-box;
  width: 100%;

  ${extendStyle('Table')};

  background-color: ${({ theme }) => getColor(theme, 'light.300')};

  ${({ appearance }) => appearance === 'striped' && tableStripedStyle}
  ${({ appearance }) => appearance === 'filled' && tableFilledStyle}  

  ${overwriteStyle('Table')};
`
export const Thead = styled.thead.withConfig(defaultConfig) <{ sx?: SxProp }>`
  box-sizing: border-box;
  ${extendStyle('Thead')};
  ${overwriteStyle('Thead')};
`

export const Tbody = styled.tbody.withConfig(defaultConfig) <{ sx?: SxProp }>`
  box-sizing: border-box;
  ${extendStyle('Tbody')};
  ${overwriteStyle('Tbody')};
`

export const Tr = styled.tr.withConfig(defaultConfig) <{ sx?: SxProp }>`
  box-sizing: border-box;
  ${extendStyle('Tr')};
  ${overwriteStyle('Tr')};
`

export const Td = styled.td.withConfig(defaultConfig) <TableCellProps>`
  box-sizing: border-box;
  padding: ${({ theme }) => `${getSpacing(theme, 6)} ${getSpacing(theme, 5)}`};
  color: ${({ theme }) => getColor(theme, 'light.contrastText')};
  font: ${({ theme }) => getFontStyle(theme, 'body2')};
  ${extendStyle('Td')};
  ${overwriteStyle('Td')};
`

export const Th = styled.th.withConfig(defaultConfig) <TableCellProps>`
  box-sizing: border-box;
  padding: ${({ theme }) => `${getSpacing(theme, 6)} ${getSpacing(theme, 5)}`};
  color: ${({ theme }) => getColor(theme, 'light.700')};
  font-family: ${({ theme }) => getFontFamily(theme, 'system2')};
  font-weight: ${({ theme, weight = 'regular' }) => getFontWeight(theme, weight)};
  text-align: left;

  ${extendStyle('Th')};
  ${overwriteStyle('Th')};
`
