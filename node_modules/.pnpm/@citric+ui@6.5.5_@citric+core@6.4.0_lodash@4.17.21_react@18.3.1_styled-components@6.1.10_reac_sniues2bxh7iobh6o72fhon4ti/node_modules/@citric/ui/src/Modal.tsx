import { Backdrop } from '@citric/core'
import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { css, styled } from '@citric/core/dist/styled'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getFontStyle, getRadius, getSpacing } from '@citric/core/dist/utils/theme'
import { Times } from '@citric/icons'
import { Property } from 'csstype'
import { createContext, useContext, useEffect, useMemo } from 'react'
import IconButton from './IconButton'

export type OneOfModalSizes = 'lg' | 'md' | 'sm'
type OneOfModalScrollBehavior = 'outside' | 'inside'
type OneOfModalPositions = 'center' | 'right'

interface Props {
  sx?: SxProp,
  as?: AsProp,
  children?: React.ReactNode,
}

interface ModalProps extends Props {
  onClose?: () => void,
  size?: OneOfModalSizes,
  position?: OneOfModalPositions,
}

interface ModalFooterProps {
  justifyContent?: Property.JustifyContent,
  sx?: SxProp,
}

interface ModalContentProps {
  scrollBehavior?: OneOfModalScrollBehavior,
  sx?: SxProp,
}

const modalSizes = {
  lg: () => css`
    width: 800px;
  `,
  md: () => css`
    width: 600px;
  `,
  sm: () => css`
    width: 400px;
  `,
}

const modalPosition = {
  center: () => css`
    position: relative;
    margin: 3.75rem auto;
    border-radius: ${({ theme }) => getRadius(theme, 'md')};
  `,
  right: () => css`
    position: absolute;
    right: 0;
    height: 100vh;
    margin: 0;
    border-top-left-radius: ${({ theme }) => getRadius(theme, 'md')};
    border-bottom-left-radius: ${({ theme }) => getRadius(theme, 'md')};
  `,
}

export const ModalContext = createContext<{ onClose?: () => void }>({})

export const ModalStyled = styled.section
  .withConfig(defaultConfig) <{ size: OneOfModalSizes, position: OneOfModalPositions }>`
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding: ${({ theme }) => getSpacing(theme, 9)};
  flex-wrap: wrap;
  ${extendStyle('Modal')};

  ${({ size = 'lg' }) => modalSizes[size]}
  ${({ position = 'center' }) => modalPosition[position]}

  background-color: ${({ theme }) => getColor(theme, 'light.400')};
  color: ${({ theme }) => getColor(theme, 'light.contrastText')};

  ${overwriteStyle('Modal')};
`

export const ModalHeader = styled.header.withConfig(defaultConfig) <Props>`
  box-sizing: border-box;
  flex-grow: 1;
  ${extendStyle('ModalHeader')};

  font: ${({ theme }) => getFontStyle(theme, 'h3')};
  color: ${({ theme }) => getColor(theme, 'light.contrastText')};

  ${overwriteStyle('ModalHeader')};
`

export const ModalContent = styled.div.withConfig(defaultConfig) <ModalContentProps>`
  box-sizing: border-box;
  width: 100%;

  max-height: ${({ scrollBehavior = 'inside' }) =>
    scrollBehavior === 'inside' ? '50vh' : 'fit-content'};

  overflow-y: auto;
  &::-webkit-scrollbar {
    width: 5px;
  }
  &::-webkit-scrollbar-track {
    background: ${({ theme }) => getColor(theme, 'light.400')};
  }
  &::-webkit-scrollbar-thumb {
    background: ${({ theme }) => getColor(theme, 'light.700')};
    border-radius: ${({ theme }) => getRadius(theme, 'xs')};
  }

  ${extendStyle('ModalContent')};
  ${overwriteStyle('ModalContent')};
`
export const ModalFooter = styled.footer.withConfig(defaultConfig) <ModalFooterProps>`
  box-sizing: border-box;
  width: 100%;
  display: flex;
  ${extendStyle('ModalFooter')};

  justify-content: ${({ justifyContent = 'space-between' }) => justifyContent};
  ${overwriteStyle('ModalFooter')};
`

export const ModalCloseButtonStyle = styled(IconButton)`
  ${extendStyle('ModalCloseButton')};
  ${overwriteStyle('ModalCloseButton')};
`

export const ModalCloseButton = forwardRefAs<Props, 'button'>(function ModalCloseButton(
  { children = <Times />, ...props },
  ref,
) {
  const ctx = useContext(ModalContext)

  return (
    <ModalCloseButtonStyle onClick={ctx.onClose} {...props} ref={ref} autoFocus>
      {children}
    </ModalCloseButtonStyle>
  )
})

export const Modal = forwardRefAs<ModalProps, 'section'>(function Modal(
  { onClose, ...props },
  ref,
) {
  const ctx = useMemo(() => ({ onClose }), [onClose])

  const isElementDisabled = (element: HTMLElement): boolean => 'disabled' in element && (element as any).disabled

  useEffect(() => {
    const modal: HTMLElement | null = document.getElementById('modal')

    if (modal) {
      const focusableElements = Array.from(modal.querySelectorAll('*'))
        .filter(element =>
          element instanceof HTMLElement &&
          element.tabIndex >= 0 &&
          !isElementDisabled(element) &&
          !element.hidden)

      modal.addEventListener('keydown', function trapTabKey(e) {
        if (e.key === 'Tab') {
          const focusableElementsArray: any = Array.from(focusableElements)

          if (document.activeElement === focusableElementsArray[focusableElementsArray.length - 1] && !e.shiftKey) {
            focusableElementsArray[0].focus()
            e.preventDefault()
          } else if (document.activeElement === focusableElementsArray[0] && e.shiftKey) {
            focusableElementsArray[focusableElementsArray.length - 1].focus()
            e.preventDefault()
          }
        }
      })
    }
  }, [])

  return (
    <ModalContext.Provider value={ctx}>
      <Backdrop onClick={onClose} data-testid="backdrop">
        <ModalStyled {...props} ref={ref} id="modal" />
      </Backdrop>
    </ModalContext.Provider>
  )
})
