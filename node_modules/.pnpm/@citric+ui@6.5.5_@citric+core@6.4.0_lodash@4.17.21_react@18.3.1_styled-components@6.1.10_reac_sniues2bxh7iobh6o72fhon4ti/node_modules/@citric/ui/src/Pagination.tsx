
import { useEffect, useState } from 'react'

interface UsePaginationProps<S> {
  data: S[],
  initialState?: number,
  contentPerPage?: number,
}

interface UsePaginationReturn<S> {
  data: S[],
  numberPages: number,
  listNumberPages: number[],
  indexPagination: number,
  canNextPage: boolean,
  canPreviousPage: boolean,
  contentPerPage: number,
  goToPage: (index: number) => void,
  previousPage: () => void,
  nextPage: () => void,
  viewMore: (index: number) => void,
  setContentPerPage: (content: number) => void,
  canViewMore: boolean,
}

function usePagination<S>(props: UsePaginationProps<S>): UsePaginationReturn<S> {
  const [indexPagination, setIndexPagination] = useState<number>(props.initialState || 1)
  const [contentPerPage, setContentPerPageState] = useState<number>(props.contentPerPage || 15)
  const [data, setData] = useState<S[]>([])

  const indexLast = indexPagination * contentPerPage
  const indexFirst = indexLast - contentPerPage

  useEffect(() => {
    setData(props.data.slice(indexFirst, indexLast))
  }, [indexFirst, indexLast, indexPagination, props.data])

  const listNumberPages: number[] = []
  const numberPages = Math.ceil(props.data.length / contentPerPage)

  const canNextPage = indexPagination < numberPages
  const canPreviousPage = indexPagination > 1
  const canViewMore = contentPerPage < props.data.length

  for (let index = 1; index <= Math.ceil(props.data.length / contentPerPage); index += 1) {
    listNumberPages.push(index)
  }

  function previousPage() {
    if (canPreviousPage) {
      setIndexPagination((currentIndex: number) => currentIndex - 1)
    }
  }

  function nextPage() {
    if (canNextPage) {
      setIndexPagination((currentIndex: number) => currentIndex + 1)
    }
  }

  function goToPage(index: number) {
    if (index <= numberPages && index > 0) setIndexPagination(index)
  }

  function viewMore(index: number) {
    setContentPerPageState(
      contentPerPage + index < props.data.length ? contentPerPage + index : props.data.length,
    )
  }

  function setContentPerPage(content: number) {
    setContentPerPageState(content)
    setIndexPagination(1)
  }

  return {
    data,
    numberPages,
    listNumberPages,
    indexPagination,
    canNextPage,
    canPreviousPage,
    contentPerPage,
    goToPage,
    previousPage,
    nextPage,
    viewMore,
    setContentPerPage,
    canViewMore,
  }
}

export default usePagination
