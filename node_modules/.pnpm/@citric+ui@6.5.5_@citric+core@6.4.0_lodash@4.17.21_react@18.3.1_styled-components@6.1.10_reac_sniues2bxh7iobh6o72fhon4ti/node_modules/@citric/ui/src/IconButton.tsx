import { colorIsColorScheme, colorIsPalette, OneOfColorSchemes, OneOfColorSchemesWithVariants, OneOfIconSizes, OneOfPalettes, OneOfPalettesWithVariants } from '@citric/core'
import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import { AsProp } from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { OneOfIconAppearances } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { SxAliasProps } from '@citric/core/dist/utils/sx-props'
import { getColor, getIconButtonSize, getRadius } from '@citric/core/dist/utils/theme'
import { ReactNode } from 'react'
import { css } from 'styled-components'

/**
 * Applies opacity to a theme color variable.
 * @param opacity the opacity in [0, 1]
 */
export function withOpacity(colorVariable: string, opacity: number) {
  return `color-mix(in srgb, ${colorVariable} ${Math.round(opacity * 100)}%, transparent)`
}

export interface IconButtonBase extends SxAliasProps {
  children: ReactNode,
  sx?: SxProp,
  as?: AsProp,
  size?: OneOfIconSizes,
}

export interface IconButtonDefaultProps extends IconButtonBase {
  color?: OneOfColorSchemes | OneOfPalettes,
  appearance?: 'text',
}

export interface IconButtonAppearance extends IconButtonBase {
  color?: OneOfColorSchemes | OneOfPalettes,
  appearance?: OneOfIconAppearances,
}

type IconButtonProps = IconButtonDefaultProps | IconButtonAppearance

function getIconColor(color: OneOfColorSchemes| OneOfPalettes): OneOfColorSchemesWithVariants | OneOfPalettesWithVariants | undefined {
  if (colorIsColorScheme(color))
    return `${color}.contrastText`
  if (colorIsPalette(color))
    return `${color}.50`
}

function getBgColor(color: OneOfColorSchemes | OneOfPalettes): OneOfColorSchemesWithVariants | OneOfPalettesWithVariants | undefined {
  if (colorIsColorScheme(color))
    return `${color}.500`
  if (colorIsPalette(color))
    return `${color}.800`
}

function getBgHoverColor(color: OneOfColorSchemes | OneOfPalettes): OneOfColorSchemesWithVariants | OneOfPalettesWithVariants | undefined {
  if (colorIsColorScheme(color))
    return `${color}.600`
  if (colorIsPalette(color))
    return `${color}.900`
}

export const IconButton = styled.button.withConfig(defaultConfig) <IconButtonProps>`
  box-sizing: border-box;
  display: inline-flex;
  border-radius: 100%;
  cursor: pointer;
  align-items: center;
  justify-content: center;
  border: none;
  padding: ${({ theme, size }) => getIconButtonSize(theme, size).spacing};
  border-width: 1px;
  border-style: solid;
  border-color: ${({ color, theme, appearance }) => {
    if (appearance === undefined || appearance === 'text') {
      return 'transparent'
    }
    if (color) {
      const colorDefinition = color.includes('.') ? color : getBgColor(color)
      return getColor(theme, colorDefinition)
    }
    return getColor(theme, 'light.500')
  }};
  
  border-radius: ${props => getRadius(props.theme, props?.appearance === 'circle' ? 'full' : 'xs')};
  width: fit-content;
  height: fit-content;

  &:disabled {
    pointer-events: none;
    > svg {
      opacity: 0.24;
    }
  }

  ${extendStyle('IconButton')};
  
  background-color: ${({ color, theme, appearance }) => {
    if (appearance === undefined || appearance === 'text') {
      return 'transparent'
    }
    if (color) {
      const colorDefinition = color.includes('.') ? color : getBgColor(color)
      return getColor(theme, colorDefinition)
    }
    return getColor(theme, 'light.500')
  }};

  > svg {
    width: ${({ theme, size }) => getIconButtonSize(theme, size).size}; 
    height: ${({ theme, size }) => getIconButtonSize(theme, size).size};
    display: inline;
    
    fill: ${({ color, theme }) => {
    if (color) {
      const colorDefinition = color.includes('.') ? color : getIconColor(color)
      return getColor(theme, colorDefinition)
    }
    return getColor(theme, 'light.contrastText')
  }}; 
  }

  &:hover,
  &:focus {
    ${({ theme, appearance, color }) => 
    (color && (appearance !== 'text' as OneOfIconAppearances) && (appearance !== undefined)) ?
      css`background-color: ${getColor(theme,  color.includes('.') ? color : getBgHoverColor(color))}`: 
      css`background-color: ${withOpacity(getColor(theme, 'light.contrastText'), 0.2)}`
};
    ${({ theme, appearance, color }) => 
    (color && (appearance !== 'text' as OneOfIconAppearances) && (appearance !== undefined)) ?
      css`border-color: ${getColor(theme,  color.includes('.') ? color : getBgHoverColor(color))}`: 
      css`border-color: ${withOpacity(getColor(theme, 'light.contrastText'), 0.2)}`
}
}
    
  

  ${overwriteStyle('IconButton')};
`

export default IconButton
