import { IconBox, Text } from '@citric/core'
import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { defaultConfig } from '@citric/core/dist/utils/config'
import {
  getColor,
  getFontStyle,
  getFontWeight,
  getRadius,
  getSpacing,
} from '@citric/core/dist/utils/theme'
import { ChevronDown } from '@citric/icons'
import { ReactNode, createContext, useCallback, useContext, useMemo, useState } from 'react'
import { styled } from 'styled-components'

export interface AccordionProps {
  as?: AsProp,
  sx?: SxProp,
  onChange?: (name: string | null | undefined) => void,
  active?: string | null | undefined,
}

export interface AccordionItemProps {
  name: string,
  as?: AsProp,
  sx?: SxProp,
}

export interface AccordionHeaderProps {
  children?: ReactNode,
  as?: AsProp,
  sx?: SxProp,
  asTitle?: AsProp,
}

export interface AccordionContentProps {
  children?: ReactNode,
  as?: AsProp,
  sx?: SxProp,
}

const AccordionContext = createContext<AccordionProps>({})
const AccordionItemContext = createContext<{ name?: string }>({})

export const AccordionStyle = styled.div`
  box-sizing: border-box;

  ${overwriteStyle('Accordion')};
  ${extendStyle('Accordion')};
`

export const AccordionItemStyled = styled.div.withConfig(defaultConfig) <AccordionItemProps >`
  box-sizing: border-box;
  border-radius: ${props => getRadius(props.theme, 'xs')};
  background-color: ${props => getColor(props.theme, 'light.300')};

  & + & {
    margin-top: 0.25rem;
  }

  ${overwriteStyle('AccordionItem')};
  ${extendStyle('AccordionItem')};
`

export const AccordionContentStyled = styled.div.withConfig(defaultConfig)`
  padding: ${props =>
    `0 ${getSpacing(props.theme, 5)} ${getSpacing(props.theme, 5)} ${getSpacing(props.theme, 5)}`};
  
  ${overwriteStyle('AccordionContent')};
  ${extendStyle('AccordionContent')};
`

export const AccordionTitle = styled.button.withConfig(defaultConfig) <AccordionHeaderProps & { active?: boolean }>`
  font: ${props => getFontStyle(props.theme, 'body1')};
  font-weight: ${props => getFontWeight(props.theme, 'medium')};
  line-height: 1;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  color: inherit;
  background-color: transparent;
  border: none;
  padding: ${props => `${getSpacing(props.theme, 5)}`};
  cursor: pointer;
  align-items: center;
  justify-content: space-between;
  border-radius: ${props => getRadius(props.theme, 'xs')};

  &:hover {
    background-color: ${props => !props?.active && getColor(props.theme, 'light.400')};
  }

  &:disabled {
    opacity: 0.24;
    pointer-events: none;
  }

  ${overwriteStyle('AccordionTitle')};
  ${extendStyle('AccordionTitle')};
`

export const AccordionIcon = styled(IconBox).attrs(({ children = <ChevronDown /> }) => ({
  children,
}))`
  width: auto;
  padding-inline: ${props => `${getSpacing(props.theme, 4)}`};
  > svg {
    fill: ${props => getColor(props.theme, 'light.contrastText')};
  }
  ${overwriteStyle('AccordionIcon')};
  ${extendStyle('AccordionIcon')};
`

export const Accordion = forwardRefAs<AccordionProps, 'div'>(function Accordion(
  { active = null, onChange, ...props },
  ref,
) {
  const [itemActive, setItemActive] = useState<string | null | undefined>(active)
  const onAccordionChange = useCallback(
    (name: string | null | undefined) => {
      const selectedItem = name !== itemActive ? name : null
      setItemActive(selectedItem)
      onChange?.(selectedItem)
    },
    [itemActive, setItemActive, onChange],
  )

  const ctx = useMemo(
    () => ({ active: itemActive, onChange: onAccordionChange }),
    [itemActive, onAccordionChange],
  )

  return (
    <AccordionContext.Provider value={ctx}>
      <AccordionStyle ref={ref} {...props} />
    </AccordionContext.Provider>
  )
})

export const AccordionItem = forwardRefAs<AccordionItemProps, 'div'>(function AccordionItem(
  { name, ...props },
  ref,
) {
  const ctx = useMemo(() => ({ name }), [name])

  return (
    <AccordionItemContext.Provider value={ctx}>
      <AccordionItemStyled ref={ref} {...props} />
    </AccordionItemContext.Provider>
  )
})

export const AccordionHeader = forwardRefAs<AccordionHeaderProps, 'button'>(
  function AccordionHeader(props, ref) {
    const { name } = useContext(AccordionItemContext)
    const { onChange, active } = useContext(AccordionContext)

    return (
      <Text as={props.asTitle || 'h2'}>
        <AccordionTitle
          {...props}
          aria-expanded={active ? true : false}
          ref={ref}
          active={name === active}
          onClick={() => onChange && onChange(name)}
        />
      </Text>
    )
  },
)

export const AccordionContent = forwardRefAs<AccordionContentProps, 'div'>(
  function AccordionContent({ children, ...props }, ref) {
    const { active } = useContext(AccordionContext)
    const { name } = useContext(AccordionItemContext)

    if (active !== name) {
      return null
    }

    return (
      <AccordionContentStyled {...props} ref={ref}>
        {children}
      </AccordionContentStyled>
    )
  },
)
