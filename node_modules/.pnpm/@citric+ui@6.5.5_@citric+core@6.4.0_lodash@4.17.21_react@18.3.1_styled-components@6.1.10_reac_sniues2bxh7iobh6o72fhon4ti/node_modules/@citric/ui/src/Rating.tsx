import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor } from '@citric/core/dist/utils/theme'
import { Star, StarFill } from '@citric/icons'
import { ReactNode, useEffect, useRef, useState } from 'react'

type LabelProps = (index?: number) => string

export interface RatingProps {
  as?: AsProp,
  sx?: SxProp,
  fullyIcon?: ReactNode,
  emptyIcon?: ReactNode,
  initialValue?: number,
  maxLength?: number,
  onChange?: (value: number) => void,
  label?: LabelProps,
}

const LABEL: LabelProps = (index) => `${index}`

const StyledRating = styled.ul.withConfig(defaultConfig)`
  all: unset;
  display: inline-flex;

  ${extendStyle('Rating')};
  ${overwriteStyle('Rating')};
`

const StyledLabel = styled.li`
  all: unset;

  :hover {
    cursor: pointer;
  }

  ${extendStyle('RatingLabel')};
  ${overwriteStyle('RatingLabel')};
`

const CustomStarFill = styled(StarFill)`
  fill: ${({ theme }) => getColor(theme, 'yellow.500')};
`

const CustomStar = styled(Star)`
  fill: ${({ theme }) => getColor(theme, 'light.700')};
`

const useNavigationHorizontal = (
  listLength: number,
): [React.MutableRefObject<HTMLUListElement | null>, React.KeyboardEventHandler<HTMLUListElement>] => {
  const [currentIndex, setCurrentIndex] = useState<number>(0)
  const ref = useRef<HTMLUListElement | null>(null)

  useEffect(() => {
    if (currentIndex >= 0) {
      const item = ref?.current?.children?.[currentIndex] as HTMLElement

      item.focus()
    }
  }, [currentIndex])

  function checkNextChildren() {
    if (currentIndex + 1 <= listLength - 1) {
      setCurrentIndex(currentIndex + 1)
    }
  }

  function checkPreviousChildren() {
    if (currentIndex - 1 >= 0) {
      setCurrentIndex(currentIndex - 1)
    }
  }

  function handleClickEnter() {
    const item = ref?.current?.children?.[currentIndex] as HTMLElement

    item.click()
  }

  const onKeyDown = (event: React.KeyboardEvent<HTMLUListElement>) => {
    switch (event.key) {
      case 'ArrowLeft':
        checkPreviousChildren()
        break
      case 'ArrowRight':
        checkNextChildren()
        break
      case 'Enter':
        handleClickEnter()
        break
      default:
        break
    }
  }

  return [ref, onKeyDown]
}

const Rating = forwardRefAs<RatingProps, 'ul'>(function Rating(
  {
    emptyIcon = <CustomStar />,
    fullyIcon = <CustomStarFill />,
    maxLength = 5,
    initialValue = 0,
    as = 'ul',
    label = LABEL,
    onChange,
    ...props
  }: RatingProps,
  ref,
) {
  const [ulGroupRef, onKeyDown] = useNavigationHorizontal(maxLength)
  const [value, setValue] = useState(initialValue)

  useEffect(() => {
    if (ref && typeof ref === 'object') {
      ref.current = ulGroupRef.current
    }
  }, [ref, ulGroupRef])

  return (
    <StyledRating
      ref={ulGroupRef}
      onKeyDown={onKeyDown}
      as={as}
      role="listbox"
      tabIndex={0}
      {...props}
    >
      {[...Array(maxLength)].map((item, index) => (
        <StyledLabel
          onClick={() => {
            onChange?.(index + 1)
            setValue(index + 1)
          }}
          aria-checked={value === index + 1}
          key={`option-${index + 1}`}
          tabIndex={-1}
          aria-label={label(index + 1)}
          role="option"
        >
          {value < index + 1 ? emptyIcon : fullyIcon}
        </StyledLabel>
      ))}
    </StyledRating>
  )
})

export default Rating
