import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import { AsProp } from '@citric/core/dist/forward-ref-as'
import { css, keyframes, styled } from '@citric/core/dist/styled'
import { Theme, WithTheme } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor } from '@citric/core/dist/utils/theme'

type SkeletonAppearance = 'circle' | 'square'

export interface SkeletonProps {
  as?: AsProp,
  sx?: SxProp,
  width?: string,
  height?: string,
  appearance?: SkeletonAppearance,
}

const getSkeletonLoading = (theme: Theme) => keyframes`
  from {
    background-color: ${getColor(theme, 'light')};
  }

  to {
    background-color: ${getColor(theme, 'light.400')};
  }
`

const skeletonStyles = {
  circle: (width?: string) => css`
    width: ${width || '3.125rem'};
    height: ${width || '3.125rem'};
    border-radius: 50%;
  `,

  square: (width?: string, height?: string) => css`
    width: ${width || '100%'};
    height: ${height || '2rem'};
  `,
}

function getSkeletonAppearance({ appearance = 'square', width, height }: WithTheme<SkeletonProps>) {
  return skeletonStyles[appearance](width, height)
}

const Skeleton = styled.div.withConfig(defaultConfig) <SkeletonProps>`
  ${extendStyle('Skeleton')};

  animation: ${({ theme }) => getSkeletonLoading(theme)} 1s linear infinite alternate;

  ${getSkeletonAppearance};
  ${overwriteStyle('Skeleton')};
`
export default Skeleton
