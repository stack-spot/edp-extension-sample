import { Flex } from '@citric/core'
import { extendStyle, overwriteStyle, SxProp } from '@citric/core/dist/component-style'
import forwardRefAs from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { OneOfPalettes } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getFontStyle, getRadius, getSpacing } from '@citric/core/dist/utils/theme'
import { ReactNode } from 'react'

type OneOfBadgeAppearances = 'rounded' | 'square'

interface Props {
  sx?: SxProp,
  palette?: OneOfPalettes,
  children: ReactNode,
  appearance?: OneOfBadgeAppearances,
}

const BadgeStyled = styled.div.withConfig(defaultConfig) <Props>`
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 1.5rem;
  padding: 0 0.5rem;

  &:nth-of-type(1n + 1) {
    margin-right: ${({ theme }) => getSpacing(theme, 2)};
  }

  ${extendStyle('Badge')};

  font: ${({ theme }) => getFontStyle(theme, 'microtext1')};
  border-radius: ${({ theme, appearance }) =>
    getRadius(theme, appearance === 'square' ? 'xs' : 'full')};
  background-color: ${({ theme, palette = 'indigo' }) => getColor(theme, `${palette}.800`)};
  color: ${({ theme, palette = 'indigo' }) => getColor(theme, `${palette}.50`)};

  ${overwriteStyle('Badge')};
`

const Badge = forwardRefAs<Props, 'div'>(function Badge(props, ref) {
  return (
    <BadgeStyled {...props} ref={ref}>
      <Flex as="span" alignItems="center" flexWrap="nowrap">
        {props.children}
      </Flex>
    </BadgeStyled>
  )
})

export default Badge
