import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { OneOfColorSchemes } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getFontStyle } from '@citric/core/dist/utils/theme'
import { ReactNode, Ref } from 'react'

type OneOfProgressSizes = 'xs' | 'sm' | 'md' | 'lg'

export interface ProgressCircularProps {
  sx?: SxProp,
  percentage?: number,
  colorScheme?: OneOfColorSchemes,
  size?: OneOfProgressSizes,
  ref?: Ref<SVGSVGElement>,
  children?: ReactNode,
}

const progressSizeStyles = {
  xs: '0.875',
  sm: '1.375',
  md: '1.875',
  lg: '2.875',
}

function getProgressStyle(size: OneOfProgressSizes = 'md') {
  return progressSizeStyles[size]
}

const ProgressCircularStyled = styled.svg.withConfig(defaultConfig).attrs({
  viewBox: '0 0 120 120',
}) <ProgressCircularProps>`
  transform: rotate(-90deg);
  ${extendStyle('ProgressCircular')};

  width: ${(props: ProgressCircularProps) => getProgressStyle(props?.size)}rem;
  height: ${(props: ProgressCircularProps) => getProgressStyle(props?.size)}rem;

  circle:first-child {
    stroke: ${({ theme }) => getColor(theme, 'light.600')};
  }
  circle:nth-child(2) {
    stroke: ${({ theme, colorScheme = 'primary' }) => getColor(theme, `${colorScheme}.500`)};
    stroke-dasharray: 100;
    stroke-dashoffset: ${(props: ProgressCircularProps) => props?.percentage && 100 - props?.percentage};
  }

  ${overwriteStyle('ProgressCircular')};
`

const BaseCircle = styled.circle.withConfig(defaultConfig).attrs({
  cx: '60',
  cy: '60',
  r: '54',
  fill: 'none',
  strokeWidth: '12',
})``

const ViewCircle = styled.circle.withConfig(defaultConfig).attrs({
  strokeLinecap: 'round',
  cx: '60',
  cy: '60',
  r: '54',
  fill: 'none',
  strokeWidth: '7',
  pathLength: '100',
})``

const ProgressText = styled.text.withConfig(defaultConfig).attrs({
  x: '50%',
  y: '-50%',
  dominantBaseline: 'middle',
  textAnchor: 'middle',
}) <ProgressCircularProps>`
  transform: rotate(90deg);
  font: ${({ theme }) => getFontStyle(theme, 'microtext1')};
  font-size: ${(props: ProgressCircularProps) => getProgressStyle(props?.size)}rem;
`

const ProgressCircular = forwardRefAs<ProgressCircularProps, 'svg'>(function ProgressCircular(
  { children, ...props },
  ref,
) {
  return (
    <ProgressCircularStyled {...props} ref={ref}>
      <BaseCircle />
      <ViewCircle />
      <ProgressText size={props.size}>{children}</ProgressText>
    </ProgressCircularStyled>
  )
})

export default ProgressCircular
