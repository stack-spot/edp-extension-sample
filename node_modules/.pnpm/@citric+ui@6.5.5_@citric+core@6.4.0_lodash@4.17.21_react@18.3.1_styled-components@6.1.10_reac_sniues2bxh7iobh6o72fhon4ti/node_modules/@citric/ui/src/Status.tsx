import { Flex, IconBox } from '@citric/core'
import { SxProp, extendStyle, overwriteStyle } from '@citric/core/dist/component-style'
import forwardRefAs, { AsProp } from '@citric/core/dist/forward-ref-as'
import { styled } from '@citric/core/dist/styled'
import { OneOfColorSchemesWithVariants } from '@citric/core/dist/theme-types'
import { defaultConfig } from '@citric/core/dist/utils/config'
import { getColor, getFontStyle, getRadius, getSpacing } from '@citric/core/dist/utils/theme'
import { JSXElementConstructor, ReactNode } from 'react'

type StatusPosition = 'left' | 'right'

interface StatusProps {
  as?: AsProp,
  sx?: SxProp,
  colorScheme?: OneOfColorSchemesWithVariants,
  children?: ReactNode,
  statusPosition?: StatusPosition,
  icon?: JSXElementConstructor<any>,
}

interface StatusBadgeProps {
  colorScheme?: OneOfColorSchemesWithVariants,
}

const StatusBadge = styled.div.withConfig(defaultConfig) <StatusBadgeProps>`
  display: flex;
  height: ${({ theme }) => getSpacing(theme, 4)};
  width: ${({ theme }) => getSpacing(theme, 4)};
  background-color: ${({ theme, colorScheme = 'primary' }) =>
    getColor(theme, colorScheme, 500)};
  border-radius: ${({ theme }) => getRadius(theme, 'full')};
  margin-left: ${({ theme }) => getSpacing(theme, 2)};
  margin-right: ${({ theme }) => getSpacing(theme, 2)};
`

const StatusStyled = styled.div<StatusProps>`
  display: inline-flex;
  align-items: center;
  font: ${({ theme }) => getFontStyle(theme, 'microtext1')};

  ${extendStyle('Status')};
  ${overwriteStyle('Status')};
`

const StatusWithIcon = ({ colorScheme, icon: Icon }: StatusBadgeProps & { icon?: JSXElementConstructor<any> }) => (Icon ? (
  <IconBox size="xs" colorIcon={colorScheme} sx={{ mx: '2' }}>
    <Icon />
  </IconBox>
) :
  <StatusBadge colorScheme={colorScheme} />
)

const Status = forwardRefAs<StatusProps, 'div'>(function Status({ statusPosition = 'right', colorScheme, icon, ...props }, ref) {
  return (
    <StatusStyled {...props} ref={ref}>
      {statusPosition === 'left' && <StatusWithIcon colorScheme={colorScheme} icon={icon} />}

      <Flex as="span" alignItems="center">
        {props.children}
      </Flex>

      {statusPosition === 'right' && <StatusWithIcon colorScheme={colorScheme} icon={icon} />}
    </StatusStyled>
  )
})

export default Status
