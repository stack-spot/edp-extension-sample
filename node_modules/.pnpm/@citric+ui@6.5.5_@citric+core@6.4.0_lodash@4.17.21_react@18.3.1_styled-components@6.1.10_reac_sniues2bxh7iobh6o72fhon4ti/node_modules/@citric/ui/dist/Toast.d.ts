import { SxProp } from '@citric/core/dist/component-style.js';
import { AsProp } from '@citric/core/dist/forward-ref-as.js';
import { OneOfColorSchemes } from '@citric/core/dist/theme-types.js';
import { ReactNode } from 'react';
type PositionProps = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
export interface ToastProps {
    as?: AsProp;
    sx?: SxProp;
    children: ReactNode;
    colorScheme?: OneOfColorSchemes;
    position?: PositionProps;
}
declare const Toast: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, ToastProps>> & string;
declare const ToastButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<(Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "p" | "color" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "children" | "size" | "as" | "sx"> & import("./IconButton.js").IconButtonDefaultProps, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}) | (Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "p" | "color" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "children" | "size" | "as" | "sx"> & import("./IconButton.js").IconButtonAppearance, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}), import("styled-components/dist/types").BaseObject>> & string;
export { Toast, ToastButton };
//# sourceMappingURL=Toast.d.ts.map