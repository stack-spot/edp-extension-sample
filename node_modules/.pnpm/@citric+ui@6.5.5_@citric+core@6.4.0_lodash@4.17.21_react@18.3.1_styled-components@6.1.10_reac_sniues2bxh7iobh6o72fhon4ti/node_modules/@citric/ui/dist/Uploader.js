import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import forwardRefAs from '@citric/core/dist/forward-ref-as.js';
import { css, styled } from '@citric/core/dist/styled.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { getColor, getRadius, getSpacing } from '@citric/core/dist/utils/theme.js';
const UploaderStyled = styled.span.withConfig(defaultConfig) `
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${({ theme }) => `${getSpacing(theme, 3)}`};
  box-sizing: border-box;
  cursor: pointer;
  background-color: ${({ theme }) => `${getColor(theme, 'inverse')}`};
  color: ${({ theme }) => `${getColor(theme, 'inverse.contrastText')}`};

  input {
    cursor: pointer;
    position: absolute;
    top: 0;
    opacity: 0;
    right: 0;
    left: 0;
    bottom: 0;
  }

  border: 0.063rem solid ${({ theme }) => getColor(theme, 'inverse')};
  border-radius: ${({ theme }) => getRadius(theme, 'xs')};

  ${extendStyle('Uploader')};

  ${(props) => props?.disabled &&
    css `
      opacity: 0.24;
      pointer-events: none;
    `}

  ${overwriteStyle('Uploader')};
`;
const Uploader = forwardRefAs(function Uploader({ children, sx, ...props }, ref) {
    return (_jsxs(UploaderStyled, { disabled: props.disabled, sx: sx, children: [_jsx("input", { type: "file", ref: ref, ...props }), children] }));
});
export default Uploader;
//# sourceMappingURL=Uploader.js.map