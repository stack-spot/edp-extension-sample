import { jsx as _jsx } from "react/jsx-runtime";
import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import forwardRefAs from '@citric/core/dist/forward-ref-as.js';
import { styled } from '@citric/core/dist/styled.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { getColor } from '@citric/core/dist/utils/theme.js';
import { Star, StarFill } from '@citric/icons';
import { useEffect, useRef, useState } from 'react';
const LABEL = (index) => `${index}`;
const StyledRating = styled.ul.withConfig(defaultConfig) `
  all: unset;
  display: inline-flex;

  ${extendStyle('Rating')};
  ${overwriteStyle('Rating')};
`;
const StyledLabel = styled.li `
  all: unset;

  :hover {
    cursor: pointer;
  }

  ${extendStyle('RatingLabel')};
  ${overwriteStyle('RatingLabel')};
`;
const CustomStarFill = styled(StarFill) `
  fill: ${({ theme }) => getColor(theme, 'yellow.500')};
`;
const CustomStar = styled(Star) `
  fill: ${({ theme }) => getColor(theme, 'light.700')};
`;
const useNavigationHorizontal = (listLength) => {
    const [currentIndex, setCurrentIndex] = useState(0);
    const ref = useRef(null);
    useEffect(() => {
        if (currentIndex >= 0) {
            const item = ref?.current?.children?.[currentIndex];
            item.focus();
        }
    }, [currentIndex]);
    function checkNextChildren() {
        if (currentIndex + 1 <= listLength - 1) {
            setCurrentIndex(currentIndex + 1);
        }
    }
    function checkPreviousChildren() {
        if (currentIndex - 1 >= 0) {
            setCurrentIndex(currentIndex - 1);
        }
    }
    function handleClickEnter() {
        const item = ref?.current?.children?.[currentIndex];
        item.click();
    }
    const onKeyDown = (event) => {
        switch (event.key) {
            case 'ArrowLeft':
                checkPreviousChildren();
                break;
            case 'ArrowRight':
                checkNextChildren();
                break;
            case 'Enter':
                handleClickEnter();
                break;
            default:
                break;
        }
    };
    return [ref, onKeyDown];
};
const Rating = forwardRefAs(function Rating({ emptyIcon = _jsx(CustomStar, {}), fullyIcon = _jsx(CustomStarFill, {}), maxLength = 5, initialValue = 0, as = 'ul', label = LABEL, onChange, ...props }, ref) {
    const [ulGroupRef, onKeyDown] = useNavigationHorizontal(maxLength);
    const [value, setValue] = useState(initialValue);
    useEffect(() => {
        if (ref && typeof ref === 'object') {
            ref.current = ulGroupRef.current;
        }
    }, [ref, ulGroupRef]);
    return (_jsx(StyledRating, { ref: ulGroupRef, onKeyDown: onKeyDown, as: as, role: "listbox", tabIndex: 0, ...props, children: [...Array(maxLength)].map((item, index) => (_jsx(StyledLabel, { onClick: () => {
                onChange?.(index + 1);
                setValue(index + 1);
            }, "aria-checked": value === index + 1, tabIndex: -1, "aria-label": label(index + 1), role: "option", children: value < index + 1 ? emptyIcon : fullyIcon }, `option-${index + 1}`))) }));
});
export default Rating;
//# sourceMappingURL=Rating.js.map