import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Flex } from '@citric/core';
import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import forwardRefAs from '@citric/core/dist/forward-ref-as.js';
import { styled } from '@citric/core/dist/styled.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { Children, isValidElement } from 'react';
import Badge from './Badge.js';
import Tooltip from './Tooltip.js';
function getValidChildren(children) {
    return Children.toArray(children).filter((child) => isValidElement(child));
}
function getCountOfOthersAvatars(children, maxBadges) {
    const MAX_COUNT_BADGES = 999;
    const countOfBadges = getValidChildren(children).length;
    if (countOfBadges >= MAX_COUNT_BADGES)
        return `+${MAX_COUNT_BADGES}`;
    if (countOfBadges > maxBadges)
        return `+${getValidChildren(children).length - maxBadges}`;
    return null;
}
const BadgeGroupStyled = styled.div.withConfig(defaultConfig) `
  display: flex;
  flex-direction: row;
  list-style: none;
  align-items: center;
  padding: 0;
  margin:0;

  ${extendStyle('BadgeGroup')}
  ${overwriteStyle('BadgeGroup')}
`;
const BadgeGroup = forwardRefAs(function BadgeGroup({ as = 'ul', ...props }, ref) {
    const MAX_BADGE_DEFAULT = 9;
    const { children, maxBadges = MAX_BADGE_DEFAULT } = props;
    const listBadges = getValidChildren(children);
    const badges = listBadges.slice(0, maxBadges);
    const badgeOthers = listBadges.slice(maxBadges, listBadges.length);
    const listBadgeOthersText = Array();
    badgeOthers.map((badge) => {
        const typeofBadge = typeof badge.props.children;
        listBadgeOthersText.push(typeofBadge === 'string' ? badge.props.children : badge.props.children[0].props.children);
    });
    const textOthersBadges = listBadgeOthersText.join(', ');
    const countOfOthersBadges = getCountOfOthersAvatars(children, maxBadges);
    return (_jsxs(BadgeGroupStyled, { ...props, ref: ref, as: as, children: [badges, countOfOthersBadges && (_jsx(Flex, { sx: { display: 'inline-flex' }, children: _jsx(Tooltip, { text: textOthersBadges, position: props.tooltipPosition, children: _jsx(Badge, { palette: props.numberBadgeColor, children: countOfOthersBadges }) }) }))] }));
});
export default BadgeGroup;
//# sourceMappingURL=BadgeGroup.js.map