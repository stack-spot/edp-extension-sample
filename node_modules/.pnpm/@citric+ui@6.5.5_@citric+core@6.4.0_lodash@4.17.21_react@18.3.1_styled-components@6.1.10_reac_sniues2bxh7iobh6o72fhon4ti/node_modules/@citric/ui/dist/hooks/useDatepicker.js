import { useEffect, useState } from 'react';
import { ptBR, enUS } from 'date-fns/locale/index.js';
import { format, startOfWeek, addDays, startOfMonth, endOfMonth, endOfWeek, isSameDay, isSameMonth as isSameMonthDateFns, subMonths, subYears, addMonths, addYears, getMonth, setMonth, getYear, setYear, startOfDay, setDay, isValid, parse, } from 'date-fns';
const useDatepicker = (props) => {
    const [selectedDate, setSelectedDate] = useState(props.initialDate || new Date());
    const [currentDate, setCurrentDate] = useState(props.initialDate || selectedDate);
    const inputRef = props.ref;
    function handleLocale() {
        return props.locale === 'en' ? enUS : ptBR;
    }
    useEffect(() => {
        if (inputRef.current) {
            inputRef.current.value = format(selectedDate, props.formatDate || 'P', {
                locale: handleLocale(),
            });
            setCurrentDate(selectedDate);
        }
    }, [props.formatDate, props.locale, selectedDate]);
    function nextMonth() {
        setCurrentDate(addMonths(currentDate, 1));
    }
    function previousMonth() {
        setCurrentDate(subMonths(currentDate, 1));
    }
    function nextYear() {
        setCurrentDate(addYears(currentDate, 12));
    }
    function previousYear() {
        setCurrentDate(subYears(currentDate, 12));
    }
    function resetDate() {
        setSelectedDate(props.initialDate || new Date());
    }
    function setNewDay(day) {
        setSelectedDate(setDay(selectedDate, day));
    }
    function setNewMonth(month) {
        setSelectedDate(setMonth(selectedDate, month));
    }
    function setNewYear(year) {
        setSelectedDate(setYear(selectedDate, year));
    }
    function setNewDate(date) {
        setSelectedDate(date);
    }
    function makeWeek(start) {
        let date = startOfWeek(startOfDay(start));
        return () => {
            const week = [...Array(7)].map((item, index) => addDays(date, index));
            date = addDays(week[6], 1);
            return week;
        };
    }
    function getCalendar() {
        let month = [];
        let date = currentDate;
        function lastDayOfRange(range) {
            return range[range.length - 1][6];
        }
        const weekGen = makeWeek(startOfMonth(date));
        const endDate = startOfDay(endOfWeek(endOfMonth(date)));
        month.push(weekGen());
        while (lastDayOfRange(month) < endDate) {
            month.push(weekGen());
        }
        const range = month;
        month = [];
        date = addDays(lastDayOfRange(range), 1);
        return range;
    }
    function getNameDaysWeek() {
        const date = startOfWeek(new Date());
        const formatPattern = props.locale === 'en' ? 'EE' : 'EEEEEE';
        const nameDaysWeek = Array.from(Array(7)).map((item, index) => format(addDays(date, index), formatPattern, { locale: handleLocale() }));
        return nameDaysWeek;
    }
    function getMonthsName() {
        const date = new Date();
        const monthsOptions = Array.from(Array(12)).map((item, index) => ({
            number: index,
            name: format(new Date(date.getFullYear(), index, 1), 'MMM', { locale: handleLocale() }),
            nameFull: format(new Date(date.getFullYear(), index, 1), 'MMMM', { locale: handleLocale() }),
        }));
        return monthsOptions;
    }
    function getYears() {
        const yearsOptions = [];
        const currentYear = getYear(currentDate);
        for (let index = currentYear - 5; index <= currentYear; index += 1) {
            yearsOptions.push(format(setYear(selectedDate, index), 'yyyy'));
        }
        for (let index = currentYear + 1; index <= currentYear + 6; index += 1) {
            yearsOptions.push(format(setYear(selectedDate, index), 'yyyy'));
        }
        return yearsOptions;
    }
    function isSameMonth(day) {
        return isSameMonthDateFns(day, currentDate);
    }
    function isCurrentDate({ day, month, year }) {
        const initialDate = props.initialDate || new Date();
        return ((day && isSameDay(initialDate, day)) ||
            month === getMonth(initialDate) ||
            year === getYear(initialDate));
    }
    function isSelected({ day, month, year }) {
        return ((day &&
            isSameDay(selectedDate, day)) ||
            month === getMonth(selectedDate) ||
            year === getYear(selectedDate));
    }
    function handleMask(value) {
        return value
            .replace(/\D/g, '')
            .replace(/(\d{2})(\d)/, '$1/$2')
            .replace(/(\d{2})(\d)/, '$1/$2')
            .replace(/(\d{4})(\d)/, '$1');
    }
    function handleChangeTyping(event) {
        if (inputRef.current) {
            inputRef.current.value = handleMask(event.target.value);
            const parsedDate = parse(inputRef.current.value, 'P', new Date(), { locale: handleLocale() });
            const isValidDate = isValid(parsedDate);
            if (isValidDate && inputRef.current.value.length === 10) {
                setSelectedDate(parsedDate);
            }
        }
    }
    return {
        nextMonth,
        previousMonth,
        nextYear,
        previousYear,
        resetDate,
        setNewDate,
        setNewDay,
        setNewMonth,
        setNewYear,
        isCurrentDate,
        isSelected,
        isSameMonth,
        getCalendar,
        getNameDaysWeek,
        getMonthsName,
        getYears,
        selectedDate,
        currentDate,
        handleChangeTyping,
        handleLocale,
        format,
        getYear,
    };
};
export default useDatepicker;
//# sourceMappingURL=useDatepicker.js.map