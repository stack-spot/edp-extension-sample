import { useEffect } from 'react';
function handleCallback(props) {
    if (!props?.ref?.current?.contains(props.event.target) &&
        !props?.ignoredRef?.current?.contains(props.event.target)) {
        props.callback(props.event);
    }
}
const useOutsideClick = (props) => {
    useEffect(() => {
        const handleClick = (event) => {
            handleCallback({
                event,
                ref: props.ref,
                callback: props.callback,
                ignoredRef: props.ignoredRef || props.ref,
            });
        };
        document.addEventListener('mousedown', handleClick);
        return () => {
            document.removeEventListener('mousedown', handleClick);
        };
    }, [props.ref, props.callback, props.ignoredRef]);
};
export default useOutsideClick;
//# sourceMappingURL=useOutsideClick.js.map