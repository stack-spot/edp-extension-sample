import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import { css, styled } from '@citric/core/dist/styled.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { getColor, getFontFamily, getFontWeight, getRadius } from '@citric/core/dist/utils/theme.js';
function getInitials(name) {
    const allNames = name.trim().split(' ');
    const initials = allNames.reduce((acc, curr, index) => {
        if (index === 0 || index === allNames.length - 1) {
            return `${acc}${curr.charAt(0).toUpperCase()}`;
        }
        return acc;
    }, '');
    return initials;
}
const avatarStyles = {
    xxs: () => css `
    width: 1.5rem;
    height: 1.5rem;
    font-size: 0.75rem;
    line-height: 1rem;
  `,
    xs: () => css `
    width: 2rem;
    height: 2rem;
    font-size: 0.75rem;
    line-height: 1rem;
  `,
    sm: () => css `
    width: 3rem;
    height: 3rem;
    font-size: 1rem;
    line-height: 2rem;
  `,
    md: () => css `
    width: 4rem;
    height: 4rem;
    font-size: 1.25rem;
    line-height: 2rem;
  `,
    lg: () => css `
    width: 5rem;
    height: 5rem;
    font-size: 1.5rem;
    line-height: 2.25rem;
  `,
    xl: () => css `
    width: 8rem;
    height: 8rem;
    font-size: 2rem;
    line-height: 4rem;
  `,
    xxl: () => css `
    width: 12rem;
    height: 12rem;
    font-size: 3.5rem;
    line-height: 5.5rem;
  `,
};
function getAvatarStyles({ size = 'lg' }) {
    return avatarStyles[size]();
}
const Avatar = styled.div.withConfig(defaultConfig).attrs(props => ({
    children: typeof props?.children === 'string' ? getInitials(props?.children) : props?.children,
})) `
  display: flex;
  justify-content: center;
  align-items: center;

  box-sizing: border-box;
  overflow: hidden;

  ${extendStyle('Avatar')};

  border-radius: ${({ theme, appearance }) => getRadius(theme, appearance === 'square' ? 'sm' : 'full')};
  font-family: ${({ theme }) => getFontFamily(theme, 'system1')};
  font-weight: ${({ theme }) => getFontWeight(theme, 'bold')};
  background-color: ${({ palette, theme }) => getColor(theme, palette ? `${palette}.800` : 'indigo.800')};
  color: ${({ palette, theme }) => getColor(theme, palette ? `${palette}.50` : 'indigo.50')};

  img {
    ${getAvatarStyles};
    object-fit: cover;
  }

  ${getAvatarStyles};

  ${overwriteStyle('Avatar')};
`;
export default Avatar;
//# sourceMappingURL=Avatar.js.map