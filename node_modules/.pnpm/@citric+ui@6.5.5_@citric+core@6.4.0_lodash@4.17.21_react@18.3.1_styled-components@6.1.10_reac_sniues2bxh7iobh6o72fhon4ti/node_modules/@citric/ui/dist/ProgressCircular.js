import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import forwardRefAs from '@citric/core/dist/forward-ref-as.js';
import { styled } from '@citric/core/dist/styled.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { getColor, getFontStyle } from '@citric/core/dist/utils/theme.js';
const progressSizeStyles = {
    xs: '0.875',
    sm: '1.375',
    md: '1.875',
    lg: '2.875',
};
function getProgressStyle(size = 'md') {
    return progressSizeStyles[size];
}
const ProgressCircularStyled = styled.svg.withConfig(defaultConfig).attrs({
    viewBox: '0 0 120 120',
}) `
  transform: rotate(-90deg);
  ${extendStyle('ProgressCircular')};

  width: ${(props) => getProgressStyle(props?.size)}rem;
  height: ${(props) => getProgressStyle(props?.size)}rem;

  circle:first-child {
    stroke: ${({ theme }) => getColor(theme, 'light.600')};
  }
  circle:nth-child(2) {
    stroke: ${({ theme, colorScheme = 'primary' }) => getColor(theme, `${colorScheme}.500`)};
    stroke-dasharray: 100;
    stroke-dashoffset: ${(props) => props?.percentage && 100 - props?.percentage};
  }

  ${overwriteStyle('ProgressCircular')};
`;
const BaseCircle = styled.circle.withConfig(defaultConfig).attrs({
    cx: '60',
    cy: '60',
    r: '54',
    fill: 'none',
    strokeWidth: '12',
}) ``;
const ViewCircle = styled.circle.withConfig(defaultConfig).attrs({
    strokeLinecap: 'round',
    cx: '60',
    cy: '60',
    r: '54',
    fill: 'none',
    strokeWidth: '7',
    pathLength: '100',
}) ``;
const ProgressText = styled.text.withConfig(defaultConfig).attrs({
    x: '50%',
    y: '-50%',
    dominantBaseline: 'middle',
    textAnchor: 'middle',
}) `
  transform: rotate(90deg);
  font: ${({ theme }) => getFontStyle(theme, 'microtext1')};
  font-size: ${(props) => getProgressStyle(props?.size)}rem;
`;
const ProgressCircular = forwardRefAs(function ProgressCircular({ children, ...props }, ref) {
    return (_jsxs(ProgressCircularStyled, { ...props, ref: ref, children: [_jsx(BaseCircle, {}), _jsx(ViewCircle, {}), _jsx(ProgressText, { size: props.size, children: children })] }));
});
export default ProgressCircular;
//# sourceMappingURL=ProgressCircular.js.map