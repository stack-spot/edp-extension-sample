import { useEffect, useState } from 'react';
function usePagination(props) {
    const [indexPagination, setIndexPagination] = useState(props.initialState || 1);
    const [contentPerPage, setContentPerPageState] = useState(props.contentPerPage || 15);
    const [data, setData] = useState([]);
    const indexLast = indexPagination * contentPerPage;
    const indexFirst = indexLast - contentPerPage;
    useEffect(() => {
        setData(props.data.slice(indexFirst, indexLast));
    }, [indexFirst, indexLast, indexPagination, props.data]);
    const listNumberPages = [];
    const numberPages = Math.ceil(props.data.length / contentPerPage);
    const canNextPage = indexPagination < numberPages;
    const canPreviousPage = indexPagination > 1;
    const canViewMore = contentPerPage < props.data.length;
    for (let index = 1; index <= Math.ceil(props.data.length / contentPerPage); index += 1) {
        listNumberPages.push(index);
    }
    function previousPage() {
        if (canPreviousPage) {
            setIndexPagination((currentIndex) => currentIndex - 1);
        }
    }
    function nextPage() {
        if (canNextPage) {
            setIndexPagination((currentIndex) => currentIndex + 1);
        }
    }
    function goToPage(index) {
        if (index <= numberPages && index > 0)
            setIndexPagination(index);
    }
    function viewMore(index) {
        setContentPerPageState(contentPerPage + index < props.data.length ? contentPerPage + index : props.data.length);
    }
    function setContentPerPage(content) {
        setContentPerPageState(content);
        setIndexPagination(1);
    }
    return {
        data,
        numberPages,
        listNumberPages,
        indexPagination,
        canNextPage,
        canPreviousPage,
        contentPerPage,
        goToPage,
        previousPage,
        nextPage,
        viewMore,
        setContentPerPage,
        canViewMore,
    };
}
export default usePagination;
//# sourceMappingURL=Pagination.js.map