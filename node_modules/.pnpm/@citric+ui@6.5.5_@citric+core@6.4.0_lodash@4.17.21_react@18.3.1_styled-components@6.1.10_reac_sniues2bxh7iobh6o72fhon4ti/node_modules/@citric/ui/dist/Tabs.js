import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Text } from '@citric/core';
import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import forwardRefAs from '@citric/core/dist/forward-ref-as.js';
import { styled } from '@citric/core/dist/styled.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { getColor } from '@citric/core/dist/utils/theme.js';
import { useEffect, useState } from 'react';
const styleButton = (selected) => {
    const bgColor = selected ? 'primary' : 'transparent';
    const styles = {
        button: {
            marginTop: '0.219rem',
            paddingBottom: '0.281rem',
            paddingInline: '2rem',
            cursor: 'pointer',
            color: 'light.contrastText',
            backgroundColor: 'transparent',
            border: 'none',
            position: 'relative',
            '&:hover, &:focus, &:active': {
                backgroundColor: 'transparent',
                borderColor: 'transparent',
            },
            '&::after': {
                content: '',
                width: '100%',
                height: '2px',
                backgroundColor: bgColor,
                bottom: '0px',
                position: 'absolute',
            },
        },
    };
    return styles.button;
};
const TabList = styled.nav.withConfig(defaultConfig) `
  list-style-type: none;
  display: flex;
  flex-direction: row;
  ${extendStyle('Tabs')}
  border-bottom: 0.063rem solid ${({ theme }) => getColor(theme, 'light.600')};
  ${overwriteStyle('Tabs')}
`;
const TabsItemStyled = styled.div.withConfig(defaultConfig) `
  display: flex;
  flex-direction: column;
  margin-top: 1rem;

  ${extendStyle('TabsItem')}
  ${overwriteStyle('TabsItem')}
`;
export const TabsItem = forwardRefAs(function TabsItem({ title, ...props }, ref) {
    return _jsx(TabsItemStyled, { ref: ref, ...props });
});
export const Tabs = forwardRefAs(function Tabs({ activeIndex = 0, children, onChange, ...props }, ref) {
    const [tabsChildren, setTabsChildren] = useState();
    useEffect(() => {
        const tabs = children.reduce((acc, tab) => (tab ? acc.concat(tab) : acc), []);
        setTabsChildren(tabs);
    }, [children]);
    if (!Array.isArray(children)) {
        return null;
    }
    return (_jsxs(_Fragment, { children: [tabsChildren && _jsx(TabList, { ...props, ref: ref, role: "tablist", children: tabsChildren.map((child, index) => (_jsx(Button, { type: "button", "aria-selected": index === activeIndex, onClick: () => onChange && onChange(index), role: "tab", disabled: child.props.disabled, sx: styleButton(index === activeIndex), children: _jsx(Text, { as: "span", appearance: "body2", weight: activeIndex === index ? 'medium' : undefined, children: child.props.title }) }, index))) }), tabsChildren && tabsChildren[activeIndex]] }));
});
//# sourceMappingURL=Tabs.js.map