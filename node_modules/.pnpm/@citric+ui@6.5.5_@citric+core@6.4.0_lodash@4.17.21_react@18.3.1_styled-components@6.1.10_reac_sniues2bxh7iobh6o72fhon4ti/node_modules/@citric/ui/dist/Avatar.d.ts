import { SxProp } from '@citric/core/dist/component-style.js';
import { AsProp } from '@citric/core/dist/forward-ref-as.js';
import { OneOfPalettes } from '@citric/core/dist/theme-types.js';
import { ReactNode } from 'react';
type OneOfAvatarAppearances = 'circle' | 'square';
export type OneOfAvatarSizes = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
export interface AvatarProps {
    as?: AsProp;
    sx?: SxProp;
    palette?: OneOfPalettes;
    appearance?: OneOfAvatarAppearances;
    size?: OneOfAvatarSizes;
    children: ReactNode;
}
declare const Avatar: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("styled-components/dist/types").FastOmit<import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}>, never>, AvatarProps>> & string;
export default Avatar;
//# sourceMappingURL=Avatar.d.ts.map