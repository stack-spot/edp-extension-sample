import { SxProp } from '@citric/core/dist/component-style.js';
import { AsProp } from '@citric/core/dist/forward-ref-as.js';
import { ReactNode } from 'react';
export interface AccordionProps {
    as?: AsProp;
    sx?: SxProp;
    onChange?: (name: string | null | undefined) => void;
    active?: string | null | undefined;
}
export interface AccordionItemProps {
    name: string;
    as?: AsProp;
    sx?: SxProp;
}
export interface AccordionHeaderProps {
    children?: ReactNode;
    as?: AsProp;
    sx?: SxProp;
    asTitle?: AsProp;
}
export interface AccordionContentProps {
    children?: ReactNode;
    as?: AsProp;
    sx?: SxProp;
}
export declare const AccordionStyle: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const AccordionItemStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, AccordionItemProps>> & string;
export declare const AccordionContentStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const AccordionTitle: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, AccordionHeaderProps & {
    active?: boolean | undefined;
}>> & string;
export declare const AccordionIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("styled-components/dist/types").Substitute<import("styled-components/dist/types").Substitute<(Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, "p" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "size" | "sx" | "colorIcon" | "colorBg"> & import("@citric/core/dist/IconBox.js").IconBoxColorBg, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | import("react").RefObject<HTMLElement> | null | undefined;
}) | (Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, "p" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "size" | "sx" | "colorIcon" | "colorBg"> & import("@citric/core/dist/IconBox.js").IconBoxIconColorOnly, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | import("react").RefObject<HTMLElement> | null | undefined;
}), (Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, "p" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "size" | "sx" | "colorIcon" | "colorBg"> & import("@citric/core/dist/IconBox.js").IconBoxColorBg, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | import("react").RefObject<HTMLElement> | null | undefined;
}) | (Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, "p" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "size" | "sx" | "colorIcon" | "colorBg"> & import("@citric/core/dist/IconBox.js").IconBoxIconColorOnly, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | import("react").RefObject<HTMLElement> | null | undefined;
})>, import("styled-components/dist/types").BaseObject>, import("styled-components/dist/types").BaseObject>> & string;
export declare const Accordion: <E extends import("react").ElementType = "div">(props: AccordionProps & import("@citric/core/dist/forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof AccordionProps>, ref: any) => JSX.Element;
export declare const AccordionItem: <E extends import("react").ElementType = "div">(props: AccordionItemProps & import("@citric/core/dist/forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof AccordionItemProps>, ref: any) => JSX.Element;
export declare const AccordionHeader: <E extends import("react").ElementType = "button">(props: AccordionHeaderProps & import("@citric/core/dist/forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof AccordionHeaderProps>, ref: any) => JSX.Element;
export declare const AccordionContent: <E extends import("react").ElementType = "div">(props: AccordionContentProps & import("@citric/core/dist/forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof AccordionContentProps>, ref: any) => JSX.Element;
//# sourceMappingURL=Accordion.d.ts.map