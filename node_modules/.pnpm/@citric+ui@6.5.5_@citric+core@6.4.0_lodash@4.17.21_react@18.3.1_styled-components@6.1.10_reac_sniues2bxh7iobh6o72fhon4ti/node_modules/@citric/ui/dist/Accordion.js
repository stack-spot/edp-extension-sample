import { jsx as _jsx } from "react/jsx-runtime";
import { IconBox, Text } from '@citric/core';
import { extendStyle, overwriteStyle } from '@citric/core/dist/component-style.js';
import forwardRefAs from '@citric/core/dist/forward-ref-as.js';
import { defaultConfig } from '@citric/core/dist/utils/config.js';
import { getColor, getFontStyle, getFontWeight, getRadius, getSpacing, } from '@citric/core/dist/utils/theme.js';
import { ChevronDown } from '@citric/icons';
import { createContext, useCallback, useContext, useMemo, useState } from 'react';
import { styled } from 'styled-components';
const AccordionContext = createContext({});
const AccordionItemContext = createContext({});
export const AccordionStyle = styled.div `
  box-sizing: border-box;

  ${overwriteStyle('Accordion')};
  ${extendStyle('Accordion')};
`;
export const AccordionItemStyled = styled.div.withConfig(defaultConfig) `
  box-sizing: border-box;
  border-radius: ${props => getRadius(props.theme, 'xs')};
  background-color: ${props => getColor(props.theme, 'light.300')};

  & + & {
    margin-top: 0.25rem;
  }

  ${overwriteStyle('AccordionItem')};
  ${extendStyle('AccordionItem')};
`;
export const AccordionContentStyled = styled.div.withConfig(defaultConfig) `
  padding: ${props => `0 ${getSpacing(props.theme, 5)} ${getSpacing(props.theme, 5)} ${getSpacing(props.theme, 5)}`};
  
  ${overwriteStyle('AccordionContent')};
  ${extendStyle('AccordionContent')};
`;
export const AccordionTitle = styled.button.withConfig(defaultConfig) `
  font: ${props => getFontStyle(props.theme, 'body1')};
  font-weight: ${props => getFontWeight(props.theme, 'medium')};
  line-height: 1;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  color: inherit;
  background-color: transparent;
  border: none;
  padding: ${props => `${getSpacing(props.theme, 5)}`};
  cursor: pointer;
  align-items: center;
  justify-content: space-between;
  border-radius: ${props => getRadius(props.theme, 'xs')};

  &:hover {
    background-color: ${props => !props?.active && getColor(props.theme, 'light.400')};
  }

  &:disabled {
    opacity: 0.24;
    pointer-events: none;
  }

  ${overwriteStyle('AccordionTitle')};
  ${extendStyle('AccordionTitle')};
`;
export const AccordionIcon = styled(IconBox).attrs(({ children = _jsx(ChevronDown, {}) }) => ({
    children,
})) `
  width: auto;
  padding-inline: ${props => `${getSpacing(props.theme, 4)}`};
  > svg {
    fill: ${props => getColor(props.theme, 'light.contrastText')};
  }
  ${overwriteStyle('AccordionIcon')};
  ${extendStyle('AccordionIcon')};
`;
export const Accordion = forwardRefAs(function Accordion({ active = null, onChange, ...props }, ref) {
    const [itemActive, setItemActive] = useState(active);
    const onAccordionChange = useCallback((name) => {
        const selectedItem = name !== itemActive ? name : null;
        setItemActive(selectedItem);
        onChange?.(selectedItem);
    }, [itemActive, setItemActive, onChange]);
    const ctx = useMemo(() => ({ active: itemActive, onChange: onAccordionChange }), [itemActive, onAccordionChange]);
    return (_jsx(AccordionContext.Provider, { value: ctx, children: _jsx(AccordionStyle, { ref: ref, ...props }) }));
});
export const AccordionItem = forwardRefAs(function AccordionItem({ name, ...props }, ref) {
    const ctx = useMemo(() => ({ name }), [name]);
    return (_jsx(AccordionItemContext.Provider, { value: ctx, children: _jsx(AccordionItemStyled, { ref: ref, ...props }) }));
});
export const AccordionHeader = forwardRefAs(function AccordionHeader(props, ref) {
    const { name } = useContext(AccordionItemContext);
    const { onChange, active } = useContext(AccordionContext);
    return (_jsx(Text, { as: props.asTitle || 'h2', children: _jsx(AccordionTitle, { ...props, "aria-expanded": active ? true : false, ref: ref, active: name === active, onClick: () => onChange && onChange(name) }) }));
});
export const AccordionContent = forwardRefAs(function AccordionContent({ children, ...props }, ref) {
    const { active } = useContext(AccordionContext);
    const { name } = useContext(AccordionItemContext);
    if (active !== name) {
        return null;
    }
    return (_jsx(AccordionContentStyled, { ...props, ref: ref, children: children }));
});
//# sourceMappingURL=Accordion.js.map