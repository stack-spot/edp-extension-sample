/// <reference types="react" />
import { SxProp } from '@citric/core/dist/component-style.js';
import { AsProp } from '@citric/core/dist/forward-ref-as.js';
import { Property } from 'csstype';
export type OneOfModalSizes = 'lg' | 'md' | 'sm';
type OneOfModalScrollBehavior = 'outside' | 'inside';
type OneOfModalPositions = 'center' | 'right';
interface Props {
    sx?: SxProp;
    as?: AsProp;
    children?: React.ReactNode;
}
interface ModalProps extends Props {
    onClose?: () => void;
    size?: OneOfModalSizes;
    position?: OneOfModalPositions;
}
interface ModalFooterProps {
    justifyContent?: Property.JustifyContent;
    sx?: SxProp;
}
interface ModalContentProps {
    scrollBehavior?: OneOfModalScrollBehavior;
    sx?: SxProp;
}
export declare const ModalContext: import("react").Context<{
    onClose?: (() => void) | undefined;
}>;
export declare const ModalStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, {
    size: OneOfModalSizes;
    position: OneOfModalPositions;
}>> & string;
export declare const ModalHeader: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, Props>> & string;
export declare const ModalContent: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, ModalContentProps>> & string;
export declare const ModalFooter: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, ModalFooterProps>> & string;
export declare const ModalCloseButtonStyle: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<(Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "p" | "color" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "children" | "size" | "as" | "sx"> & import("./IconButton.js").IconButtonDefaultProps, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}) | (Omit<import("styled-components/dist/types").FastOmit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "p" | "color" | "appearance" | "w" | "m" | "ml" | "mr" | "mt" | "mb" | "mx" | "my" | "pl" | "pr" | "pt" | "pb" | "px" | "py" | "bg" | "r" | "rtl" | "rbl" | "rtr" | "rbr" | "up(sm)" | "up(md)" | "up(lg)" | "down(sm)" | "down(md)" | "down(lg)" | "children" | "size" | "as" | "sx"> & import("./IconButton.js").IconButtonAppearance, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}), import("styled-components/dist/types").BaseObject>> & string;
export declare const ModalCloseButton: <E extends import("react").ElementType = "button">(props: Props & import("@citric/core/dist/forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof Props>, ref: any) => JSX.Element;
export declare const Modal: <E extends import("react").ElementType = "section">(props: ModalProps & import("@citric/core/dist/forward-ref-as.js").OwnProps<E> & Omit<JSX.LibraryManagedAttributes<E, import("react").ComponentPropsWithRef<E>>, keyof ModalProps>, ref: any) => JSX.Element;
export {};
//# sourceMappingURL=Modal.d.ts.map