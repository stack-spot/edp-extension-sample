import * as react_jsx_runtime from 'react/jsx-runtime';
import { Session, ThirdPartyLoginParams, AuthConfig, ThirdPartyAuthType } from '@stack-spot/auth';

type LoginType = 'sso' | 'idp';
interface BaseData {
    type: LoginType;
}
interface SSOData extends BaseData {
    type: 'sso';
    email: string;
}
interface IDPData extends BaseData {
    type: 'idp';
    provider: 'external-idp:github';
}
type LoginData = SSOData | IDPData;
type LoginProps = {
    initialValue?: string;
    onSubmit: (data: LoginData) => Promise<void>;
    welcomeText?: string;
    removeLoadingOnSuccess?: boolean;
    className?: string;
    style?: React.CSSProperties;
    banner?: React.ReactNode;
    loginTypes?: LoginType[];
};
declare const Login: ({ onSubmit, initialValue, welcomeText, removeLoadingOnSuccess, className, style, banner, loginTypes }: LoginProps) => react_jsx_runtime.JSX.Element;

interface SessionManagerConfig extends Pick<AuthConfig, 'accountUrl' | 'authUrl' | 'clientId' | 'defaultTenant' | 'retry' | 'retryDelay'> {
    /**
     * The URL to redirect to when the user logs out.
     * @default location.origin
     */
    loginUrl?: string;
    /**
     * The URL to redirect to when the login completes in the authentication app. If not provided, will be the same as `loginUrl`.
     * @default loginUrl
     */
    redirectUrl?: string;
    /**
     * Forbidden authentication types to this Session Manager.
     */
    blockedAuthTypes?: ThirdPartyAuthType[];
    /**
     * A URL to send login events to (observability).
     */
    rdUrl?: string;
}
type ChangeListener = (session: Session | undefined) => void;
/**
 * Controls the current session in a browser.
 *
 * This should not be used under a Node.JS environment.
 *
 * This is a singleton. To create the first instance or recover the current one, use `SessionManager.create`.
 */
declare class SessionManager {
    private current;
    private readonly auth;
    private config;
    private changeListeners;
    static instance: SessionManager | undefined;
    private constructor();
    static create(config: SessionManagerConfig): SessionManager;
    private setSession;
    restoreSession(): Promise<void>;
    validateSharedSession(session?: Session | undefined): Promise<boolean>;
    hasSession(): boolean;
    getSession(): Session;
    endSession(redirectToLogin?: boolean): Promise<void>;
    logout(): Promise<void>;
    startThirdPartyLogin(data: ThirdPartyLoginParams): Promise<void>;
    urlHasThirdPartyLoginData(): boolean;
    startThirdPartyLoginUsingTenant(data: ThirdPartyLoginParams): Promise<void>;
    completeThirdPartyLogin(): Promise<void>;
    getEmailForLogin(): string | undefined;
    switchAccount(accountId: string): Promise<void>;
    onChange(listener: ChangeListener): () => void;
    private setSessionCookie;
    private sendLoginEventRd;
}

type AuthStatus = 'unknown' | 'authenticated' | 'unauthenticated';
interface Props {
    children: React.ReactElement;
    onLogin?: () => void;
    onSession?: () => void;
    onChangeStatus?: (status: AuthStatus) => void;
    customLoginProps?: Omit<LoginProps, 'onSubmit' | 'initialValue'>;
    sessionManager?: SessionManager;
}
declare const Authenticated: ({ children, onLogin, onSession, customLoginProps, sessionManager, onChangeStatus }: Props) => react_jsx_runtime.JSX.Element | null;

declare function useSession(): Session | undefined;

export { Authenticated, Login, SessionManager, useSession };
