/* eslint-disable max-len */
import { Flex } from '@citric/core'
import { useEffectOnce } from '@stack-spot/portal-components'
import { CSSToCitricAdapter } from '@stack-spot/portal-theme'
import '@stack-spot/portal-theme/dist/theme.css'
import { useLanguage } from '@stack-spot/portal-translate'
import { useState } from 'react'
import { Login, LoginProps } from './Login'
import { SessionManager } from './SessionManager'

type AuthStatus = 'unknown' | 'authenticated' | 'unauthenticated'

interface Props {
  children: React.ReactElement,
  onLogin?: () => void,
  onSession?: () => void,
  onChangeStatus?: (status: AuthStatus) => void,
  customLoginProps?: Omit<LoginProps, 'onSubmit' | 'initialValue'>,
  sessionManager?: SessionManager,
}

export const Authenticated = ({ children, onLogin, onSession, customLoginProps, sessionManager, onChangeStatus }: Props) => {
  const [authStatus, setAuthStatus] = useState<AuthStatus>('unknown')
  const language = useLanguage()
  sessionManager ??= SessionManager.instance
  if (!sessionManager) throw new Error('Please, provide a sessionManager')

  useEffectOnce(() => {
    async function checkAuth() {
      if (!sessionManager) throw new Error('Please, provide a sessionManager')
      await sessionManager.restoreSession()
      if (sessionManager.urlHasThirdPartyLoginData()) {
        await sessionManager.completeThirdPartyLogin()
        onLogin?.()
      }
      if (sessionManager.hasSession()) {
        setAuthStatus('authenticated')
        onSession?.()
        onChangeStatus?.('authenticated')
      } else {
        setAuthStatus('unauthenticated')
        onChangeStatus?.('unauthenticated')
      }
    }

    checkAuth()
  })

  if (authStatus === 'unknown') return null
  if (authStatus === 'authenticated') return children

  return (
    <CSSToCitricAdapter>
      <Flex justifyContent="center" alignItems="center" flex={1} style={{ height: '100%' }}>
        <Login
          style={{ width: '360px' }}
          onSubmit={data => sessionManager.startThirdPartyLogin({ ...data, locale: language })}
          initialValue={sessionManager.getEmailForLogin()}
          {...(customLoginProps || {})}
        />
      </Flex>
    </CSSToCitricAdapter>
  )
}
