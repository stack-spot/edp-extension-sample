import { getCookieDomain } from '@stack-spot/portal-components'

const isValidDomain = (url: string) => {
  const portalDomainRegex = new RegExp(`^https?:\/\/[a-zA-Z0-9.-]*${getCookieDomain().replaceAll('.', '\.')}(:[0-9]{2,4})*.*$`, 'g')
  const platformDomainRegex = new RegExp(/^https:\/\/[a-zA-Z0-9.-]+\.stackspot\.com.*$/, 'g')
  const result = portalDomainRegex.test(url) || platformDomainRegex.test(url)
  return result
}

export const redirect = async (url: string) => {

  if (!isValidDomain(url)) throw new Error('Redirect URL invalid domain')

  window.location.href = url
  /**
   * This is intentional. The promise bellow will never be fulfilled.
   * Once the set href is not instantaneous, this will guarantee no further code is executed until the user is really redirected.
   * Particularly useful to prevent flickering page renders on scenarios with redirects.
   */
  await new Promise(() => '')
}