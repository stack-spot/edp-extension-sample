/* eslint-disable max-len */
import { Button, IconBox, Input, Text } from '@citric/core'
import { Github } from '@citric/icons'
import { LoadingCircular } from '@citric/ui'
import { BannerWarning } from '@stack-spot/portal-components'
import { MiniLogo } from '@stack-spot/portal-components/svg'
import { theme } from '@stack-spot/portal-theme'
import { Dictionary, useTranslate } from '@stack-spot/portal-translate'
import { useState } from 'react'
import { styled } from 'styled-components'

export type LoginType = 'sso' | 'idp'

interface BaseData {
  type: LoginType,
}

interface SSOData extends BaseData {
  type: 'sso',
  email: string,
}

interface IDPData extends BaseData {
  type: 'idp',
  provider: 'external-idp:github',
}

type LoginData = SSOData | IDPData

export type LoginProps = {
  initialValue?: string,
  onSubmit: (data: LoginData) => Promise<void>,
  welcomeText?: string,
  removeLoadingOnSuccess?: boolean,
  className?: string,
  style?: React.CSSProperties,
  banner?: React.ReactNode,
  loginTypes?: LoginType[]
}

const LoginBox = styled.form`
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 24px;

  header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 24px;
  }

  .title {
    font-size: 1rem;
  }

  .separator {
    padding: 0 8px;
    background-color: ${theme.color.light['300']};
    color: ${theme.color.light['700']};
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 20px;
    margin: 0;

    &:before, &:after {
      content: '';
      height: 1px;
      flex: 1;
      background-color: ${theme.color.light['600']};
    }
  }

  .error {
    color: ${theme.color.danger['500']};
    line-height: 1.5rem;
  }
`

export const Login = ({ onSubmit, initialValue = '', welcomeText, removeLoadingOnSuccess, className, style, banner, loginTypes = ['idp', 'sso'] }: LoginProps) => {
  const t = useTranslate(dictionary)
  const searchParams = new URLSearchParams(location.search)
  const [error, setError] = useState(searchParams.get('error_description') || searchParams.get('error') || '')
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState(initialValue)
  const disabled = !email.match(/\w+@\w+/)
  const idpLoginEnabled = loginTypes.includes('idp')
  const ssoLoginEnabled = loginTypes.includes('sso')

  async function login(type: LoginType) {
    setError('')
    setLoading(true)
    try {
      const data: LoginData = type === 'sso' ? { type: 'sso', email } : { type: 'idp', provider: 'external-idp:github' }
      await onSubmit(data)
      if (removeLoadingOnSuccess) setLoading(false)
    } catch (error: any) {
      setLoading(false)
      setError(error.message || error.toString())
    }
  }

  function submitForm(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    if (disabled) return
    login('sso')
  }

  return (
    <>
      <LoginBox onSubmit={submitForm} className={className} style={style}>
        <header>
          <MiniLogo />
          <Text className="title">{welcomeText || t.welcome}</Text>
        </header>
        {ssoLoginEnabled && <>
          <Input name="email" value={email} onChange={e => setEmail(e.target.value)} placeholder={t.placeholder} />
          <Button colorScheme="primary" disabled={disabled || loading}>
            {loading ? <LoadingCircular /> : <Text>{t.continue}</Text>}
          </Button>
        </>}
        {ssoLoginEnabled && idpLoginEnabled && <p className="separator">{t.or}</p>}
        {idpLoginEnabled &&
          <Button colorScheme="light" type="button" onClick={() => login('idp')} disabled={loading}>
            {loading ? <LoadingCircular /> : (
              <>
                <IconBox>
                  <Github />
                </IconBox>
                <Text>{t.loginWithGithub}</Text>
              </>
            )}
          </Button>}
        {error && <Text className="error">{t.error}: {error}</Text>}
      </LoginBox>
      {banner ? <BannerWarning>
        {banner}
      </BannerWarning> : null}
    </>
  )
}

const dictionary = {
  en: {
    welcome: 'Welcome to StackSpot',
    placeholder: 'your@email.com',
    continue: 'Continue',
    or: 'or',
    loginWithGithub: 'Login with Github',
    error: 'Error while attempting to login',
  },
  pt: {
    welcome: 'Bem vindo Ã  StackSpot',
    placeholder: 'nome@email.com',
    continue: 'Continuar',
    or: 'ou',
    loginWithGithub: 'Logar com o GitHub',
    error: 'Erro ao fazer login',
  },
} satisfies Dictionary
