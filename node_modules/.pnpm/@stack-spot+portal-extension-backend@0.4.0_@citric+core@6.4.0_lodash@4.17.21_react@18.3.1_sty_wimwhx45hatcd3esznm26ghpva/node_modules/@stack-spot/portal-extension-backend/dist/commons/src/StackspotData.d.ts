export interface Studio {
    accountSlug: string;
    canEdit: boolean;
    createdBy: string;
    description: string;
    editAllowed: boolean;
    id: string;
    image: string;
    isGoverned: boolean;
    name: string;
    pageId: string;
    shared: boolean;
    slug: string;
    tabs: string[];
    tags: string[];
    verified: boolean;
    visibility: 'ACCOUNT_ONLY' | 'PUBLIC' | 'RESTRICTED_ACCESS' | 'SELECTED_WORKSPACES';
}
export interface DocumentationLanguage {
    language: string;
    lastUpdated: string;
    status: 'DRAFT' | 'PUBLISHED';
}
export interface DocumentationInfo {
    documentationId: string;
    languages: DocumentationLanguage[];
}
export type ResourceStatus = 'PENDING_APPROVAL' | 'PENDING_CREATOR_UPDATE' | 'PUBLICATION_APPROVED' | 'PUBLICATION_DECLINED';
export interface StackVersion {
    copyFromStackVersionId: string;
    documentation: DocumentationInfo;
    hasDeprecatedContent: boolean;
    hasContext: boolean;
    hasVersionsWithContext: boolean;
    id: string;
    stackVersionId: string;
    published: boolean;
    publishedAt: string;
    publishedBy: string;
    semanticVersion: string;
    status: ResourceStatus;
    unpublishedAt: string;
    unpublishedBy: string;
    version: number;
}
export interface StackStudio {
    image: string;
    name: string;
    slug: string;
}
export interface Stack {
    canEdit: boolean;
    description: string;
    displayName: string;
    documentation: DocumentationInfo;
    existsDraft: boolean;
    hasContext: boolean;
    id: string;
    image: string;
    lastModificationAt: string;
    latestSemanticVersion: string;
    latestVersion: StackVersion;
    slug: string;
    status: string;
    studio: StackStudio;
    studioSlug: string;
    tabs: string[];
    tags: string[];
    versions: StackVersion[];
}
export interface ActionCommands {
    default: string;
    workspace: string;
}
export interface GovernanceDetail {
    id: string;
    status: ResourceStatus;
}
export interface Action {
    about: string;
    accountSlug: string;
    command: string;
    commands: ActionCommands;
    description: string;
    displayName: string;
    documentation: DocumentationInfo;
    governance: GovernanceDetail;
    id: string;
    implementation: string;
    isDocumented: boolean;
    qualifier: string;
    range: string;
    releaseNotes: string;
    repository: string;
    requirements: string;
    slug: string;
    status: 'DEPRECATED' | 'DRAFT' | 'PUBLISHED' | 'REPROVED' | 'UNPUBLISHED';
    studioSlug: string;
    type: string;
    usage: string;
    version: string;
    versionId: string;
}
export interface Workspace {
    canEdit: boolean;
    createdBy: string;
    description: string;
    id: string;
    image: string;
    name: string;
    pageId: string;
}
export interface ApplicationStack {
    displayName: string;
    image: string;
    imageUrl: string;
}
export interface SharedInfra {
    canDelete: boolean;
    canEdit: boolean;
    description: string;
    id: string;
    name: string;
    reconcile: boolean;
    repoBaseBranch: string;
    repoUrl: string;
    stack: ApplicationStack;
    stackVersionId: string;
    status: string;
    version: string;
}
export interface WorkspaceApiEnvironment {
    createdAt: string;
    environmentId: string;
    gatewayUrl: string;
    hasOpenApiContent: boolean;
    status: string;
    updatedAt: string;
    version: string;
}
export interface WorkspaceApi {
    byEnvironment: WorkspaceApiEnvironment[];
    connectionInterfaceSlug: string;
    description: string;
    id: string;
    name: string;
    workspaceId: string;
}
export interface PluginCommands {
    default: string;
    workspace: string;
}
export interface Connection {
    alias: string;
    type: string;
    typeId: string;
}
export interface Generates {
    connections: Connection[];
}
export type PluginRequires = Pick<Plugin, 'slug' | 'type' | 'displayName'> & {
    resolved: boolean;
};
export interface Requires {
    connections: Connection[];
    plugins: PluginRequires[];
    actions: (Pick<Action, 'slug'> & {
        resolved: boolean;
    })[];
}
export interface Plugin {
    about: string;
    accountSlug: string;
    appAllowed: boolean;
    command: string;
    commands: PluginCommands;
    compatibility: string[];
    createdAt: string;
    createdBy: string;
    description: string;
    displayName: string;
    documentation: DocumentationInfo;
    env_inputs: string[];
    generates: Generates;
    governance: GovernanceDetail;
    id: string;
    implementation: string;
    inputs: string[];
    isDocumented: boolean;
    name: string;
    picture: string;
    qualifier: string;
    range: string;
    releaseNotes: string;
    repository: string;
    requirements: string;
    requires: Requires;
    singleUse: boolean;
    slug: string;
    status: ResourceStatus;
    stkProjectsOnly: boolean;
    studioSlug: string;
    technologies: string[];
    type: 'APP' | 'INFRA';
    updatedAt: string;
    usage: string;
    version: string;
    versionId: string;
}
export interface Application {
    canDelete: boolean;
    canEdit: boolean;
    description: string;
    id: string;
    name: string;
    reconcile: boolean;
    repoBaseBranch: string;
    repoUrl: string;
    stack: ApplicationStack;
    stackVersionId: string;
    starterId: string;
    status: string;
    version: string;
}
//# sourceMappingURL=StackspotData.d.ts.map