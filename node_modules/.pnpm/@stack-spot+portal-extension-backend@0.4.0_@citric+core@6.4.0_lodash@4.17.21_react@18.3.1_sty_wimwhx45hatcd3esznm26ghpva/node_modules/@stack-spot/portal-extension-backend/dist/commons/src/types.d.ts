import { ThemeName } from '@stack-spot/portal-theme';
import { Language } from '@stack-spot/portal-translate';
import { Action, Application, Plugin, SharedInfra, Stack, Studio, Workspace, WorkspaceApi } from './StackspotData';
export interface ExtensionMessage {
    type: 'stackspot-extension-message';
    signal: 'ready' | 'request' | 'response-success' | 'response-error' | 'config' | 'resize';
    id: number;
}
export interface ExtensionReadyMessage extends ExtensionMessage {
    signal: 'ready';
}
export interface ExtensionResizeMessage extends ExtensionMessage {
    signal: 'resize';
    width: number;
    height: number;
}
export interface ExtensionConfigMessage extends ExtensionMessage {
    signal: 'config';
    language: Language;
    themeName: ThemeName;
}
export interface CustomModalOptions {
    path: string;
    onClose?: () => void;
    size?: 'small' | 'medium' | 'large' | 'fit-content';
}
export interface ModalOptions extends CustomModalOptions {
    title: string;
    subtitle?: string;
}
export interface CustomRightPanelOptions extends CustomModalOptions {
    size?: 'small' | 'medium' | 'large';
}
export interface RightPanelOptions extends ModalOptions {
    size?: 'small' | 'medium' | 'large';
}
export interface AlertOptions {
    title: string;
    message: string;
    okText?: string;
}
export interface ConfirmOptions extends AlertOptions {
    cancelText?: string;
}
export interface ToasterOptions {
    type?: 'success' | 'warning' | 'error' | 'info';
    message: string;
}
export interface UserData {
    name: string;
    email: string;
}
export interface CurrentPageResponse {
    key: string;
    params: Record<string, any>;
}
export interface ExtensionOperations {
    showModal: {
        request: ModalOptions;
        response: void;
    };
    showRightPanel: {
        request: RightPanelOptions;
        response: void;
    };
    showCustomModal: {
        request: CustomModalOptions;
        response: void;
    };
    showCustomRightPanel: {
        request: CustomRightPanelOptions;
        response: void;
    };
    closeModal: {
        request: void;
        response: void;
    };
    closeRightPanel: {
        request: void;
        response: void;
    };
    alert: {
        request: AlertOptions;
        response: void;
    };
    confirm: {
        request: ConfirmOptions;
        response: boolean;
    };
    showToaster: {
        request: ToasterOptions;
        response: void;
    };
    getSecrets: {
        request: void;
        response: Record<string, string>;
    };
    getExtensionSlug: {
        request: void;
        response: string;
    };
    getExtensionVersion: {
        request: void;
        response: string | undefined;
    };
    getCurrentPage: {
        request: void;
        response: CurrentPageResponse;
    };
    getUserData: {
        request: void;
        response: UserData;
    };
    getStudios: {
        request: void;
        response: Studio[];
    };
    getStacksByStudio: {
        request: {
            studioId: string;
        };
        response: Stack[];
    };
    getPluginsByStudio: {
        request: {
            studioId: string;
        };
        response: Plugin[];
    };
    getActionsByStudio: {
        request: {
            studioId: string;
        };
        response: Action[];
    };
    getPluginsByStack: {
        request: {
            stackId: string;
        };
        response: Plugin[];
    };
    getActionsByStack: {
        request: {
            stackId: string;
        };
        response: Action[];
    };
    getWorkspaces: {
        request: void;
        response: Workspace[];
    };
    getStacksByWorkspace: {
        request: {
            workspaceId: string;
        };
        response: Stack[];
    };
    getApplicationsByWorkspace: {
        request: {
            workspaceId: string;
        };
        response: Application[];
    };
    getSharedInfraByWorkspace: {
        request: {
            workspaceId: string;
        };
        response: SharedInfra[];
    };
    getAPIsByWorkspace: {
        request: {
            workspaceId: string;
        };
        response: WorkspaceApi[];
    };
}
export interface ExtensionRequestMessage<T extends keyof ExtensionOperations> extends ExtensionMessage {
    signal: 'request';
    operation: T;
    variables: ExtensionOperations[T]['request'];
}
export interface SuccessfulExtensionResponseMessage<T extends keyof ExtensionOperations> extends ExtensionMessage {
    signal: 'response-success';
    operation: T;
    result: ExtensionOperations[T]['response'];
}
export interface UnsuccessfulExtensionResponseMessage extends ExtensionMessage {
    signal: 'response-error';
    operation: keyof ExtensionOperations;
    error?: string;
}
export type ExtensionResponseMessage<T extends keyof ExtensionOperations> = SuccessfulExtensionResponseMessage<T> | UnsuccessfulExtensionResponseMessage;
//# sourceMappingURL=types.d.ts.map