import { jsx as _jsx } from "react/jsx-runtime";
import { SessionManager } from '@stack-spot/auth-react';
import { CitronNavigator } from '@stack-spot/citron-navigator';
import { overlay } from '@stack-spot/portal-layout';
import { Extension } from './Extension';
const operationHandler = {
    showModal: ({ variables: { path, ...variables }, slug, version }) => overlay.showModal({
        children: _jsx(Extension, { slug: slug, version: version, path: path }),
        ...variables,
    }),
    showRightPanel: ({ variables: { path, ...variables }, slug, version }) => overlay.showRightPanel({
        children: _jsx(Extension, { slug: slug, version: version, path: path }),
        ...variables,
    }),
    showCustomModal: ({ variables: { path, ...variables }, slug, version }) => overlay.showCustomModal(_jsx(Extension, { slug: slug, version: version, path: path }), variables),
    showCustomRightPanel: ({ variables: { path, ...variables }, slug, version }) => overlay.showCustomRightPanel(_jsx(Extension, { slug: slug, version: version, path: path }), variables),
    closeModal: () => overlay.closeModal(),
    closeRightPanel: () => overlay.closeRightPanel(),
    alert: ({ variables }) => overlay.alert(variables),
    confirm: ({ variables }) => overlay.confirm(variables),
    getExtensionSlug: ({ slug }) => slug,
    getExtensionVersion: ({ version }) => version,
    getUserData: () => {
        const { account_name = '', email = '' } = SessionManager.instance?.getSession()?.getTokenData() ?? {};
        return { name: account_name, email };
    },
    getSecrets: ({ dataProvider }) => dataProvider.getSecrets(),
    getStudios: ({ dataProvider }) => dataProvider.getStudios(),
    getStacksByStudio: ({ dataProvider, variables: { studioId } }) => dataProvider.getStacksByStudio(studioId),
    getPluginsByStudio: ({ dataProvider, variables: { studioId } }) => dataProvider.getPluginsByStudio(studioId),
    getActionsByStudio: ({ dataProvider, variables: { studioId } }) => dataProvider.getActionsByStudio(studioId),
    getPluginsByStack: ({ dataProvider, variables: { stackId } }) => dataProvider.getPluginsByStack(stackId),
    getActionsByStack: ({ dataProvider, variables: { stackId } }) => dataProvider.getActionsByStack(stackId),
    getWorkspaces: ({ dataProvider }) => dataProvider.getWorkspaces(),
    getStacksByWorkspace: ({ dataProvider, variables: { workspaceId } }) => dataProvider.getStacksByWorkspace(workspaceId),
    getApplicationsByWorkspace: ({ dataProvider, variables: { workspaceId } }) => dataProvider.getApplicationsByWorkspace(workspaceId),
    getSharedInfraByWorkspace: ({ dataProvider, variables: { workspaceId } }) => dataProvider.getSharedInfraByWorkspace(workspaceId),
    getAPIsByWorkspace: ({ dataProvider, variables: { workspaceId } }) => dataProvider.getAPIsByWorkspace(workspaceId),
    // @ts-ignore
    showToaster: ({ variables }) => overlay.showToaster(variables),
    getCurrentPage: () => {
        const key = CitronNavigator.instance?.currentRoute?.$key ?? '';
        const params = CitronNavigator.instance?.currentParams ?? {};
        return { key, params };
    },
};
export function handleOperation(options) {
    return operationHandler[options.operation](options);
}
//# sourceMappingURL=operation-handler.js.map