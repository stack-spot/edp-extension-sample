import { jsx as _jsx } from "react/jsx-runtime";
import { addConfigToUrl, createConfigMessage } from '@stack-spot/portal-extension-commons';
import { useThemeName } from '@stack-spot/portal-theme';
import { useLanguage } from '@stack-spot/portal-translate';
import { useEffect, useRef } from 'react';
import { MessageHandler } from './MessageHandler';
import { useExtensionContext } from './context';
export const Extension = ({ slug, version, path = '', style, className }) => {
    const { url } = useExtensionContext();
    const ref = useRef(null);
    const shouldAdaptHeight = !style?.height || style.height === 'auto';
    const messageHandler = useRef();
    const themeName = useThemeName();
    const language = useLanguage();
    const src = addConfigToUrl(new URL(`${url}/${slug}${version ? `/${version}` : ''}${path}`));
    useEffect(() => {
        if (ref.current)
            messageHandler.current = new MessageHandler({
                iframe: ref.current,
                apiUrl: url,
                slug,
                version,
                shouldAdaptHeight,
            });
        return () => messageHandler.current?.destroy();
    }, [ref.current]);
    useEffect(() => {
        messageHandler.current?.sendConfig(createConfigMessage({ themeName, language }));
    }, [themeName, language]);
    return _jsx("iframe", { ref: ref, src: src, style: { border: 'none', ...style }, 
        // scrolling is deprecated, but there's no alternative for Chrome
        scrolling: shouldAdaptHeight ? 'no' : undefined, className: className });
};
//# sourceMappingURL=Extension.js.map