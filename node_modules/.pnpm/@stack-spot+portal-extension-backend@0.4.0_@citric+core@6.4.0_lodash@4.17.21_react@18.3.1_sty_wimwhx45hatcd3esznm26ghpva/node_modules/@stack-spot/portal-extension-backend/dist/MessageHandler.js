import { createConfigMessage, createSuccessfulResponseMessage, createUnsuccessfulResponseMessage, } from '@stack-spot/portal-extension-commons';
import { buildNetworkConfig } from './network-config';
import { handleOperation } from './operation-handler';
export class MessageHandler {
    constructor({ apiUrl, iframe, slug, version, shouldAdaptHeight }) {
        Object.defineProperty(this, "iframe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "listener", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shouldAdaptHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.iframe = iframe;
        this.version = version;
        this.apiUrl = apiUrl;
        this.slug = slug;
        this.setupListeners();
        this.shouldAdaptHeight = shouldAdaptHeight ?? false;
    }
    postMessage(message) {
        this.iframe.contentWindow?.postMessage(message, '*');
    }
    getMessage(data) {
        return (!data ||
            typeof data != 'object' ||
            data.type != 'stackspot-extension-message' ||
            (data.signal != 'ready' && data.signal != 'resize' && data.signal != 'request')) ? undefined : data;
    }
    setupListeners() {
        this.listener = (event) => {
            if (event.source != this.iframe.contentWindow)
                return;
            const message = this.getMessage(event.data);
            if (message?.signal === 'ready')
                this.sendConfig(createConfigMessage({ network: buildNetworkConfig() }));
            else if (message?.signal === 'request')
                this.handleRequest(message);
            else if (message?.signal === 'resize')
                this.handleResizeMessage(message);
        };
        window.addEventListener('message', this.listener);
    }
    handleResizeMessage(message) {
        if (this.shouldAdaptHeight)
            this.iframe.height = `${message.height}px`;
    }
    async handleRequest(message) {
        let response;
        try {
            const result = await handleOperation({
                apiUrl: this.apiUrl,
                operation: message.operation,
                slug: this.slug,
                variables: message.variables,
                version: this.version,
            });
            response = createSuccessfulResponseMessage(message.operation, message.id, result);
        }
        catch (error) {
            let errorMessage = error.message;
            if (!errorMessage && typeof errorMessage === 'object') {
                try {
                    errorMessage = JSON.stringify(error);
                }
                catch { /* empty */ }
            }
            errorMessage ||= `${error}`;
            response = createUnsuccessfulResponseMessage(message.operation, message.id, errorMessage, error.status);
        }
        this.postMessage(response);
    }
    sendConfig(config) {
        this.postMessage(config);
    }
    destroy() {
        if (this.listener)
            window.removeEventListener('message', this.listener);
    }
}
//# sourceMappingURL=MessageHandler.js.map