import { addConfigToUrl, createConfigMessage } from '@stack-spot/portal-extension-commons'
import { useThemeName } from '@stack-spot/portal-theme'
import { useLanguage } from '@stack-spot/portal-translate'
import { useEffect, useRef } from 'react'
import { MessageHandler } from './MessageHandler'
import { useExtensionContext } from './context'

interface Props {
  slug: string,
  path?: string,
  version?: string,
  style?: React.CSSProperties,
  className?: string,
}

export const Extension = ({ slug, version, path = '', style, className }: Props) => {
  const { url } = useExtensionContext()
  const ref = useRef<HTMLIFrameElement>(null)
  const shouldAdaptHeight = !style?.height || style.height === 'auto'
  const messageHandler = useRef<MessageHandler | undefined>()
  const themeName = useThemeName()
  const language = useLanguage()
  const src = addConfigToUrl(new URL(`${url}/${slug}${version ? `/${version}` : ''}${path}`))

  useEffect(() => {
    if (ref.current) messageHandler.current = new MessageHandler({
      iframe: ref.current,
      apiUrl: url,
      slug,
      version,
      shouldAdaptHeight,
    })
    return () => messageHandler.current?.destroy()
  }, [ref.current])

  function sendConfig() {
    messageHandler.current?.sendConfig(createConfigMessage({ themeName, language }))
  }

  useEffect(() => sendConfig, [themeName, language])

  return <iframe
    ref={ref}
    src={src}
    style={{ border: 'none', ...style }}
    // scrolling is deprecated, but there's no alternative for Chrome
    scrolling={shouldAdaptHeight ? 'no' : undefined}
    className={className}
    onLoad={() => setTimeout(sendConfig, 1000)}
  />
}
