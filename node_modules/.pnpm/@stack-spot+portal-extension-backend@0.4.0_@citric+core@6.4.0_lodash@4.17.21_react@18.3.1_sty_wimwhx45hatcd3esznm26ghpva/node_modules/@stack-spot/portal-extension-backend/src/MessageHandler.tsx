import {
  ExtensionConfigMessage,
  ExtensionMessage,
  ExtensionReadyMessage,
  ExtensionRequestMessage,
  ExtensionResizeMessage,
  ExtensionResponseMessage,
  createConfigMessage,
  createSuccessfulResponseMessage,
  createUnsuccessfulResponseMessage,
} from '@stack-spot/portal-extension-commons'
import { buildNetworkConfig } from './network-config'
import { handleOperation } from './operation-handler'

interface ConstructorProps {
  slug: string,
  version?: string,
  apiUrl: string,
  iframe: HTMLIFrameElement,
  shouldAdaptHeight?: boolean,
}

export class MessageHandler {
  private iframe: HTMLIFrameElement
  private version: string | undefined
  private apiUrl: string
  private slug: string
  private listener: ((event: MessageEvent<any>) => void) | undefined
  private shouldAdaptHeight: boolean

  constructor({ apiUrl, iframe, slug, version, shouldAdaptHeight }: ConstructorProps) {
    this.iframe = iframe
    this.version = version
    this.apiUrl = apiUrl
    this.slug = slug
    this.setupListeners()
    this.shouldAdaptHeight = shouldAdaptHeight ?? false
  }

  private postMessage(message: ExtensionMessage) {
    this.iframe.contentWindow?.postMessage(message, '*')
  }

  private getMessage(data: any) {
    return (
      !data ||
      typeof data != 'object' ||
      data.type != 'stackspot-extension-message' ||
      (data.signal != 'ready' && data.signal != 'resize' && data.signal != 'request')
    ) ? undefined : data as ExtensionReadyMessage | ExtensionResizeMessage | ExtensionRequestMessage<any>
  }

  private setupListeners() {
    this.listener = (event) => {
      if (event.source != this.iframe.contentWindow) return
      const message = this.getMessage(event.data)
      if (message?.signal === 'ready') this.sendConfig(createConfigMessage({ network: buildNetworkConfig() }))
      else if (message?.signal === 'request') this.handleRequest(message)
      else if (message?.signal === 'resize') this.handleResizeMessage(message)
    }
    window.addEventListener('message', this.listener)
  }

  private handleResizeMessage(message: ExtensionResizeMessage) {
    if (this.shouldAdaptHeight) this.iframe.height = `${message.height}px`
  }

  private async handleRequest(message: ExtensionRequestMessage<any>) {
    let response: ExtensionResponseMessage<any>
    try {
      const result = await handleOperation({
        apiUrl: this.apiUrl,
        operation: message.operation,
        slug: this.slug,
        variables: message.variables,
        version: this.version,
      })
      response = createSuccessfulResponseMessage(message.operation, message.id, result)
    } catch (error: any) {
      let errorMessage: string | undefined = error.message
      if (!errorMessage && typeof errorMessage === 'object') {
        try {
          errorMessage = JSON.stringify(error)
        } catch { /* empty */ }
      }
      errorMessage ||= `${error}`
      response = createUnsuccessfulResponseMessage(message.operation, message.id, errorMessage, error.status)
    }
    this.postMessage(response)
  }

  sendConfig(config: ExtensionConfigMessage) {
    this.postMessage(config)
  }

  destroy() {
    if (this.listener) window.removeEventListener('message', this.listener)
  }
}
