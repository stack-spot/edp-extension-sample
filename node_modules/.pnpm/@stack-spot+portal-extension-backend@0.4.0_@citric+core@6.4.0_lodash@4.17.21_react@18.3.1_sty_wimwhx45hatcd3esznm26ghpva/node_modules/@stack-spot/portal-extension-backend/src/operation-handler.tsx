import { SessionManager } from '@stack-spot/auth-react'
import { CitronNavigator } from '@stack-spot/citron-navigator'
import { ExtensionOperations } from '@stack-spot/portal-extension-commons'
import { overlay } from '@stack-spot/portal-layout'
import { Extension } from './Extension'
import { handleNetworkOperation } from './network-handler'

interface Options<T extends keyof ExtensionOperations> {
  operation: T,
  variables: ExtensionOperations[T]['request'],
  apiUrl: string,
  slug: string,
  version?: string,
}

type OperationHandler = {
  [Key in keyof ExtensionOperations]: (options: Options<Key>) =>
    ExtensionOperations[Key]['response'] | Promise<ExtensionOperations[Key]['response']>
}

const operationHandler: OperationHandler = {
  showModal: ({ variables: { path, ...variables }, slug, version }) => overlay.showModal({
    children: <Extension slug={slug} version={version} path={path} />,
    ...variables,
  }),
  showRightPanel: ({ variables: { path, ...variables }, slug, version }) => overlay.showRightPanel({
    children: <Extension slug={slug} version={version} path={path} />,
    ...variables,
  }),
  showCustomModal: ({ variables: { path, ...variables }, slug, version }) =>
    overlay.showCustomModal(
      <Extension slug={slug} version={version} path={path} />,
      variables,
    ),
  showCustomRightPanel: ({ variables: { path, ...variables }, slug, version }) =>
    overlay.showCustomRightPanel(
      <Extension slug={slug} version={version} path={path} />,
      variables,
    ),
  closeModal: () => overlay.closeModal(),
  closeRightPanel: () => overlay.closeRightPanel(),
  alert: ({ variables }) => overlay.alert(variables as any),
  confirm: ({ variables }) => overlay.confirm(variables as any),
  getExtensionSlug: ({ slug }) => slug,
  getExtensionVersion: ({ version }) => version,
  getUserData: () => {
    const { account_name = '', email = '' } = SessionManager.instance?.getSession()?.getTokenData() ?? {}
    return { name: account_name, email }
  },
  // @ts-ignore
  showToaster: ({ variables }) => overlay.showToaster(variables),
  getCurrentPage: () => {
    const key = CitronNavigator.instance?.currentRoute?.$key ?? ''
    const params = CitronNavigator.instance?.currentParams ?? {}
    return { key, params }
  },
  network: ({ variables }) => handleNetworkOperation(variables),
}

export function handleOperation<T extends keyof ExtensionOperations>(
  options: Options<T>,
): ExtensionOperations[T]['response'] | Promise<ExtensionOperations[T]['response']> {
  return operationHandler[options.operation](options)
}
