"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.getArguments = void 0;
/* eslint-disable no-console */
const promises_1 = require("fs/promises");
const yargs_1 = require("yargs");
const helpers_1 = require("yargs/helpers");
const Codegen_1 = require("./Codegen");
const ConfigParser_1 = require("./ConfigParser");
function getArguments() {
    const args = (0, helpers_1.hideBin)(process.argv);
    const data = (0, yargs_1.default)(args).default({ src: 'navigation.yaml', out: 'src/generated/navigation.ts' }).parse(args);
    return { ...data, useHash: data.useHash != 'false' };
}
exports.getArguments = getArguments;
function removeTrailingSlashes(str) {
    return str.replace(/^\/+/, '').replace(/\/+$/, '');
}
function uri(baseDir, path) {
    return baseDir ? `${removeTrailingSlashes(baseDir ?? '')}/${removeTrailingSlashes(path)}` : path;
}
async function generate({ src, out, baseDir, useHash }) {
    try {
        const config = await (0, promises_1.readFile)(uri(baseDir, src), { encoding: 'utf-8' });
        const parser = new ConfigParser_1.ConfigParser(config);
        const route = parser.parse();
        const codegen = new Codegen_1.Codegen(route, useHash);
        await codegen.writeToFile(uri(baseDir, out), baseDir);
    }
    catch (error) {
        console.error('Error while creating navigation file.');
        console.error(error);
        process.exit(1);
    }
    console.info('Navigation file successfully generated.');
    process.exit(0);
}
exports.generate = generate;
//# sourceMappingURL=generate.js.map