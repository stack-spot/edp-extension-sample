export const colorSchemeName = ['primary', 'secondary', 'tertiary', 'highlight', 'danger', 'warning', 'success', 'light', 'inverse'];
const colorSchemeLevel = [300, 400, 500, 600, 700, 'contrastText'];
// ATTENTION: the order below matters! This order is used to create legends (in charts for instance), place them so adjacent colors are as
// different as possible.
export const colorPaletteName = ['blue', 'gray', 'indigo', 'moss', 'orange', 'cyan', 'pink', 'purple', 'red', 'teal', 'yellow'];
export const colorPaletteLevel = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
let eventsRegistered = false;
function createColorMap(colors, levels) {
    return colors.reduce((result, color) => ({
        ...result,
        [color]: levels.reduce((result, level) => ({
            ...result,
            [level]: `var(--${color}-${level})`,
        }), {}),
    }), {});
}
/**
 * Theme. Includes only colors for now.
 */
export const theme = {
    color: {
        ...createColorMap(colorSchemeName, colorSchemeLevel),
        ...createColorMap(colorPaletteName, colorPaletteLevel),
        codeBg: 'var(--code-bg)',
    },
};
/**
 * Gets the current theme kind.
 *
 * A theme kind can be either "light" or "dark". This is not necessarily the theme name. Examples:
 *
 * - Although, right now, StackSpot has only two themes: "light" and the "dark", it used to have three and two of them were dark.
 * - When running this inside VSCode, the theme name can be one of several, but all of them are either light or dark.
 *
 * @returns "dark" if the theme is mostly dark or "light" if the theme is mostly light. If no theme is set, "dark" is returned.
 */
export function getThemeKind() {
    if (getPlatform() === 'vscode')
        return document.body.getAttribute('data-vscode-theme-kind')?.includes('light') ? 'light' : 'dark';
    return (document.body.getAttribute('data-theme-kind') || 'dark');
}
/**
 * Gets the name of the current theme.
 *
 * Do not mistake with `getThemeKind` (read the documentation for `getThemeKind` for more details).
 *
 * This is only valid under a web environment.
 *
 * @returns the name of the current theme or "dark" if no theme is set.
 */
export function getThemeName() {
    return (document.body.getAttribute('data-theme') || 'dark');
}
/**
 * The theme library can be run either in a Web environment, VSCode or IntelliJ. This function tells which environment it's running on.
 * @returns the platform
 */
export function getPlatform() {
    return (document.body.getAttribute('data-platform') || 'web');
}
/**
 * Changes the current theme. This is only valid under a Web environment.
 *
 * This is only valid under a web environment.
 *
 * @param name the name of the theme to change to.
 * @param setCookie whether or not to set the theme cookie (true by default).
 * @param domain the domain to set the cookie, will be ".stackspot.com" by default.
 */
export function setTheme(name, setCookie = true, domain = '.stackspot.com') {
    document.body.setAttribute('data-theme', name);
    document.body.setAttribute('data-theme-kind', name === 'light' ? 'light' : 'dark');
    if (setCookie)
        document.cookie = `theme=${name};path=/${location.host.endsWith(domain) ? `;domain=${domain}` : ''}`;
}
function getThemeFromCookie() {
    return ((document.cookie.match(/theme=([^;]+)/) ?? [])[1] || 'dark');
}
/**
 * Loads the current theme from the cookies. If no theme has been set before, "dark" is loaded.
 */
export function loadTheme() {
    const theme = getThemeFromCookie();
    setTheme(theme);
    if (eventsRegistered)
        return;
    // if there's support for the cookieStore, change the theme whenever the cookie is changed.
    if ('cookieStore' in window) {
        // @ts-ignore cookieStore is not yet available on Safari and Firefox, this is why TS doesn't recognize it
        cookieStore.addEventListener('change', ({ changed }) => {
            for (const { name, value } of changed) {
                if (name === 'theme')
                    setTheme(value, false);
            }
        });
    }
    // otherwise, change the theme when the tab/window is refocused.
    else {
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible')
                loadTheme();
        });
    }
    eventsRegistered = true;
}
//# sourceMappingURL=definition.js.map