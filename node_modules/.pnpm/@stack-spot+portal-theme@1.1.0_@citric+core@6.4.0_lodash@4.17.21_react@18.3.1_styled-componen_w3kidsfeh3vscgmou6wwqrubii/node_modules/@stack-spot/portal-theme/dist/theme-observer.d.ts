import { ThemeKind, ThemeName } from './definition.js';
type KindListener = (kind: ThemeKind) => void;
type NameListener = (name: ThemeName) => void;
declare class ThemeObserver {
    private kindListeners;
    private nameListeners;
    private currentKind;
    private currentName;
    constructor();
    /**
     * Adds a listener for changes to the theme kind.
     * @param listener the function to be called when the theme kind changes.
     * @returns a function that, if called, removes the listener.
     */
    onThemeKindChange(listener: KindListener): () => void;
    /**
     * Adds a listener for changes to the theme name.
     * @param listener the function to be called when the theme name changes.
     * @returns a function that, if called, removes the listener.
     */
    onThemeNameChange(listener: NameListener): () => void;
}
/**
 * Singleton responsible for listening to changes to the theme.
 *
 * This observes any attribute changes to the tag body and updates the theme accordingly.
 *
 * Attention: this will not work if the tag body doesn't exist, or if it's replaced throughout execution.
 */
export declare const themeObserver: ThemeObserver;
export {};
//# sourceMappingURL=theme-observer.d.ts.map