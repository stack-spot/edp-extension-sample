import { ThemeKind, ThemeName, getThemeKind, getThemeName } from './definition'

type KindListener = (kind: ThemeKind) => void
type NameListener = (name: ThemeName) => void

class ThemeObserver {
  private kindListeners: KindListener[] = []
  private nameListeners: NameListener[] = []
  private currentKind: ThemeKind = getThemeKind()
  private currentName: ThemeName = getThemeName()

  constructor() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes') {
          const kind = getThemeKind()
          const name = getThemeName()
          if (kind !== this.currentKind) {
            this.kindListeners.forEach(l => l(kind))
            this.currentKind = kind
          }
          if (name !== this.currentName) {
            this.nameListeners.forEach(l => l(name))
            this.currentName = name
          }
        }
      })
    })
    observer.observe(document.body, { attributes: true })
  }

  /**
   * Adds a listener for changes to the theme kind.
   * @param listener the function to be called when the theme kind changes.
   * @returns a function that, if called, removes the listener.
   */
  onThemeKindChange(listener: KindListener): () => void {
    this.kindListeners.push(listener)
    return () => this.kindListeners.splice(this.kindListeners.indexOf(listener), 1)
  }

  /**
   * Adds a listener for changes to the theme name.
   * @param listener the function to be called when the theme name changes.
   * @returns a function that, if called, removes the listener.
   */
  onThemeNameChange(listener: NameListener): () => void {
    this.nameListeners.push(listener)
    return () => this.nameListeners.splice(this.nameListeners.indexOf(listener), 1)
  }
}

/**
 * Singleton responsible for listening to changes to the theme.
 * 
 * This observes any attribute changes to the tag body and updates the theme accordingly.
 * 
 * Attention: this will not work if the tag body doesn't exist, or if it's replaced throughout execution.
 */
export const themeObserver = new ThemeObserver()
