import { ColorPaletteLevel, ColorPaletteName, ColorSchemeLevel, ColorSchemeName, colorPaletteLevel, colorPaletteName, colorSchemeName, theme } from './definition'

/**
 * Gets the ideal contrast color for the color passed as parameter.
 * @param color the color to get a contrast to.
 * @param level the level of the color to get a contrast to. Defaults to 600.
 * @returns the css variable for the contrast color ("var(--color-level)").
 */
export function contrastColor<T extends ColorPaletteName | ColorSchemeName>(
  color: T,
  level: T extends ColorPaletteName ? ColorPaletteLevel : ColorSchemeLevel = 600,
) {
  if (colorSchemeName.includes(color as ColorSchemeName)) {
    return (level as ColorSchemeLevel === 'contrastText' || level === 700)
      ? theme.color[color]['300']
      : theme.color[color as ColorSchemeName].contrastText
  }
  const contrastLevel = level as ColorPaletteLevel >= 500 ? 50 : 900
  return theme.color[color as ColorPaletteName][contrastLevel]
}

/**
 * Finds out the value of a CSS variable. By default, it uses the body of the HTML document to get these values from. You can also pass a
 * second parameter with the element you want to get the value from.
 * 
 * Supposing the actual name of the variable is `name-of-variable`, the value passed to the first parameter (`varname`) may be:
 * `name-of-variable` or `--name-of-variable` or `var(--name-of-variable)`. All these formats work.
 * 
 * Example:
 * ```ts
 * valueOf(theme.color.primary['300']) // results in '#FFC8B5'
 * ```
 * 
 * @param varname name of the CSS variable to get the value from.
 * @param element HTML element to get the variable from.
 * @returns the value of variable. If no variable is found, an empty string is returned.
 */
export function valueOf(varname: string, element: HTMLElement = document.body) {
  const name = (varname.match(/(?:var)?\(?(?:--)?([^)]+)(?:\))?/) ?? [])[1] || varname
  const styles = getComputedStyle(element)
  return styles.getPropertyValue(`--${name}`)
}

interface ColorGeneratorOptions {
  /**
   * The color to start from.
   */
  fromColor?: ColorPaletteName,
  /**
   * The level to start from.
   */
  fromLevel?: ColorPaletteLevel,
  /**
   * The color array to iterate over.
   */
  colorOrder?: ColorPaletteName[],
  /**
   * The level array to iterate over.
   */
  levelOrder?: ColorPaletteLevel[],
}

interface PaletteColor {
  color: ColorPaletteName,
  level: ColorPaletteLevel,
}

/**
 * Generates a sequence of colors of the palette that are ideally spread. This sequence is infinite and will repeat once all colors are
 * used.
 * 
 * The colors generated here are not random! This sequence will always be the same.
 * 
 * Example:
 * ```ts
 * // This code generates 10 colors from the palette
 * const color = createColorSequence()
 * const myColors: { color: string, level: number }[] = []
 * 
 * for (let i = 0; i < 10; i++) {
 *   myColors.push(color.next().value)
 * }
 * ```
 * 
 * @param options the options to change the color sequence {@link ColorGeneratorOptions}.
 * @return an iterator where each element is an object where `name` is the name of the color palette and `level` is the level of
 * the color. To create a color from `color` and `level`, you can use `theme.color[color][level]`.
 */
export function *createColorSequence(
  { colorOrder, fromColor, fromLevel, levelOrder }: ColorGeneratorOptions = {},
): Generator<PaletteColor, PaletteColor, PaletteColor> {
  const colors = colorOrder ?? colorPaletteName
  const levels = levelOrder ?? colorPaletteLevel
  while (true) {
    const firstColor = fromColor ? colors.indexOf(fromColor) : 0
    const firstLevel = fromLevel ? levels.indexOf(fromLevel) : 0
    for (let i = 0; i < levels.length; i++) {
      for (let j = 0; j < colors.length; j++) {
        yield {
          color: colors[(firstColor + j) % colors.length],
          level: levels[(firstLevel + i) % levels.length],
        }
      }
    }
  }
}

/**
 * Same as `createColorSequence`, but it generates the css variables for the colors directly.
 * 
 * Example:
 * ```ts
 * // This code generates 10 colors from the palette
 * const color = paletteSequence()
 * const myColors: string[] = []
 * 
 * for (let i = 0; i < 10; i++) {
 *   myColors.push(color.next().value)
 * }
 * ```
 * `myColors` will contain values like "var(--blue-300)".
 */
export function *paletteSequence(options?: ColorGeneratorOptions): Generator<string, string, string> {
  const colors = createColorSequence(options)
  while (true) {
    const { color, level } = colors.next().value
    yield `var(--${color}-${level})`
  }
}

/**
 * Applies opacity to a theme color variable.
 * @param opacity the opacity in [0, 1]
 */
export function withOpacity(colorVariable: string, opacity: number) {
  return `color-mix(in srgb, ${colorVariable} ${Math.round(opacity * 100)}%, transparent)`
}

/**
 * A utility for using arrays instead of strings when defining the CSS class of an element.
 * 
 * This function will remove any falsy value from the array and then join every class name into a valid string.
 * 
 * @param list 
 * @returns 
 */
export function listToClass(list: (string | undefined | boolean | null)[]) {
  return list.filter(v => !!v).map(v => `${v}`).join(' ')
}
