export type Language = 'pt' | 'en';
type OnChange = (language: Language) => void;
export type Dictionary = Record<Language, Record<string, string>>;
/**
 * Retrieves the current language. Will be the navigator language if the user didn't change this setting.
 *
 * If you want to listen to changes on the language, use `onLanguageChange`.
 *
 * @returns the current language: "pt" or "en".
 */
export declare function getLanguage(): Language;
/**
 * Changes the current language.
 *
 * Once the language is changed, all registered listeners are run. To register a listener, use `onLanguageChange`.
 *
 * @param language "pt" or "en".
 * @param setCookie whether or not to set the language cookie (true by default).
 * @param domain the domain to set the cookie, will be ".stackspot.com" by default.
 */
export declare function setLanguage(language: Language, setCookie?: boolean, domain?: string): void;
/**
 * Loads the current language from the cookies. If no language has been set before, "en" is loaded.
 */
export declare function loadLanguage(): void;
/**
 * Registers a listener for when the language changes.
 * @param listener a function to be called whenever the language changes.
 * @returns a function that, when called, removes the listener.
 */
export declare function onLanguageChange(listener: OnChange): () => void;
/**
 * Gets the correct version of a dictionary depending on the language passed as parameter.
 * @param dictionary
 * @param language
 * @returns the english or portuguese version of the dictionary, depending on the value of `language`.
 */
export declare function translate<T extends Dictionary>(dictionary: T, language?: Language): Record<keyof T[Language], string>;
/**
 * A React Hook for getting the correct version of a dictionary depending on the current language.
 *
 * The value returned by this is updated whenever the language changes.
 *
 * @param dictionary
 * @returns the english or portuguese version of the dictionary, depending on the current language.
 */
export declare function useTranslate<T extends Dictionary>(dictionary: T): Record<keyof T[Language], string>;
/**
 * A React Hook for getting the current language.
 *
 * The value returned by this is updated whenever the language changes.
 *
 * @returns the current language.
 */
export declare function useLanguage(): Language;
/**
 * Receives a string of the type `"Some text $0 with some variables $2 and $1."`.
 * Returns the same string with symbols expressed as "$index" replaced by the elements in the array passed in the second parameter.
 *
 * For the previous example, if the 2nd, 3rd and 4th parameters are `'hello', 'world', 'test'`, then the result is `"Some text hello with
 * some variables test and world."`
 *
 * @param template the template string to interpolate.
 * @param variables the variables to use while replacing the symbols prefixed with "$".
 * @return the interpolated string. Variables without equivalence in the array of variables will be left untouched.
 */
export declare function interpolate(template: string, ...variables: any[]): string;
export {};
//# sourceMappingURL=language.d.ts.map