import { useEffect, useState } from 'react';
const SUPPORTED = ['pt', 'en'];
const KEY = 'language';
const listeners = [];
let eventsRegistered;
/**
 * Retrieves the current language. Will be the navigator language if the user didn't change this setting.
 *
 * If you want to listen to changes on the language, use `onLanguageChange`.
 *
 * @returns the current language: "pt" or "en".
 */
export function getLanguage() {
    const language = getLanguageFromCookie();
    if (SUPPORTED.includes(language))
        return language;
    const navigatorLanguage = navigator.language.split('-')[0];
    if (SUPPORTED.includes(navigatorLanguage))
        return navigatorLanguage;
    return 'en';
}
/**
 * Changes the current language.
 *
 * Once the language is changed, all registered listeners are run. To register a listener, use `onLanguageChange`.
 *
 * @param language "pt" or "en".
 * @param setCookie whether or not to set the language cookie (true by default).
 * @param domain the domain to set the cookie, will be ".stackspot.com" by default.
 */
export function setLanguage(language, setCookie = true, domain = '.stackspot.com') {
    if (setCookie)
        document.cookie = `${KEY}=${language};path=/${location.host.endsWith(domain) ? `;domain=${domain}` : ''}`;
    listeners.forEach(l => l(language));
}
function getLanguageFromCookie() {
    return ((document.cookie.match(new RegExp(`${KEY}=([^;]+)`)) ?? [])[1]);
}
/**
 * Loads the current language from the cookies. If no language has been set before, "en" is loaded.
 */
export function loadLanguage() {
    const language = getLanguage();
    setLanguage(language);
    if (eventsRegistered)
        return;
    // if there's support for the cookieStore, change the theme whenever the cookie is changed.
    if ('cookieStore' in window) {
        // @ts-ignore cookieStore is not yet available on Safari and Firefox, this is why TS doesn't recognize it
        cookieStore.addEventListener('change', ({ changed }) => {
            for (const { name, value } of changed) {
                if (name === 'language')
                    listeners.forEach(l => l(value));
            }
        });
    }
    // otherwise, change the theme when the tab/window is refocused.
    else {
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible')
                loadLanguage();
        });
    }
    eventsRegistered = true;
}
/**
 * Registers a listener for when the language changes.
 * @param listener a function to be called whenever the language changes.
 * @returns a function that, when called, removes the listener.
 */
export function onLanguageChange(listener) {
    listeners.push(listener);
    return () => {
        const index = listeners.indexOf(listener);
        if (index !== -1)
            listeners.splice(index, 1);
    };
}
/**
 * Gets the correct version of a dictionary depending on the language passed as parameter.
 * @param dictionary
 * @param language
 * @returns the english or portuguese version of the dictionary, depending on the value of `language`.
 */
export function translate(dictionary, language = getLanguage()) {
    return dictionary[language];
}
/**
 * A React Hook for getting the correct version of a dictionary depending on the current language.
 *
 * The value returned by this is updated whenever the language changes.
 *
 * @param dictionary
 * @returns the english or portuguese version of the dictionary, depending on the current language.
 */
export function useTranslate(dictionary) {
    const language = useLanguage();
    return translate(dictionary, language);
}
/**
 * A React Hook for getting the current language.
 *
 * The value returned by this is updated whenever the language changes.
 *
 * @returns the current language.
 */
export function useLanguage() {
    const [language, setLanguage] = useState(getLanguage());
    useEffect(() => onLanguageChange(setLanguage), []);
    return language;
}
/**
 * Receives a string of the type `"Some text $0 with some variables $2 and $1."`.
 * Returns the same string with symbols expressed as "$index" replaced by the elements in the array passed in the second parameter.
 *
 * For the previous example, if the 2nd, 3rd and 4th parameters are `'hello', 'world', 'test'`, then the result is `"Some text hello with
 * some variables test and world."`
 *
 * @param template the template string to interpolate.
 * @param variables the variables to use while replacing the symbols prefixed with "$".
 * @return the interpolated string. Variables without equivalence in the array of variables will be left untouched.
 */
export function interpolate(template, ...variables) {
    return template.replaceAll(/\$(\d+)/g, (original, index) => variables[index] ?? original);
}
//# sourceMappingURL=language.js.map