import { ValidationRequest, ValidationResponse } from '../../../commons/types'
import { requestAsKey } from '../keygen'

/**
 * Prevents the same ValidationRequest from being sent more than once in the same network call. 
 */
export class PermissionQuery {
  private requests: ValidationRequest[] = []
  private results: ValidationResponse[] | undefined
  private indexMap: number[] = []

  constructor(requests: ValidationRequest[]) {
    const keyToIndex = new Map<string, number>()
    for (const req of requests) {
      const key = requestAsKey(req)
      let index = keyToIndex.get(key)
      if (index === undefined) {
        index = this.requests.length
        this.requests.push(req)
        keyToIndex.set(key, index)
      }
      this.indexMap.push(index)
    }
  }

  toJson() {
    return JSON.stringify(this.requests)
  }

  setResults(results: ValidationResponse[]) {
    this.results = results
  }

  /**
   * Gets the result according to the index of the array passed in the constructor of this instance.
   */
  getResult(index: number) {
    if (!this.results) throw new Error('Tried to get the results of a PermissionQuery that has no results yet.')
    return this.results[this.indexMap[index]]
  }
}
