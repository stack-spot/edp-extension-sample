import { ValidationRequest, ValidationResponse } from '../../../commons/types'
import { CompletablePromise } from '../CompletablePromise'
import { config } from '../config'
import { PermissionQuery } from './PermissionQuery'

const DEFER_MS = 200

export class PermissionQueue {
  private queue: ValidationRequest[] = []
  private deferred = new CompletablePromise<PermissionQuery>()
  private timeout: number | undefined
  private lock = false

  private async consume() {
    if (this.queue.length === 0) return
    if (this.lock) return this.timeout = window.setTimeout(() => this.consume(), DEFER_MS)
    this.lock = true
    const deferred = this.deferred
    this.deferred = new CompletablePromise()
    const query = new PermissionQuery(this.queue)
    this.queue = []
    if (!config.session || !config.url) {
      const error = new Error(
        'Error while validating permissions. Please, be sure to call "setup" with a valid url and session before attempting to verify permissions.',
      )
      this.deferred.reject(error)
      throw error
    }

    try {
      const response = await config.session.fetch(config.url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json; charset=utf-8' },
        body: query.toJson(),
      })
      if (response.ok) {
        const allResults: ValidationResponse[] = await response.json()
        query.setResults(allResults)
        deferred.resolve(query)
      } else {
        const message = await response.text()
        deferred.reject(new Error(`Error while checking permissions. Network error ${response.status}.\n${message}`))
      }
    } catch (error: any) {
      deferred.reject(error)
    }
    this.lock = false
  }

  async add(options: ValidationRequest): Promise<boolean | undefined> {
    if (this.timeout) window.clearTimeout(this.timeout)
    const index = this.queue.length
    this.queue.push(options)
    this.timeout = window.setTimeout(() => this.consume(), DEFER_MS)
    const query = await this.deferred.promise
    const result = query.getResult(index)
    if (result.error) {
      // eslint-disable-next-line no-console
      console.warn(`Error while checking permission for "${options.method} ${options.api} ${options.path}": ${result.error}`)
    }
    if (config.verbose) {
      // eslint-disable-next-line no-console
      console.info(`Permission validated: [${options.api}, ${options.method}, ${options.path}] = ${result.result}`)
    }
    return result.result
  }
}
