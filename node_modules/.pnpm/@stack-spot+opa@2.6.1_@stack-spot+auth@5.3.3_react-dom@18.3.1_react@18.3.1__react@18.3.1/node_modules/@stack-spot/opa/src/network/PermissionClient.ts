import { HTTPMethod, ValidationRequest } from '../../../commons/types'
import { config } from '../config'
import { requestAsKey } from '../keygen'
import { PermissionQueue } from './PermissionQueue'

function processFullPath(path: string) {
  const addresses = Object.keys(config.apiMap ?? {})
  const address = addresses.find(a => path.startsWith(a))
  if (!address) {
    throw new Error(
      `Unknown API for URL: ${path}. Please, be sure to inform all APIs in the property "apiMap" of the config for the lib @stack-spot/opa.`,
    )
  }
  const api = config.apiMap![address]
  const resourcePath = path.replace(address, '')
  return { api, resourcePath }
}

class PermissionClient {
  private cache = new Map<string, boolean>()
  private queue = new PermissionQueue()

  private async getPermissionForRequest(request: ValidationRequest) {
    const key = requestAsKey(request)
    const cached = this.cache.get(key)
    if (cached != undefined) return cached
    const result = await this.queue.add(request)
    if (result !== undefined) this.cache.set(key, result)
    return result ?? false
  }

  requestPermission(method: HTTPMethod, path: string, body?: string | object) {
    const { resourcePath, api } = processFullPath(path)
    const serializedBody = typeof body === 'object' ? JSON.stringify(body) : `${body}`
    return this.getPermissionForRequest(
      { api, method, path: resourcePath, ...(body ? { body: serializedBody } : {}) },
    )
  }

  invalidateCache() {
    this.cache.clear()
  }
}

export const permissionClient = new PermissionClient()
