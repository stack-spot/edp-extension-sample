import { Session } from '@stack-spot/auth';

type APIName = 'account' | 'content' | 'workspace' | 'runtime-manager' | 'workspace-manager' | 'search-engine' | 'hub' | 'code-buddy' | 'plugin' | 'catalog' | 'insights' | 'cloud-services' | 'cloud-account' | 'secrets' | 'agents' | 'shared-control' | 'cloud-platform-horizon';
type HTTPMethod = 'get' | 'put' | 'post' | 'delete' | 'patch';

interface Config {
    url?: string;
    session?: Session;
    /**
     * Map of API addresses to API names.
     */
    apiMap?: Record<string, APIName>;
    /**
     * If true, all permission requests will be logged with their results.
     */
    verbose?: boolean;
}
interface ConfigInput extends Config {
    url: string;
    session: Session;
}

declare function setup({ url, session, apiMap, verbose }: ConfigInput): void;

declare class CompletablePromise<T = any> {
    readonly promise: Promise<T>;
    private _resolve;
    private _reject;
    resolved: boolean;
    rejected: boolean;
    constructor();
    resolve(value: T): void;
    reject(reason?: Error): void;
}

type APIMap = Record<string, APIName>;
declare function requestPermission(method: HTTPMethod, path: string, body?: string | object): Promise<boolean>;

export { type APIMap, CompletablePromise, requestPermission, setup };
