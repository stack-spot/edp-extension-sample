{"version":3,"file":"index.js","sources":["../src/config.ts","../src/keygen.ts","../src/CompletablePromise.ts","../src/network/PermissionQuery.ts","../src/network/PermissionQueue.ts","../src/network/PermissionClient.ts","../src/index.ts"],"sourcesContent":["import { permissionClient } from './network/PermissionClient'\nimport { Config, ConfigInput } from './types'\n\nconst USER_KEY = '@stack-spot/opa:user'\n\nexport const config: Config = {}\n\nexport function setup({ url, session, apiMap, verbose }: ConfigInput) {\n  config.url = url\n  config.session = session\n  config.apiMap = apiMap\n  config.verbose = verbose\n  const prevUserId = localStorage.getItem(USER_KEY)\n  const userId = session.getTokenData().account_id_v2 ?? ''\n  localStorage.setItem(USER_KEY, userId)\n  if (prevUserId !== userId) {\n    permissionClient.invalidateCache()\n  }\n}\n","import { ValidationRequest } from '../../commons/types'\n\nexport function requestAsKey(req: ValidationRequest) {\n  return `${req.path}|${req.api}|${req.method}|${req.body ?? ''}|${getHeadersKey(req.headers)}`\n}\n\nfunction getHeadersKey(headers: Record<string, string> | undefined) {\n  if (!headers) return ''\n  const keys = Object.keys(headers)\n  keys.sort()\n  keys.map(k => `${k}:${headers[k]}`).join(',')\n}\n","export class CompletablePromise<T = any> {\n  readonly promise\n  private _resolve: ((value: T) => void) | undefined\n  private _reject: ((reason?: Error) => void) | undefined\n  resolved = false\n  rejected = false\n\n  constructor() {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve\n      this._reject = reject\n    })\n  }\n\n  resolve(value: T) {\n    if (this._resolve) this._resolve(value)\n    this.resolved = true\n  }\n\n  reject(reason?: Error) {\n    if (this._reject) this._reject(reason)\n    this.rejected = true\n  }\n}\n","import { ValidationRequest, ValidationResponse } from '../../../commons/types'\nimport { requestAsKey } from '../keygen'\n\n/**\n * Prevents the same ValidationRequest from being sent more than once in the same network call. \n */\nexport class PermissionQuery {\n  private requests: ValidationRequest[] = []\n  private results: ValidationResponse[] | undefined\n  private indexMap: number[] = []\n\n  constructor(requests: ValidationRequest[]) {\n    const keyToIndex = new Map<string, number>()\n    for (const req of requests) {\n      const key = requestAsKey(req)\n      let index = keyToIndex.get(key)\n      if (index === undefined) {\n        index = this.requests.length\n        this.requests.push(req)\n        keyToIndex.set(key, index)\n      }\n      this.indexMap.push(index)\n    }\n  }\n\n  toJson() {\n    return JSON.stringify(this.requests)\n  }\n\n  setResults(results: ValidationResponse[]) {\n    this.results = results\n  }\n\n  /**\n   * Gets the result according to the index of the array passed in the constructor of this instance.\n   */\n  getResult(index: number) {\n    if (!this.results) throw new Error('Tried to get the results of a PermissionQuery that has no results yet.')\n    return this.results[this.indexMap[index]]\n  }\n}\n","import { ValidationRequest, ValidationResponse } from '../../../commons/types'\nimport { CompletablePromise } from '../CompletablePromise'\nimport { config } from '../config'\nimport { PermissionQuery } from './PermissionQuery'\n\nconst DEFER_MS = 200\n\nexport class PermissionQueue {\n  private queue: ValidationRequest[] = []\n  private deferred = new CompletablePromise<PermissionQuery>()\n  private timeout: number | undefined\n  private lock = false\n\n  private async consume() {\n    if (this.queue.length === 0) return\n    if (this.lock) return this.timeout = window.setTimeout(() => this.consume(), DEFER_MS)\n    this.lock = true\n    const deferred = this.deferred\n    this.deferred = new CompletablePromise()\n    const query = new PermissionQuery(this.queue)\n    this.queue = []\n    if (!config.session || !config.url) {\n      const error = new Error(\n        'Error while validating permissions. Please, be sure to call \"setup\" with a valid url and session before attempting to verify permissions.',\n      )\n      this.deferred.reject(error)\n      throw error\n    }\n\n    try {\n      const response = await config.session.fetch(config.url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json; charset=utf-8' },\n        body: query.toJson(),\n      })\n      if (response.ok) {\n        const allResults: ValidationResponse[] = await response.json()\n        query.setResults(allResults)\n        deferred.resolve(query)\n      } else {\n        const message = await response.text()\n        deferred.reject(new Error(`Error while checking permissions. Network error ${response.status}.\\n${message}`))\n      }\n    } catch (error: any) {\n      deferred.reject(error)\n    }\n    this.lock = false\n  }\n\n  async add(options: ValidationRequest): Promise<boolean | undefined> {\n    if (this.timeout) window.clearTimeout(this.timeout)\n    const index = this.queue.length\n    this.queue.push(options)\n    this.timeout = window.setTimeout(() => this.consume(), DEFER_MS)\n    const query = await this.deferred.promise\n    const result = query.getResult(index)\n    if (result.error) {\n      // eslint-disable-next-line no-console\n      console.warn(`Error while checking permission for \"${options.method} ${options.api} ${options.path}\": ${result.error}`)\n    }\n    if (config.verbose) {\n      // eslint-disable-next-line no-console\n      console.info(`Permission validated: [${options.api}, ${options.method}, ${options.path}] = ${result.result}`)\n    }\n    return result.result\n  }\n}\n","import { HTTPMethod, ValidationRequest } from '../../../commons/types'\nimport { config } from '../config'\nimport { requestAsKey } from '../keygen'\nimport { PermissionQueue } from './PermissionQueue'\n\nfunction processFullPath(path: string) {\n  const addresses = Object.keys(config.apiMap ?? {})\n  const address = addresses.find(a => path.startsWith(a))\n  if (!address) {\n    throw new Error(\n      `Unknown API for URL: ${path}. Please, be sure to inform all APIs in the property \"apiMap\" of the config for the lib @stack-spot/opa.`,\n    )\n  }\n  const api = config.apiMap![address]\n  const resourcePath = path.replace(address, '')\n  return { api, resourcePath }\n}\n\nclass PermissionClient {\n  private cache = new Map<string, boolean>()\n  private queue = new PermissionQueue()\n\n  private async getPermissionForRequest(request: ValidationRequest) {\n    const key = requestAsKey(request)\n    const cached = this.cache.get(key)\n    if (cached != undefined) return cached\n    const result = await this.queue.add(request)\n    if (result !== undefined) this.cache.set(key, result)\n    return result ?? false\n  }\n\n  requestPermission(method: HTTPMethod, path: string, body?: string | object) {\n    const { resourcePath, api } = processFullPath(path)\n    const serializedBody = typeof body === 'object' ? JSON.stringify(body) : `${body}`\n    return this.getPermissionForRequest(\n      { api, method, path: resourcePath, ...(body ? { body: serializedBody } : {}) },\n    )\n  }\n\n  invalidateCache() {\n    this.cache.clear()\n  }\n}\n\nexport const permissionClient = new PermissionClient()\n","import { APIName, HTTPMethod } from '../../commons/types'\nimport { permissionClient } from './network/PermissionClient'\nexport { setup } from './config'\nexport { CompletablePromise } from './CompletablePromise'\n\nexport type APIMap = Record<string, APIName>\n\nexport function requestPermission(method: HTTPMethod, path: string, body?: string | object) {\n  return permissionClient.requestPermission(method, path, body)\n}\n"],"names":["__publicField"],"mappings":"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"}