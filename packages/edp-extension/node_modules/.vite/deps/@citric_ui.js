import {
  Backdrop_default,
  Box_default,
  Button_default,
  Flex_default,
  IconBox_default,
  Text_default,
  colorIsColorScheme,
  colorIsPalette,
  css,
  defaultConfig,
  extendStyle,
  forward_ref_as_default,
  getColor,
  getFontFamily,
  getFontStyle,
  getFontWeight,
  getIconButtonSize,
  getRadius,
  getSpacing,
  handleSxAliasProps,
  keyframes,
  overwriteStyle,
  require_lodash,
  styled
} from "./chunk-WUO3U7VK.js";
import {
  ct,
  pt
} from "./chunk-WRWZMEG7.js";
import {
  ChevronDown_default,
  Slash_default,
  StarFill_default,
  Star_default,
  TimesMini_default,
  Times_default
} from "./chunk-USR2BBLO.js";
import {
  require_jsx_runtime
} from "./chunk-3U5MBTNC.js";
import {
  require_react
} from "./chunk-HL4WHFNK.js";
import {
  __toESM
} from "./chunk-3O7X656O.js";

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Accordion.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var AccordionContext = (0, import_react.createContext)({});
var AccordionItemContext = (0, import_react.createContext)({});
var AccordionStyle = pt.div`
  box-sizing: border-box;

  ${overwriteStyle("Accordion")};
  ${extendStyle("Accordion")};
`;
var AccordionItemStyled = pt.div.withConfig(defaultConfig)`
  box-sizing: border-box;
  border-radius: ${(props) => getRadius(props.theme, "xs")};
  background-color: ${(props) => getColor(props.theme, "light.300")};

  & + & {
    margin-top: 0.25rem;
  }

  ${overwriteStyle("AccordionItem")};
  ${extendStyle("AccordionItem")};
`;
var AccordionContentStyled = pt.div.withConfig(defaultConfig)`
  padding: ${(props) => `0 ${getSpacing(props.theme, 5)} ${getSpacing(props.theme, 5)} ${getSpacing(props.theme, 5)}`};
  
  ${overwriteStyle("AccordionContent")};
  ${extendStyle("AccordionContent")};
`;
var AccordionTitle = pt.button.withConfig(defaultConfig)`
  font: ${(props) => getFontStyle(props.theme, "body1")};
  font-weight: ${(props) => getFontWeight(props.theme, "medium")};
  line-height: 1;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  color: inherit;
  background-color: transparent;
  border: none;
  padding: ${(props) => `${getSpacing(props.theme, 5)}`};
  cursor: pointer;
  align-items: center;
  justify-content: space-between;
  border-radius: ${(props) => getRadius(props.theme, "xs")};

  &:hover {
    background-color: ${(props) => !(props == null ? void 0 : props.active) && getColor(props.theme, "light.400")};
  }

  &:disabled {
    opacity: 0.24;
    pointer-events: none;
  }

  ${overwriteStyle("AccordionTitle")};
  ${extendStyle("AccordionTitle")};
`;
var AccordionIcon = pt(IconBox_default).attrs(({ children = (0, import_jsx_runtime.jsx)(ChevronDown_default, {}) }) => ({
  children
}))`
  width: auto;
  padding-inline: ${(props) => `${getSpacing(props.theme, 4)}`};
  > svg {
    fill: ${(props) => getColor(props.theme, "light.contrastText")};
  }
  ${overwriteStyle("AccordionIcon")};
  ${extendStyle("AccordionIcon")};
`;
var Accordion = forward_ref_as_default(function Accordion2({ active = null, onChange, ...props }, ref) {
  const [itemActive, setItemActive] = (0, import_react.useState)(active);
  const onAccordionChange = (0, import_react.useCallback)((name) => {
    const selectedItem = name !== itemActive ? name : null;
    setItemActive(selectedItem);
    onChange == null ? void 0 : onChange(selectedItem);
  }, [itemActive, setItemActive, onChange]);
  const ctx = (0, import_react.useMemo)(() => ({ active: itemActive, onChange: onAccordionChange }), [itemActive, onAccordionChange]);
  return (0, import_jsx_runtime.jsx)(AccordionContext.Provider, { value: ctx, children: (0, import_jsx_runtime.jsx)(AccordionStyle, { ref, ...props }) });
});
var AccordionItem = forward_ref_as_default(function AccordionItem2({ name, ...props }, ref) {
  const ctx = (0, import_react.useMemo)(() => ({ name }), [name]);
  return (0, import_jsx_runtime.jsx)(AccordionItemContext.Provider, { value: ctx, children: (0, import_jsx_runtime.jsx)(AccordionItemStyled, { ref, ...props }) });
});
var AccordionHeader = forward_ref_as_default(function AccordionHeader2(props, ref) {
  const { name } = (0, import_react.useContext)(AccordionItemContext);
  const { onChange, active } = (0, import_react.useContext)(AccordionContext);
  return (0, import_jsx_runtime.jsx)(Text_default, { as: props.asTitle || "h2", children: (0, import_jsx_runtime.jsx)(AccordionTitle, { ...props, "aria-expanded": active ? true : false, ref, active: name === active, onClick: () => onChange && onChange(name) }) });
});
var AccordionContent = forward_ref_as_default(function AccordionContent2({ children, ...props }, ref) {
  const { active } = (0, import_react.useContext)(AccordionContext);
  const { name } = (0, import_react.useContext)(AccordionItemContext);
  if (active !== name) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(AccordionContentStyled, { ...props, ref, children });
});

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Alert.js
var Alert = styled.div.withConfig(defaultConfig)`
  width: 100%;
  padding: ${({ theme }) => `${getSpacing(theme, 2)} ${getSpacing(theme, 5)}`};
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: space-between;

  ${extendStyle("Alert")};

  background-color: ${({ theme, colorScheme }) => getColor(theme, colorScheme || "primary")};

  ${overwriteStyle("Alert")};
`;
var Alert_default = Alert;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Avatar.js
function getInitials(name) {
  const allNames = name.trim().split(" ");
  const initials = allNames.reduce((acc, curr, index) => {
    if (index === 0 || index === allNames.length - 1) {
      return `${acc}${curr.charAt(0).toUpperCase()}`;
    }
    return acc;
  }, "");
  return initials;
}
var avatarStyles = {
  xxs: () => css`
    width: 1.5rem;
    height: 1.5rem;
    font-size: 0.75rem;
    line-height: 1rem;
  `,
  xs: () => css`
    width: 2rem;
    height: 2rem;
    font-size: 0.75rem;
    line-height: 1rem;
  `,
  sm: () => css`
    width: 3rem;
    height: 3rem;
    font-size: 1rem;
    line-height: 2rem;
  `,
  md: () => css`
    width: 4rem;
    height: 4rem;
    font-size: 1.25rem;
    line-height: 2rem;
  `,
  lg: () => css`
    width: 5rem;
    height: 5rem;
    font-size: 1.5rem;
    line-height: 2.25rem;
  `,
  xl: () => css`
    width: 8rem;
    height: 8rem;
    font-size: 2rem;
    line-height: 4rem;
  `,
  xxl: () => css`
    width: 12rem;
    height: 12rem;
    font-size: 3.5rem;
    line-height: 5.5rem;
  `
};
function getAvatarStyles({ size = "lg" }) {
  return avatarStyles[size]();
}
var Avatar = styled.div.withConfig(defaultConfig).attrs((props) => ({
  children: typeof (props == null ? void 0 : props.children) === "string" ? getInitials(props == null ? void 0 : props.children) : props == null ? void 0 : props.children
}))`
  display: flex;
  justify-content: center;
  align-items: center;

  box-sizing: border-box;
  overflow: hidden;

  ${extendStyle("Avatar")};

  border-radius: ${({ theme, appearance }) => getRadius(theme, appearance === "square" ? "sm" : "full")};
  font-family: ${({ theme }) => getFontFamily(theme, "system1")};
  font-weight: ${({ theme }) => getFontWeight(theme, "bold")};
  background-color: ${({ palette, theme }) => getColor(theme, palette ? `${palette}.800` : "indigo.800")};
  color: ${({ palette, theme }) => getColor(theme, palette ? `${palette}.50` : "indigo.50")};

  img {
    ${getAvatarStyles};
    object-fit: cover;
  }

  ${getAvatarStyles};

  ${overwriteStyle("Avatar")};
`;
var Avatar_default = Avatar;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/AvatarGroup.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var getMarginLeft = {
  xxs: () => css`
    margin-left: -0.25rem;
  `,
  xs: () => css`
    margin-left: -0.25rem;
  `,
  sm: () => css`
    margin-left: -0.5rem;
  `,
  md: () => css`
    margin-left: -0.75rem;
  `,
  lg: () => css`
    margin-left: -0.75rem;
  `,
  xl: () => css`
    margin-left: -1rem;
  `,
  xxl: () => css`
    margin-left: -2rem;
  `
};
var otherAvatarsStyles = {
  xxs: () => css`
    font-size: 0.75rem;
    line-height: 1rem;
  `,
  xs: () => css`
    font-size: 0.75rem;
    line-height: 1rem;
  `,
  sm: () => css`
    font-size: 1rem;
    line-height: 2rem;
  `,
  md: () => css`
    font-size: 1.25rem;
    line-height: 2rem;
  `,
  lg: () => css`
    font-size: 1.5rem;
    line-height: 2.25rem;
  `,
  xl: () => css`
    font-size: 2rem;
    line-height: 4rem;
  `,
  xxl: () => css`
    font-size: 3.5rem;
    line-height: 5.5rem;
  `
};
function getOtherAvatarsStyles({ size = "lg" }) {
  return otherAvatarsStyles[size]();
}
function getValidChildren(children) {
  return import_react2.Children.toArray(children).filter((child) => (0, import_react2.isValidElement)(child));
}
function getCountOfOthersAvatars(children, maxAvatars) {
  const MAX_COUNT_AVATARS = 999;
  const countOfAvatars = getValidChildren(children).length;
  if (countOfAvatars >= MAX_COUNT_AVATARS)
    return `+${MAX_COUNT_AVATARS}`;
  if (countOfAvatars > maxAvatars)
    return `+${getValidChildren(children).length - maxAvatars}`;
  return null;
}
var AvatarGroupStyled = styled.ul.withConfig(defaultConfig)`
  display: flex;
  flex-direction: row;
  align-items: center;
  list-style: none;
  padding: 0;

  ${extendStyle("AvatarGroup")};
  ${overwriteStyle("AvatarGroup")};
`;
var AvatarGroupContent = styled.li.withConfig(defaultConfig)`
  display: flex;
  flex-direction: row;
  align-items: center;

  ${extendStyle("AvatarGroupContent")};

  div:not(:first-of-type) {
    ${(props) => (props == null ? void 0 : props.size) ? getMarginLeft[props.size]() : void 0};
  }

  ${overwriteStyle("AvatarGroupContent")};
`;
var OtherAvatars = styled.span.withConfig(defaultConfig)`
  color: ${({ theme }) => getColor(theme, "light.contrastText")};
  font-family: ${({ theme }) => getFontFamily(theme, "code")};
  margin-left: ${({ theme }) => getSpacing(theme, 3)};
  ${extendStyle("AvatarGroupChildrenOver")};

  ${overwriteStyle("AvatarGroupChildrenOver")};

  ${getOtherAvatarsStyles};
`;
var AvatarGroup = forward_ref_as_default(function AvatarGroup2({ as = "ul", ...props }, ref) {
  const MAX_AVATARS_DEFAULT = 8;
  const { size, children, maxAvatars = MAX_AVATARS_DEFAULT } = props;
  const avatars = getValidChildren(children).slice(0, maxAvatars);
  const countOfOtherAvatars = getCountOfOthersAvatars(children, maxAvatars);
  return (0, import_jsx_runtime2.jsx)(AvatarGroupStyled, { ...props, ref, as, children: (0, import_jsx_runtime2.jsxs)(AvatarGroupContent, { size: size || "lg", children: [avatars, countOfOtherAvatars && (0, import_jsx_runtime2.jsx)(OtherAvatars, { ...props, children: countOfOtherAvatars })] }) });
});
var AvatarGroup_default = AvatarGroup;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Badge.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var BadgeStyled = styled.div.withConfig(defaultConfig)`
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 1.5rem;
  padding: 0 0.5rem;

  &:nth-of-type(1n + 1) {
    margin-right: ${({ theme }) => getSpacing(theme, 2)};
  }

  ${extendStyle("Badge")};

  font: ${({ theme }) => getFontStyle(theme, "microtext1")};
  border-radius: ${({ theme, appearance }) => getRadius(theme, appearance === "square" ? "xs" : "full")};
  background-color: ${({ theme, palette = "indigo" }) => getColor(theme, `${palette}.800`)};
  color: ${({ theme, palette = "indigo" }) => getColor(theme, `${palette}.50`)};

  ${overwriteStyle("Badge")};
`;
var Badge = forward_ref_as_default(function Badge2(props, ref) {
  return (0, import_jsx_runtime3.jsx)(BadgeStyled, { ...props, ref, children: (0, import_jsx_runtime3.jsx)(Flex_default, { as: "span", alignItems: "center", flexWrap: "nowrap", children: props.children }) });
});
var Badge_default = Badge;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/BadgeGroup.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react8 = __toESM(require_react(), 1);

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Tooltip.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_lodash = __toESM(require_lodash(), 1);
var import_react7 = __toESM(require_react(), 1);

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/hooks/useMouseMove.js
var import_react3 = __toESM(require_react(), 1);
var useMouseMove = (tooltipRef) => {
  const [coords, setCoords] = (0, import_react3.useState)({ x: 0, y: 0 });
  function getPosition(clientPosition, tooltipSize, windowSize) {
    const totalSize = clientPosition + tooltipSize;
    const position = totalSize > windowSize ? clientPosition - tooltipSize : clientPosition;
    return position;
  }
  function handleMouseMove(event) {
    const { clientX, clientY } = event;
    const { width, height } = tooltipRef.current.getBoundingClientRect();
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    setCoords({
      x: getPosition(clientX, width, windowWidth),
      y: getPosition(clientY, height, windowHeight)
    });
  }
  return { coords, handleMouseMove };
};
var useMouseMove_default = useMouseMove;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/hooks/useNavigationVertical.js
var import_react4 = __toESM(require_react(), 1);
var useNavigationVertical = (list) => {
  var _a;
  const [focusIndex, setFocusIndex] = (0, import_react4.useState)(-1);
  const ulRef = (0, import_react4.useRef)(null);
  const listLength = ((_a = ulRef.current) == null ? void 0 : _a.children.length) ?? import_react4.default.Children.count(list);
  const getDropdownChildren = (dropdownElement) => {
    const children = [];
    for (let i = 0; i < (dropdownElement == null ? void 0 : dropdownElement.children.length); i++) {
      const child = dropdownElement == null ? void 0 : dropdownElement.children[i];
      children.push(child);
    }
    return children;
  };
  (0, import_react4.useEffect)(() => {
    var _a2;
    if (focusIndex >= 0) {
      const ulChildren = getDropdownChildren(ulRef.current);
      (_a2 = ulChildren == null ? void 0 : ulChildren[focusIndex]) == null ? void 0 : _a2.focus();
    }
  }, [focusIndex]);
  const onKeyDown = (event) => {
    var _a2;
    switch (event.key) {
      case "ArrowUp":
        setFocusIndex(focusIndex - 1 <= 0 ? 0 : focusIndex - 1);
        break;
      case "ArrowDown":
        setFocusIndex(focusIndex + 1 > listLength ? focusIndex - 1 : focusIndex + 1);
        break;
      case "Tab":
        setFocusIndex(-1);
        (_a2 = ulRef == null ? void 0 : ulRef.current) == null ? void 0 : _a2.focus();
        break;
      default:
        break;
    }
  };
  return [ulRef, onKeyDown];
};
var useNavigationVertical_default = useNavigationVertical;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/hooks/useOutsideClick.js
var import_react5 = __toESM(require_react(), 1);
function handleCallback(props) {
  var _a, _b, _c, _d;
  if (!((_b = (_a = props == null ? void 0 : props.ref) == null ? void 0 : _a.current) == null ? void 0 : _b.contains(props.event.target)) && !((_d = (_c = props == null ? void 0 : props.ignoredRef) == null ? void 0 : _c.current) == null ? void 0 : _d.contains(props.event.target))) {
    props.callback(props.event);
  }
}
var useOutsideClick = (props) => {
  (0, import_react5.useEffect)(() => {
    const handleClick = (event) => {
      handleCallback({
        event,
        ref: props.ref,
        callback: props.callback,
        ignoredRef: props.ignoredRef || props.ref
      });
    };
    document.addEventListener("mousedown", handleClick);
    return () => {
      document.removeEventListener("mousedown", handleClick);
    };
  }, [props.ref, props.callback, props.ignoredRef]);
};
var useOutsideClick_default = useOutsideClick;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/hooks/useOutsideFocus.js
var import_react6 = __toESM(require_react(), 1);

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Tooltip.js
var getTooltipPosition = (position) => {
  const tooltipPosition = {
    top: css`
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
    `,
    bottom: css`
      top: 135%;
      left: 50%;
      transform: translateX(-50%);
    `,
    right: css`
      top: 50%;
      transform: translateY(-50%);
      left: 110%;
    `,
    left: css`
      top: 50%;
      transform: translateY(-50%);
      right: 110%;
    `
  };
  return position ? tooltipPosition[position] : void 0;
};
var getPointerPosition = (position, color, offset) => {
  const pointerPosition = {
    top: css`
      top: 100%;
      left: 50%;
      margin-left: ${-((offset == null ? void 0 : offset.x) ?? 0) - 5}px;
      border-top-color: ${color};
    `,
    right: css`
      top: 50%;
      right: 100%;
      margin-top: ${-((offset == null ? void 0 : offset.y) ?? 0) - 5}px;
      border-right-color: ${color};
    `,
    bottom: css`
      bottom: 100%;
      left: 50%;
      margin-left: ${-((offset == null ? void 0 : offset.x) ?? 0) - 5}px;;
      border-bottom-color: ${color};
    `,
    left: css`
      top: 50%;
      left: 100%;
      margin-top: ${-((offset == null ? void 0 : offset.y) ?? 0) - 5}px;
      border-left-color: ${color};
    `
  };
  return position ? pointerPosition[position] : void 0;
};
var Container = styled.div`
  width: fit-content;
  position: relative;
  height: fit-content;
  cursor: pointer;
`;
var TooltipStyled = styled.div.withConfig(defaultConfig)`
  z-index: 15000;
  pointer-events: none;
  padding: ${({ theme }) => `${getSpacing(theme, 2)} ${getSpacing(theme, 3)}`};
  border-radius: 0.375rem;
  width: max-content;
  box-sizing: border-box;

  display: ${({ hover }) => hover ? "block" : "none"};
  background-color: ${({ theme, colorScheme }) => getColor(theme, colorScheme || "inverse")};

  ${extendStyle("Tooltip")};

  ${(props) => (props == null ? void 0 : props.nowrap) ? css`
          max-width: ${props == null ? void 0 : props.width};

          span:last-of-type {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
          }
        ` : css`
          max-width: ${(props == null ? void 0 : props.width) || "250px"};
        `}

  ${({ theme, coords, offset, position, colorScheme, float }) => float ? css`
          position: fixed;
          left: ${`${coords.x}px`};
          top: ${`${coords.y}px`};
        ` : css`
          position: absolute;
          ${getTooltipPosition(position)}
          ${!(0, import_lodash.isNil)(offset == null ? void 0 : offset.y) && `margin-top: ${offset == null ? void 0 : offset.y}px;`}
          ${!(0, import_lodash.isNil)(offset == null ? void 0 : offset.x) && `margin-left: ${offset == null ? void 0 : offset.x}px;`}

          &::after {
            content: '';
            position: absolute;
            border-width: 5px;
            border-style: solid;
            border-color: transparent;
            ${getPointerPosition(position, getColor(theme, colorScheme || "inverse"), offset)}
          }
        `}

  ${overwriteStyle("Tooltip")};
`;
var Tooltip = forward_ref_as_default(function Tooltip2({ as = "div", position = "top", keyboardControls = true, tabIndex = 0, ...props }, ref) {
  const tooltipRef = (0, import_react7.useRef)(null);
  const { coords, handleMouseMove } = useMouseMove_default(tooltipRef);
  const [hover, setHover] = (0, import_react7.useState)(false);
  (0, import_react7.useEffect)(() => {
    if (ref && typeof ref === "object") {
      ref.current = tooltipRef.current;
    }
  }, [ref, tooltipRef]);
  const handleKeyDown = (event) => {
    var _a;
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      setHover((oldValue) => !oldValue);
      if (!hover) {
        (_a = tooltipRef.current) == null ? void 0 : _a.focus();
      }
    }
    if (event.key === "Escape") {
      event.preventDefault();
      setHover(false);
    }
  };
  const tooltipId = (0, import_react7.useRef)(`tooltip-${Math.random().toString(36).substring(2, 9)}`);
  return (0, import_jsx_runtime4.jsxs)(Container, { onMouseEnter: () => setHover(true), onFocus: () => setHover(true), onBlur: () => setHover(false), onMouseLeave: () => setHover(false), onMouseMove: handleMouseMove, onKeyDown: keyboardControls ? handleKeyDown : void 0, tabIndex: tabIndex !== "none" ? tabIndex : void 0, children: [(0, import_jsx_runtime4.jsx)("div", { "aria-describedby": tooltipId.current, children: props.children }), (0, import_jsx_runtime4.jsx)(TooltipStyled, { role: "tooltip", id: tooltipId.current, as, ref: tooltipRef, coords, hover, position, "aria-hidden": !hover, tabIndex: -1, "aria-live": "polite", ...props, children: typeof props.text === "string" ? (0, import_jsx_runtime4.jsx)(Text_default, { appearance: "microtext1", colorScheme: props.colorScheme ? `${props.colorScheme}.contrastText` : "inverse.contrastText", children: props.text }) : props.text })] });
});
var Tooltip_default = Tooltip;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/BadgeGroup.js
function getValidChildren2(children) {
  return import_react8.Children.toArray(children).filter((child) => (0, import_react8.isValidElement)(child));
}
function getCountOfOthersAvatars2(children, maxBadges) {
  const MAX_COUNT_BADGES = 999;
  const countOfBadges = getValidChildren2(children).length;
  if (countOfBadges >= MAX_COUNT_BADGES)
    return `+${MAX_COUNT_BADGES}`;
  if (countOfBadges > maxBadges)
    return `+${getValidChildren2(children).length - maxBadges}`;
  return null;
}
var BadgeGroupStyled = styled.div.withConfig(defaultConfig)`
  display: flex;
  flex-direction: row;
  list-style: none;
  align-items: center;
  padding: 0;
  margin:0;

  ${extendStyle("BadgeGroup")}
  ${overwriteStyle("BadgeGroup")}
`;
var BadgeGroup = forward_ref_as_default(function BadgeGroup2({ as = "ul", ...props }, ref) {
  const MAX_BADGE_DEFAULT = 9;
  const { children, maxBadges = MAX_BADGE_DEFAULT } = props;
  const listBadges = getValidChildren2(children);
  const badges = listBadges.slice(0, maxBadges);
  const badgeOthers = listBadges.slice(maxBadges, listBadges.length);
  const listBadgeOthersText = Array();
  badgeOthers.map((badge) => {
    const typeofBadge = typeof badge.props.children;
    listBadgeOthersText.push(typeofBadge === "string" ? badge.props.children : badge.props.children[0].props.children);
  });
  const textOthersBadges = listBadgeOthersText.join(", ");
  const countOfOthersBadges = getCountOfOthersAvatars2(children, maxBadges);
  return (0, import_jsx_runtime5.jsxs)(BadgeGroupStyled, { ...props, ref, as, children: [badges, countOfOthersBadges && (0, import_jsx_runtime5.jsx)(Flex_default, { sx: { display: "inline-flex" }, children: (0, import_jsx_runtime5.jsx)(Tooltip_default, { text: textOthersBadges, position: props.tooltipPosition, children: (0, import_jsx_runtime5.jsx)(Badge_default, { palette: props.numberBadgeColor, children: countOfOthersBadges }) }) })] });
});
var BadgeGroup_default = BadgeGroup;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Breadcrumb.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbStyled = styled.nav.withConfig(defaultConfig)`
  ${extendStyle("Breadcrumb")};
  ${overwriteStyle("Breadcrumb")};
`;
var BreadcrumbItemStyled = styled.li.withConfig(defaultConfig)`
  display: inline-flex;
  align-items: center;
  text-decoration: none;

  ${extendStyle("BreadcrumbItem")};

  color: ${({ theme }) => getColor(theme, "light.contrastText")};
  font: ${({ theme }) => getFontStyle(theme, "breadcrumb")};
  opacity: 40%;

  &:last-of-type {
    color: ${({ theme }) => getColor(theme, "light.contrastText")};
    opacity: 1;
  }

  &:first-of-type {
    font-weight: ${({ theme }) => getFontWeight(theme, "medium")};
  }

  ${overwriteStyle("BreadcrumbItem")};
`;
var BreadcrumbLinkStyled = styled.a.withConfig(defaultConfig)`
  cursor: pointer;
  color: inherit;
  text-decoration: inherit;

  ${extendStyle("BreadcrumbLink")};

  &:hover {
    text-decoration: underline;
    color: ${({ theme }) => getColor(theme, "light.contrastText")};
  }

  ${overwriteStyle("BreadcrumbLink")};
`;
var BreadcrumbIconStyled = styled.span.withConfig(defaultConfig).attrs(({ children = (0, import_jsx_runtime6.jsx)(Slash_default, {}) }) => ({
  children
}))`
  margin: 0 0.375rem;
  display: inline-flex;

  ${extendStyle("BreadcrumbIcon")};

  > svg {
    fill: ${({ theme }) => getColor(theme, "light.contrastText")};
    width: 0.9rem;
    height: 0.9rem;
  }

  ${overwriteStyle("BreadcrumbIcon")};
`;
var BreadcrumbIcon = forward_ref_as_default(({ as = "span", children, ...props }, ref) => (0, import_jsx_runtime6.jsx)(BreadcrumbIconStyled, { as, ref, ...props, children }));
var BreadcrumbLink = forward_ref_as_default(({ as = "a", children, ...props }, ref) => (0, import_jsx_runtime6.jsx)(BreadcrumbLinkStyled, { as, ref, ...props, children }));
var BreadcrumbItem = forward_ref_as_default(({ as = "li", children, ...props }, ref) => (0, import_jsx_runtime6.jsx)(BreadcrumbItemStyled, { as, ref, ...props, children }));
var Breadcrumb = forward_ref_as_default(({ children, ...props }, ref) => (0, import_jsx_runtime6.jsx)(BreadcrumbStyled, { ref, ...props, children: (0, import_jsx_runtime6.jsx)(Flex_default, { as: "ul", sx: { m: "0", p: "0" }, children }) }));

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Card.js
var CardHeader = pt.div`
  ${extendStyle("CardHeader")};
  ${overwriteStyle("CardHeader")};
`;
var CardContent = pt.div`
  ${extendStyle("CardContent")};
  ${overwriteStyle("CardContent")};
`;
var CardFooter = pt.div`
  ${extendStyle("CardFooter")};
  ${overwriteStyle("CardFooter")};
`;
var Card = pt.div.withConfig(defaultConfig)`
  display: block;
  box-sizing: border-box;
  text-decoration: none;
  color: inherit;
  

  ${({ clickable }) => clickable && css`
      &:hover {
        cursor: pointer;
        box-shadow: 0px 0px 0px 2px ${(props) => getColor(props.theme, "light.600")};
      }
    `}

  ${extendStyle("Card")};

  padding: ${({ theme }) => getSpacing(theme, 5)};
  background-color: ${({ theme }) => getColor(theme, "light.400")};
  border: 1px solid ${({ theme }) => getColor(theme, "light")};
  border-radius: ${({ theme }) => getRadius(theme, "xs")};
  
  ${overwriteStyle("Card")};
`;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Dropdown.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react9 = __toESM(require_react(), 1);
var DropdownStyled = styled.ul.withConfig(defaultConfig)`
  width: 100%;
  padding: 0;
  margin: 0;
  list-style: none;
  box-sizing: border-box;
  max-height: 0;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0.25rem 0.25rem 2rem 0 #1a213814;
  display: none;

  ${extendStyle("Dropdown")};

  ${(props) => (props == null ? void 0 : props.visible) && css`
      display: block;
      padding: ${({ theme }) => `${getSpacing(theme, 3)} 0`};
      max-height: ${(props == null ? void 0 : props.visibleHeight) || "17rem"} ;
      overflow-y: auto;

      &::-webkit-scrollbar {
        width: 0.125rem;
      }

      &::-webkit-scrollbar-thumb {
        background-color: ${({ theme }) => getColor(theme, "primary")};
      }
    `}

  border-radius: ${({ theme }) => getRadius(theme, "xs")};
  background-color: ${({ theme }) => getColor(theme, "light.300")};

  ${overwriteStyle("Dropdown")};
`;
var DropdownItemStyled = styled.li.withConfig(defaultConfig)`
  width: 100%;
  min-height: 2rem;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding: ${({ theme }) => `${getSpacing(theme, 2)} ${getSpacing(theme, 3)}`};

  ${extendStyle("DropdownItem")};

  &:hover {
    background-color: ${({ theme }) => getColor(theme, "light")};
  }

  ${overwriteStyle("DropdownItem")};
`;
var Dropdown = forward_ref_as_default(function Dropdown2({ as, ...props }, ref) {
  const [dropdownRef, onKeyDown] = useNavigationVertical_default(props.children);
  useOutsideClick_default({
    ref: dropdownRef,
    callback: props.onClose,
    ignoredRef: props.ignoredRef
  });
  (0, import_react9.useEffect)(() => {
    if (ref && typeof ref === "object") {
      ref.current = dropdownRef.current;
    }
  }, [ref, dropdownRef]);
  return (0, import_jsx_runtime7.jsx)(DropdownStyled, { as, ref: dropdownRef, role: "listbox", onKeyDown, ...props });
});
var DropdownItem = forward_ref_as_default(function DropdownItem2({ as, ...props }, ref) {
  return (0, import_jsx_runtime7.jsx)(DropdownItemStyled, { role: "option", tabIndex: 0, ref, ...props, as });
});

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/FieldAddon.js
var FieldAddon = styled.div.withConfig(defaultConfig)`
  height: 2.5rem;
  display: flex;
  align-items: center;
  padding-inline: ${({ theme }) => `${getSpacing(theme, 3)}`};
  box-sizing: border-box;

  ${extendStyle("FieldAddon")};

  border: 1px solid ${({ theme }) => getColor(theme, "light.600")};
  background: ${({ theme }) => getColor(theme, "light.400")};
  font: ${({ theme }) => getFontStyle(theme, "body2")};
  color: ${({ theme }) => getColor(theme, "light.contrastText")};

  ${overwriteStyle("FieldAddon")};
`;
var FieldAddon_default = FieldAddon;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/FieldGroup.js
var getBorderLastChildStyle = (theme) => css`
  border-radius: ${getRadius(theme, "xs")};
  border-right-width: 1px;
  border-left-width: 0;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
`;
var getBorderFirstChildStyle = (theme) => css`
  border-radius: ${getRadius(theme, "xs")};
  border-left-width: 1px;
  border-right-width: 0;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
`;
var getBorderWithSiblingStyle = () => css`
  border-radius: 0;
  border-left-width: 0;
  border-right-width: 0;
  &:not(button) {
    &:focus {
      border-width: 1px;
      padding-inline: 0.438rem;
    }
  }
`;
var FieldGroup = styled.div.withConfig(defaultConfig)`
  width: 100%;
  box-sizing: border-box;
  display: inline-flex;

  > button {
    border-color: #a9a9ac;
    &:hover {
      border-color: #a9a9ac;
    }
    &:focus {
      padding-inline: 0.75rem;
    }
  }

  ${extendStyle("FieldGroup")};

  > :not(:last-child) {
    ${getBorderWithSiblingStyle()}
    &:not(button) {
      &:focus {
        padding-inline: 0.5rem;
      }
    }
  }

  > :not(:first-child) {
    ${getBorderWithSiblingStyle()}
  }

  > :first-child {
    ${({ theme }) => getBorderFirstChildStyle(theme)}
  }

  > :last-child {
    ${({ theme }) => getBorderLastChildStyle(theme)}
  }

  > select:not(:last-child) {
    &:focus {
      background-position: right 0.438rem top 50%;
    }
  }

  > input:only-child,
  textarea:only-child,
  select:only-child {
    border-radius: ${({ theme }) => getRadius(theme, "xs")};
    border-width: 1px;
  }

  ${overwriteStyle("FieldGroup")};
`;
var FieldGroup_default = FieldGroup;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/FormItem.js
var FormHelper = styled(Text_default)`
  ${extendStyle("FormHelper")};
  margin-top: ${({ theme }) => getSpacing(theme, 2)};
  font: ${({ theme }) => getFontStyle(theme, "body2")};
  ${overwriteStyle("FormHelper")};
`;
var FormItem = styled.div.withConfig(defaultConfig)`
  margin-bottom: ${({ theme }) => getSpacing(theme, 6)};
  ${extendStyle("FormItem")};
  ${overwriteStyle("FormItem")};
`;
var FormItem_default = FormItem;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/IconButton.js
function withOpacity(colorVariable, opacity) {
  return `color-mix(in srgb, ${colorVariable} ${Math.round(opacity * 100)}%, transparent)`;
}
function getIconColor(color) {
  if (colorIsColorScheme(color))
    return `${color}.contrastText`;
  if (colorIsPalette(color))
    return `${color}.50`;
}
function getBgColor(color) {
  if (colorIsColorScheme(color))
    return `${color}.500`;
  if (colorIsPalette(color))
    return `${color}.800`;
}
function getBgHoverColor(color) {
  if (colorIsColorScheme(color))
    return `${color}.600`;
  if (colorIsPalette(color))
    return `${color}.900`;
}
var IconButton = styled.button.withConfig(defaultConfig)`
  box-sizing: border-box;
  display: inline-flex;
  border-radius: 100%;
  cursor: pointer;
  align-items: center;
  justify-content: center;
  border: none;
  padding: ${({ theme, size }) => getIconButtonSize(theme, size).spacing};
  border-width: 1px;
  border-style: solid;
  border-color: ${({ color, theme, appearance }) => {
  if (appearance === void 0 || appearance === "text") {
    return "transparent";
  }
  if (color) {
    const colorDefinition = color.includes(".") ? color : getBgColor(color);
    return getColor(theme, colorDefinition);
  }
  return getColor(theme, "light.500");
}};
  
  border-radius: ${(props) => getRadius(props.theme, (props == null ? void 0 : props.appearance) === "circle" ? "full" : "xs")};
  width: fit-content;
  height: fit-content;

  &:disabled {
    pointer-events: none;
    > svg {
      opacity: 0.24;
    }
  }

  ${extendStyle("IconButton")};
  
  background-color: ${({ color, theme, appearance }) => {
  if (appearance === void 0 || appearance === "text") {
    return "transparent";
  }
  if (color) {
    const colorDefinition = color.includes(".") ? color : getBgColor(color);
    return getColor(theme, colorDefinition);
  }
  return getColor(theme, "light.500");
}};

  > svg {
    width: ${({ theme, size }) => getIconButtonSize(theme, size).size}; 
    height: ${({ theme, size }) => getIconButtonSize(theme, size).size};
    display: inline;
    
    fill: ${({ color, theme }) => {
  if (color) {
    const colorDefinition = color.includes(".") ? color : getIconColor(color);
    return getColor(theme, colorDefinition);
  }
  return getColor(theme, "light.contrastText");
}}; 
  }

  &:hover,
  &:focus {
    ${({ theme, appearance, color }) => color && appearance !== "text" && appearance !== void 0 ? ct`background-color: ${getColor(theme, color.includes(".") ? color : getBgHoverColor(color))}` : ct`background-color: ${withOpacity(getColor(theme, "light.contrastText"), 0.2)}`};
    ${({ theme, appearance, color }) => color && appearance !== "text" && appearance !== void 0 ? ct`border-color: ${getColor(theme, color.includes(".") ? color : getBgHoverColor(color))}` : ct`border-color: ${withOpacity(getColor(theme, "light.contrastText"), 0.2)}`}
}
    
  

  ${overwriteStyle("IconButton")};
`;
var IconButton_default = IconButton;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/LoadingCircular.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/ProgressCircular.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var progressSizeStyles = {
  xs: "0.875",
  sm: "1.375",
  md: "1.875",
  lg: "2.875"
};
function getProgressStyle(size = "md") {
  return progressSizeStyles[size];
}
var ProgressCircularStyled = styled.svg.withConfig(defaultConfig).attrs({
  viewBox: "0 0 120 120"
})`
  transform: rotate(-90deg);
  ${extendStyle("ProgressCircular")};

  width: ${(props) => getProgressStyle(props == null ? void 0 : props.size)}rem;
  height: ${(props) => getProgressStyle(props == null ? void 0 : props.size)}rem;

  circle:first-child {
    stroke: ${({ theme }) => getColor(theme, "light.600")};
  }
  circle:nth-child(2) {
    stroke: ${({ theme, colorScheme = "primary" }) => getColor(theme, `${colorScheme}.500`)};
    stroke-dasharray: 100;
    stroke-dashoffset: ${(props) => (props == null ? void 0 : props.percentage) && 100 - (props == null ? void 0 : props.percentage)};
  }

  ${overwriteStyle("ProgressCircular")};
`;
var BaseCircle = styled.circle.withConfig(defaultConfig).attrs({
  cx: "60",
  cy: "60",
  r: "54",
  fill: "none",
  strokeWidth: "12"
})``;
var ViewCircle = styled.circle.withConfig(defaultConfig).attrs({
  strokeLinecap: "round",
  cx: "60",
  cy: "60",
  r: "54",
  fill: "none",
  strokeWidth: "7",
  pathLength: "100"
})``;
var ProgressText = styled.text.withConfig(defaultConfig).attrs({
  x: "50%",
  y: "-50%",
  dominantBaseline: "middle",
  textAnchor: "middle"
})`
  transform: rotate(90deg);
  font: ${({ theme }) => getFontStyle(theme, "microtext1")};
  font-size: ${(props) => getProgressStyle(props == null ? void 0 : props.size)}rem;
`;
var ProgressCircular = forward_ref_as_default(function ProgressCircular2({ children, ...props }, ref) {
  return (0, import_jsx_runtime8.jsxs)(ProgressCircularStyled, { ...props, ref, children: [(0, import_jsx_runtime8.jsx)(BaseCircle, {}), (0, import_jsx_runtime8.jsx)(ViewCircle, {}), (0, import_jsx_runtime8.jsx)(ProgressText, { size: props.size, children })] });
});
var ProgressCircular_default = ProgressCircular;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/LoadingCircular.js
var StyledLoadingCircular = styled(ProgressCircular_default)`
  animation: loopRotate 1.5s infinite;

  @keyframes loopRotate {
    0% {
      transform: rotate(-100deg);
      stroke-dashoffset: 80%;
    }
    50% {
      transform: rotate(40deg);
      stroke-dashoffset: 60%;
    }
    100% {
      transform: rotate(260deg);
      stroke-dashoffset: 80%;
    }
  }
  ${extendStyle("LoadingCircular")}
  ${overwriteStyle("LoadingCircular")}
`;
var LoadingCircular = forward_ref_as_default(function LoadingCircular2({ ...props }, ref) {
  return (0, import_jsx_runtime9.jsx)(StyledLoadingCircular, { ref, ...props });
});
var LoadingCircular_default = LoadingCircular;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/ProgressLinear.js
var ProgressLinear = styled.div.withConfig(defaultConfig)`
  position: relative;
  border-radius: ${({ theme }) => getRadius(theme, "lg")};
  width: 100%;
  height: 0.25rem;

  ${extendStyle("ProgressLinear")};

  background: ${({ theme }) => getColor(theme, "light.600")};

  &::after {
    content: '';
    position: absolute;
    width: ${({ percentage = 50 }) => percentage}%;
    height: 0.125rem;
    top: 1px;
    left: 1px;
    border-radius: ${({ theme }) => getRadius(theme, "lg")};
    background: ${({ theme, colorScheme = "primary" }) => getColor(theme, colorScheme)};
  }

  ${overwriteStyle("ProgressLinear")};
`;
var ProgressLinear_default = ProgressLinear;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/LoadingLinear.js
var LoadingLinear = styled(ProgressLinear_default)`
  &::after {
    animation: loopLinear 1s infinite;

    @keyframes loopLinear {
      0% {
        left: 0%;
        width: 5px;
      }
      50% {
        left: 30%;
        width: 40%;
      }
      100% {
        left: 99.3%;
        width: 5px;
      }
    }
  }

  ${extendStyle("LoadingLinear")}
  ${overwriteStyle("LoadingLinear")}
`;
var LoadingLinear_default = LoadingLinear;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Modal.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_react10 = __toESM(require_react(), 1);
var modalSizes = {
  lg: () => css`
    width: 800px;
  `,
  md: () => css`
    width: 600px;
  `,
  sm: () => css`
    width: 400px;
  `
};
var modalPosition = {
  center: () => css`
    position: relative;
    margin: 3.75rem auto;
    border-radius: ${({ theme }) => getRadius(theme, "md")};
  `,
  right: () => css`
    position: absolute;
    right: 0;
    height: 100vh;
    margin: 0;
    border-top-left-radius: ${({ theme }) => getRadius(theme, "md")};
    border-bottom-left-radius: ${({ theme }) => getRadius(theme, "md")};
  `
};
var ModalContext = (0, import_react10.createContext)({});
var ModalStyled = styled.section.withConfig(defaultConfig)`
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding: ${({ theme }) => getSpacing(theme, 9)};
  flex-wrap: wrap;
  ${extendStyle("Modal")};

  ${({ size = "lg" }) => modalSizes[size]}
  ${({ position = "center" }) => modalPosition[position]}

  background-color: ${({ theme }) => getColor(theme, "light.400")};
  color: ${({ theme }) => getColor(theme, "light.contrastText")};

  ${overwriteStyle("Modal")};
`;
var ModalHeader = styled.header.withConfig(defaultConfig)`
  box-sizing: border-box;
  flex-grow: 1;
  ${extendStyle("ModalHeader")};

  font: ${({ theme }) => getFontStyle(theme, "h3")};
  color: ${({ theme }) => getColor(theme, "light.contrastText")};

  ${overwriteStyle("ModalHeader")};
`;
var ModalContent = styled.div.withConfig(defaultConfig)`
  box-sizing: border-box;
  width: 100%;

  max-height: ${({ scrollBehavior = "inside" }) => scrollBehavior === "inside" ? "50vh" : "fit-content"};

  overflow-y: auto;
  &::-webkit-scrollbar {
    width: 5px;
  }
  &::-webkit-scrollbar-track {
    background: ${({ theme }) => getColor(theme, "light.400")};
  }
  &::-webkit-scrollbar-thumb {
    background: ${({ theme }) => getColor(theme, "light.700")};
    border-radius: ${({ theme }) => getRadius(theme, "xs")};
  }

  ${extendStyle("ModalContent")};
  ${overwriteStyle("ModalContent")};
`;
var ModalFooter = styled.footer.withConfig(defaultConfig)`
  box-sizing: border-box;
  width: 100%;
  display: flex;
  ${extendStyle("ModalFooter")};

  justify-content: ${({ justifyContent = "space-between" }) => justifyContent};
  ${overwriteStyle("ModalFooter")};
`;
var ModalCloseButtonStyle = styled(IconButton_default)`
  ${extendStyle("ModalCloseButton")};
  ${overwriteStyle("ModalCloseButton")};
`;
var ModalCloseButton = forward_ref_as_default(function ModalCloseButton2({ children = (0, import_jsx_runtime10.jsx)(Times_default, {}), ...props }, ref) {
  const ctx = (0, import_react10.useContext)(ModalContext);
  return (0, import_jsx_runtime10.jsx)(ModalCloseButtonStyle, { onClick: ctx.onClose, ...props, ref, autoFocus: true, children });
});
var Modal = forward_ref_as_default(function Modal2({ onClose, ...props }, ref) {
  const ctx = (0, import_react10.useMemo)(() => ({ onClose }), [onClose]);
  const isElementDisabled = (element) => "disabled" in element && element.disabled;
  (0, import_react10.useEffect)(() => {
    const modal = document.getElementById("modal");
    if (modal) {
      const focusableElements = Array.from(modal.querySelectorAll("*")).filter((element) => element instanceof HTMLElement && element.tabIndex >= 0 && !isElementDisabled(element) && !element.hidden);
      modal.addEventListener("keydown", function trapTabKey(e) {
        if (e.key === "Tab") {
          const focusableElementsArray = Array.from(focusableElements);
          if (document.activeElement === focusableElementsArray[focusableElementsArray.length - 1] && !e.shiftKey) {
            focusableElementsArray[0].focus();
            e.preventDefault();
          } else if (document.activeElement === focusableElementsArray[0] && e.shiftKey) {
            focusableElementsArray[focusableElementsArray.length - 1].focus();
            e.preventDefault();
          }
        }
      });
    }
  }, []);
  return (0, import_jsx_runtime10.jsx)(ModalContext.Provider, { value: ctx, children: (0, import_jsx_runtime10.jsx)(Backdrop_default, { onClick: onClose, "data-testid": "backdrop", children: (0, import_jsx_runtime10.jsx)(ModalStyled, { ...props, ref, id: "modal" }) }) });
});

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Pagination.js
var import_react11 = __toESM(require_react(), 1);
function usePagination(props) {
  const [indexPagination, setIndexPagination] = (0, import_react11.useState)(props.initialState || 1);
  const [contentPerPage, setContentPerPageState] = (0, import_react11.useState)(props.contentPerPage || 15);
  const [data, setData] = (0, import_react11.useState)([]);
  const indexLast = indexPagination * contentPerPage;
  const indexFirst = indexLast - contentPerPage;
  (0, import_react11.useEffect)(() => {
    setData(props.data.slice(indexFirst, indexLast));
  }, [indexFirst, indexLast, indexPagination, props.data]);
  const listNumberPages = [];
  const numberPages = Math.ceil(props.data.length / contentPerPage);
  const canNextPage = indexPagination < numberPages;
  const canPreviousPage = indexPagination > 1;
  const canViewMore = contentPerPage < props.data.length;
  for (let index = 1; index <= Math.ceil(props.data.length / contentPerPage); index += 1) {
    listNumberPages.push(index);
  }
  function previousPage() {
    if (canPreviousPage) {
      setIndexPagination((currentIndex) => currentIndex - 1);
    }
  }
  function nextPage() {
    if (canNextPage) {
      setIndexPagination((currentIndex) => currentIndex + 1);
    }
  }
  function goToPage(index) {
    if (index <= numberPages && index > 0)
      setIndexPagination(index);
  }
  function viewMore(index) {
    setContentPerPageState(contentPerPage + index < props.data.length ? contentPerPage + index : props.data.length);
  }
  function setContentPerPage(content) {
    setContentPerPageState(content);
    setIndexPagination(1);
  }
  return {
    data,
    numberPages,
    listNumberPages,
    indexPagination,
    canNextPage,
    canPreviousPage,
    contentPerPage,
    goToPage,
    previousPage,
    nextPage,
    viewMore,
    setContentPerPage,
    canViewMore
  };
}
var Pagination_default = usePagination;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Paper.js
var Paper = pt.div.withConfig(defaultConfig)`
  padding: ${({ theme }) => `${getSpacing(theme, 7)}`};
  box-sizing: border-box;
  background-color: ${({ theme }) => getColor(theme, "light.300")};
  border: 1px solid ${({ theme }) => getColor(theme, "light")};
  border-radius: ${({ theme }) => getRadius(theme, "sm")};

  ${handleSxAliasProps};
  ${extendStyle("Paper")};
  ${overwriteStyle("Paper")};
`;
var Paper_default = Paper;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Rating.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var import_react12 = __toESM(require_react(), 1);
var LABEL = (index) => `${index}`;
var StyledRating = styled.ul.withConfig(defaultConfig)`
  all: unset;
  display: inline-flex;

  ${extendStyle("Rating")};
  ${overwriteStyle("Rating")};
`;
var StyledLabel = styled.li`
  all: unset;

  :hover {
    cursor: pointer;
  }

  ${extendStyle("RatingLabel")};
  ${overwriteStyle("RatingLabel")};
`;
var CustomStarFill = styled(StarFill_default)`
  fill: ${({ theme }) => getColor(theme, "yellow.500")};
`;
var CustomStar = styled(Star_default)`
  fill: ${({ theme }) => getColor(theme, "light.700")};
`;
var useNavigationHorizontal = (listLength) => {
  const [currentIndex, setCurrentIndex] = (0, import_react12.useState)(0);
  const ref = (0, import_react12.useRef)(null);
  (0, import_react12.useEffect)(() => {
    var _a, _b;
    if (currentIndex >= 0) {
      const item = (_b = (_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.children) == null ? void 0 : _b[currentIndex];
      item.focus();
    }
  }, [currentIndex]);
  function checkNextChildren() {
    if (currentIndex + 1 <= listLength - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  }
  function checkPreviousChildren() {
    if (currentIndex - 1 >= 0) {
      setCurrentIndex(currentIndex - 1);
    }
  }
  function handleClickEnter() {
    var _a, _b;
    const item = (_b = (_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.children) == null ? void 0 : _b[currentIndex];
    item.click();
  }
  const onKeyDown = (event) => {
    switch (event.key) {
      case "ArrowLeft":
        checkPreviousChildren();
        break;
      case "ArrowRight":
        checkNextChildren();
        break;
      case "Enter":
        handleClickEnter();
        break;
      default:
        break;
    }
  };
  return [ref, onKeyDown];
};
var Rating = forward_ref_as_default(function Rating2({ emptyIcon = (0, import_jsx_runtime11.jsx)(CustomStar, {}), fullyIcon = (0, import_jsx_runtime11.jsx)(CustomStarFill, {}), maxLength = 5, initialValue = 0, as = "ul", label = LABEL, onChange, ...props }, ref) {
  const [ulGroupRef, onKeyDown] = useNavigationHorizontal(maxLength);
  const [value, setValue] = (0, import_react12.useState)(initialValue);
  (0, import_react12.useEffect)(() => {
    if (ref && typeof ref === "object") {
      ref.current = ulGroupRef.current;
    }
  }, [ref, ulGroupRef]);
  return (0, import_jsx_runtime11.jsx)(StyledRating, { ref: ulGroupRef, onKeyDown, as, role: "listbox", tabIndex: 0, ...props, children: [...Array(maxLength)].map((item, index) => (0, import_jsx_runtime11.jsx)(StyledLabel, { onClick: () => {
    onChange == null ? void 0 : onChange(index + 1);
    setValue(index + 1);
  }, "aria-checked": value === index + 1, tabIndex: -1, "aria-label": label(index + 1), role: "option", children: value < index + 1 ? emptyIcon : fullyIcon }, `option-${index + 1}`)) });
});
var Rating_default = Rating;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Skeleton.js
var getSkeletonLoading = (theme) => keyframes`
  from {
    background-color: ${getColor(theme, "light")};
  }

  to {
    background-color: ${getColor(theme, "light.400")};
  }
`;
var skeletonStyles = {
  circle: (width) => css`
    width: ${width || "3.125rem"};
    height: ${width || "3.125rem"};
    border-radius: 50%;
  `,
  square: (width, height) => css`
    width: ${width || "100%"};
    height: ${height || "2rem"};
  `
};
function getSkeletonAppearance({ appearance = "square", width, height }) {
  return skeletonStyles[appearance](width, height);
}
var Skeleton = styled.div.withConfig(defaultConfig)`
  ${extendStyle("Skeleton")};

  animation: ${({ theme }) => getSkeletonLoading(theme)} 1s linear infinite alternate;

  ${getSkeletonAppearance};
  ${overwriteStyle("Skeleton")};
`;
var Skeleton_default = Skeleton;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Status.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var StatusBadge = styled.div.withConfig(defaultConfig)`
  display: flex;
  height: ${({ theme }) => getSpacing(theme, 4)};
  width: ${({ theme }) => getSpacing(theme, 4)};
  background-color: ${({ theme, colorScheme = "primary" }) => getColor(theme, colorScheme, 500)};
  border-radius: ${({ theme }) => getRadius(theme, "full")};
  margin-left: ${({ theme }) => getSpacing(theme, 2)};
  margin-right: ${({ theme }) => getSpacing(theme, 2)};
`;
var StatusStyled = styled.div`
  display: inline-flex;
  align-items: center;
  font: ${({ theme }) => getFontStyle(theme, "microtext1")};

  ${extendStyle("Status")};
  ${overwriteStyle("Status")};
`;
var StatusWithIcon = ({ colorScheme, icon: Icon }) => Icon ? (0, import_jsx_runtime12.jsx)(IconBox_default, { size: "xs", colorIcon: colorScheme, sx: { mx: "2" }, children: (0, import_jsx_runtime12.jsx)(Icon, {}) }) : (0, import_jsx_runtime12.jsx)(StatusBadge, { colorScheme });
var Status = forward_ref_as_default(function Status2({ statusPosition = "right", colorScheme, icon, ...props }, ref) {
  return (0, import_jsx_runtime12.jsxs)(StatusStyled, { ...props, ref, children: [statusPosition === "left" && (0, import_jsx_runtime12.jsx)(StatusWithIcon, { colorScheme, icon }), (0, import_jsx_runtime12.jsx)(Flex_default, { as: "span", alignItems: "center", children: props.children }), statusPosition === "right" && (0, import_jsx_runtime12.jsx)(StatusWithIcon, { colorScheme, icon })] });
});
var Status_default = Status;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Table.js
var tableStripedStyle = css`
  > tbody tr:nth-of-type(2n + 1) td {
    background-color: ${({ theme }) => getColor(theme, "light.400")};
  }
`;
var tableFilledStyle = css`
  border-collapse: separate;
  border-spacing: 0 8px; 
  
  > tbody tr td {
    background-color: ${({ theme }) => getColor(theme, "light.400")};
    padding: ${({ theme }) => `${getSpacing(theme, 3)} ${getSpacing(theme, 5)}`};
    border-radius: 4px;
  }

  > tbody tr {
    background-color: transparent;
  }
`;
var Table = styled.table.withConfig(defaultConfig)`
  border-collapse: collapse;
  box-sizing: border-box;
  width: 100%;

  ${extendStyle("Table")};

  background-color: ${({ theme }) => getColor(theme, "light.300")};

  ${({ appearance }) => appearance === "striped" && tableStripedStyle}
  ${({ appearance }) => appearance === "filled" && tableFilledStyle}  

  ${overwriteStyle("Table")};
`;
var Thead = styled.thead.withConfig(defaultConfig)`
  box-sizing: border-box;
  ${extendStyle("Thead")};
  ${overwriteStyle("Thead")};
`;
var Tbody = styled.tbody.withConfig(defaultConfig)`
  box-sizing: border-box;
  ${extendStyle("Tbody")};
  ${overwriteStyle("Tbody")};
`;
var Tr = styled.tr.withConfig(defaultConfig)`
  box-sizing: border-box;
  ${extendStyle("Tr")};
  ${overwriteStyle("Tr")};
`;
var Td = styled.td.withConfig(defaultConfig)`
  box-sizing: border-box;
  padding: ${({ theme }) => `${getSpacing(theme, 6)} ${getSpacing(theme, 5)}`};
  color: ${({ theme }) => getColor(theme, "light.contrastText")};
  font: ${({ theme }) => getFontStyle(theme, "body2")};
  ${extendStyle("Td")};
  ${overwriteStyle("Td")};
`;
var Th = styled.th.withConfig(defaultConfig)`
  box-sizing: border-box;
  padding: ${({ theme }) => `${getSpacing(theme, 6)} ${getSpacing(theme, 5)}`};
  color: ${({ theme }) => getColor(theme, "light.700")};
  font-family: ${({ theme }) => getFontFamily(theme, "system2")};
  font-weight: ${({ theme, weight = "regular" }) => getFontWeight(theme, weight)};
  text-align: left;

  ${extendStyle("Th")};
  ${overwriteStyle("Th")};
`;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Tabs.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var import_react13 = __toESM(require_react(), 1);
var styleButton = (selected) => {
  const bgColor = selected ? "primary" : "transparent";
  const styles2 = {
    button: {
      marginTop: "0.219rem",
      paddingBottom: "0.281rem",
      paddingInline: "2rem",
      cursor: "pointer",
      color: "light.contrastText",
      backgroundColor: "transparent",
      border: "none",
      position: "relative",
      "&:hover, &:focus, &:active": {
        backgroundColor: "transparent",
        borderColor: "transparent"
      },
      "&::after": {
        content: "",
        width: "100%",
        height: "2px",
        backgroundColor: bgColor,
        bottom: "0px",
        position: "absolute"
      }
    }
  };
  return styles2.button;
};
var TabList = styled.nav.withConfig(defaultConfig)`
  list-style-type: none;
  display: flex;
  flex-direction: row;
  ${extendStyle("Tabs")}
  border-bottom: 0.063rem solid ${({ theme }) => getColor(theme, "light.600")};
  ${overwriteStyle("Tabs")}
`;
var TabsItemStyled = styled.div.withConfig(defaultConfig)`
  display: flex;
  flex-direction: column;
  margin-top: 1rem;

  ${extendStyle("TabsItem")}
  ${overwriteStyle("TabsItem")}
`;
var TabsItem = forward_ref_as_default(function TabsItem2({ title, ...props }, ref) {
  return (0, import_jsx_runtime13.jsx)(TabsItemStyled, { ref, ...props });
});
var Tabs = forward_ref_as_default(function Tabs2({ activeIndex = 0, children, onChange, ...props }, ref) {
  const [tabsChildren, setTabsChildren] = (0, import_react13.useState)();
  (0, import_react13.useEffect)(() => {
    const tabs = children.reduce((acc, tab) => tab ? acc.concat(tab) : acc, []);
    setTabsChildren(tabs);
  }, [children]);
  if (!Array.isArray(children)) {
    return null;
  }
  return (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [tabsChildren && (0, import_jsx_runtime13.jsx)(TabList, { ...props, ref, role: "tablist", children: tabsChildren.map((child, index) => (0, import_jsx_runtime13.jsx)(Button_default, { type: "button", "aria-selected": index === activeIndex, onClick: () => onChange && onChange(index), role: "tab", disabled: child.props.disabled, sx: styleButton(index === activeIndex), children: (0, import_jsx_runtime13.jsx)(Text_default, { as: "span", appearance: "body2", weight: activeIndex === index ? "medium" : void 0, children: child.props.title }) }, index)) }), tabsChildren && tabsChildren[activeIndex]] });
});

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Toast.js
var getToastPosition = (position) => {
  const toastPosition = {
    "top-right": css`
      top: 0.75rem;
      right: 0.75rem;
    `,
    "top-left": css`
      top: 0.75rem;
      left: 0.75rem;
    `,
    "bottom-right": css`
      bottom: 0.75rem;
      right: 0.75rem;
    `,
    "bottom-left": css`
      bottom: 0.75rem;
      left: 0.75rem;
    `
  };
  return toastPosition[position];
};
var Toast = styled.div.withConfig(defaultConfig)`
  position: fixed;
  z-index: 2000;
  width: 21rem;

  box-sizing: border-box;

  ${extendStyle("Toast")};
  ${(props) => getToastPosition((props == null ? void 0 : props.position) || "top-right")}
  border-radius: ${({ theme }) => getRadius(theme, "xs")};
  background-color: ${({ theme, colorScheme }) => getColor(theme, colorScheme || "primary.500")};
  color: ${({ theme, colorScheme }) => getColor(theme, colorScheme ? `${colorScheme}.contrastText` : "primary.contrastText")};

  ${overwriteStyle("Toast")};
`;
var ToastButton = styled(IconButton_default)`
  position: absolute;
  right: 0.5rem;
  top: 0.5rem;
  ${extendStyle("ToastButton")};
  ${overwriteStyle("ToastButton")};
`;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Uploader.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var UploaderStyled = styled.span.withConfig(defaultConfig)`
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${({ theme }) => `${getSpacing(theme, 3)}`};
  box-sizing: border-box;
  cursor: pointer;
  background-color: ${({ theme }) => `${getColor(theme, "inverse")}`};
  color: ${({ theme }) => `${getColor(theme, "inverse.contrastText")}`};

  input {
    cursor: pointer;
    position: absolute;
    top: 0;
    opacity: 0;
    right: 0;
    left: 0;
    bottom: 0;
  }

  border: 0.063rem solid ${({ theme }) => getColor(theme, "inverse")};
  border-radius: ${({ theme }) => getRadius(theme, "xs")};

  ${extendStyle("Uploader")};

  ${(props) => (props == null ? void 0 : props.disabled) && css`
      opacity: 0.24;
      pointer-events: none;
    `}

  ${overwriteStyle("Uploader")};
`;
var Uploader = forward_ref_as_default(function Uploader2({ children, sx, ...props }, ref) {
  return (0, import_jsx_runtime14.jsxs)(UploaderStyled, { disabled: props.disabled, sx, children: [(0, import_jsx_runtime14.jsx)("input", { type: "file", ref, ...props }), children] });
});
var Uploader_default = Uploader;

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Popover/index.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var import_react14 = __toESM(require_react(), 1);

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Popover/utils.js
var getPopoverPosition = (position) => {
  const PopoverPosition = {
    top: css`
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
    `,
    bottom: css`
      top: 135%;
      left: 50%;
      transform: translateX(-50%);
    `,
    right: css`
      top: 50%;
      transform: translateY(-50%);
      left: 110%;
    `,
    left: css`
      top: 50%;
      transform: translateY(-50%);
      right: 110%;
    `
  };
  return PopoverPosition[position];
};
var getPointerPosition2 = (position, color) => {
  const pointerPosition = {
    top: css`
      top: 100%;
      left: 50%;
      margin-left: -5px;
      border-top-color: ${color};
    `,
    right: css`
      top: 50%;
      right: 100%;
      margin-top: -5px;
      border-right-color: ${color};
    `,
    bottom: css`
      bottom: 100%;
      left: 50%;
      margin-left: -5px;
      border-bottom-color: ${color};
    `,
    left: css`
      top: 50%;
      left: 100%;
      margin-top: -5px;
      border-left-color: ${color};
    `
  };
  return pointerPosition[position];
};

// ../../node_modules/.pnpm/@citric+ui@6.5.5_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-components@6.1.10_reac_sniues2bxh7iobh6o72fhon4ti/node_modules/@citric/ui/dist/Popover/index.js
var styles = {
  container: {
    width: "fit-content",
    position: "relative",
    height: "fit-content"
  }
};
var PopoverStyled = styled.div`
  padding: ${({ theme }) => `${getSpacing(theme, 2)}`};
  border-radius: ${({ theme }) => getRadius(theme, "xs")};
  width: max-content;
  z-index: 100;
  box-sizing: border-box;
  position: relative;
  display: ${({ visible }) => visible ? "flex" : "none"};

  background-color: ${({ theme, colorScheme }) => getColor(theme, colorScheme || "inverse.500")};

  ${extendStyle("Popover")};

  ${({ nowrap, width }) => nowrap ? css`
          max-width: ${width};

          span:last-of-type {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
          }
        ` : css`
          max-width: ${width || "250px"};
        `}

  ${({ position = "top", theme, colorScheme = "inverse" }) => css`
      position: absolute;
      ${getPopoverPosition(position)}

      &::after {
        content: '';
        position: absolute;
        border-width: 5px;
        border-style: solid;
        border-color: transparent;
        ${getPointerPosition2(position, getColor(theme, colorScheme))}
      }
    `}

  ${overwriteStyle("Popover")};
`;
var Popover = forward_ref_as_default(function Popover2({ as = "div", position = "top", onClose, autoHidden = false, defaultVisible = false, title, containerSx = {}, ...props }, ref) {
  const PopoverRef = (0, import_react14.useRef)(null);
  const popoverId = (0, import_react14.useRef)(`popover-${Math.random().toString(36).substring(2, 9)}`);
  const [visible, setVisible] = (0, import_react14.useState)(defaultVisible);
  (0, import_react14.useEffect)(() => {
    if (ref && typeof ref === "object") {
      ref.current = PopoverRef.current;
    }
  }, [ref, PopoverRef]);
  (0, import_react14.useEffect)(() => {
    setVisible(defaultVisible);
  }, [defaultVisible]);
  (0, import_react14.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (PopoverRef.current && !PopoverRef.current.contains(event.target)) {
        setVisible(false);
        if (onClose)
          onClose();
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [PopoverRef, onClose]);
  const handleIconBoxClick = () => {
    setVisible(false);
    if (onClose)
      onClose();
  };
  const handleKeyDown = (event) => {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      toggleVisibility();
    }
    if (event.key === "Escape") {
      event.preventDefault();
      setVisible(false);
    }
  };
  function toggleVisibility() {
    setVisible((oldValue) => !oldValue);
  }
  return (0, import_jsx_runtime15.jsxs)(Box_default, { sx: { ...styles.container, ...containerSx }, children: [(0, import_jsx_runtime15.jsx)("div", { onKeyDown: handleKeyDown, onClick: toggleVisibility, "aria-controls": popoverId.current, role: "button", tabIndex: 0, children: props.children }), (0, import_jsx_runtime15.jsx)(PopoverStyled, { id: popoverId.current, as, ref: PopoverRef, "aria-expanded": visible, visible, position, onBlur: (e) => {
    var _a;
    if (!((_a = PopoverRef.current) == null ? void 0 : _a.contains(e.relatedTarget))) {
      setVisible(false);
    }
  }, ...props, children: (0, import_jsx_runtime15.jsxs)(Box_default, { p: 3, children: [(0, import_jsx_runtime15.jsxs)(Flex_default, { justifyContent: "space-between", alignItems: "center", children: [(0, import_jsx_runtime15.jsx)(Text_default, { colorScheme: "inverse.contrastText", weight: "medium", appearance: "body2", children: title }), !autoHidden && (0, import_jsx_runtime15.jsx)(IconBox_default, { role: "button", colorIcon: "inverse.contrastText", sx: { cursor: "pointer" }, onClick: handleIconBoxClick, "aria-label": "close popover", children: (0, import_jsx_runtime15.jsx)(TimesMini_default, {}) })] }), (0, import_jsx_runtime15.jsx)(Flex_default, { children: props.content })] }) })] });
});
export {
  Accordion,
  AccordionContent,
  AccordionHeader,
  AccordionIcon,
  AccordionItem,
  Alert_default as Alert,
  Avatar_default as Avatar,
  AvatarGroup_default as AvatarGroup,
  Badge_default as Badge,
  BadgeGroup_default as BadgeGroup,
  Breadcrumb,
  BreadcrumbIcon,
  BreadcrumbItem,
  BreadcrumbLink,
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  Dropdown,
  DropdownItem,
  FieldAddon_default as FieldAddon,
  FieldGroup_default as FieldGroup,
  FormHelper,
  FormItem_default as FormItem,
  IconButton_default as IconButton,
  LoadingCircular_default as LoadingCircular,
  LoadingLinear_default as LoadingLinear,
  Modal,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  Paper_default as Paper,
  Popover,
  ProgressCircular_default as ProgressCircular,
  ProgressLinear_default as ProgressLinear,
  Rating_default as Rating,
  Skeleton_default as Skeleton,
  Status_default as Status,
  Table,
  Tabs,
  TabsItem,
  Tbody,
  Td,
  Th,
  Thead,
  Toast,
  ToastButton,
  Tooltip_default as Tooltip,
  Tr,
  Uploader_default as Uploader,
  Pagination_default as usePagination
};
//# sourceMappingURL=@citric_ui.js.map
