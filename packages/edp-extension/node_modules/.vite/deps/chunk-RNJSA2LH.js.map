{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@stack-spot+portal-translate@1.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@stack-spot/portal-translate/src/language.ts"],
  "sourcesContent": ["import { useEffect, useState } from 'react'\n\nexport type Language = 'pt' | 'en'\ntype OnChange = (language: Language) => void\nexport type Dictionary = Record<Language, Record<string, string>>\n\nconst SUPPORTED = ['pt', 'en']\nconst KEY = 'language'\nconst listeners: OnChange[] = []\nlet eventsRegistered: boolean\n\n/**\n * Retrieves the current language. Will be the navigator language if the user didn't change this setting.\n * \n * If you want to listen to changes on the language, use `onLanguageChange`.\n * \n * @returns the current language: \"pt\" or \"en\".\n */\nexport function getLanguage(): Language {\n  const language = getLanguageFromCookie()\n  if (SUPPORTED.includes(language)) return language as Language\n  const navigatorLanguage = navigator.language.split('-')[0]\n  if (SUPPORTED.includes(navigatorLanguage)) return navigatorLanguage as Language\n  return 'en'\n}\n\n/**\n * Changes the current language.\n * \n * Once the language is changed, all registered listeners are run. To register a listener, use `onLanguageChange`.\n * \n * @param language \"pt\" or \"en\".\n * @param setCookie whether or not to set the language cookie (true by default).\n * @param domain the domain to set the cookie, will be \".stackspot.com\" by default.\n */\nexport function setLanguage(language: Language, setCookie = true, domain = '.stackspot.com') {\n  if (setCookie) document.cookie = `${KEY}=${language};path=/${location.host.endsWith(domain) ? `;domain=${domain}` : ''}`\n  listeners.forEach(l => l(language))\n}\n\nfunction getLanguageFromCookie() {\n  return ((document.cookie.match(new RegExp(`${KEY}=([^;]+)`)) ?? [])[1]) as Language\n}\n\n/**\n * Loads the current language from the cookies. If no language has been set before, \"en\" is loaded.\n */\nexport function loadLanguage() {\n  const language = getLanguage()\n  setLanguage(language)\n  if (eventsRegistered) return\n  // if there's support for the cookieStore, change the theme whenever the cookie is changed.\n  if ('cookieStore' in window) {\n    // @ts-ignore cookieStore is not yet available on Safari and Firefox, this is why TS doesn't recognize it\n    cookieStore.addEventListener('change', ({ changed }) => {\n      for (const { name, value } of changed) {\n        if (name === 'language') listeners.forEach(l => l(value))\n      }\n    })\n  }\n  // otherwise, change the theme when the tab/window is refocused.\n  else {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') loadLanguage()\n    })\n  }\n  eventsRegistered = true\n}\n\n/**\n * Registers a listener for when the language changes.\n * @param listener a function to be called whenever the language changes.\n * @returns a function that, when called, removes the listener.\n */\nexport function onLanguageChange(listener: OnChange): () => void {\n  listeners.push(listener)\n  return () => {\n    const index = listeners.indexOf(listener)\n    if (index !== -1) listeners.splice(index, 1)\n  }\n}\n\n/**\n * Gets the correct version of a dictionary depending on the language passed as parameter.\n * @param dictionary\n * @param language\n * @returns the english or portuguese version of the dictionary, depending on the value of `language`.\n */\nexport function translate<T extends Dictionary>(dictionary: T, language = getLanguage()) {\n  return dictionary[language] as Record<keyof T[Language], string>\n}\n\n/**\n * A React Hook for getting the correct version of a dictionary depending on the current language.\n * \n * The value returned by this is updated whenever the language changes.\n * \n * @param dictionary \n * @returns the english or portuguese version of the dictionary, depending on the current language.\n */\nexport function useTranslate<T extends Dictionary>(dictionary: T) {\n  const language = useLanguage()\n  return translate(dictionary, language)\n}\n\n/**\n * A React Hook for getting the current language.\n * \n * The value returned by this is updated whenever the language changes.\n * \n * @returns the current language.\n */\nexport function useLanguage(): Language {\n  const [language, setLanguage] = useState(getLanguage())\n  useEffect(() => onLanguageChange(setLanguage), [])\n  return language\n}\n\n/**\n * Receives a string of the type `\"Some text $0 with some variables $2 and $1.\"`.\n * Returns the same string with symbols expressed as \"$index\" replaced by the elements in the array passed in the second parameter.\n *\n * For the previous example, if the 2nd, 3rd and 4th parameters are `'hello', 'world', 'test'`, then the result is `\"Some text hello with\n * some variables test and world.\"`\n *\n * @param template the template string to interpolate.\n * @param variables the variables to use while replacing the symbols prefixed with \"$\".\n * @return the interpolated string. Variables without equivalence in the array of variables will be left untouched.\n */\nexport function interpolate(template: string, ...variables: any[]): string {\n  return template.replaceAll(/\\$(\\d+)/g, (original, index) => variables[index] ?? original)\n}\n"],
  "mappings": ";;;;;;;;AAAA,mBAAoC;AAMpC,IAAM,YAAY,CAAC,MAAM,IAAI;AAC7B,IAAM,MAAM;AACZ,IAAM,YAAwB,CAAA;AAUxB,SAAU,cAAW;AACzB,QAAM,WAAW,sBAAqB;AACtC,MAAI,UAAU,SAAS,QAAQ;AAAG,WAAO;AACzC,QAAM,oBAAoB,UAAU,SAAS,MAAM,GAAG,EAAE,CAAC;AACzD,MAAI,UAAU,SAAS,iBAAiB;AAAG,WAAO;AAClD,SAAO;AACT;AAWM,SAAU,YAAY,UAAoB,YAAY,MAAM,SAAS,kBAAgB;AACzF,MAAI;AAAW,aAAS,SAAS,GAAG,GAAG,IAAI,QAAQ,UAAU,SAAS,KAAK,SAAS,MAAM,IAAI,WAAW,MAAM,KAAK,EAAE;AACtH,YAAU,QAAQ,OAAK,EAAE,QAAQ,CAAC;AACpC;AAEA,SAAS,wBAAqB;AAC5B,UAAS,SAAS,OAAO,MAAM,IAAI,OAAO,GAAG,GAAG,UAAU,CAAC,KAAK,CAAA,GAAI,CAAC;AACvE;AAgCM,SAAU,iBAAiB,UAAkB;AACjD,YAAU,KAAK,QAAQ;AACvB,SAAO,MAAK;AACV,UAAM,QAAQ,UAAU,QAAQ,QAAQ;AACxC,QAAI,UAAU;AAAI,gBAAU,OAAO,OAAO,CAAC;EAC7C;AACF;AAQM,SAAU,UAAgC,YAAe,WAAW,YAAW,GAAE;AACrF,SAAO,WAAW,QAAQ;AAC5B;AAUM,SAAU,aAAmC,YAAa;AAC9D,QAAM,WAAW,YAAW;AAC5B,SAAO,UAAU,YAAY,QAAQ;AACvC;AASM,SAAU,cAAW;AACzB,QAAM,CAAC,UAAUA,YAAW,QAAI,uBAAS,YAAW,CAAE;AACtD,8BAAU,MAAM,iBAAiBA,YAAW,GAAG,CAAA,CAAE;AACjD,SAAO;AACT;",
  "names": ["setLanguage"]
}
