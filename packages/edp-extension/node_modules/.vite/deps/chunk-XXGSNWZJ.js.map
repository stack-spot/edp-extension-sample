{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/src/definition.ts", "../../../../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/src/CSSToCitricAdapter.tsx", "../../../../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/src/hooks.ts", "../../../../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/src/theme-observer.ts", "../../../../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/src/utils.ts"],
  "sourcesContent": ["export type ThemeName = 'light' | 'dark'\nexport type ThemeKind = 'light' | 'dark'\nexport const colorSchemeName =\n  ['primary', 'secondary', 'tertiary', 'highlight', 'danger', 'warning', 'success', 'light', 'inverse'] as const\nexport type ColorSchemeName = typeof colorSchemeName[number]\nconst colorSchemeLevel = [300, 400, 500, 600, 700, 'contrastText'] as const\nexport type ColorSchemeLevel = typeof colorSchemeLevel[number]\n// ATTENTION: the order below matters! This order is used to create legends (in charts for instance), place them so adjacent colors are as\n// different as possible.\nexport const colorPaletteName = ['blue', 'gray', 'indigo', 'moss', 'orange', 'cyan', 'pink', 'purple', 'red', 'teal', 'yellow'] as const\nexport type ColorPaletteName = typeof colorPaletteName[number]\nexport const colorPaletteLevel = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900] as const\nexport type ColorPaletteLevel = typeof colorPaletteLevel[number]\nexport type ColorScheme = Record<ColorSchemeName, Record<ColorSchemeLevel, string>>\nexport type ColorPalette = Record<ColorPaletteName, Record<ColorPaletteLevel, string>>\nexport type ColorName = ColorPaletteName | ColorSchemeName\nexport type ColorSchemeKey = `${ColorSchemeName}.${ColorSchemeLevel}`\nexport type ColorPaletteKey = `${ColorPaletteName}.${ColorPaletteLevel}`\nexport type ColorKey = ColorSchemeKey | ColorPaletteKey\nexport type Platform = 'vscode' | 'intellij' | 'web'\n\ninterface ThemeVariables {\n  color: ColorScheme & ColorPalette & {\n    /**\n     * Background used for code editors like Monaco.\n     */\n    codeBg: string,\n  },\n}\n\nlet eventsRegistered = false\n\nfunction createColorMap(colors: readonly string[], levels: readonly (string | number)[]): Record<string, any> {\n  return colors.reduce(\n    (result, color) => ({\n      ...result,\n      [color]: levels.reduce(\n        (result, level) => ({\n          ...result,\n          [level]: `var(--${color}-${level})`,\n        }),\n        {},\n      ),\n    }),\n    {},\n  )\n}\n\n/**\n * Theme. Includes only colors for now.\n */\nexport const theme: ThemeVariables = {\n  color: {\n    ...(createColorMap(colorSchemeName, colorSchemeLevel) as ColorScheme),\n    ...(createColorMap(colorPaletteName, colorPaletteLevel) as ColorPalette),\n    codeBg: 'var(--code-bg)',\n  },\n}\n\n/**\n * Gets the current theme kind.\n * \n * A theme kind can be either \"light\" or \"dark\". This is not necessarily the theme name. Examples:\n * \n * - Although, right now, StackSpot has only two themes: \"light\" and the \"dark\", it used to have three and two of them were dark.\n * - When running this inside VSCode, the theme name can be one of several, but all of them are either light or dark.\n * \n * @returns \"dark\" if the theme is mostly dark or \"light\" if the theme is mostly light. If no theme is set, \"dark\" is returned.\n */\nexport function getThemeKind() {\n  if (getPlatform() === 'vscode') return document.body.getAttribute('data-vscode-theme-kind')?.includes('light') ? 'light' : 'dark'\n  return (document.body.getAttribute('data-theme-kind') || 'dark') as ThemeKind\n}\n\n/**\n * Gets the name of the current theme.\n * \n * Do not mistake with `getThemeKind` (read the documentation for `getThemeKind` for more details).\n * \n * This is only valid under a web environment.\n * \n * @returns the name of the current theme or \"dark\" if no theme is set.\n */\nexport function getThemeName() {\n  return (document.body.getAttribute('data-theme') || 'dark') as ThemeName\n}\n\n/**\n * The theme library can be run either in a Web environment, VSCode or IntelliJ. This function tells which environment it's running on.\n * @returns the platform\n */\nexport function getPlatform() {\n  return (document.body.getAttribute('data-platform') || 'web') as Platform\n}\n\n/**\n * Changes the current theme. This is only valid under a Web environment.\n * \n * This is only valid under a web environment.\n * \n * @param name the name of the theme to change to.\n * @param setCookie whether or not to set the theme cookie (true by default).\n * @param domain the domain to set the cookie, will be \".stackspot.com\" by default.\n */\nexport function setTheme(name: ThemeName, setCookie = true, domain = '.stackspot.com') {\n  document.body.setAttribute('data-theme', name)\n  document.body.setAttribute('data-theme-kind', name === 'light' ? 'light' : 'dark')\n  if (setCookie) document.cookie = `theme=${name};path=/${location.host.endsWith(domain) ? `;domain=${domain}` : ''}`\n}\n\nfunction getThemeFromCookie() {\n  return ((document.cookie.match(/theme=([^;]+)/) ?? [])[1] || 'dark') as ThemeName\n}\n\n/**\n * Loads the current theme from the cookies. If no theme has been set before, \"dark\" is loaded.\n */\nexport function loadTheme() {\n  const theme = getThemeFromCookie()\n  setTheme(theme)\n  if (eventsRegistered) return\n  // if there's support for the cookieStore, change the theme whenever the cookie is changed.\n  if ('cookieStore' in window) {\n    // @ts-ignore cookieStore is not yet available on Safari and Firefox, this is why TS doesn't recognize it\n    cookieStore.addEventListener('change', ({ changed }) => {\n      for (const { name, value } of changed) {\n        if (name === 'theme') setTheme(value, false)\n      }\n    })\n  }\n  // otherwise, change the theme when the tab/window is refocused.\n  else {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') loadTheme()\n    })\n  }\n  eventsRegistered = true\n}\n", "import { Theme, defaultTheme } from '@citric/core'\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from './definition'\n\nconst citricTheme: Theme = {\n  ...defaultTheme,\n  colorScheme: {\n    primary: theme.color.primary,\n    secondary: theme.color.secondary,\n    tertiary: theme.color.tertiary,\n    success: theme.color.success,\n    warning: theme.color.warning,\n    danger: theme.color.danger,\n    light: theme.color.light,\n    inverse: theme.color.inverse,\n    highlight: theme.color.highlight,\n  },\n  palette: {\n    blue: theme.color.blue,\n    cyan: theme.color.cyan,\n    indigo: theme.color.indigo,\n    moss: theme.color.moss,\n    orange: theme.color.orange,\n    pink: theme.color.pink,\n    purple: theme.color.purple,\n    red: theme.color.red,\n    teal: theme.color.teal,\n    yellow: theme.color.yellow,\n    gray: theme.color.gray,\n  },\n}\n\n/**\n * Citric is themed by Styled Components, while the StackSpot Portals are themed by CSS variables. This component creates an adapter from\n * CSS to a Styled Components theme.\n * \n * It is imperative to have this component on the tree before using any component from Citric.\n */\nexport const CSSToCitricAdapter = ({ children }: { children: React.ReactNode }) => (\n  <ThemeProvider theme={citricTheme}>\n    {children}\n  </ThemeProvider>\n)\n", "import { useEffect, useState } from 'react'\nimport { getThemeKind, getThemeName } from './definition'\nimport { themeObserver } from './theme-observer'\n\n/**\n * A React hook that returns the current theme kind. This is updated whenever the theme changes.\n * \n * The theme kind can be different than the theme name, check the documentation for `getThemeKind` for more details.\n * \n * @returns \"dark\" if the theme is mostly dark or \"light\" if the theme is mostly light. If no theme is set, \"dark\" is returned.\n */\nexport const useThemeKind = () => {\n  const [kind, setKind] = useState(getThemeKind())\n  useEffect(() => themeObserver.onThemeKindChange(setKind), [])\n  return kind\n}\n\n/**\n * A React hook that returns the current theme name. This is updated whenever the theme changes.\n * \n * The theme name can be different than the theme kind, check the documentation for `getThemeKind` for more details.\n * \n * This is only usable in web environments.\n * \n * @returns the name of the current theme.\n */\nexport const useThemeName = () => {\n  const [name, setName] = useState(getThemeName())\n  useEffect(() => themeObserver.onThemeNameChange(setName), [])\n  return name\n}\n", "import { ThemeKind, ThemeName, getThemeKind, getThemeName } from './definition'\n\ntype KindListener = (kind: ThemeKind) => void\ntype NameListener = (name: ThemeName) => void\n\nclass ThemeObserver {\n  private kindListeners: KindListener[] = []\n  private nameListeners: NameListener[] = []\n  private currentKind: ThemeKind = getThemeKind()\n  private currentName: ThemeName = getThemeName()\n\n  constructor() {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes') {\n          const kind = getThemeKind()\n          const name = getThemeName()\n          if (kind !== this.currentKind) {\n            this.kindListeners.forEach(l => l(kind))\n            this.currentKind = kind\n          }\n          if (name !== this.currentName) {\n            this.nameListeners.forEach(l => l(name))\n            this.currentName = name\n          }\n        }\n      })\n    })\n    observer.observe(document.body, { attributes: true })\n  }\n\n  /**\n   * Adds a listener for changes to the theme kind.\n   * @param listener the function to be called when the theme kind changes.\n   * @returns a function that, if called, removes the listener.\n   */\n  onThemeKindChange(listener: KindListener): () => void {\n    this.kindListeners.push(listener)\n    return () => this.kindListeners.splice(this.kindListeners.indexOf(listener), 1)\n  }\n\n  /**\n   * Adds a listener for changes to the theme name.\n   * @param listener the function to be called when the theme name changes.\n   * @returns a function that, if called, removes the listener.\n   */\n  onThemeNameChange(listener: NameListener): () => void {\n    this.nameListeners.push(listener)\n    return () => this.nameListeners.splice(this.nameListeners.indexOf(listener), 1)\n  }\n}\n\n/**\n * Singleton responsible for listening to changes to the theme.\n * \n * This observes any attribute changes to the tag body and updates the theme accordingly.\n * \n * Attention: this will not work if the tag body doesn't exist, or if it's replaced throughout execution.\n */\nexport const themeObserver = new ThemeObserver()\n", "import { ColorPaletteLevel, ColorPaletteName, ColorSchemeLevel, ColorSchemeName, colorPaletteLevel, colorPaletteName, colorSchemeName, theme } from './definition'\n\n/**\n * Gets the ideal contrast color for the color passed as parameter.\n * @param color the color to get a contrast to.\n * @param level the level of the color to get a contrast to. Defaults to 600.\n * @returns the css variable for the contrast color (\"var(--color-level)\").\n */\nexport function contrastColor<T extends ColorPaletteName | ColorSchemeName>(\n  color: T,\n  level: T extends ColorPaletteName ? ColorPaletteLevel : ColorSchemeLevel = 600,\n) {\n  if (colorSchemeName.includes(color as ColorSchemeName)) {\n    return (level as ColorSchemeLevel === 'contrastText' || level === 700)\n      ? theme.color[color]['300']\n      : theme.color[color as ColorSchemeName].contrastText\n  }\n  const contrastLevel = level as ColorPaletteLevel >= 500 ? 50 : 900\n  return theme.color[color as ColorPaletteName][contrastLevel]\n}\n\n/**\n * Finds out the value of a CSS variable. By default, it uses the body of the HTML document to get these values from. You can also pass a\n * second parameter with the element you want to get the value from.\n * \n * Supposing the actual name of the variable is `name-of-variable`, the value passed to the first parameter (`varname`) may be:\n * `name-of-variable` or `--name-of-variable` or `var(--name-of-variable)`. All these formats work.\n * \n * Example:\n * ```ts\n * valueOf(theme.color.primary['300']) // results in '#FFC8B5'\n * ```\n * \n * @param varname name of the CSS variable to get the value from.\n * @param element HTML element to get the variable from.\n * @returns the value of variable. If no variable is found, an empty string is returned.\n */\nexport function valueOf(varname: string, element: HTMLElement = document.body) {\n  const name = (varname.match(/(?:var)?\\(?(?:--)?([^)]+)(?:\\))?/) ?? [])[1] || varname\n  const styles = getComputedStyle(element)\n  return styles.getPropertyValue(`--${name}`)\n}\n\ninterface ColorGeneratorOptions {\n  /**\n   * The color to start from.\n   */\n  fromColor?: ColorPaletteName,\n  /**\n   * The level to start from.\n   */\n  fromLevel?: ColorPaletteLevel,\n  /**\n   * The color array to iterate over.\n   */\n  colorOrder?: ColorPaletteName[],\n  /**\n   * The level array to iterate over.\n   */\n  levelOrder?: ColorPaletteLevel[],\n}\n\ninterface PaletteColor {\n  color: ColorPaletteName,\n  level: ColorPaletteLevel,\n}\n\n/**\n * Generates a sequence of colors of the palette that are ideally spread. This sequence is infinite and will repeat once all colors are\n * used.\n * \n * The colors generated here are not random! This sequence will always be the same.\n * \n * Example:\n * ```ts\n * // This code generates 10 colors from the palette\n * const color = createColorSequence()\n * const myColors: { color: string, level: number }[] = []\n * \n * for (let i = 0; i < 10; i++) {\n *   myColors.push(color.next().value)\n * }\n * ```\n * \n * @param options the options to change the color sequence {@link ColorGeneratorOptions}.\n * @return an iterator where each element is an object where `name` is the name of the color palette and `level` is the level of\n * the color. To create a color from `color` and `level`, you can use `theme.color[color][level]`.\n */\nexport function *createColorSequence(\n  { colorOrder, fromColor, fromLevel, levelOrder }: ColorGeneratorOptions = {},\n): Generator<PaletteColor, PaletteColor, PaletteColor> {\n  const colors = colorOrder ?? colorPaletteName\n  const levels = levelOrder ?? colorPaletteLevel\n  while (true) {\n    const firstColor = fromColor ? colors.indexOf(fromColor) : 0\n    const firstLevel = fromLevel ? levels.indexOf(fromLevel) : 0\n    for (let i = 0; i < levels.length; i++) {\n      for (let j = 0; j < colors.length; j++) {\n        yield {\n          color: colors[(firstColor + j) % colors.length],\n          level: levels[(firstLevel + i) % levels.length],\n        }\n      }\n    }\n  }\n}\n\n/**\n * Same as `createColorSequence`, but it generates the css variables for the colors directly.\n * \n * Example:\n * ```ts\n * // This code generates 10 colors from the palette\n * const color = paletteSequence()\n * const myColors: string[] = []\n * \n * for (let i = 0; i < 10; i++) {\n *   myColors.push(color.next().value)\n * }\n * ```\n * `myColors` will contain values like \"var(--blue-300)\".\n */\nexport function *paletteSequence(options?: ColorGeneratorOptions): Generator<string, string, string> {\n  const colors = createColorSequence(options)\n  while (true) {\n    const { color, level } = colors.next().value\n    yield `var(--${color}-${level})`\n  }\n}\n\n/**\n * Applies opacity to a theme color variable.\n * @param opacity the opacity in [0, 1]\n */\nexport function withOpacity(colorVariable: string, opacity: number) {\n  return `color-mix(in srgb, ${colorVariable} ${Math.round(opacity * 100)}%, transparent)`\n}\n\n/**\n * A utility for using arrays instead of strings when defining the CSS class of an element.\n * \n * This function will remove any falsy value from the array and then join every class name into a valid string.\n * \n * @param list \n * @returns \n */\nexport function listToClass(list: (string | undefined | boolean | null)[]) {\n  return list.filter(v => !!v).map(v => `${v}`).join(' ')\n}\n"],
  "mappings": "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",
  "names": ["result", "theme", "_jsx"]
}
