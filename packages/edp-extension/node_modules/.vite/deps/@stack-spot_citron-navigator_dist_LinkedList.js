import "./chunk-3O7X656O.js";

// ../../node_modules/.pnpm/@stack-spot+citron-navigator@1.7.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@stack-spot/citron-navigator/dist/LinkedList.js
var empty = Symbol("empty");
var LinkedList = class {
  constructor(compare) {
    Object.defineProperty(this, "root", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: { value: empty }
    });
    Object.defineProperty(this, "compare", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.compare = compare;
  }
  /**
   * Adds a new element to the linked list.
   *
   * This performs an ordered insertion, costing O(n) in the worst case.
   * @param element the element to add
   */
  push(element) {
    let prev = this.root;
    while (prev) {
      if (!prev.next) {
        prev.next = { value: element };
        return;
      }
      const comparison = this.compare(element, prev.next.value);
      if (comparison <= 0) {
        const newItem = { value: element, next: prev.next };
        prev.next = newItem;
        return;
      }
      prev = prev.next;
    }
  }
  /**
   * Finds the first element where the predicate returns true.
   *
   * Remember that this data structure is ordered and the element returned will depend on the comparison function passed to the constructor.
   * @param predicate the function that looks for an element.
   * @returns the element found or undefined if no element meets the predicate.
   */
  find(predicate) {
    let current = this.root.next;
    while (current && !predicate(current.value))
      current = current.next;
    return current == null ? void 0 : current.value;
  }
};
export {
  LinkedList
};
//# sourceMappingURL=@stack-spot_citron-navigator_dist_LinkedList.js.map
