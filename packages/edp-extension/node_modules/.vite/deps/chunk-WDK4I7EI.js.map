{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@stack-spot+citron-navigator@1.7.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@stack-spot/citron-navigator/src/utils.ts"],
  "sourcesContent": ["/**\n * Removes the first occurrence of `element` from the `array`.\n * \n * This modifies the array passed as parameter.\n * @param array the array to modify.\n * @param element the element to remove (SameValueZero).\n * @returns true if the element was removed, false otherwise.\n */\nexport function removeElementFromArray<T>(array: T[], element: T): boolean {\n  const index = array.indexOf(element)\n  if (index !== -1) array.splice(index, 1)\n  return index !== -1\n}\n\n/**\n * Compares route `a` with route `b` according to their level in the navigation structure.\n * \n * - If route `a` is deeper than route `b`, than this function returns a negative number.\n * - If route `b` is deeper than route `a`, than this function returns a positive number.\n * - If routes `a` and `b` are at the same level, 0 is returned.\n * \n * In general, this returns `level_of_route_b - level_of_route_a`, where the level is number of elements of the key when splitted by \".\".\n * \n * This is used to order a list from more specific routes (deeper) to less specific routes (shallower).\n * @param a the key of the first route to compare.\n * @param b the key of the route to compare `a` with.\n * @returns the level of b minus the level of a.\n */\nexport function compareRouteKeysDesc(\n  a: { key: string, handler: (...args: any) => any },\n  b: { key: string, handler: (...args: any) => any },\n): number {\n  const partsA = a.key.split('.')\n  const partsB = b.key.split('.')\n  return partsB.length - partsA.length\n}\n\n/**\n * Splits a path into several parts. A path is split according to the character \"/\".\n * \n * @param path the path to split.\n * @returns an array with every part of the path.\n */\nexport function splitPath(path = ''): string[] {\n  // includes a trailing \"/\" to the path if it doesn't have one and then splits the whole string by \"/\".\n  const parts = path.replace(/^\\/?/, '/').split('/')\n  // if the path had a trailing \"/\", let's just not count it.\n  if (parts[parts.length - 1] === '') parts.pop()\n  return parts\n}\n"],
  "mappings": ";AAQM,SAAU,uBAA0B,OAAY,SAAU;AAC9D,QAAM,QAAQ,MAAM,QAAQ,OAAO;AACnC,MAAI,UAAU;AAAI,UAAM,OAAO,OAAO,CAAC;AACvC,SAAO,UAAU;AACnB;AAgBM,SAAU,qBACd,GACA,GAAkD;AAElD,QAAM,SAAS,EAAE,IAAI,MAAM,GAAG;AAC9B,QAAM,SAAS,EAAE,IAAI,MAAM,GAAG;AAC9B,SAAO,OAAO,SAAS,OAAO;AAChC;AAQM,SAAU,UAAU,OAAO,IAAE;AAEjC,QAAM,QAAQ,KAAK,QAAQ,QAAQ,GAAG,EAAE,MAAM,GAAG;AAEjD,MAAI,MAAM,MAAM,SAAS,CAAC,MAAM;AAAI,UAAM,IAAG;AAC7C,SAAO;AACT;",
  "names": []
}
