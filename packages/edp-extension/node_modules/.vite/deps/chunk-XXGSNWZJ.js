import {
  default_theme_default
} from "./chunk-WUO3U7VK.js";
import {
  nt
} from "./chunk-WRWZMEG7.js";
import {
  require_jsx_runtime
} from "./chunk-3U5MBTNC.js";
import {
  require_react
} from "./chunk-HL4WHFNK.js";
import {
  __toESM
} from "./chunk-3O7X656O.js";

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/CSSToCitricAdapter.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/definition.js
var colorSchemeName = ["primary", "secondary", "tertiary", "highlight", "danger", "warning", "success", "light", "inverse"];
var colorSchemeLevel = [300, 400, 500, 600, 700, "contrastText"];
var colorPaletteName = ["blue", "gray", "indigo", "moss", "orange", "cyan", "pink", "purple", "red", "teal", "yellow"];
var colorPaletteLevel = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
var eventsRegistered = false;
function createColorMap(colors, levels) {
  return colors.reduce((result, color) => ({
    ...result,
    [color]: levels.reduce((result2, level) => ({
      ...result2,
      [level]: `var(--${color}-${level})`
    }), {})
  }), {});
}
var theme = {
  color: {
    ...createColorMap(colorSchemeName, colorSchemeLevel),
    ...createColorMap(colorPaletteName, colorPaletteLevel),
    codeBg: "var(--code-bg)"
  }
};
function getThemeKind() {
  var _a;
  if (getPlatform() === "vscode")
    return ((_a = document.body.getAttribute("data-vscode-theme-kind")) == null ? void 0 : _a.includes("light")) ? "light" : "dark";
  return document.body.getAttribute("data-theme-kind") || "dark";
}
function getThemeName() {
  return document.body.getAttribute("data-theme") || "dark";
}
function getPlatform() {
  return document.body.getAttribute("data-platform") || "web";
}
function setTheme(name, setCookie = true, domain = ".stackspot.com") {
  document.body.setAttribute("data-theme", name);
  document.body.setAttribute("data-theme-kind", name === "light" ? "light" : "dark");
  if (setCookie)
    document.cookie = `theme=${name};path=/${location.host.endsWith(domain) ? `;domain=${domain}` : ""}`;
}
function getThemeFromCookie() {
  return (document.cookie.match(/theme=([^;]+)/) ?? [])[1] || "dark";
}
function loadTheme() {
  const theme2 = getThemeFromCookie();
  setTheme(theme2);
  if (eventsRegistered)
    return;
  if ("cookieStore" in window) {
    cookieStore.addEventListener("change", ({ changed }) => {
      for (const { name, value } of changed) {
        if (name === "theme")
          setTheme(value, false);
      }
    });
  } else {
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible")
        loadTheme();
    });
  }
  eventsRegistered = true;
}

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/CSSToCitricAdapter.js
var citricTheme = {
  ...default_theme_default,
  colorScheme: {
    primary: theme.color.primary,
    secondary: theme.color.secondary,
    tertiary: theme.color.tertiary,
    success: theme.color.success,
    warning: theme.color.warning,
    danger: theme.color.danger,
    light: theme.color.light,
    inverse: theme.color.inverse,
    highlight: theme.color.highlight
  },
  palette: {
    blue: theme.color.blue,
    cyan: theme.color.cyan,
    indigo: theme.color.indigo,
    moss: theme.color.moss,
    orange: theme.color.orange,
    pink: theme.color.pink,
    purple: theme.color.purple,
    red: theme.color.red,
    teal: theme.color.teal,
    yellow: theme.color.yellow,
    gray: theme.color.gray
  }
};
var CSSToCitricAdapter = ({ children }) => (0, import_jsx_runtime.jsx)(nt, { theme: citricTheme, children });

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/hooks.js
var import_react = __toESM(require_react(), 1);

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/theme-observer.js
var ThemeObserver = class {
  constructor() {
    Object.defineProperty(this, "kindListeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "nameListeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "currentKind", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: getThemeKind()
    });
    Object.defineProperty(this, "currentName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: getThemeName()
    });
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "attributes") {
          const kind = getThemeKind();
          const name = getThemeName();
          if (kind !== this.currentKind) {
            this.kindListeners.forEach((l) => l(kind));
            this.currentKind = kind;
          }
          if (name !== this.currentName) {
            this.nameListeners.forEach((l) => l(name));
            this.currentName = name;
          }
        }
      });
    });
    observer.observe(document.body, { attributes: true });
  }
  /**
   * Adds a listener for changes to the theme kind.
   * @param listener the function to be called when the theme kind changes.
   * @returns a function that, if called, removes the listener.
   */
  onThemeKindChange(listener) {
    this.kindListeners.push(listener);
    return () => this.kindListeners.splice(this.kindListeners.indexOf(listener), 1);
  }
  /**
   * Adds a listener for changes to the theme name.
   * @param listener the function to be called when the theme name changes.
   * @returns a function that, if called, removes the listener.
   */
  onThemeNameChange(listener) {
    this.nameListeners.push(listener);
    return () => this.nameListeners.splice(this.nameListeners.indexOf(listener), 1);
  }
};
var themeObserver = new ThemeObserver();

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/hooks.js
var useThemeKind = () => {
  const [kind, setKind] = (0, import_react.useState)(getThemeKind());
  (0, import_react.useEffect)(() => themeObserver.onThemeKindChange(setKind), []);
  return kind;
};
var useThemeName = () => {
  const [name, setName] = (0, import_react.useState)(getThemeName());
  (0, import_react.useEffect)(() => themeObserver.onThemeNameChange(setName), []);
  return name;
};

// ../../node_modules/.pnpm/@stack-spot+portal-theme@1.1.0_@citric+core@6.4.0_lodash@4.17.21_react@18.3.1_styled-componen_w3kidsfeh3vscgmou6wwqrubii/node_modules/@stack-spot/portal-theme/dist/utils.js
function contrastColor(color, level = 600) {
  if (colorSchemeName.includes(color)) {
    return level === "contrastText" || level === 700 ? theme.color[color]["300"] : theme.color[color].contrastText;
  }
  const contrastLevel = level >= 500 ? 50 : 900;
  return theme.color[color][contrastLevel];
}
function valueOf(varname, element = document.body) {
  const name = (varname.match(/(?:var)?\(?(?:--)?([^)]+)(?:\))?/) ?? [])[1] || varname;
  const styles = getComputedStyle(element);
  return styles.getPropertyValue(`--${name}`);
}
function* createColorSequence({ colorOrder, fromColor, fromLevel, levelOrder } = {}) {
  const colors = colorOrder ?? colorPaletteName;
  const levels = levelOrder ?? colorPaletteLevel;
  while (true) {
    const firstColor = fromColor ? colors.indexOf(fromColor) : 0;
    const firstLevel = fromLevel ? levels.indexOf(fromLevel) : 0;
    for (let i = 0; i < levels.length; i++) {
      for (let j = 0; j < colors.length; j++) {
        yield {
          color: colors[(firstColor + j) % colors.length],
          level: levels[(firstLevel + i) % levels.length]
        };
      }
    }
  }
}
function* paletteSequence(options) {
  const colors = createColorSequence(options);
  while (true) {
    const { color, level } = colors.next().value;
    yield `var(--${color}-${level})`;
  }
}
function withOpacity(colorVariable, opacity) {
  return `color-mix(in srgb, ${colorVariable} ${Math.round(opacity * 100)}%, transparent)`;
}
function listToClass(list) {
  return list.filter((v) => !!v).map((v) => `${v}`).join(" ");
}

export {
  theme,
  getThemeKind,
  getThemeName,
  getPlatform,
  setTheme,
  loadTheme,
  CSSToCitricAdapter,
  useThemeKind,
  useThemeName,
  contrastColor,
  valueOf,
  createColorSequence,
  paletteSequence,
  withOpacity,
  listToClass
};
//# sourceMappingURL=chunk-XXGSNWZJ.js.map
